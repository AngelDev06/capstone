/* Capstone Disassembly Engine, http://www.capstone-engine.org */
/* By Nguyen Anh Quynh <aquynh@gmail.com>, 2013-2022, */
/*    Rot127 <unisono@quyllur.org> 2022-2023 */
/* Automatically generated file by the LLVM TableGen Disassembler Backend. */
/* Do not edit. */

#include <capstone/platform.h>
#include <assert.h>

/// getMnemonic - This method is automatically generated by tablegen
/// from the instruction set description.
MnemonicBitsInfo getMnemonic(MCInst *MI, SStream *O) {
  static const char AsmStrs[] = {
  /* 0 */ "sub %d15, \0"
  /* 11 */ "add %d15, \0"
  /* 22 */ "and %d15, \0"
  /* 33 */ "jne %d15, \0"
  /* 44 */ "jeq %d15, \0"
  /* 55 */ "or %d15, \0"
  /* 65 */ "jz.t %d15, \0"
  /* 77 */ "jnz.t %d15, \0"
  /* 90 */ "lt %d15, \0"
  /* 100 */ "lt.u %d15, \0"
  /* 112 */ "mov %d15, \0"
  /* 123 */ "jz %d15, \0"
  /* 133 */ "jnz %d15, \0"
  /* 144 */ "ld.a %a15, %sp, \0"
  /* 161 */ "ld.w %a15, %sp, \0"
  /* 178 */ "sub.a %sp, \0"
  /* 190 */ "st.a %sp, \0"
  /* 201 */ "ftoq31 \0"
  /* 209 */ "CMPSWAP.W \0"
  /* 220 */ "csub.a \0"
  /* 228 */ "addsc.a \0"
  /* 237 */ "difsc.a \0"
  /* 246 */ "cadd.a \0"
  /* 254 */ "ld.a \0"
  /* 260 */ "ge.a \0"
  /* 266 */ "jne.a \0"
  /* 273 */ "addih.a \0"
  /* 282 */ "movh.a \0"
  /* 290 */ "csubn.a \0"
  /* 299 */ "caddn.a \0"
  /* 308 */ "jeq.a \0"
  /* 315 */ "lt.a \0"
  /* 321 */ "st.a \0"
  /* 327 */ "mov.a \0"
  /* 334 */ "nez.a \0"
  /* 341 */ "jz.a \0"
  /* 347 */ "jnz.a \0"
  /* 354 */ "eqz.a \0"
  /* 361 */ "movz.a \0"
  /* 369 */ "mov.aa \0"
  /* 377 */ "ld.da \0"
  /* 384 */ "st.da \0"
  /* 391 */ "lea \0"
  /* 396 */ "lha \0"
  /* 401 */ "sha \0"
  /* 406 */ "ja \0"
  /* 410 */ "jla \0"
  /* 415 */ "fcalla \0"
  /* 423 */ "crc32.b \0"
  /* 432 */ "sub.b \0"
  /* 439 */ "add.b \0"
  /* 446 */ "ld.b \0"
  /* 452 */ "absdif.b \0"
  /* 462 */ "min.b \0"
  /* 469 */ "clo.b \0"
  /* 476 */ "eq.b \0"
  /* 482 */ "abs.b \0"
  /* 489 */ "adds.b \0"
  /* 497 */ "absdifs.b \0"
  /* 508 */ "cls.b \0"
  /* 515 */ "abss.b \0"
  /* 523 */ "sat.b \0"
  /* 530 */ "dvinit.b \0"
  /* 540 */ "lt.b \0"
  /* 546 */ "st.b \0"
  /* 552 */ "max.b \0"
  /* 559 */ "eqany.b \0"
  /* 568 */ "clz.b \0"
  /* 575 */ "csub \0"
  /* 581 */ "msub \0"
  /* 587 */ "rsub \0"
  /* 593 */ "subc \0"
  /* 599 */ "addc \0"
  /* 605 */ "ld.d \0"
  /* 611 */ "st.d \0"
  /* 617 */ "mov.d \0"
  /* 624 */ "cadd \0"
  /* 630 */ "madd \0"
  /* 636 */ "jned \0"
  /* 642 */ "nand \0"
  /* 648 */ "and.ge \0"
  /* 656 */ "sh.ge \0"
  /* 663 */ "xor.ge \0"
  /* 671 */ "jge \0"
  /* 676 */ "bmerge \0"
  /* 684 */ "disable \0"
  /* 693 */ "shuffle \0"
  /* 702 */ "and.ne \0"
  /* 710 */ "xor.ne \0"
  /* 718 */ "jne \0"
  /* 723 */ "msub.f \0"
  /* 731 */ "madd.f \0"
  /* 739 */ "qseed.f \0"
  /* 748 */ "mul.f \0"
  /* 755 */ "cmp.f \0"
  /* 762 */ "div.f \0"
  /* 769 */ "absdif \0"
  /* 777 */ "q31tof \0"
  /* 785 */ "itof \0"
  /* 791 */ "hptof \0"
  /* 798 */ "utof \0"
  /* 804 */ "sha.h \0"
  /* 811 */ "msub.h \0"
  /* 819 */ "msubad.h \0"
  /* 829 */ "madd.h \0"
  /* 837 */ "ld.h \0"
  /* 843 */ "absdif.h \0"
  /* 853 */ "sh.h \0"
  /* 859 */ "mul.h \0"
  /* 866 */ "msubm.h \0"
  /* 875 */ "msubadm.h \0"
  /* 886 */ "maddm.h \0"
  /* 895 */ "mulm.h \0"
  /* 903 */ "maddsum.h \0"
  /* 914 */ "min.h \0"
  /* 921 */ "clo.h \0"
  /* 928 */ "eq.h \0"
  /* 934 */ "msubr.h \0"
  /* 943 */ "msubadr.h \0"
  /* 954 */ "maddr.h \0"
  /* 963 */ "mulr.h \0"
  /* 971 */ "maddsur.h \0"
  /* 982 */ "abs.h \0"
  /* 989 */ "msubs.h \0"
  /* 998 */ "msubads.h \0"
  /* 1009 */ "madds.h \0"
  /* 1018 */ "absdifs.h \0"
  /* 1029 */ "cls.h \0"
  /* 1036 */ "msubms.h \0"
  /* 1046 */ "msubadms.h \0"
  /* 1058 */ "maddms.h \0"
  /* 1068 */ "mulms.h \0"
  /* 1077 */ "maddsums.h \0"
  /* 1089 */ "msubrs.h \0"
  /* 1099 */ "msubadrs.h \0"
  /* 1111 */ "maddrs.h \0"
  /* 1121 */ "maddsurs.h \0"
  /* 1133 */ "abss.h \0"
  /* 1141 */ "maddsus.h \0"
  /* 1152 */ "sat.h \0"
  /* 1159 */ "dvinit.h \0"
  /* 1169 */ "lt.h \0"
  /* 1175 */ "st.h \0"
  /* 1181 */ "maddsu.h \0"
  /* 1191 */ "max.h \0"
  /* 1198 */ "eqany.h \0"
  /* 1207 */ "clz.h \0"
  /* 1214 */ "addih \0"
  /* 1221 */ "sh \0"
  /* 1225 */ "movh \0"
  /* 1231 */ "addi \0"
  /* 1237 */ "jnei \0"
  /* 1243 */ "ji \0"
  /* 1247 */ "jli \0"
  /* 1252 */ "fcalli \0"
  /* 1260 */ "ftoi \0"
  /* 1266 */ "dvadj \0"
  /* 1273 */ "unpack \0"
  /* 1281 */ "imask \0"
  /* 1288 */ "sel \0"
  /* 1293 */ "updfl \0"
  /* 1300 */ "jl \0"
  /* 1304 */ "fcall \0"
  /* 1311 */ "syscall \0"
  /* 1320 */ "mul \0"
  /* 1325 */ "msubm \0"
  /* 1332 */ "maddm \0"
  /* 1339 */ "mulm \0"
  /* 1345 */ "crcn \0"
  /* 1351 */ "caddn \0"
  /* 1358 */ "andn \0"
  /* 1364 */ "ixmin \0"
  /* 1371 */ "seln \0"
  /* 1377 */ "orn \0"
  /* 1382 */ "cmovn \0"
  /* 1389 */ "clo \0"
  /* 1394 */ "dvstep \0"
  /* 1402 */ "ftohp \0"
  /* 1409 */ "loop \0"
  /* 1415 */ "msub.q \0"
  /* 1423 */ "madd.q \0"
  /* 1431 */ "ld.q \0"
  /* 1437 */ "mul.q \0"
  /* 1444 */ "msubm.q \0"
  /* 1453 */ "maddm.q \0"
  /* 1462 */ "msubr.q \0"
  /* 1471 */ "maddr.q \0"
  /* 1480 */ "mulr.q \0"
  /* 1488 */ "msubs.q \0"
  /* 1497 */ "madds.q \0"
  /* 1506 */ "msubrs.q \0"
  /* 1516 */ "maddrs.q \0"
  /* 1526 */ "st.q \0"
  /* 1532 */ "and.eq \0"
  /* 1540 */ "sh.eq \0"
  /* 1547 */ "xor.eq \0"
  /* 1555 */ "jeq \0"
  /* 1560 */ "mfcr \0"
  /* 1566 */ "mtcr \0"
  /* 1572 */ "xnor \0"
  /* 1578 */ "xor \0"
  /* 1583 */ "bisr \0"
  /* 1589 */ "dextr \0"
  /* 1596 */ "shas \0"
  /* 1602 */ "abs \0"
  /* 1607 */ "msubs \0"
  /* 1614 */ "rsubs \0"
  /* 1621 */ "madds \0"
  /* 1628 */ "absdifs \0"
  /* 1637 */ "cls \0"
  /* 1642 */ "muls \0"
  /* 1648 */ "msubms \0"
  /* 1656 */ "maddms \0"
  /* 1664 */ "abss \0"
  /* 1670 */ "and.and.t \0"
  /* 1681 */ "sh.and.t \0"
  /* 1691 */ "or.and.t \0"
  /* 1701 */ "sh.nand.t \0"
  /* 1712 */ "and.andn.t \0"
  /* 1724 */ "sh.andn.t \0"
  /* 1735 */ "or.andn.t \0"
  /* 1746 */ "sh.orn.t \0"
  /* 1756 */ "insn.t \0"
  /* 1764 */ "and.or.t \0"
  /* 1774 */ "sh.or.t \0"
  /* 1783 */ "or.or.t \0"
  /* 1792 */ "and.nor.t \0"
  /* 1803 */ "sh.nor.t \0"
  /* 1813 */ "or.nor.t \0"
  /* 1823 */ "sh.xnor.t \0"
  /* 1834 */ "sh.xor.t \0"
  /* 1844 */ "ins.t \0"
  /* 1851 */ "st.t \0"
  /* 1857 */ "jz.t \0"
  /* 1863 */ "jnz.t \0"
  /* 1870 */ "bsplit \0"
  /* 1878 */ "dvinit \0"
  /* 1886 */ "and.lt \0"
  /* 1894 */ "sh.lt \0"
  /* 1901 */ "xor.lt \0"
  /* 1909 */ "jlt \0"
  /* 1914 */ "insert \0"
  /* 1922 */ "ldmst \0"
  /* 1929 */ "madd.u \0"
  /* 1937 */ "and.ge.u \0"
  /* 1947 */ "sh.ge.u \0"
  /* 1956 */ "xor.ge.u \0"
  /* 1966 */ "jge.u \0"
  /* 1973 */ "mul.u \0"
  /* 1980 */ "msubm.u \0"
  /* 1989 */ "maddm.u \0"
  /* 1998 */ "mulm.u \0"
  /* 2006 */ "ixmin.u \0"
  /* 2015 */ "dvstep.u \0"
  /* 2025 */ "extr.u \0"
  /* 2033 */ "rsubs.u \0"
  /* 2042 */ "madds.u \0"
  /* 2051 */ "muls.u \0"
  /* 2059 */ "msubms.u \0"
  /* 2069 */ "maddms.u \0"
  /* 2079 */ "dvinit.u \0"
  /* 2089 */ "and.lt.u \0"
  /* 2099 */ "sh.lt.u \0"
  /* 2108 */ "xor.lt.u \0"
  /* 2118 */ "jlt.u \0"
  /* 2125 */ "div.u \0"
  /* 2132 */ "mov.u \0"
  /* 2139 */ "ixmax.u \0"
  /* 2148 */ "ld.bu \0"
  /* 2155 */ "min.bu \0"
  /* 2163 */ "adds.bu \0"
  /* 2172 */ "sat.bu \0"
  /* 2180 */ "dvinit.bu \0"
  /* 2191 */ "lt.bu \0"
  /* 2198 */ "max.bu \0"
  /* 2206 */ "ld.hu \0"
  /* 2213 */ "min.hu \0"
  /* 2221 */ "subs.hu \0"
  /* 2230 */ "adds.hu \0"
  /* 2239 */ "sat.hu \0"
  /* 2247 */ "dvinit.hu \0"
  /* 2258 */ "lt.hu \0"
  /* 2265 */ "max.hu \0"
  /* 2273 */ "ftou \0"
  /* 2279 */ "loopu \0"
  /* 2286 */ "lt.wu \0"
  /* 2293 */ "div \0"
  /* 2298 */ "cmov \0"
  /* 2304 */ "crc32b.w \0"
  /* 2314 */ "ld.w \0"
  /* 2320 */ "swapmsk.w \0"
  /* 2331 */ "crc32l.w \0"
  /* 2341 */ "swap.w \0"
  /* 2349 */ "eq.w \0"
  /* 2355 */ "lt.w \0"
  /* 2361 */ "popcnt.w \0"
  /* 2371 */ "st.w \0"
  /* 2377 */ "ixmax \0"
  /* 2384 */ "subx \0"
  /* 2390 */ "ldlcx \0"
  /* 2397 */ "stlcx \0"
  /* 2404 */ "lducx \0"
  /* 2411 */ "stucx \0"
  /* 2418 */ "addx \0"
  /* 2424 */ "parity \0"
  /* 2432 */ "ftoq31z \0"
  /* 2441 */ "jgez \0"
  /* 2447 */ "jlez \0"
  /* 2453 */ "ftoiz \0"
  /* 2460 */ "jz \0"
  /* 2464 */ "clz \0"
  /* 2469 */ "jnz \0"
  /* 2474 */ "jgtz \0"
  /* 2480 */ "jltz \0"
  /* 2486 */ "ftouz \0"
  /* 2493 */ "CMPSWAP.W [+\0"
  /* 2506 */ "cachea.i [+\0"
  /* 2518 */ "cachei.i [+\0"
  /* 2530 */ "cachea.wi [+\0"
  /* 2543 */ "cachei.wi [+\0"
  /* 2556 */ "ldmst [+\0"
  /* 2565 */ "cachea.w [+\0"
  /* 2577 */ "cachei.w [+\0"
  /* 2589 */ "# XRay Function Patchable RET.\0"
  /* 2620 */ "# XRay Typed Event Log.\0"
  /* 2644 */ "# XRay Custom Event Log.\0"
  /* 2669 */ "# XRay Function Enter.\0"
  /* 2692 */ "# XRay Tail Call Exit.\0"
  /* 2715 */ "# XRay Function Exit.\0"
  /* 2737 */ "addsc.at %d, %s2, %s1\0"
  /* 2759 */ "addsc.at %d, %s1, %s2\0"
  /* 2781 */ "LIFETIME_END\0"
  /* 2794 */ "PSEUDO_PROBE\0"
  /* 2807 */ "BUNDLE\0"
  /* 2814 */ "DBG_VALUE\0"
  /* 2824 */ "DBG_INSTR_REF\0"
  /* 2838 */ "DBG_PHI\0"
  /* 2846 */ "DBG_LABEL\0"
  /* 2856 */ "LIFETIME_START\0"
  /* 2871 */ "DBG_VALUE_LIST\0"
  /* 2886 */ "ld.a %a15, [\0"
  /* 2899 */ "ld.b %d15, [\0"
  /* 2912 */ "ld.h %d15, [\0"
  /* 2925 */ "ld.bu %d15, [\0"
  /* 2939 */ "ld.w %d15, [\0"
  /* 2952 */ "CMPSWAP.W [\0"
  /* 2964 */ "st.a [\0"
  /* 2971 */ "st.da [\0"
  /* 2979 */ "st.b [\0"
  /* 2986 */ "st.d [\0"
  /* 2993 */ "st.h [\0"
  /* 3000 */ "cachea.i [\0"
  /* 3011 */ "cachei.i [\0"
  /* 3022 */ "cachea.wi [\0"
  /* 3034 */ "cachei.wi [\0"
  /* 3046 */ "st.q [\0"
  /* 3053 */ "ldmst [\0"
  /* 3061 */ "cachea.w [\0"
  /* 3072 */ "cachei.w [\0"
  /* 3083 */ "swapmsk.w [\0"
  /* 3095 */ "swap.w [\0"
  /* 3104 */ "st.w [\0"
  /* 3111 */ "ldlcx [\0"
  /* 3119 */ "stlcx [\0"
  /* 3127 */ "lducx [\0"
  /* 3135 */ "stucx [\0"
  /* 3143 */ "st.a [%a15]\0"
  /* 3155 */ "st.b [%a15]\0"
  /* 3167 */ "st.h [%a15]\0"
  /* 3179 */ "st.w [%a15]\0"
  /* 3191 */ "sub.a\0"
  /* 3197 */ "add.a\0"
  /* 3203 */ "mov.a\0"
  /* 3209 */ "dsync\0"
  /* 3215 */ "isync\0"
  /* 3221 */ "rfe\0"
  /* 3225 */ "enable\0"
  /* 3232 */ "disable\0"
  /* 3240 */ "restore\0"
  /* 3248 */ "debug\0"
  /* 3254 */ "relck\0"
  /* 3260 */ "# FEntry call\0"
  /* 3274 */ "rfm\0"
  /* 3278 */ "nop\0"
  /* 3282 */ "fret\0"
  /* 3287 */ "wait\0"
  /* 3292 */ "trapv\0"
  /* 3298 */ "trapsv\0"
  /* 3305 */ "svlcx\0"
};
  static const uint32_t OpInfo0[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// INLINEASM_BR
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    2815U,	// DBG_VALUE
    2872U,	// DBG_VALUE_LIST
    2825U,	// DBG_INSTR_REF
    2839U,	// DBG_PHI
    2847U,	// DBG_LABEL
    0U,	// REG_SEQUENCE
    0U,	// COPY
    2808U,	// BUNDLE
    2857U,	// LIFETIME_START
    2782U,	// LIFETIME_END
    2795U,	// PSEUDO_PROBE
    0U,	// ARITH_FENCE
    0U,	// STACKMAP
    3261U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// PREALLOCATED_SETUP
    0U,	// PREALLOCATED_ARG
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    2670U,	// PATCHABLE_FUNCTION_ENTER
    2590U,	// PATCHABLE_RET
    2716U,	// PATCHABLE_FUNCTION_EXIT
    2693U,	// PATCHABLE_TAIL_CALL
    2645U,	// PATCHABLE_EVENT_CALL
    2621U,	// PATCHABLE_TYPED_EVENT_CALL
    0U,	// ICALL_BRANCH_FUNNEL
    0U,	// G_ASSERT_SEXT
    0U,	// G_ASSERT_ZEXT
    0U,	// G_ASSERT_ALIGN
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_SDIVREM
    0U,	// G_UDIVREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_BUILD_VECTOR
    0U,	// G_BUILD_VECTOR_TRUNC
    0U,	// G_CONCAT_VECTORS
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_FREEZE
    0U,	// G_INTRINSIC_FPTRUNC_ROUND
    0U,	// G_INTRINSIC_TRUNC
    0U,	// G_INTRINSIC_ROUND
    0U,	// G_INTRINSIC_LRINT
    0U,	// G_INTRINSIC_ROUNDEVEN
    0U,	// G_READCYCLECOUNTER
    0U,	// G_LOAD
    0U,	// G_SEXTLOAD
    0U,	// G_ZEXTLOAD
    0U,	// G_INDEXED_LOAD
    0U,	// G_INDEXED_SEXTLOAD
    0U,	// G_INDEXED_ZEXTLOAD
    0U,	// G_STORE
    0U,	// G_INDEXED_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_ATOMICRMW_FADD
    0U,	// G_ATOMICRMW_FSUB
    0U,	// G_ATOMICRMW_FMAX
    0U,	// G_ATOMICRMW_FMIN
    0U,	// G_FENCE
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INVOKE_REGION_START
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_SEXT_INREG
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_FSHL
    0U,	// G_FSHR
    0U,	// G_ROTR
    0U,	// G_ROTL
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDO
    0U,	// G_UADDE
    0U,	// G_USUBO
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SADDE
    0U,	// G_SSUBO
    0U,	// G_SSUBE
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_UADDSAT
    0U,	// G_SADDSAT
    0U,	// G_USUBSAT
    0U,	// G_SSUBSAT
    0U,	// G_USHLSAT
    0U,	// G_SSHLSAT
    0U,	// G_SMULFIX
    0U,	// G_UMULFIX
    0U,	// G_SMULFIXSAT
    0U,	// G_UMULFIXSAT
    0U,	// G_SDIVFIX
    0U,	// G_UDIVFIX
    0U,	// G_SDIVFIXSAT
    0U,	// G_UDIVFIXSAT
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FMAD
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FPOWI
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FLOG10
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_FABS
    0U,	// G_FCOPYSIGN
    0U,	// G_IS_FPCLASS
    0U,	// G_FCANONICALIZE
    0U,	// G_FMINNUM
    0U,	// G_FMAXNUM
    0U,	// G_FMINNUM_IEEE
    0U,	// G_FMAXNUM_IEEE
    0U,	// G_FMINIMUM
    0U,	// G_FMAXIMUM
    0U,	// G_PTR_ADD
    0U,	// G_PTRMASK
    0U,	// G_SMIN
    0U,	// G_SMAX
    0U,	// G_UMIN
    0U,	// G_UMAX
    0U,	// G_ABS
    0U,	// G_LROUND
    0U,	// G_LLROUND
    0U,	// G_BR
    0U,	// G_BRJT
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_CTTZ
    0U,	// G_CTTZ_ZERO_UNDEF
    0U,	// G_CTLZ
    0U,	// G_CTLZ_ZERO_UNDEF
    0U,	// G_CTPOP
    0U,	// G_BSWAP
    0U,	// G_BITREVERSE
    0U,	// G_FCEIL
    0U,	// G_FCOS
    0U,	// G_FSIN
    0U,	// G_FSQRT
    0U,	// G_FFLOOR
    0U,	// G_FRINT
    0U,	// G_FNEARBYINT
    0U,	// G_ADDRSPACE_CAST
    0U,	// G_BLOCK_ADDR
    0U,	// G_JUMP_TABLE
    0U,	// G_DYN_STACKALLOC
    0U,	// G_STRICT_FADD
    0U,	// G_STRICT_FSUB
    0U,	// G_STRICT_FMUL
    0U,	// G_STRICT_FDIV
    0U,	// G_STRICT_FREM
    0U,	// G_STRICT_FMA
    0U,	// G_STRICT_FSQRT
    0U,	// G_READ_REGISTER
    0U,	// G_WRITE_REGISTER
    0U,	// G_MEMCPY
    0U,	// G_MEMCPY_INLINE
    0U,	// G_MEMMOVE
    0U,	// G_MEMSET
    0U,	// G_BZERO
    0U,	// G_VECREDUCE_SEQ_FADD
    0U,	// G_VECREDUCE_SEQ_FMUL
    0U,	// G_VECREDUCE_FADD
    0U,	// G_VECREDUCE_FMUL
    0U,	// G_VECREDUCE_FMAX
    0U,	// G_VECREDUCE_FMIN
    0U,	// G_VECREDUCE_ADD
    0U,	// G_VECREDUCE_MUL
    0U,	// G_VECREDUCE_AND
    0U,	// G_VECREDUCE_OR
    0U,	// G_VECREDUCE_XOR
    0U,	// G_VECREDUCE_SMAX
    0U,	// G_VECREDUCE_SMIN
    0U,	// G_VECREDUCE_UMAX
    0U,	// G_VECREDUCE_UMIN
    0U,	// G_SBFX
    0U,	// G_UBFX
    4594U,	// ABSDIFS_B_rr_v110
    5115U,	// ABSDIFS_H_rr
    5725U,	// ABSDIFS_rc
    5725U,	// ABSDIFS_rr
    4549U,	// ABSDIF_B_rr
    4940U,	// ABSDIF_H_rr
    268440322U,	// ABSDIF_rc
    4866U,	// ABSDIF_rr
    4612U,	// ABSS_B_rr_v110
    5230U,	// ABSS_H_rr
    5761U,	// ABSS_rr
    16781795U,	// ABS_B_rr
    16782295U,	// ABS_H_rr
    16782915U,	// ABS_rr
    268440152U,	// ADDC_rc
    4696U,	// ADDC_rr
    536875282U,	// ADDIH_A_rlc
    536876223U,	// ADDIH_rlc
    536876240U,	// ADDI_rlc
    2738U,	// ADDSC_AT_rr
    2760U,	// ADDSC_AT_rr_v110
    806359269U,	// ADDSC_A_rr
    4325U,	// ADDSC_A_rr_v110
    33558757U,	// ADDSC_A_srrs
    1073746149U,	// ADDSC_A_srrs_v110
    6260U,	// ADDS_BU_rr_v110
    4586U,	// ADDS_B_rr_v110
    5107U,	// ADDS_H
    6327U,	// ADDS_HU
    6140U,	// ADDS_U
    268441596U,	// ADDS_U_rc
    268441175U,	// ADDS_rc
    5719U,	// ADDS_rr
    16782935U,	// ADDS_srr
    268441971U,	// ADDX_rc
    6515U,	// ADDX_rr
    3198U,	// ADD_A_rr
    2101496U,	// ADD_A_src
    16781560U,	// ADD_A_srr
    4536U,	// ADD_B_rr
    806359773U,	// ADD_F_rrr
    4927U,	// ADD_H_rr
    268440178U,	// ADD_rc
    4722U,	// ADD_rr
    2101874U,	// ADD_src
    2101260U,	// ADD_src_15a
    2167410U,	// ADD_src_a15
    16781938U,	// ADD_srr
    16781324U,	// ADD_srr_15a
    16847474U,	// ADD_srr_a15
    1342183093U,	// ANDN_T
    268440911U,	// ANDN_rc
    5455U,	// ANDN_rr
    1342183089U,	// AND_ANDN_T
    1342183047U,	// AND_AND_T
    268441085U,	// AND_EQ_rc
    5629U,	// AND_EQ_rr
    268441490U,	// AND_GE_U_rc
    6034U,	// AND_GE_U_rr
    268440201U,	// AND_GE_rc
    4745U,	// AND_GE_rr
    268441642U,	// AND_LT_U_rc
    6186U,	// AND_LT_U_rr
    268441439U,	// AND_LT_rc
    5983U,	// AND_LT_rr
    268440255U,	// AND_NE_rc
    4799U,	// AND_NE_rr
    1342183169U,	// AND_NOR_T
    1342183141U,	// AND_OR_T
    1342183051U,	// AND_T
    268440196U,	// AND_rc
    4740U,	// AND_rr
    139287U,	// AND_sc
    139287U,	// AND_sc_v110
    16781956U,	// AND_srr
    16781956U,	// AND_srr_v110
    13872U,	// BISR_rc
    13872U,	// BISR_rc_v161
    140848U,	// BISR_sc
    140848U,	// BISR_sc_v110
    4773U,	// BMERGAE_rr_v110
    4773U,	// BMERGE_rr
    16783183U,	// BSPLIT_rr
    16783183U,	// BSPLIT_rr_v110
    3349433U,	// CACHEA_I_bo_bso
    269241U,	// CACHEA_I_bo_c
    3480505U,	// CACHEA_I_bo_pos
    3348939U,	// CACHEA_I_bo_pre
    400313U,	// CACHEA_I_bo_r
    3349455U,	// CACHEA_WI_bo_bso
    269263U,	// CACHEA_WI_bo_c
    3480527U,	// CACHEA_WI_bo_pos
    3348963U,	// CACHEA_WI_bo_pre
    400335U,	// CACHEA_WI_bo_r
    3349494U,	// CACHEA_W_bo_bso
    269302U,	// CACHEA_W_bo_c
    3480566U,	// CACHEA_W_bo_pos
    3348998U,	// CACHEA_W_bo_pre
    400374U,	// CACHEA_W_bo_r
    3349444U,	// CACHEI_I_bo_bso
    3480516U,	// CACHEI_I_bo_pos
    3348951U,	// CACHEI_I_bo_pre
    3349467U,	// CACHEI_WI_bo_bso
    3480539U,	// CACHEI_WI_bo_pos
    3348976U,	// CACHEI_WI_bo_pre
    3349505U,	// CACHEI_W_bo_bso
    269313U,	// CACHEI_W_bo_c
    3480577U,	// CACHEI_W_bo_pos
    3349010U,	// CACHEI_W_bo_pre
    400385U,	// CACHEI_W_bo_r
    806359340U,	// CADDN_A_rcr_v110
    463148U,	// CADDN_A_rrr_v110
    806360392U,	// CADDN_rcr
    4199752U,	// CADDN_rrr
    2168136U,	// CADDN_src
    16848200U,	// CADDN_srr_v110
    806359287U,	// CADD_A_rcr_v110
    463095U,	// CADD_A_rrr_v110
    806359665U,	// CADD_rcr
    4199025U,	// CADD_rrr
    2167409U,	// CADD_src
    16847473U,	// CADD_srr_v110
    16801U,	// CALLA_b
    136422U,	// CALLI_rr
    136422U,	// CALLI_rr_v110
    17690U,	// CALL_b
    21786U,	// CALL_sb
    16781782U,	// CLO_B_rr_v110
    16782234U,	// CLO_H_rr
    16782702U,	// CLO_rr
    16781821U,	// CLS_B_rr_v110
    16782342U,	// CLS_H_rr
    16782950U,	// CLS_rr
    16781881U,	// CLZ_B_rr_v110
    16782520U,	// CLZ_H_rr
    16783777U,	// CLZ_rr
    2168167U,	// CMOVN_src
    16848231U,	// CMOVN_srr
    2169083U,	// CMOV_src
    16849147U,	// CMOV_srr
    5467017U,	// CMPSWAP_W_bo_bso
    5467017U,	// CMPSWAP_W_bo_c
    5598089U,	// CMPSWAP_W_bo_pos
    5466558U,	// CMPSWAP_W_bo_pre
    23093458U,	// CMPSWAP_W_bo_r
    4852U,	// CMP_F_rr
    806361345U,	// CRC32B_W_rr
    806361372U,	// CRC32L_W_rr
    806359464U,	// CRC32_B_rr
    4199746U,	// CRCN_rrr
    4198691U,	// CSUBN_A_rrr_v110
    4198976U,	// CSUBN_rrr
    4198621U,	// CSUB_A_rrr_v110
    4198976U,	// CSUB_rrr
    3249U,	// DEBUG_sr
    3249U,	// DEBUG_sys
    5686U,	// DEXTR_rrpw
    5686U,	// DEXTR_rrrr
    4334U,	// DIFSC_A_rr_v110
    3233U,	// DISABLE_sys
    135853U,	// DISABLE_sys_1
    4859U,	// DIV_F_rr
    6222U,	// DIV_U_rr
    6390U,	// DIV_rr
    3210U,	// DSYNC_sys
    806360307U,	// DVADJ_rrr
    806360307U,	// DVADJ_rrr_v110
    16782579U,	// DVADJ_srr_v110
    6277U,	// DVINIT_BU_rr
    6277U,	// DVINIT_BU_rr_v110
    4627U,	// DVINIT_B_rr
    4627U,	// DVINIT_B_rr_v110
    6344U,	// DVINIT_HU_rr
    6344U,	// DVINIT_HU_rr_v110
    5256U,	// DVINIT_H_rr
    5256U,	// DVINIT_H_rr_v110
    6176U,	// DVINIT_U_rr
    6176U,	// DVINIT_U_rr_v110
    5975U,	// DVINIT_rr
    5975U,	// DVINIT_rr_v110
    806361056U,	// DVSTEP_U_rrr
    806361056U,	// DVSTEP_U_rrrv110
    16783328U,	// DVSTEP_Uv110
    806360435U,	// DVSTEP_rrr
    806360435U,	// DVSTEP_rrrv110
    16782707U,	// DVSTEPv110
    3226U,	// ENABLE_sys
    268440112U,	// EQANY_B_rc
    4656U,	// EQANY_B_rr
    268440751U,	// EQANY_H_rc
    5295U,	// EQANY_H_rr
    16781667U,	// EQZ_A_rr
    4406U,	// EQ_A_rr
    4573U,	// EQ_B_rr
    5025U,	// EQ_H_rr
    6446U,	// EQ_W_rr
    268441089U,	// EQ_rc
    5633U,	// EQ_rr
    2101294U,	// EQ_src
    16781358U,	// EQ_srr
    6122U,	// EXTR_U_rrpw
    6122U,	// EXTR_U_rrrr
    6122U,	// EXTR_U_rrrw
    5687U,	// EXTR_rrpw
    5687U,	// EXTR_rrrr
    5687U,	// EXTR_rrrw
    16800U,	// FCALLA_b
    136421U,	// FCALLA_i
    17689U,	// FCALL_b
    3283U,	// FRET_sr
    3283U,	// FRET_sys
    16782715U,	// FTOHP_rr
    16783766U,	// FTOIZ_rr
    16782573U,	// FTOI_rr
    6529U,	// FTOQ31Z_rr
    4298U,	// FTOQ31_rr
    16783799U,	// FTOUZ_rr
    16783586U,	// FTOU_rr
    4357U,	// GE_A_rr
    268441494U,	// GE_U_rc
    6038U,	// GE_U_rr
    268440205U,	// GE_rc
    4749U,	// GE_rr
    16782104U,	// HPTOF_rr
    5378U,	// IMASK_rcpw
    5378U,	// IMASK_rcrw
    5378U,	// IMASK_rrpw
    5378U,	// IMASK_rrrw
    6011U,	// INSERT_rcpw
    6011U,	// INSERT_rcrr
    6011U,	// INSERT_rcrw
    6011U,	// INSERT_rrpw
    6011U,	// INSERT_rrrr
    6011U,	// INSERT_rrrw
    1342183133U,	// INSN_T
    1342183221U,	// INS_T
    3216U,	// ISYNC_sys
    16782098U,	// ITOF_rr
    806361180U,	// IXMAX_U_rrr
    806361418U,	// IXMAX_rrr
    806361047U,	// IXMIN_U_rrr
    806360405U,	// IXMIN_rrr
    16791U,	// JA_b
    1610617141U,	// JEQ_A_brr
    1617958420U,	// JEQ_brc
    1610618388U,	// JEQ_brr
    28717U,	// JEQ_sbc1
    28717U,	// JEQ_sbc2
    28717U,	// JEQ_sbc_v110
    8392749U,	// JEQ_sbr1
    8392749U,	// JEQ_sbr2
    8392749U,	// JEQ_sbr_v110
    8395146U,	// JGEZ_sbr
    8395146U,	// JGEZ_sbr_v110
    1617958831U,	// JGE_U_brc
    1610618799U,	// JGE_U_brr
    1617957536U,	// JGE_brc
    1610617504U,	// JGE_brr
    8395179U,	// JGTZ_sbr
    8395179U,	// JGTZ_sbr_v110
    136412U,	// JI_rr
    136412U,	// JI_rr_v110
    8393948U,	// JI_sbr_v110
    136412U,	// JI_sr
    16795U,	// JLA_b
    8395152U,	// JLEZ_sbr
    8395152U,	// JLEZ_sbr_v110
    136416U,	// JLI_rr
    136416U,	// JLI_rr_v110
    8395185U,	// JLTZ_sbr
    8395185U,	// JLTZ_sbr_v110
    1617958983U,	// JLT_U_brc
    1610618951U,	// JLT_U_brr
    1617958774U,	// JLT_brc
    1610618742U,	// JLT_brr
    17685U,	// JL_b
    1617957501U,	// JNED_brc
    1610617469U,	// JNED_brr
    1617958102U,	// JNEI_brc
    1610618070U,	// JNEI_brr
    1610617099U,	// JNE_A_brr
    1617957583U,	// JNE_brc
    1610617551U,	// JNE_brr
    28706U,	// JNE_sbc1
    28706U,	// JNE_sbc2
    28706U,	// JNE_sbc_v110
    8392738U,	// JNE_sbr1
    8392738U,	// JNE_sbr2
    8392738U,	// JNE_sbr_v110
    1610617180U,	// JNZ_A_brr
    8393052U,	// JNZ_A_sbr
    1610618696U,	// JNZ_T_brn
    8392782U,	// JNZ_T_sbrn
    8392782U,	// JNZ_T_sbrn_v110
    20614U,	// JNZ_sb
    20614U,	// JNZ_sb_v110
    8395174U,	// JNZ_sbr
    8395174U,	// JNZ_sbr_v110
    1610617174U,	// JZ_A_brr
    8393046U,	// JZ_A_sbr
    1610618690U,	// JZ_T_brn
    8392770U,	// JZ_T_sbrn
    8392770U,	// JZ_T_sbrn_v110
    20604U,	// JZ_sb
    20604U,	// JZ_sb_v110
    8395165U,	// JZ_sbr
    8395165U,	// JZ_sbr_v110
    17655U,	// J_b
    21751U,	// J_sb
    21751U,	// J_sb_v110
    166231U,	// LDLCX_abs
    3349544U,	// LDLCX_bo_bso
    38787U,	// LDMST_abs
    5467118U,	// LDMST_bo_bso
    5467118U,	// LDMST_bo_c
    5598190U,	// LDMST_bo_pos
    5466621U,	// LDMST_bo_pre
    23095171U,	// LDMST_bo_r
    166245U,	// LDUCX_abs
    3349560U,	// LDUCX_bo_bso
    9441535U,	// LD_A_abs
    1929908479U,	// LD_A_bo_bso
    67637503U,	// LD_A_bo_c
    1963462911U,	// LD_A_bo_pos
    1929974015U,	// LD_A_bo_pre
    101191935U,	// LD_A_bo_r
    50860287U,	// LD_A_bol
    139409U,	// LD_A_sc
    2198343935U,	// LD_A_slr
    2231898367U,	// LD_A_slr_post
    2231898367U,	// LD_A_slr_post_v110
    2198343935U,	// LD_A_slr_v110
    659711U,	// LD_A_slro
    659711U,	// LD_A_slro_v110
    24320839U,	// LD_A_sro
    24320839U,	// LD_A_sro_v110
    9443429U,	// LD_BU_abs
    1929910373U,	// LD_BU_bo_bso
    67639397U,	// LD_BU_bo_c
    1963464805U,	// LD_BU_bo_pos
    1929975909U,	// LD_BU_bo_pre
    101193829U,	// LD_BU_bo_r
    50862181U,	// LD_BU_bol
    2198345829U,	// LD_BU_slr
    2231900261U,	// LD_BU_slr_post
    2231900261U,	// LD_BU_slr_post_v110
    2198345829U,	// LD_BU_slr_v110
    661605U,	// LD_BU_slro
    661605U,	// LD_BU_slro_v110
    24320878U,	// LD_BU_sro
    24320878U,	// LD_BU_sro_v110
    9441727U,	// LD_B_abs
    1929908671U,	// LD_B_bo_bso
    67637695U,	// LD_B_bo_c
    1963463103U,	// LD_B_bo_pos
    1929974207U,	// LD_B_bo_pre
    101192127U,	// LD_B_bo_r
    50860479U,	// LD_B_bol
    2231898559U,	// LD_B_slr_post_v110
    2198344127U,	// LD_B_slr_v110
    659903U,	// LD_B_slro_v110
    24320852U,	// LD_B_sro_v110
    9441658U,	// LD_DA_abs
    1929908602U,	// LD_DA_bo_bso
    67637626U,	// LD_DA_bo_c
    1963463034U,	// LD_DA_bo_pos
    1929974138U,	// LD_DA_bo_pre
    101192058U,	// LD_DA_bo_r
    9441886U,	// LD_D_abs
    1929908830U,	// LD_D_bo_bso
    67637854U,	// LD_D_bo_c
    1963463262U,	// LD_D_bo_pos
    1929974366U,	// LD_D_bo_pre
    101192286U,	// LD_D_bo_r
    9443487U,	// LD_HU_abs
    1929910431U,	// LD_HU_bo_bso
    67639455U,	// LD_HU_bo_c
    1963464863U,	// LD_HU_bo_pos
    1929975967U,	// LD_HU_bo_pre
    101193887U,	// LD_HU_bo_r
    50862239U,	// LD_HU_bol
    9442118U,	// LD_H_abs
    1929909062U,	// LD_H_bo_bso
    67638086U,	// LD_H_bo_c
    1963463494U,	// LD_H_bo_pos
    1929974598U,	// LD_H_bo_pre
    101192518U,	// LD_H_bo_r
    50860870U,	// LD_H_bol
    2198344518U,	// LD_H_slr
    2231898950U,	// LD_H_slr_post
    2231898950U,	// LD_H_slr_post_v110
    2198344518U,	// LD_H_slr_v110
    660294U,	// LD_H_slro
    660294U,	// LD_H_slro_v110
    24320865U,	// LD_H_sro
    24320865U,	// LD_H_sro_v110
    9442712U,	// LD_Q_abs
    1929909656U,	// LD_Q_bo_bso
    67638680U,	// LD_Q_bo_c
    1963464088U,	// LD_Q_bo_pos
    1929975192U,	// LD_Q_bo_pre
    101193112U,	// LD_Q_bo_r
    9443595U,	// LD_W_abs
    1929910539U,	// LD_W_bo_bso
    67639563U,	// LD_W_bo_c
    1963464971U,	// LD_W_bo_pos
    1929976075U,	// LD_W_bo_pre
    101193995U,	// LD_W_bo_r
    50862347U,	// LD_W_bol
    139426U,	// LD_W_sc
    2198345995U,	// LD_W_slr
    2231900427U,	// LD_W_slr_post
    2231900427U,	// LD_W_slr_post_v110
    2198345995U,	// LD_W_slr_v110
    661771U,	// LD_W_slro
    661771U,	// LD_W_slro_v110
    24320892U,	// LD_W_sro
    24320892U,	// LD_W_sro_v110
    9441672U,	// LEA_abs
    1929908616U,	// LEA_bo_bso
    50860424U,	// LEA_bol
    9441677U,	// LHA_abs
    43240U,	// LOOPU_brr
    10491266U,	// LOOP_brr
    8394114U,	// LOOP_sbr
    4412U,	// LT_A_rr
    4637U,	// LT_B
    6288U,	// LT_BU
    5266U,	// LT_H
    6355U,	// LT_HU
    268441646U,	// LT_U_rc
    6190U,	// LT_U_rr
    24121445U,	// LT_U_srcv110
    16781413U,	// LT_U_srrv110
    6452U,	// LT_W
    6383U,	// LT_WU
    268441443U,	// LT_rc
    5987U,	// LT_rr
    2101339U,	// LT_src
    16781403U,	// LT_srr
    4199459U,	// MADDMS_H_rrr1_LL
    4199459U,	// MADDMS_H_rrr1_LU
    4199459U,	// MADDMS_H_rrr1_UL
    4199459U,	// MADDMS_H_rrr1_UU
    806361110U,	// MADDMS_U_rcr_v110
    4200470U,	// MADDMS_U_rrr2_v110
    806360697U,	// MADDMS_rcr_v110
    4200057U,	// MADDMS_rrr2_v110
    4199287U,	// MADDM_H_rrr1_LL
    4199287U,	// MADDM_H_rrr1_LU
    4199287U,	// MADDM_H_rrr1_UL
    4199287U,	// MADDM_H_rrr1_UU
    4199287U,	// MADDM_H_rrr1_v110
    4199854U,	// MADDM_Q_rrr1_v110
    806361030U,	// MADDM_U_rcr_v110
    4200390U,	// MADDM_U_rrr2_v110
    806360373U,	// MADDM_rcr_v110
    4199733U,	// MADDM_rrr2_v110
    4199512U,	// MADDRS_H_rrr1_LL
    4199512U,	// MADDRS_H_rrr1_LU
    4199512U,	// MADDRS_H_rrr1_UL
    4199512U,	// MADDRS_H_rrr1_UL_2
    4199512U,	// MADDRS_H_rrr1_UU
    4199512U,	// MADDRS_H_rrr1_v110
    2537559533U,	// MADDRS_Q_rrr1_L_L
    2554336749U,	// MADDRS_Q_rrr1_U_U
    4199917U,	// MADDRS_Q_rrr1_v110
    4199355U,	// MADDR_H_rrr1_LL
    4199355U,	// MADDR_H_rrr1_LU
    4199355U,	// MADDR_H_rrr1_UL
    4199355U,	// MADDR_H_rrr1_UL_2
    4199355U,	// MADDR_H_rrr1_UU
    4199355U,	// MADDR_H_rrr1_v110
    2537559488U,	// MADDR_Q_rrr1_L_L
    2554336704U,	// MADDR_Q_rrr1_U_U
    4199872U,	// MADDR_Q_rrr1_v110
    4199478U,	// MADDSUMS_H_rrr1_LL
    4199478U,	// MADDSUMS_H_rrr1_LU
    4199478U,	// MADDSUMS_H_rrr1_UL
    4199478U,	// MADDSUMS_H_rrr1_UU
    4199304U,	// MADDSUM_H_rrr1_LL
    4199304U,	// MADDSUM_H_rrr1_LU
    4199304U,	// MADDSUM_H_rrr1_UL
    4199304U,	// MADDSUM_H_rrr1_UU
    4199522U,	// MADDSURS_H_rrr1_LL
    4199522U,	// MADDSURS_H_rrr1_LU
    4199522U,	// MADDSURS_H_rrr1_UL
    4199522U,	// MADDSURS_H_rrr1_UU
    4199372U,	// MADDSUR_H_rrr1_LL
    4199372U,	// MADDSUR_H_rrr1_LU
    4199372U,	// MADDSUR_H_rrr1_UL
    4199372U,	// MADDSUR_H_rrr1_UU
    4199542U,	// MADDSUS_H_rrr1_LL
    4199542U,	// MADDSUS_H_rrr1_LU
    4199542U,	// MADDSUS_H_rrr1_UL
    4199542U,	// MADDSUS_H_rrr1_UU
    4199582U,	// MADDSU_H_rrr1_LL
    4199582U,	// MADDSU_H_rrr1_LU
    4199582U,	// MADDSU_H_rrr1_UL
    4199582U,	// MADDSU_H_rrr1_UU
    4199410U,	// MADDS_H_rrr1_LL
    4199410U,	// MADDS_H_rrr1_LU
    4199410U,	// MADDS_H_rrr1_UL
    4199410U,	// MADDS_H_rrr1_UU
    4199410U,	// MADDS_H_rrr1_v110
    4199898U,	// MADDS_Q_rrr1
    4199898U,	// MADDS_Q_rrr1_L
    2537559514U,	// MADDS_Q_rrr1_L_L
    4199898U,	// MADDS_Q_rrr1_U
    4199898U,	// MADDS_Q_rrr1_UU2_v110
    2554336730U,	// MADDS_Q_rrr1_U_U
    4199898U,	// MADDS_Q_rrr1_e
    4199898U,	// MADDS_Q_rrr1_e_L
    2537559514U,	// MADDS_Q_rrr1_e_L_L
    4199898U,	// MADDS_Q_rrr1_e_U
    2554336730U,	// MADDS_Q_rrr1_e_U_U
    806361083U,	// MADDS_U_rcr
    806361083U,	// MADDS_U_rcr_e
    4200443U,	// MADDS_U_rrr2
    4200443U,	// MADDS_U_rrr2_e
    806360662U,	// MADDS_rcr
    806360662U,	// MADDS_rcr_e
    4200022U,	// MADDS_rrr2
    4200022U,	// MADDS_rrr2_e
    4199132U,	// MADD_F_rrr
    4199230U,	// MADD_H_rrr1_LL
    4199230U,	// MADD_H_rrr1_LU
    4199230U,	// MADD_H_rrr1_UL
    4199230U,	// MADD_H_rrr1_UU
    4199230U,	// MADD_H_rrr1_v110
    4199824U,	// MADD_Q_rrr1
    4199824U,	// MADD_Q_rrr1_L
    2537559440U,	// MADD_Q_rrr1_L_L
    4199824U,	// MADD_Q_rrr1_U
    4199824U,	// MADD_Q_rrr1_UU2_v110
    2554336656U,	// MADD_Q_rrr1_U_U
    4199824U,	// MADD_Q_rrr1_e
    4199824U,	// MADD_Q_rrr1_e_L
    2537559440U,	// MADD_Q_rrr1_e_L_L
    4199824U,	// MADD_Q_rrr1_e_U
    2554336656U,	// MADD_Q_rrr1_e_U_U
    806360970U,	// MADD_U_rcr
    4200330U,	// MADD_U_rrr2
    806359671U,	// MADD_rcr
    806359671U,	// MADD_rcr_e
    4199031U,	// MADD_rrr2
    4199031U,	// MADD_rrr2_e
    4649U,	// MAX_B
    6295U,	// MAX_BU
    5288U,	// MAX_H
    6362U,	// MAX_HU
    268441694U,	// MAX_U_rc
    6238U,	// MAX_U_rr
    268441932U,	// MAX_rc
    6476U,	// MAX_rr
    11539993U,	// MFCR_rlc
    4559U,	// MIN_B
    6252U,	// MIN_BU
    5011U,	// MIN_H
    6310U,	// MIN_HU
    268441561U,	// MIN_U_rc
    6105U,	// MIN_U_rr
    268440919U,	// MIN_rc
    5463U,	// MIN_rr
    11538715U,	// MOVH_A_rlc
    11539658U,	// MOVH_rlc
    135530U,	// MOVZ_A_sr
    17830258U,	// MOV_AA_rr
    16781682U,	// MOV_AA_srr_srr
    16781682U,	// MOV_AA_srr_srr_v110
    3204U,	// MOV_A_rr
    24121672U,	// MOV_A_src
    16781640U,	// MOV_A_srr
    16781640U,	// MOV_A_srr_v110
    17830506U,	// MOV_D_rr
    16781930U,	// MOV_D_srr_srr
    16781930U,	// MOV_D_srr_srr_v110
    11540565U,	// MOV_U_rlc
    11540732U,	// MOV_rlc
    11540732U,	// MOV_rlc_e
    17832188U,	// MOV_rr
    17832188U,	// MOV_rr_e
    6396U,	// MOV_rr_eab
    139377U,	// MOV_sc
    139377U,	// MOV_sc_v110
    2103548U,	// MOV_src
    2103548U,	// MOV_src_e
    16783612U,	// MOV_srr
    4199447U,	// MSUBADMS_H_rrr1_LL
    4199447U,	// MSUBADMS_H_rrr1_LU
    4199447U,	// MSUBADMS_H_rrr1_UL
    4199447U,	// MSUBADMS_H_rrr1_UU
    4199276U,	// MSUBADM_H_rrr1_LL
    4199276U,	// MSUBADM_H_rrr1_LU
    4199276U,	// MSUBADM_H_rrr1_UL
    4199276U,	// MSUBADM_H_rrr1_UU
    4199500U,	// MSUBADRS_H_rrr1_LL
    4199500U,	// MSUBADRS_H_rrr1_LU
    4199500U,	// MSUBADRS_H_rrr1_UL
    4199500U,	// MSUBADRS_H_rrr1_UU
    4199500U,	// MSUBADRS_H_rrr1_v110
    4199344U,	// MSUBADR_H_rrr1_LL
    4199344U,	// MSUBADR_H_rrr1_LU
    4199344U,	// MSUBADR_H_rrr1_UL
    4199344U,	// MSUBADR_H_rrr1_UU
    4199344U,	// MSUBADR_H_rrr1_v110
    4199399U,	// MSUBADS_H_rrr1_LL
    4199399U,	// MSUBADS_H_rrr1_LU
    4199399U,	// MSUBADS_H_rrr1_UL
    4199399U,	// MSUBADS_H_rrr1_UU
    4199220U,	// MSUBAD_H_rrr1_LL
    4199220U,	// MSUBAD_H_rrr1_LU
    4199220U,	// MSUBAD_H_rrr1_UL
    4199220U,	// MSUBAD_H_rrr1_UU
    4199437U,	// MSUBMS_H_rrr1_LL
    4199437U,	// MSUBMS_H_rrr1_LU
    4199437U,	// MSUBMS_H_rrr1_UL
    4199437U,	// MSUBMS_H_rrr1_UU
    806361100U,	// MSUBMS_U_rcrv110
    4200460U,	// MSUBMS_U_rrr2v110
    806360689U,	// MSUBMS_rcrv110
    4200049U,	// MSUBMS_rrr2v110
    4199267U,	// MSUBM_H_rrr1_LL
    4199267U,	// MSUBM_H_rrr1_LU
    4199267U,	// MSUBM_H_rrr1_UL
    4199267U,	// MSUBM_H_rrr1_UU
    4199267U,	// MSUBM_H_rrr1_v110
    4199845U,	// MSUBM_Q_rrr1_v110
    806361021U,	// MSUBM_U_rcrv110
    4200381U,	// MSUBM_U_rrr2v110
    806360366U,	// MSUBM_rcrv110
    4199726U,	// MSUBM_rrr2v110
    4199490U,	// MSUBRS_H_rrr1_LL
    4199490U,	// MSUBRS_H_rrr1_LU
    4199490U,	// MSUBRS_H_rrr1_UL
    4199490U,	// MSUBRS_H_rrr1_UL_2
    4199490U,	// MSUBRS_H_rrr1_UU
    4199490U,	// MSUBRS_H_rrr1_v110
    2537559523U,	// MSUBRS_Q_rrr1_L_L
    2554336739U,	// MSUBRS_Q_rrr1_U_U
    4199907U,	// MSUBRS_Q_rrr1_v110
    4199335U,	// MSUBR_H_rrr1_LL
    4199335U,	// MSUBR_H_rrr1_LU
    4199335U,	// MSUBR_H_rrr1_UL
    4199335U,	// MSUBR_H_rrr1_UL_2
    4199335U,	// MSUBR_H_rrr1_UU
    4199335U,	// MSUBR_H_rrr1_v110
    2537559479U,	// MSUBR_Q_rrr1_L_L
    2554336695U,	// MSUBR_Q_rrr1_U_U
    4199863U,	// MSUBR_Q_rrr1_v110
    4199390U,	// MSUBS_H_rrr1_LL
    4199390U,	// MSUBS_H_rrr1_LU
    4199390U,	// MSUBS_H_rrr1_UL
    4199390U,	// MSUBS_H_rrr1_UU
    4199390U,	// MSUBS_H_rrr1_v110
    4199889U,	// MSUBS_Q_rrr1
    4199889U,	// MSUBS_Q_rrr1_L
    2537559505U,	// MSUBS_Q_rrr1_L_L
    4199889U,	// MSUBS_Q_rrr1_U
    4199889U,	// MSUBS_Q_rrr1_UU2_v110
    2554336721U,	// MSUBS_Q_rrr1_U_U
    4199889U,	// MSUBS_Q_rrr1_e
    4199889U,	// MSUBS_Q_rrr1_e_L
    2537559505U,	// MSUBS_Q_rrr1_e_L_L
    4199889U,	// MSUBS_Q_rrr1_e_U
    2554336721U,	// MSUBS_Q_rrr1_e_U_U
    806361083U,	// MSUBS_U_rcr
    806361083U,	// MSUBS_U_rcr_e
    4200443U,	// MSUBS_U_rrr2
    4200443U,	// MSUBS_U_rrr2_e
    806360648U,	// MSUBS_rcr
    806360648U,	// MSUBS_rcr_e
    4200008U,	// MSUBS_rrr2
    4200008U,	// MSUBS_rrr2_e
    4199124U,	// MSUB_F_rrr
    4199212U,	// MSUB_H_rrr1_LL
    4199212U,	// MSUB_H_rrr1_LU
    4199212U,	// MSUB_H_rrr1_UL
    4199212U,	// MSUB_H_rrr1_UU
    4199212U,	// MSUB_H_rrr1_v110
    4199816U,	// MSUB_Q_rrr1
    4199816U,	// MSUB_Q_rrr1_L
    2537559432U,	// MSUB_Q_rrr1_L_L
    4199816U,	// MSUB_Q_rrr1_U
    4199816U,	// MSUB_Q_rrr1_UU2_v110
    2554336648U,	// MSUB_Q_rrr1_U_U
    4199816U,	// MSUB_Q_rrr1_e
    4199816U,	// MSUB_Q_rrr1_e_L
    2537559432U,	// MSUB_Q_rrr1_e_L_L
    4199816U,	// MSUB_Q_rrr1_e_U
    2554336648U,	// MSUB_Q_rrr1_e_U_U
    806360970U,	// MSUB_U_rcr
    4200330U,	// MSUB_U_rrr2
    806359622U,	// MSUB_rcr
    806359622U,	// MSUB_rcr_e
    4198982U,	// MSUB_rrr2
    4198982U,	// MSUB_rrr2_e
    46623U,	// MTCR_rlc
    5165U,	// MULMS_H_rr1_LL2e
    5165U,	// MULMS_H_rr1_LU2e
    5165U,	// MULMS_H_rr1_UL2e
    5165U,	// MULMS_H_rr1_UU2e
    4992U,	// MULM_H_rr1_LL2e
    4992U,	// MULM_H_rr1_LU2e
    4992U,	// MULM_H_rr1_UL2e
    4992U,	// MULM_H_rr1_UU2e
    268441551U,	// MULM_U_rc
    6095U,	// MULM_U_rr
    268440892U,	// MULM_rc
    5436U,	// MULM_rr
    5060U,	// MULR_H_rr
    5060U,	// MULR_H_rr1_LL2e
    5060U,	// MULR_H_rr1_LU2e
    5060U,	// MULR_H_rr1_UL2e
    5060U,	// MULR_H_rr1_UU2e
    5577U,	// MULR_Q_rr
    2801800649U,	// MULR_Q_rr1_2LL
    2818577865U,	// MULR_Q_rr1_2UU
    268441604U,	// MULS_U_rc
    6148U,	// MULS_U_rr2
    6148U,	// MULS_U_rr_v110
    268441195U,	// MULS_rc
    5739U,	// MULS_rr2
    5739U,	// MULS_rr_v110
    4845U,	// MUL_F_rrr
    4956U,	// MUL_H_rr
    4956U,	// MUL_H_rr1_LL2e
    4956U,	// MUL_H_rr1_LU2e
    4956U,	// MUL_H_rr1_UL2e
    4956U,	// MUL_H_rr1_UU2e
    5534U,	// MUL_Q_rr
    5534U,	// MUL_Q_rr1_2
    2801800606U,	// MUL_Q_rr1_2LL
    2818577822U,	// MUL_Q_rr1_2UU
    5534U,	// MUL_Q_rr1_2_L
    5534U,	// MUL_Q_rr1_2_Le
    5534U,	// MUL_Q_rr1_2_U
    5534U,	// MUL_Q_rr1_2_Ue
    5534U,	// MUL_Q_rr1_2__e
    268441526U,	// MUL_U_rc
    6070U,	// MUL_U_rr2
    268440873U,	// MUL_rc
    268440873U,	// MUL_rc_e
    5417U,	// MUL_rr2
    5417U,	// MUL_rr2_e
    5417U,	// MUL_rr_v110
    16782633U,	// MUL_srr
    1342183081U,	// NAND_T
    268440195U,	// NAND_rc
    4739U,	// NAND_rr
    16781647U,	// NEZ_A
    4364U,	// NE_A
    268440259U,	// NE_rc
    4803U,	// NE_rr
    3279U,	// NOP_sr
    3279U,	// NOP_sys
    1342183173U,	// NOR_T
    268441126U,	// NOR_rc
    5670U,	// NOR_rr
    136742U,	// NOR_sr
    136742U,	// NOR_sr_v110
    1342183126U,	// ORN_T
    268440930U,	// ORN_rc
    5474U,	// ORN_rr
    1342183112U,	// OR_ANDN_T
    1342183068U,	// OR_AND_T
    268441101U,	// OR_EQ_rc
    5645U,	// OR_EQ_rr
    268441510U,	// OR_GE_U_rc
    6054U,	// OR_GE_U_rr
    268440217U,	// OR_GE_rc
    4761U,	// OR_GE_rr
    268441662U,	// OR_LT_U_rc
    6206U,	// OR_LT_U_rr
    268441455U,	// OR_LT_rc
    5999U,	// OR_LT_rr
    268440264U,	// OR_NE_rc
    4808U,	// OR_NE_rr
    1342183190U,	// OR_NOR_T
    1342183160U,	// OR_OR_T
    1342183145U,	// OR_T
    268441127U,	// OR_rc
    5671U,	// OR_rr
    139320U,	// OR_sc
    139320U,	// OR_sc_v110
    16782887U,	// OR_srr
    16782887U,	// OR_srr_v110
    806360316U,	// PACK_rrr
    16783737U,	// PARITY_rr
    16783737U,	// PARITY_rr_v110
    16783674U,	// POPCNT_W_rr
    4874U,	// Q31TOF_rr
    16782052U,	// QSEED_F_rr
    3241U,	// RESTORE_sys
    3284U,	// RET_sr
    3284U,	// RET_sys
    3284U,	// RET_sys_v110
    3222U,	// RFE_sr
    3222U,	// RFE_sys_sys
    3222U,	// RFE_sys_sys_v110
    3275U,	// RFM_sys
    3255U,	// RSLCX_sys
    3241U,	// RSTV_sys
    268441586U,	// RSUBS_U_rc
    268441167U,	// RSUBS_rc
    268440140U,	// RSUB_rc
    135756U,	// RSUB_sr_sr
    135756U,	// RSUB_sr_sr_v110
    16783485U,	// SAT_BU_rr
    137341U,	// SAT_BU_sr
    137341U,	// SAT_BU_sr_v110
    16781836U,	// SAT_B_rr
    135692U,	// SAT_B_sr
    135692U,	// SAT_B_sr_v110
    16783552U,	// SAT_HU_rr
    137408U,	// SAT_HU_sr
    137408U,	// SAT_HU_sr_v110
    16782465U,	// SAT_H_rr
    136321U,	// SAT_H_sr
    136321U,	// SAT_H_sr_v110
    806360412U,	// SELN_rcr
    4199772U,	// SELN_rrr
    806360329U,	// SEL_rcr
    4199689U,	// SEL_rrr
    268441149U,	// SHAS_rc
    5693U,	// SHAS_rr
    268440357U,	// SHA_H_rc
    4901U,	// SHA_H_rr
    268439954U,	// SHA_rc
    4498U,	// SHA_rr
    2101650U,	// SHA_src
    268440246U,	// SHUFFLE_rc
    1342183101U,	// SH_ANDN_T
    1342183058U,	// SH_AND_T
    268441093U,	// SH_EQ_rc
    5637U,	// SH_EQ_rr
    268441500U,	// SH_GE_U_rc
    6044U,	// SH_GE_U_rr
    268440209U,	// SH_GE_rc
    4753U,	// SH_GE_rr
    268440406U,	// SH_H_rc
    4950U,	// SH_H_rr
    268441652U,	// SH_LT_U_rc
    6196U,	// SH_LT_U_rr
    268441447U,	// SH_LT_rc
    5991U,	// SH_LT_rr
    1342183078U,	// SH_NAND_T
    268441447U,	// SH_NE_rc
    5991U,	// SH_NE_rr
    1342183180U,	// SH_NOR_T
    1342183123U,	// SH_ORN_T
    1342183151U,	// SH_OR_T
    1342183200U,	// SH_XNOR_T
    1342183211U,	// SH_XOR_T
    268440774U,	// SH_rc
    5318U,	// SH_rr
    2102470U,	// SH_src
    166238U,	// STLCX_abs
    3349552U,	// STLCX_bo_bso
    166252U,	// STUCX_abs
    3349568U,	// STUCX_bo_bso
    37186U,	// ST_A_abs
    5467029U,	// ST_A_bo_bso
    67637570U,	// ST_A_bo_c
    1969774914U,	// ST_A_bo_pos
    1936286018U,	// ST_A_bo_pre
    101192002U,	// ST_A_bo_r
    12786581U,	// ST_A_bol
    729279U,	// ST_A_sc
    158538645U,	// ST_A_sro
    793493U,	// ST_A_ssr
    859029U,	// ST_A_ssr_pos
    52296U,	// ST_A_ssro
    37411U,	// ST_B_abs
    5467044U,	// ST_B_bo_bso
    67637795U,	// ST_B_bo_c
    1969775139U,	// ST_B_bo_pos
    1936286243U,	// ST_B_bo_pre
    101192227U,	// ST_B_bo_r
    12786596U,	// ST_B_bol
    175315876U,	// ST_B_sro
    793508U,	// ST_B_ssr
    859044U,	// ST_B_ssr_pos
    52308U,	// ST_B_ssro
    37249U,	// ST_DA_abs
    5467036U,	// ST_DA_bo_bso
    67637633U,	// ST_DA_bo_c
    1969774977U,	// ST_DA_bo_pos
    1936286081U,	// ST_DA_bo_pre
    101192065U,	// ST_DA_bo_r
    37476U,	// ST_D_abs
    5467051U,	// ST_D_bo_bso
    67637860U,	// ST_D_bo_c
    1969775204U,	// ST_D_bo_pos
    1936286308U,	// ST_D_bo_pre
    101192292U,	// ST_D_bo_r
    38040U,	// ST_H_abs
    5467058U,	// ST_H_bo_bso
    67638424U,	// ST_H_bo_c
    1969775768U,	// ST_H_bo_pos
    1936286872U,	// ST_H_bo_pre
    101192856U,	// ST_H_bo_r
    12786610U,	// ST_H_bol
    175315890U,	// ST_H_sro
    793522U,	// ST_H_ssr
    859058U,	// ST_H_ssr_pos
    52320U,	// ST_H_ssro
    38391U,	// ST_Q_abs
    5467111U,	// ST_Q_bo_bso
    67638775U,	// ST_Q_bo_c
    1969776119U,	// ST_Q_bo_pos
    1936287223U,	// ST_Q_bo_pre
    101193207U,	// ST_Q_bo_r
    34620U,	// ST_T
    39236U,	// ST_W_abs
    5467169U,	// ST_W_bo_bso
    67639620U,	// ST_W_bo_c
    1969776964U,	// ST_W_bo_pos
    1936288068U,	// ST_W_bo_pre
    101194052U,	// ST_W_bo_r
    12786721U,	// ST_W_bol
    175316001U,	// ST_W_sro
    793633U,	// ST_W_ssr
    859169U,	// ST_W_ssr_pos
    52332U,	// ST_W_ssro
    4690U,	// SUBC_rr
    6318U,	// SUBS_HU_rr
    5087U,	// SUBS_H_rr
    6131U,	// SUBS_U_rr
    5705U,	// SUBS_rr
    16782921U,	// SUBS_srr
    6481U,	// SUBX_rr
    3192U,	// SUB_A_rr
    139443U,	// SUB_A_sc
    4529U,	// SUB_B_rr
    806359765U,	// SUB_F_rrr
    4909U,	// SUB_H_rr
    4673U,	// SUB_rr
    16781889U,	// SUB_srr
    16781313U,	// SUB_srr_15a
    16847425U,	// SUB_srr_a15
    3306U,	// SVLCX_sys
    5467148U,	// SWAPMSK_W_bo_bso
    67639569U,	// SWAPMSK_W_bo_c
    1969776913U,	// SWAPMSK_W_bo_pos
    1936288017U,	// SWAPMSK_W_bo_pre
    101194001U,	// SWAPMSK_W_bo_r
    39206U,	// SWAP_W_abs
    5467160U,	// SWAP_W_bo_bso
    67639590U,	// SWAP_W_bo_c
    1969776934U,	// SWAP_W_bo_pos
    1936288038U,	// SWAP_W_bo_pre
    101194022U,	// SWAP_W_bo_r
    13600U,	// SYSCALL_rc
    3299U,	// TRAPSV_sys
    3293U,	// TRAPV_sys
    16782586U,	// UNPACK_rr
    136462U,	// UPDFL_rr
    16782111U,	// UTOF_rr
    3288U,	// WAIT_sys
    1342183203U,	// XNOR_T
    268441125U,	// XNOR_rc
    5669U,	// XNOR_rr
    268441100U,	// XOR_EQ_rc
    5644U,	// XOR_EQ_rr
    268441509U,	// XOR_GE_U_rc
    6053U,	// XOR_GE_U_rr
    268440216U,	// XOR_GE_rc
    4760U,	// XOR_GE_rr
    268441661U,	// XOR_LT_U_rc
    6205U,	// XOR_LT_U_rr
    268441454U,	// XOR_LT_rc
    5998U,	// XOR_LT_rr
    268440263U,	// XOR_NE_rc
    4807U,	// XOR_NE_rr
    1342183214U,	// XOR_T
    268441131U,	// XOR_rc
    5675U,	// XOR_rr
    16782891U,	// XOR_srr
  };

  static const uint8_t OpInfo1[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// INLINEASM_BR
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// DBG_VALUE_LIST
    0U,	// DBG_INSTR_REF
    0U,	// DBG_PHI
    0U,	// DBG_LABEL
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// PSEUDO_PROBE
    0U,	// ARITH_FENCE
    0U,	// STACKMAP
    0U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// PREALLOCATED_SETUP
    0U,	// PREALLOCATED_ARG
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    0U,	// PATCHABLE_FUNCTION_ENTER
    0U,	// PATCHABLE_RET
    0U,	// PATCHABLE_FUNCTION_EXIT
    0U,	// PATCHABLE_TAIL_CALL
    0U,	// PATCHABLE_EVENT_CALL
    0U,	// PATCHABLE_TYPED_EVENT_CALL
    0U,	// ICALL_BRANCH_FUNNEL
    0U,	// G_ASSERT_SEXT
    0U,	// G_ASSERT_ZEXT
    0U,	// G_ASSERT_ALIGN
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_SDIVREM
    0U,	// G_UDIVREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_BUILD_VECTOR
    0U,	// G_BUILD_VECTOR_TRUNC
    0U,	// G_CONCAT_VECTORS
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_FREEZE
    0U,	// G_INTRINSIC_FPTRUNC_ROUND
    0U,	// G_INTRINSIC_TRUNC
    0U,	// G_INTRINSIC_ROUND
    0U,	// G_INTRINSIC_LRINT
    0U,	// G_INTRINSIC_ROUNDEVEN
    0U,	// G_READCYCLECOUNTER
    0U,	// G_LOAD
    0U,	// G_SEXTLOAD
    0U,	// G_ZEXTLOAD
    0U,	// G_INDEXED_LOAD
    0U,	// G_INDEXED_SEXTLOAD
    0U,	// G_INDEXED_ZEXTLOAD
    0U,	// G_STORE
    0U,	// G_INDEXED_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_ATOMICRMW_FADD
    0U,	// G_ATOMICRMW_FSUB
    0U,	// G_ATOMICRMW_FMAX
    0U,	// G_ATOMICRMW_FMIN
    0U,	// G_FENCE
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INVOKE_REGION_START
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_SEXT_INREG
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_FSHL
    0U,	// G_FSHR
    0U,	// G_ROTR
    0U,	// G_ROTL
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDO
    0U,	// G_UADDE
    0U,	// G_USUBO
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SADDE
    0U,	// G_SSUBO
    0U,	// G_SSUBE
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_UADDSAT
    0U,	// G_SADDSAT
    0U,	// G_USUBSAT
    0U,	// G_SSUBSAT
    0U,	// G_USHLSAT
    0U,	// G_SSHLSAT
    0U,	// G_SMULFIX
    0U,	// G_UMULFIX
    0U,	// G_SMULFIXSAT
    0U,	// G_UMULFIXSAT
    0U,	// G_SDIVFIX
    0U,	// G_UDIVFIX
    0U,	// G_SDIVFIXSAT
    0U,	// G_UDIVFIXSAT
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FMAD
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FPOWI
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FLOG10
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_FABS
    0U,	// G_FCOPYSIGN
    0U,	// G_IS_FPCLASS
    0U,	// G_FCANONICALIZE
    0U,	// G_FMINNUM
    0U,	// G_FMAXNUM
    0U,	// G_FMINNUM_IEEE
    0U,	// G_FMAXNUM_IEEE
    0U,	// G_FMINIMUM
    0U,	// G_FMAXIMUM
    0U,	// G_PTR_ADD
    0U,	// G_PTRMASK
    0U,	// G_SMIN
    0U,	// G_SMAX
    0U,	// G_UMIN
    0U,	// G_UMAX
    0U,	// G_ABS
    0U,	// G_LROUND
    0U,	// G_LLROUND
    0U,	// G_BR
    0U,	// G_BRJT
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_CTTZ
    0U,	// G_CTTZ_ZERO_UNDEF
    0U,	// G_CTLZ
    0U,	// G_CTLZ_ZERO_UNDEF
    0U,	// G_CTPOP
    0U,	// G_BSWAP
    0U,	// G_BITREVERSE
    0U,	// G_FCEIL
    0U,	// G_FCOS
    0U,	// G_FSIN
    0U,	// G_FSQRT
    0U,	// G_FFLOOR
    0U,	// G_FRINT
    0U,	// G_FNEARBYINT
    0U,	// G_ADDRSPACE_CAST
    0U,	// G_BLOCK_ADDR
    0U,	// G_JUMP_TABLE
    0U,	// G_DYN_STACKALLOC
    0U,	// G_STRICT_FADD
    0U,	// G_STRICT_FSUB
    0U,	// G_STRICT_FMUL
    0U,	// G_STRICT_FDIV
    0U,	// G_STRICT_FREM
    0U,	// G_STRICT_FMA
    0U,	// G_STRICT_FSQRT
    0U,	// G_READ_REGISTER
    0U,	// G_WRITE_REGISTER
    0U,	// G_MEMCPY
    0U,	// G_MEMCPY_INLINE
    0U,	// G_MEMMOVE
    0U,	// G_MEMSET
    0U,	// G_BZERO
    0U,	// G_VECREDUCE_SEQ_FADD
    0U,	// G_VECREDUCE_SEQ_FMUL
    0U,	// G_VECREDUCE_FADD
    0U,	// G_VECREDUCE_FMUL
    0U,	// G_VECREDUCE_FMAX
    0U,	// G_VECREDUCE_FMIN
    0U,	// G_VECREDUCE_ADD
    0U,	// G_VECREDUCE_MUL
    0U,	// G_VECREDUCE_AND
    0U,	// G_VECREDUCE_OR
    0U,	// G_VECREDUCE_XOR
    0U,	// G_VECREDUCE_SMAX
    0U,	// G_VECREDUCE_SMIN
    0U,	// G_VECREDUCE_UMAX
    0U,	// G_VECREDUCE_UMIN
    0U,	// G_SBFX
    0U,	// G_UBFX
    0U,	// ABSDIFS_B_rr_v110
    0U,	// ABSDIFS_H_rr
    0U,	// ABSDIFS_rc
    0U,	// ABSDIFS_rr
    0U,	// ABSDIF_B_rr
    0U,	// ABSDIF_H_rr
    0U,	// ABSDIF_rc
    0U,	// ABSDIF_rr
    0U,	// ABSS_B_rr_v110
    0U,	// ABSS_H_rr
    0U,	// ABSS_rr
    0U,	// ABS_B_rr
    0U,	// ABS_H_rr
    0U,	// ABS_rr
    0U,	// ADDC_rc
    0U,	// ADDC_rr
    0U,	// ADDIH_A_rlc
    0U,	// ADDIH_rlc
    0U,	// ADDI_rlc
    0U,	// ADDSC_AT_rr
    0U,	// ADDSC_AT_rr_v110
    1U,	// ADDSC_A_rr
    1U,	// ADDSC_A_rr_v110
    0U,	// ADDSC_A_srrs
    0U,	// ADDSC_A_srrs_v110
    0U,	// ADDS_BU_rr_v110
    0U,	// ADDS_B_rr_v110
    0U,	// ADDS_H
    0U,	// ADDS_HU
    0U,	// ADDS_U
    0U,	// ADDS_U_rc
    0U,	// ADDS_rc
    0U,	// ADDS_rr
    0U,	// ADDS_srr
    0U,	// ADDX_rc
    0U,	// ADDX_rr
    0U,	// ADD_A_rr
    0U,	// ADD_A_src
    0U,	// ADD_A_srr
    0U,	// ADD_B_rr
    0U,	// ADD_F_rrr
    0U,	// ADD_H_rr
    0U,	// ADD_rc
    0U,	// ADD_rr
    0U,	// ADD_src
    0U,	// ADD_src_15a
    0U,	// ADD_src_a15
    0U,	// ADD_srr
    0U,	// ADD_srr_15a
    0U,	// ADD_srr_a15
    0U,	// ANDN_T
    0U,	// ANDN_rc
    0U,	// ANDN_rr
    0U,	// AND_ANDN_T
    0U,	// AND_AND_T
    0U,	// AND_EQ_rc
    0U,	// AND_EQ_rr
    0U,	// AND_GE_U_rc
    0U,	// AND_GE_U_rr
    0U,	// AND_GE_rc
    0U,	// AND_GE_rr
    0U,	// AND_LT_U_rc
    0U,	// AND_LT_U_rr
    0U,	// AND_LT_rc
    0U,	// AND_LT_rr
    0U,	// AND_NE_rc
    0U,	// AND_NE_rr
    0U,	// AND_NOR_T
    0U,	// AND_OR_T
    0U,	// AND_T
    0U,	// AND_rc
    0U,	// AND_rr
    0U,	// AND_sc
    0U,	// AND_sc_v110
    0U,	// AND_srr
    0U,	// AND_srr_v110
    0U,	// BISR_rc
    0U,	// BISR_rc_v161
    0U,	// BISR_sc
    0U,	// BISR_sc_v110
    0U,	// BMERGAE_rr_v110
    0U,	// BMERGE_rr
    0U,	// BSPLIT_rr
    0U,	// BSPLIT_rr_v110
    0U,	// CACHEA_I_bo_bso
    0U,	// CACHEA_I_bo_c
    0U,	// CACHEA_I_bo_pos
    0U,	// CACHEA_I_bo_pre
    0U,	// CACHEA_I_bo_r
    0U,	// CACHEA_WI_bo_bso
    0U,	// CACHEA_WI_bo_c
    0U,	// CACHEA_WI_bo_pos
    0U,	// CACHEA_WI_bo_pre
    0U,	// CACHEA_WI_bo_r
    0U,	// CACHEA_W_bo_bso
    0U,	// CACHEA_W_bo_c
    0U,	// CACHEA_W_bo_pos
    0U,	// CACHEA_W_bo_pre
    0U,	// CACHEA_W_bo_r
    0U,	// CACHEI_I_bo_bso
    0U,	// CACHEI_I_bo_pos
    0U,	// CACHEI_I_bo_pre
    0U,	// CACHEI_WI_bo_bso
    0U,	// CACHEI_WI_bo_pos
    0U,	// CACHEI_WI_bo_pre
    0U,	// CACHEI_W_bo_bso
    0U,	// CACHEI_W_bo_c
    0U,	// CACHEI_W_bo_pos
    0U,	// CACHEI_W_bo_pre
    0U,	// CACHEI_W_bo_r
    17U,	// CADDN_A_rcr_v110
    0U,	// CADDN_A_rrr_v110
    17U,	// CADDN_rcr
    0U,	// CADDN_rrr
    0U,	// CADDN_src
    0U,	// CADDN_srr_v110
    17U,	// CADD_A_rcr_v110
    0U,	// CADD_A_rrr_v110
    17U,	// CADD_rcr
    0U,	// CADD_rrr
    0U,	// CADD_src
    0U,	// CADD_srr_v110
    0U,	// CALLA_b
    0U,	// CALLI_rr
    0U,	// CALLI_rr_v110
    0U,	// CALL_b
    0U,	// CALL_sb
    0U,	// CLO_B_rr_v110
    0U,	// CLO_H_rr
    0U,	// CLO_rr
    0U,	// CLS_B_rr_v110
    0U,	// CLS_H_rr
    0U,	// CLS_rr
    0U,	// CLZ_B_rr_v110
    0U,	// CLZ_H_rr
    0U,	// CLZ_rr
    0U,	// CMOVN_src
    0U,	// CMOVN_srr
    0U,	// CMOV_src
    0U,	// CMOV_srr
    0U,	// CMPSWAP_W_bo_bso
    0U,	// CMPSWAP_W_bo_c
    0U,	// CMPSWAP_W_bo_pos
    0U,	// CMPSWAP_W_bo_pre
    0U,	// CMPSWAP_W_bo_r
    0U,	// CMP_F_rr
    0U,	// CRC32B_W_rr
    0U,	// CRC32L_W_rr
    0U,	// CRC32_B_rr
    0U,	// CRCN_rrr
    0U,	// CSUBN_A_rrr_v110
    0U,	// CSUBN_rrr
    0U,	// CSUB_A_rrr_v110
    0U,	// CSUB_rrr
    0U,	// DEBUG_sr
    0U,	// DEBUG_sys
    1U,	// DEXTR_rrpw
    1U,	// DEXTR_rrrr
    33U,	// DIFSC_A_rr_v110
    0U,	// DISABLE_sys
    0U,	// DISABLE_sys_1
    0U,	// DIV_F_rr
    0U,	// DIV_U_rr
    0U,	// DIV_rr
    0U,	// DSYNC_sys
    0U,	// DVADJ_rrr
    0U,	// DVADJ_rrr_v110
    0U,	// DVADJ_srr_v110
    0U,	// DVINIT_BU_rr
    0U,	// DVINIT_BU_rr_v110
    0U,	// DVINIT_B_rr
    0U,	// DVINIT_B_rr_v110
    0U,	// DVINIT_HU_rr
    0U,	// DVINIT_HU_rr_v110
    0U,	// DVINIT_H_rr
    0U,	// DVINIT_H_rr_v110
    0U,	// DVINIT_U_rr
    0U,	// DVINIT_U_rr_v110
    0U,	// DVINIT_rr
    0U,	// DVINIT_rr_v110
    0U,	// DVSTEP_U_rrr
    0U,	// DVSTEP_U_rrrv110
    0U,	// DVSTEP_Uv110
    0U,	// DVSTEP_rrr
    0U,	// DVSTEP_rrrv110
    0U,	// DVSTEPv110
    0U,	// ENABLE_sys
    0U,	// EQANY_B_rc
    0U,	// EQANY_B_rr
    0U,	// EQANY_H_rc
    0U,	// EQANY_H_rr
    0U,	// EQZ_A_rr
    0U,	// EQ_A_rr
    0U,	// EQ_B_rr
    0U,	// EQ_H_rr
    0U,	// EQ_W_rr
    0U,	// EQ_rc
    0U,	// EQ_rr
    0U,	// EQ_src
    0U,	// EQ_srr
    1U,	// EXTR_U_rrpw
    0U,	// EXTR_U_rrrr
    1U,	// EXTR_U_rrrw
    1U,	// EXTR_rrpw
    0U,	// EXTR_rrrr
    1U,	// EXTR_rrrw
    0U,	// FCALLA_b
    0U,	// FCALLA_i
    0U,	// FCALL_b
    0U,	// FRET_sr
    0U,	// FRET_sys
    0U,	// FTOHP_rr
    0U,	// FTOIZ_rr
    0U,	// FTOI_rr
    0U,	// FTOQ31Z_rr
    0U,	// FTOQ31_rr
    0U,	// FTOUZ_rr
    0U,	// FTOU_rr
    0U,	// GE_A_rr
    0U,	// GE_U_rc
    0U,	// GE_U_rr
    0U,	// GE_rc
    0U,	// GE_rr
    0U,	// HPTOF_rr
    1U,	// IMASK_rcpw
    1U,	// IMASK_rcrw
    1U,	// IMASK_rrpw
    1U,	// IMASK_rrrw
    129U,	// INSERT_rcpw
    1U,	// INSERT_rcrr
    129U,	// INSERT_rcrw
    129U,	// INSERT_rrpw
    129U,	// INSERT_rrrr
    129U,	// INSERT_rrrw
    0U,	// INSN_T
    0U,	// INS_T
    0U,	// ISYNC_sys
    0U,	// ITOF_rr
    0U,	// IXMAX_U_rrr
    0U,	// IXMAX_rrr
    0U,	// IXMIN_U_rrr
    0U,	// IXMIN_rrr
    0U,	// JA_b
    0U,	// JEQ_A_brr
    0U,	// JEQ_brc
    0U,	// JEQ_brr
    0U,	// JEQ_sbc1
    0U,	// JEQ_sbc2
    0U,	// JEQ_sbc_v110
    0U,	// JEQ_sbr1
    0U,	// JEQ_sbr2
    0U,	// JEQ_sbr_v110
    0U,	// JGEZ_sbr
    0U,	// JGEZ_sbr_v110
    0U,	// JGE_U_brc
    0U,	// JGE_U_brr
    0U,	// JGE_brc
    0U,	// JGE_brr
    0U,	// JGTZ_sbr
    0U,	// JGTZ_sbr_v110
    0U,	// JI_rr
    0U,	// JI_rr_v110
    0U,	// JI_sbr_v110
    0U,	// JI_sr
    0U,	// JLA_b
    0U,	// JLEZ_sbr
    0U,	// JLEZ_sbr_v110
    0U,	// JLI_rr
    0U,	// JLI_rr_v110
    0U,	// JLTZ_sbr
    0U,	// JLTZ_sbr_v110
    0U,	// JLT_U_brc
    0U,	// JLT_U_brr
    0U,	// JLT_brc
    0U,	// JLT_brr
    0U,	// JL_b
    0U,	// JNED_brc
    0U,	// JNED_brr
    0U,	// JNEI_brc
    0U,	// JNEI_brr
    0U,	// JNE_A_brr
    0U,	// JNE_brc
    0U,	// JNE_brr
    0U,	// JNE_sbc1
    0U,	// JNE_sbc2
    0U,	// JNE_sbc_v110
    0U,	// JNE_sbr1
    0U,	// JNE_sbr2
    0U,	// JNE_sbr_v110
    0U,	// JNZ_A_brr
    0U,	// JNZ_A_sbr
    0U,	// JNZ_T_brn
    0U,	// JNZ_T_sbrn
    0U,	// JNZ_T_sbrn_v110
    0U,	// JNZ_sb
    0U,	// JNZ_sb_v110
    0U,	// JNZ_sbr
    0U,	// JNZ_sbr_v110
    0U,	// JZ_A_brr
    0U,	// JZ_A_sbr
    0U,	// JZ_T_brn
    0U,	// JZ_T_sbrn
    0U,	// JZ_T_sbrn_v110
    0U,	// JZ_sb
    0U,	// JZ_sb_v110
    0U,	// JZ_sbr
    0U,	// JZ_sbr_v110
    0U,	// J_b
    0U,	// J_sb
    0U,	// J_sb_v110
    0U,	// LDLCX_abs
    0U,	// LDLCX_bo_bso
    0U,	// LDMST_abs
    0U,	// LDMST_bo_bso
    0U,	// LDMST_bo_c
    0U,	// LDMST_bo_pos
    0U,	// LDMST_bo_pre
    0U,	// LDMST_bo_r
    0U,	// LDUCX_abs
    0U,	// LDUCX_bo_bso
    0U,	// LD_A_abs
    0U,	// LD_A_bo_bso
    0U,	// LD_A_bo_c
    0U,	// LD_A_bo_pos
    0U,	// LD_A_bo_pre
    0U,	// LD_A_bo_r
    0U,	// LD_A_bol
    0U,	// LD_A_sc
    0U,	// LD_A_slr
    0U,	// LD_A_slr_post
    0U,	// LD_A_slr_post_v110
    0U,	// LD_A_slr_v110
    0U,	// LD_A_slro
    0U,	// LD_A_slro_v110
    0U,	// LD_A_sro
    0U,	// LD_A_sro_v110
    0U,	// LD_BU_abs
    0U,	// LD_BU_bo_bso
    0U,	// LD_BU_bo_c
    0U,	// LD_BU_bo_pos
    0U,	// LD_BU_bo_pre
    0U,	// LD_BU_bo_r
    0U,	// LD_BU_bol
    0U,	// LD_BU_slr
    0U,	// LD_BU_slr_post
    0U,	// LD_BU_slr_post_v110
    0U,	// LD_BU_slr_v110
    0U,	// LD_BU_slro
    0U,	// LD_BU_slro_v110
    0U,	// LD_BU_sro
    0U,	// LD_BU_sro_v110
    0U,	// LD_B_abs
    0U,	// LD_B_bo_bso
    0U,	// LD_B_bo_c
    0U,	// LD_B_bo_pos
    0U,	// LD_B_bo_pre
    0U,	// LD_B_bo_r
    0U,	// LD_B_bol
    0U,	// LD_B_slr_post_v110
    0U,	// LD_B_slr_v110
    0U,	// LD_B_slro_v110
    0U,	// LD_B_sro_v110
    0U,	// LD_DA_abs
    0U,	// LD_DA_bo_bso
    0U,	// LD_DA_bo_c
    0U,	// LD_DA_bo_pos
    0U,	// LD_DA_bo_pre
    0U,	// LD_DA_bo_r
    0U,	// LD_D_abs
    0U,	// LD_D_bo_bso
    0U,	// LD_D_bo_c
    0U,	// LD_D_bo_pos
    0U,	// LD_D_bo_pre
    0U,	// LD_D_bo_r
    0U,	// LD_HU_abs
    0U,	// LD_HU_bo_bso
    0U,	// LD_HU_bo_c
    0U,	// LD_HU_bo_pos
    0U,	// LD_HU_bo_pre
    0U,	// LD_HU_bo_r
    0U,	// LD_HU_bol
    0U,	// LD_H_abs
    0U,	// LD_H_bo_bso
    0U,	// LD_H_bo_c
    0U,	// LD_H_bo_pos
    0U,	// LD_H_bo_pre
    0U,	// LD_H_bo_r
    0U,	// LD_H_bol
    0U,	// LD_H_slr
    0U,	// LD_H_slr_post
    0U,	// LD_H_slr_post_v110
    0U,	// LD_H_slr_v110
    0U,	// LD_H_slro
    0U,	// LD_H_slro_v110
    0U,	// LD_H_sro
    0U,	// LD_H_sro_v110
    0U,	// LD_Q_abs
    0U,	// LD_Q_bo_bso
    0U,	// LD_Q_bo_c
    0U,	// LD_Q_bo_pos
    0U,	// LD_Q_bo_pre
    0U,	// LD_Q_bo_r
    0U,	// LD_W_abs
    0U,	// LD_W_bo_bso
    0U,	// LD_W_bo_c
    0U,	// LD_W_bo_pos
    0U,	// LD_W_bo_pre
    0U,	// LD_W_bo_r
    0U,	// LD_W_bol
    0U,	// LD_W_sc
    0U,	// LD_W_slr
    0U,	// LD_W_slr_post
    0U,	// LD_W_slr_post_v110
    0U,	// LD_W_slr_v110
    0U,	// LD_W_slro
    0U,	// LD_W_slro_v110
    0U,	// LD_W_sro
    0U,	// LD_W_sro_v110
    0U,	// LEA_abs
    0U,	// LEA_bo_bso
    0U,	// LEA_bol
    0U,	// LHA_abs
    0U,	// LOOPU_brr
    0U,	// LOOP_brr
    0U,	// LOOP_sbr
    0U,	// LT_A_rr
    0U,	// LT_B
    0U,	// LT_BU
    0U,	// LT_H
    0U,	// LT_HU
    0U,	// LT_U_rc
    0U,	// LT_U_rr
    0U,	// LT_U_srcv110
    0U,	// LT_U_srrv110
    0U,	// LT_W
    0U,	// LT_WU
    0U,	// LT_rc
    0U,	// LT_rr
    0U,	// LT_src
    0U,	// LT_srr
    2U,	// MADDMS_H_rrr1_LL
    3U,	// MADDMS_H_rrr1_LU
    4U,	// MADDMS_H_rrr1_UL
    5U,	// MADDMS_H_rrr1_UU
    49U,	// MADDMS_U_rcr_v110
    0U,	// MADDMS_U_rrr2_v110
    17U,	// MADDMS_rcr_v110
    0U,	// MADDMS_rrr2_v110
    2U,	// MADDM_H_rrr1_LL
    3U,	// MADDM_H_rrr1_LU
    4U,	// MADDM_H_rrr1_UL
    5U,	// MADDM_H_rrr1_UU
    65U,	// MADDM_H_rrr1_v110
    65U,	// MADDM_Q_rrr1_v110
    49U,	// MADDM_U_rcr_v110
    0U,	// MADDM_U_rrr2_v110
    17U,	// MADDM_rcr_v110
    0U,	// MADDM_rrr2_v110
    2U,	// MADDRS_H_rrr1_LL
    3U,	// MADDRS_H_rrr1_LU
    4U,	// MADDRS_H_rrr1_UL
    4U,	// MADDRS_H_rrr1_UL_2
    5U,	// MADDRS_H_rrr1_UU
    65U,	// MADDRS_H_rrr1_v110
    0U,	// MADDRS_Q_rrr1_L_L
    0U,	// MADDRS_Q_rrr1_U_U
    65U,	// MADDRS_Q_rrr1_v110
    2U,	// MADDR_H_rrr1_LL
    3U,	// MADDR_H_rrr1_LU
    4U,	// MADDR_H_rrr1_UL
    4U,	// MADDR_H_rrr1_UL_2
    5U,	// MADDR_H_rrr1_UU
    65U,	// MADDR_H_rrr1_v110
    0U,	// MADDR_Q_rrr1_L_L
    0U,	// MADDR_Q_rrr1_U_U
    65U,	// MADDR_Q_rrr1_v110
    2U,	// MADDSUMS_H_rrr1_LL
    3U,	// MADDSUMS_H_rrr1_LU
    4U,	// MADDSUMS_H_rrr1_UL
    5U,	// MADDSUMS_H_rrr1_UU
    2U,	// MADDSUM_H_rrr1_LL
    3U,	// MADDSUM_H_rrr1_LU
    4U,	// MADDSUM_H_rrr1_UL
    5U,	// MADDSUM_H_rrr1_UU
    2U,	// MADDSURS_H_rrr1_LL
    3U,	// MADDSURS_H_rrr1_LU
    4U,	// MADDSURS_H_rrr1_UL
    5U,	// MADDSURS_H_rrr1_UU
    2U,	// MADDSUR_H_rrr1_LL
    3U,	// MADDSUR_H_rrr1_LU
    4U,	// MADDSUR_H_rrr1_UL
    5U,	// MADDSUR_H_rrr1_UU
    2U,	// MADDSUS_H_rrr1_LL
    3U,	// MADDSUS_H_rrr1_LU
    4U,	// MADDSUS_H_rrr1_UL
    5U,	// MADDSUS_H_rrr1_UU
    2U,	// MADDSU_H_rrr1_LL
    3U,	// MADDSU_H_rrr1_LU
    4U,	// MADDSU_H_rrr1_UL
    5U,	// MADDSU_H_rrr1_UU
    2U,	// MADDS_H_rrr1_LL
    3U,	// MADDS_H_rrr1_LU
    4U,	// MADDS_H_rrr1_UL
    5U,	// MADDS_H_rrr1_UU
    65U,	// MADDS_H_rrr1_v110
    65U,	// MADDS_Q_rrr1
    6U,	// MADDS_Q_rrr1_L
    0U,	// MADDS_Q_rrr1_L_L
    7U,	// MADDS_Q_rrr1_U
    65U,	// MADDS_Q_rrr1_UU2_v110
    0U,	// MADDS_Q_rrr1_U_U
    65U,	// MADDS_Q_rrr1_e
    6U,	// MADDS_Q_rrr1_e_L
    0U,	// MADDS_Q_rrr1_e_L_L
    7U,	// MADDS_Q_rrr1_e_U
    0U,	// MADDS_Q_rrr1_e_U_U
    17U,	// MADDS_U_rcr
    17U,	// MADDS_U_rcr_e
    0U,	// MADDS_U_rrr2
    0U,	// MADDS_U_rrr2_e
    17U,	// MADDS_rcr
    17U,	// MADDS_rcr_e
    0U,	// MADDS_rrr2
    0U,	// MADDS_rrr2_e
    0U,	// MADD_F_rrr
    2U,	// MADD_H_rrr1_LL
    3U,	// MADD_H_rrr1_LU
    4U,	// MADD_H_rrr1_UL
    5U,	// MADD_H_rrr1_UU
    65U,	// MADD_H_rrr1_v110
    65U,	// MADD_Q_rrr1
    6U,	// MADD_Q_rrr1_L
    0U,	// MADD_Q_rrr1_L_L
    7U,	// MADD_Q_rrr1_U
    65U,	// MADD_Q_rrr1_UU2_v110
    0U,	// MADD_Q_rrr1_U_U
    65U,	// MADD_Q_rrr1_e
    6U,	// MADD_Q_rrr1_e_L
    0U,	// MADD_Q_rrr1_e_L_L
    7U,	// MADD_Q_rrr1_e_U
    0U,	// MADD_Q_rrr1_e_U_U
    49U,	// MADD_U_rcr
    0U,	// MADD_U_rrr2
    17U,	// MADD_rcr
    17U,	// MADD_rcr_e
    0U,	// MADD_rrr2
    0U,	// MADD_rrr2_e
    0U,	// MAX_B
    0U,	// MAX_BU
    0U,	// MAX_H
    0U,	// MAX_HU
    0U,	// MAX_U_rc
    0U,	// MAX_U_rr
    0U,	// MAX_rc
    0U,	// MAX_rr
    0U,	// MFCR_rlc
    0U,	// MIN_B
    0U,	// MIN_BU
    0U,	// MIN_H
    0U,	// MIN_HU
    0U,	// MIN_U_rc
    0U,	// MIN_U_rr
    0U,	// MIN_rc
    0U,	// MIN_rr
    0U,	// MOVH_A_rlc
    0U,	// MOVH_rlc
    0U,	// MOVZ_A_sr
    0U,	// MOV_AA_rr
    0U,	// MOV_AA_srr_srr
    0U,	// MOV_AA_srr_srr_v110
    0U,	// MOV_A_rr
    0U,	// MOV_A_src
    0U,	// MOV_A_srr
    0U,	// MOV_A_srr_v110
    0U,	// MOV_D_rr
    0U,	// MOV_D_srr_srr
    0U,	// MOV_D_srr_srr_v110
    0U,	// MOV_U_rlc
    0U,	// MOV_rlc
    0U,	// MOV_rlc_e
    0U,	// MOV_rr
    0U,	// MOV_rr_e
    0U,	// MOV_rr_eab
    0U,	// MOV_sc
    0U,	// MOV_sc_v110
    0U,	// MOV_src
    0U,	// MOV_src_e
    0U,	// MOV_srr
    2U,	// MSUBADMS_H_rrr1_LL
    3U,	// MSUBADMS_H_rrr1_LU
    4U,	// MSUBADMS_H_rrr1_UL
    5U,	// MSUBADMS_H_rrr1_UU
    2U,	// MSUBADM_H_rrr1_LL
    3U,	// MSUBADM_H_rrr1_LU
    4U,	// MSUBADM_H_rrr1_UL
    5U,	// MSUBADM_H_rrr1_UU
    2U,	// MSUBADRS_H_rrr1_LL
    3U,	// MSUBADRS_H_rrr1_LU
    4U,	// MSUBADRS_H_rrr1_UL
    5U,	// MSUBADRS_H_rrr1_UU
    65U,	// MSUBADRS_H_rrr1_v110
    2U,	// MSUBADR_H_rrr1_LL
    3U,	// MSUBADR_H_rrr1_LU
    4U,	// MSUBADR_H_rrr1_UL
    5U,	// MSUBADR_H_rrr1_UU
    65U,	// MSUBADR_H_rrr1_v110
    2U,	// MSUBADS_H_rrr1_LL
    3U,	// MSUBADS_H_rrr1_LU
    4U,	// MSUBADS_H_rrr1_UL
    5U,	// MSUBADS_H_rrr1_UU
    2U,	// MSUBAD_H_rrr1_LL
    3U,	// MSUBAD_H_rrr1_LU
    4U,	// MSUBAD_H_rrr1_UL
    5U,	// MSUBAD_H_rrr1_UU
    2U,	// MSUBMS_H_rrr1_LL
    3U,	// MSUBMS_H_rrr1_LU
    4U,	// MSUBMS_H_rrr1_UL
    5U,	// MSUBMS_H_rrr1_UU
    17U,	// MSUBMS_U_rcrv110
    0U,	// MSUBMS_U_rrr2v110
    17U,	// MSUBMS_rcrv110
    0U,	// MSUBMS_rrr2v110
    2U,	// MSUBM_H_rrr1_LL
    3U,	// MSUBM_H_rrr1_LU
    4U,	// MSUBM_H_rrr1_UL
    5U,	// MSUBM_H_rrr1_UU
    65U,	// MSUBM_H_rrr1_v110
    65U,	// MSUBM_Q_rrr1_v110
    17U,	// MSUBM_U_rcrv110
    0U,	// MSUBM_U_rrr2v110
    17U,	// MSUBM_rcrv110
    0U,	// MSUBM_rrr2v110
    2U,	// MSUBRS_H_rrr1_LL
    3U,	// MSUBRS_H_rrr1_LU
    4U,	// MSUBRS_H_rrr1_UL
    4U,	// MSUBRS_H_rrr1_UL_2
    5U,	// MSUBRS_H_rrr1_UU
    65U,	// MSUBRS_H_rrr1_v110
    0U,	// MSUBRS_Q_rrr1_L_L
    0U,	// MSUBRS_Q_rrr1_U_U
    65U,	// MSUBRS_Q_rrr1_v110
    2U,	// MSUBR_H_rrr1_LL
    3U,	// MSUBR_H_rrr1_LU
    4U,	// MSUBR_H_rrr1_UL
    4U,	// MSUBR_H_rrr1_UL_2
    5U,	// MSUBR_H_rrr1_UU
    65U,	// MSUBR_H_rrr1_v110
    0U,	// MSUBR_Q_rrr1_L_L
    0U,	// MSUBR_Q_rrr1_U_U
    65U,	// MSUBR_Q_rrr1_v110
    2U,	// MSUBS_H_rrr1_LL
    3U,	// MSUBS_H_rrr1_LU
    4U,	// MSUBS_H_rrr1_UL
    5U,	// MSUBS_H_rrr1_UU
    65U,	// MSUBS_H_rrr1_v110
    65U,	// MSUBS_Q_rrr1
    6U,	// MSUBS_Q_rrr1_L
    0U,	// MSUBS_Q_rrr1_L_L
    7U,	// MSUBS_Q_rrr1_U
    65U,	// MSUBS_Q_rrr1_UU2_v110
    0U,	// MSUBS_Q_rrr1_U_U
    65U,	// MSUBS_Q_rrr1_e
    6U,	// MSUBS_Q_rrr1_e_L
    0U,	// MSUBS_Q_rrr1_e_L_L
    7U,	// MSUBS_Q_rrr1_e_U
    0U,	// MSUBS_Q_rrr1_e_U_U
    17U,	// MSUBS_U_rcr
    17U,	// MSUBS_U_rcr_e
    0U,	// MSUBS_U_rrr2
    0U,	// MSUBS_U_rrr2_e
    17U,	// MSUBS_rcr
    17U,	// MSUBS_rcr_e
    0U,	// MSUBS_rrr2
    0U,	// MSUBS_rrr2_e
    0U,	// MSUB_F_rrr
    2U,	// MSUB_H_rrr1_LL
    3U,	// MSUB_H_rrr1_LU
    4U,	// MSUB_H_rrr1_UL
    5U,	// MSUB_H_rrr1_UU
    65U,	// MSUB_H_rrr1_v110
    65U,	// MSUB_Q_rrr1
    6U,	// MSUB_Q_rrr1_L
    0U,	// MSUB_Q_rrr1_L_L
    7U,	// MSUB_Q_rrr1_U
    65U,	// MSUB_Q_rrr1_UU2_v110
    0U,	// MSUB_Q_rrr1_U_U
    65U,	// MSUB_Q_rrr1_e
    6U,	// MSUB_Q_rrr1_e_L
    0U,	// MSUB_Q_rrr1_e_L_L
    7U,	// MSUB_Q_rrr1_e_U
    0U,	// MSUB_Q_rrr1_e_U_U
    49U,	// MSUB_U_rcr
    0U,	// MSUB_U_rrr2
    17U,	// MSUB_rcr
    17U,	// MSUB_rcr_e
    0U,	// MSUB_rrr2
    0U,	// MSUB_rrr2_e
    0U,	// MTCR_rlc
    8U,	// MULMS_H_rr1_LL2e
    9U,	// MULMS_H_rr1_LU2e
    10U,	// MULMS_H_rr1_UL2e
    11U,	// MULMS_H_rr1_UU2e
    8U,	// MULM_H_rr1_LL2e
    9U,	// MULM_H_rr1_LU2e
    10U,	// MULM_H_rr1_UL2e
    11U,	// MULM_H_rr1_UU2e
    0U,	// MULM_U_rc
    0U,	// MULM_U_rr
    0U,	// MULM_rc
    0U,	// MULM_rr
    0U,	// MULR_H_rr
    8U,	// MULR_H_rr1_LL2e
    9U,	// MULR_H_rr1_LU2e
    10U,	// MULR_H_rr1_UL2e
    11U,	// MULR_H_rr1_UU2e
    0U,	// MULR_Q_rr
    0U,	// MULR_Q_rr1_2LL
    0U,	// MULR_Q_rr1_2UU
    0U,	// MULS_U_rc
    0U,	// MULS_U_rr2
    0U,	// MULS_U_rr_v110
    0U,	// MULS_rc
    0U,	// MULS_rr2
    0U,	// MULS_rr_v110
    0U,	// MUL_F_rrr
    0U,	// MUL_H_rr
    8U,	// MUL_H_rr1_LL2e
    9U,	// MUL_H_rr1_LU2e
    10U,	// MUL_H_rr1_UL2e
    11U,	// MUL_H_rr1_UU2e
    0U,	// MUL_Q_rr
    33U,	// MUL_Q_rr1_2
    0U,	// MUL_Q_rr1_2LL
    0U,	// MUL_Q_rr1_2UU
    12U,	// MUL_Q_rr1_2_L
    12U,	// MUL_Q_rr1_2_Le
    13U,	// MUL_Q_rr1_2_U
    13U,	// MUL_Q_rr1_2_Ue
    33U,	// MUL_Q_rr1_2__e
    0U,	// MUL_U_rc
    0U,	// MUL_U_rr2
    0U,	// MUL_rc
    0U,	// MUL_rc_e
    0U,	// MUL_rr2
    0U,	// MUL_rr2_e
    0U,	// MUL_rr_v110
    0U,	// MUL_srr
    0U,	// NAND_T
    0U,	// NAND_rc
    0U,	// NAND_rr
    0U,	// NEZ_A
    0U,	// NE_A
    0U,	// NE_rc
    0U,	// NE_rr
    0U,	// NOP_sr
    0U,	// NOP_sys
    0U,	// NOR_T
    0U,	// NOR_rc
    0U,	// NOR_rr
    0U,	// NOR_sr
    0U,	// NOR_sr_v110
    0U,	// ORN_T
    0U,	// ORN_rc
    0U,	// ORN_rr
    0U,	// OR_ANDN_T
    0U,	// OR_AND_T
    0U,	// OR_EQ_rc
    0U,	// OR_EQ_rr
    0U,	// OR_GE_U_rc
    0U,	// OR_GE_U_rr
    0U,	// OR_GE_rc
    0U,	// OR_GE_rr
    0U,	// OR_LT_U_rc
    0U,	// OR_LT_U_rr
    0U,	// OR_LT_rc
    0U,	// OR_LT_rr
    0U,	// OR_NE_rc
    0U,	// OR_NE_rr
    0U,	// OR_NOR_T
    0U,	// OR_OR_T
    0U,	// OR_T
    0U,	// OR_rc
    0U,	// OR_rr
    0U,	// OR_sc
    0U,	// OR_sc_v110
    0U,	// OR_srr
    0U,	// OR_srr_v110
    0U,	// PACK_rrr
    0U,	// PARITY_rr
    0U,	// PARITY_rr_v110
    0U,	// POPCNT_W_rr
    0U,	// Q31TOF_rr
    0U,	// QSEED_F_rr
    0U,	// RESTORE_sys
    0U,	// RET_sr
    0U,	// RET_sys
    0U,	// RET_sys_v110
    0U,	// RFE_sr
    0U,	// RFE_sys_sys
    0U,	// RFE_sys_sys_v110
    0U,	// RFM_sys
    0U,	// RSLCX_sys
    0U,	// RSTV_sys
    0U,	// RSUBS_U_rc
    0U,	// RSUBS_rc
    0U,	// RSUB_rc
    0U,	// RSUB_sr_sr
    0U,	// RSUB_sr_sr_v110
    0U,	// SAT_BU_rr
    0U,	// SAT_BU_sr
    0U,	// SAT_BU_sr_v110
    0U,	// SAT_B_rr
    0U,	// SAT_B_sr
    0U,	// SAT_B_sr_v110
    0U,	// SAT_HU_rr
    0U,	// SAT_HU_sr
    0U,	// SAT_HU_sr_v110
    0U,	// SAT_H_rr
    0U,	// SAT_H_sr
    0U,	// SAT_H_sr_v110
    17U,	// SELN_rcr
    0U,	// SELN_rrr
    17U,	// SEL_rcr
    0U,	// SEL_rrr
    0U,	// SHAS_rc
    0U,	// SHAS_rr
    0U,	// SHA_H_rc
    0U,	// SHA_H_rr
    0U,	// SHA_rc
    0U,	// SHA_rr
    0U,	// SHA_src
    0U,	// SHUFFLE_rc
    0U,	// SH_ANDN_T
    0U,	// SH_AND_T
    0U,	// SH_EQ_rc
    0U,	// SH_EQ_rr
    0U,	// SH_GE_U_rc
    0U,	// SH_GE_U_rr
    0U,	// SH_GE_rc
    0U,	// SH_GE_rr
    0U,	// SH_H_rc
    0U,	// SH_H_rr
    0U,	// SH_LT_U_rc
    0U,	// SH_LT_U_rr
    0U,	// SH_LT_rc
    0U,	// SH_LT_rr
    0U,	// SH_NAND_T
    0U,	// SH_NE_rc
    0U,	// SH_NE_rr
    0U,	// SH_NOR_T
    0U,	// SH_ORN_T
    0U,	// SH_OR_T
    0U,	// SH_XNOR_T
    0U,	// SH_XOR_T
    0U,	// SH_rc
    0U,	// SH_rr
    0U,	// SH_src
    0U,	// STLCX_abs
    0U,	// STLCX_bo_bso
    0U,	// STUCX_abs
    0U,	// STUCX_bo_bso
    0U,	// ST_A_abs
    0U,	// ST_A_bo_bso
    0U,	// ST_A_bo_c
    0U,	// ST_A_bo_pos
    0U,	// ST_A_bo_pre
    0U,	// ST_A_bo_r
    0U,	// ST_A_bol
    0U,	// ST_A_sc
    0U,	// ST_A_sro
    0U,	// ST_A_ssr
    0U,	// ST_A_ssr_pos
    0U,	// ST_A_ssro
    0U,	// ST_B_abs
    0U,	// ST_B_bo_bso
    0U,	// ST_B_bo_c
    0U,	// ST_B_bo_pos
    0U,	// ST_B_bo_pre
    0U,	// ST_B_bo_r
    0U,	// ST_B_bol
    0U,	// ST_B_sro
    0U,	// ST_B_ssr
    0U,	// ST_B_ssr_pos
    0U,	// ST_B_ssro
    0U,	// ST_DA_abs
    0U,	// ST_DA_bo_bso
    0U,	// ST_DA_bo_c
    0U,	// ST_DA_bo_pos
    0U,	// ST_DA_bo_pre
    0U,	// ST_DA_bo_r
    0U,	// ST_D_abs
    0U,	// ST_D_bo_bso
    0U,	// ST_D_bo_c
    0U,	// ST_D_bo_pos
    0U,	// ST_D_bo_pre
    0U,	// ST_D_bo_r
    0U,	// ST_H_abs
    0U,	// ST_H_bo_bso
    0U,	// ST_H_bo_c
    0U,	// ST_H_bo_pos
    0U,	// ST_H_bo_pre
    0U,	// ST_H_bo_r
    0U,	// ST_H_bol
    0U,	// ST_H_sro
    0U,	// ST_H_ssr
    0U,	// ST_H_ssr_pos
    0U,	// ST_H_ssro
    0U,	// ST_Q_abs
    0U,	// ST_Q_bo_bso
    0U,	// ST_Q_bo_c
    0U,	// ST_Q_bo_pos
    0U,	// ST_Q_bo_pre
    0U,	// ST_Q_bo_r
    0U,	// ST_T
    0U,	// ST_W_abs
    0U,	// ST_W_bo_bso
    0U,	// ST_W_bo_c
    0U,	// ST_W_bo_pos
    0U,	// ST_W_bo_pre
    0U,	// ST_W_bo_r
    0U,	// ST_W_bol
    0U,	// ST_W_sro
    0U,	// ST_W_ssr
    0U,	// ST_W_ssr_pos
    0U,	// ST_W_ssro
    0U,	// SUBC_rr
    0U,	// SUBS_HU_rr
    0U,	// SUBS_H_rr
    0U,	// SUBS_U_rr
    0U,	// SUBS_rr
    0U,	// SUBS_srr
    0U,	// SUBX_rr
    0U,	// SUB_A_rr
    0U,	// SUB_A_sc
    0U,	// SUB_B_rr
    0U,	// SUB_F_rrr
    0U,	// SUB_H_rr
    0U,	// SUB_rr
    0U,	// SUB_srr
    0U,	// SUB_srr_15a
    0U,	// SUB_srr_a15
    0U,	// SVLCX_sys
    0U,	// SWAPMSK_W_bo_bso
    0U,	// SWAPMSK_W_bo_c
    0U,	// SWAPMSK_W_bo_pos
    0U,	// SWAPMSK_W_bo_pre
    0U,	// SWAPMSK_W_bo_r
    0U,	// SWAP_W_abs
    0U,	// SWAP_W_bo_bso
    0U,	// SWAP_W_bo_c
    0U,	// SWAP_W_bo_pos
    0U,	// SWAP_W_bo_pre
    0U,	// SWAP_W_bo_r
    0U,	// SYSCALL_rc
    0U,	// TRAPSV_sys
    0U,	// TRAPV_sys
    0U,	// UNPACK_rr
    0U,	// UPDFL_rr
    0U,	// UTOF_rr
    0U,	// WAIT_sys
    0U,	// XNOR_T
    0U,	// XNOR_rc
    0U,	// XNOR_rr
    0U,	// XOR_EQ_rc
    0U,	// XOR_EQ_rr
    0U,	// XOR_GE_U_rc
    0U,	// XOR_GE_U_rr
    0U,	// XOR_GE_rc
    0U,	// XOR_GE_rr
    0U,	// XOR_LT_U_rc
    0U,	// XOR_LT_U_rr
    0U,	// XOR_LT_rc
    0U,	// XOR_LT_rr
    0U,	// XOR_NE_rc
    0U,	// XOR_NE_rr
    0U,	// XOR_T
    0U,	// XOR_rc
    0U,	// XOR_rr
    0U,	// XOR_srr
  };

  // Emit the opcode for the instruction.
  uint64_t Bits = 0;
  Bits |= (uint64_t)OpInfo0[MCInst_getOpcode(MI)] << 0;
  Bits |= (uint64_t)OpInfo1[MCInst_getOpcode(MI)] << 32;
  MnemonicBitsInfo MBI = {AsmStrs+(Bits & 4095)-1, Bits};
  return MBI;

}
/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void printInstruction(MCInst *MI, uint64_t Address, SStream *O) {
  SStream_concat0(O, "");
  MnemonicBitsInfo MnemonicInfo = getMnemonic(MI, O);

  SStream_concat0(O, MnemonicInfo.first);

  uint64_t Bits = MnemonicInfo.second;
  assert(Bits != 0 && "Cannot print this instruction.");

  // Fragment 0 encoded into 4 bits for 13 unique commands.
  switch ((Bits >> 12) & 15) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // DBG_VALUE, DBG_VALUE_LIST, DBG_INSTR_REF, DBG_PHI, DBG_LABEL, BUNDLE, ...
    return;
    break;
  case 1:
    // ABSDIFS_B_rr_v110, ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ...
    printOperand(MI, 0, O);
    break;
  case 2:
    // AND_sc, AND_sc_v110, BISR_sc, BISR_sc_v110, LD_A_sc, LD_W_sc, MOV_sc, ...
    printZExtImm_8(MI, 0, O);
    break;
  case 3:
    // BISR_rc, BISR_rc_v161, SYSCALL_rc
    printSExtImm_9(MI, 0, O);
    return;
    break;
  case 4:
    // CALLA_b, CALL_b, FCALLA_b, FCALL_b, JA_b, JLA_b, JL_b, J_b
    printDisp24Imm(MI, 0, O);
    return;
    break;
  case 5:
    // CALL_sb, JNZ_sb, JNZ_sb_v110, JZ_sb, JZ_sb_v110, J_sb, J_sb_v110
    printDisp8Imm(MI, 0, O);
    return;
    break;
  case 6:
    // CMPSWAP_W_bo_bso, CMPSWAP_W_bo_c, CMPSWAP_W_bo_pos, CMPSWAP_W_bo_pre, ...
    printOperand(MI, 1, O);
    break;
  case 7:
    // JEQ_sbc1, JEQ_sbc2, JEQ_sbc_v110, JNE_sbc1, JNE_sbc2, JNE_sbc_v110
    printSExtImm_4(MI, 1, O);
    SStream_concat0(O, ", ");
    printDisp4Imm(MI, 0, O);
    return;
    break;
  case 8:
    // LDLCX_abs, LDUCX_abs, STLCX_abs, STUCX_abs, ST_T
    printOff18Imm(MI, 0, O);
    break;
  case 9:
    // LDMST_abs, ST_A_abs, ST_B_abs, ST_DA_abs, ST_D_abs, ST_H_abs, ST_Q_abs...
    printOff18Imm(MI, 1, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 0, O);
    return;
    break;
  case 10:
    // LOOPU_brr
    printDisp15Imm(MI, 0, O);
    return;
    break;
  case 11:
    // MTCR_rlc
    printSExtImm_16(MI, 0, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 1, O);
    return;
    break;
  case 12:
    // ST_A_ssro, ST_B_ssro, ST_H_ssro, ST_W_ssro
    printZExtImm_4(MI, 1, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 0, O);
    return;
    break;
  }


  // Fragment 1 encoded into 4 bits for 14 unique commands.
  switch ((Bits >> 16) & 15) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_B_rr_v110, ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ...
    SStream_concat0(O, ", ");
    break;
  case 1:
    // ADD_src_a15, ADD_srr_a15, CADDN_src, CADDN_srr_v110, CADD_src, CADD_sr...
    SStream_concat0(O, ", %d15, ");
    break;
  case 2:
    // AND_sc, AND_sc_v110, BISR_sc, BISR_sc_v110, CALLI_rr, CALLI_rr_v110, D...
    return;
    break;
  case 3:
    // CACHEA_I_bo_bso, CACHEA_I_bo_pre, CACHEA_WI_bo_bso, CACHEA_WI_bo_pre, ...
    SStream_concat1(O, ']');
    break;
  case 4:
    // CACHEA_I_bo_c, CACHEA_WI_bo_c, CACHEA_W_bo_c, CACHEI_W_bo_c
    SStream_concat0(O, "+c]");
    set_mem_access(MI, false);
    printSExtImm_10(MI, 1, O);
    return;
    break;
  case 5:
    // CACHEA_I_bo_pos, CACHEA_WI_bo_pos, CACHEA_W_bo_pos, CACHEI_I_bo_pos, C...
    SStream_concat0(O, "+]");
    set_mem_access(MI, false);
    break;
  case 6:
    // CACHEA_I_bo_r, CACHEA_WI_bo_r, CACHEA_W_bo_r, CACHEI_W_bo_r
    SStream_concat0(O, "+r]");
    set_mem_access(MI, false);
    return;
    break;
  case 7:
    // CADDN_A_rrr_v110, CADD_A_rrr_v110
    SStream_concat1(O, ' ');
    printOperand(MI, 3, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 1, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 2, O);
    return;
    break;
  case 8:
    // LD_A_bo_bso, LD_A_bo_c, LD_A_bo_pos, LD_A_bo_r, LD_A_bol, LD_A_slr, LD...
    SStream_concat0(O, ", [");
    set_mem_access(MI, true);
    break;
  case 9:
    // LD_A_bo_pre, LD_BU_bo_pre, LD_B_bo_pre, LD_DA_bo_pre, LD_D_bo_pre, LD_...
    SStream_concat0(O, ", [+");
    set_mem_access(MI, true);
    break;
  case 10:
    // LD_A_slro, LD_A_slro_v110, LD_BU_slro, LD_BU_slro_v110, LD_B_slro_v110...
    SStream_concat0(O, ", [%a15]");
    set_mem_access(MI, true);
    printZExtImm_4(MI, 1, O);
    return;
    break;
  case 11:
    // ST_A_sc
    SStream_concat0(O, ", %a15");
    return;
    break;
  case 12:
    // ST_A_ssr, ST_B_ssr, ST_H_ssr, ST_W_ssr
    SStream_concat0(O, "], ");
    set_mem_access(MI, false);
    printOperand(MI, 1, O);
    return;
    break;
  case 13:
    // ST_A_ssr_pos, ST_B_ssr_pos, ST_H_ssr_pos, ST_W_ssr_pos
    SStream_concat0(O, "+], ");
    set_mem_access(MI, false);
    printOperand(MI, 1, O);
    return;
    break;
  }


  // Fragment 2 encoded into 4 bits for 13 unique commands.
  switch ((Bits >> 20) & 15) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_B_rr_v110, ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ...
    printOperand(MI, 1, O);
    break;
  case 1:
    // ADDSC_A_rr, ADD_F_rrr, CADDN_A_rcr_v110, CADDN_rcr, CADD_A_rcr_v110, C...
    printOperand(MI, 2, O);
    break;
  case 2:
    // ADD_A_src, ADD_src, ADD_src_15a, ADD_src_a15, CADDN_src, CADD_src, CMO...
    printSExtImm_4(MI, 1, O);
    return;
    break;
  case 3:
    // CACHEA_I_bo_bso, CACHEA_I_bo_pos, CACHEA_I_bo_pre, CACHEA_WI_bo_bso, C...
    printSExtImm_10(MI, 1, O);
    return;
    break;
  case 4:
    // CADDN_rrr, CADD_rrr, CRCN_rrr, CSUBN_A_rrr_v110, CSUBN_rrr, CSUB_A_rrr...
    printOperand(MI, 3, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 1, O);
    break;
  case 5:
    // CMPSWAP_W_bo_bso, CMPSWAP_W_bo_c, CMPSWAP_W_bo_pos, CMPSWAP_W_bo_pre, ...
    printSExtImm_10(MI, 2, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 0, O);
    return;
    break;
  case 6:
    // CMPSWAP_W_bo_r, LDMST_bo_r, ST_A_bo_pos, ST_A_bo_pre, ST_B_bo_pos, ST_...
    printOperand(MI, 0, O);
    break;
  case 7:
    // JEQ_brc, JGE_U_brc, JGE_brc, JLT_U_brc, JLT_brc, JNED_brc, JNEI_brc, J...
    printZExtImm_4(MI, 1, O);
    break;
  case 8:
    // JEQ_sbr1, JEQ_sbr2, JEQ_sbr_v110, JGEZ_sbr, JGEZ_sbr_v110, JGTZ_sbr, J...
    printDisp4Imm(MI, 1, O);
    return;
    break;
  case 9:
    // LD_A_abs, LD_BU_abs, LD_B_abs, LD_DA_abs, LD_D_abs, LD_HU_abs, LD_H_ab...
    printOff18Imm(MI, 1, O);
    return;
    break;
  case 10:
    // LOOP_brr
    printDisp15Imm(MI, 1, O);
    return;
    break;
  case 11:
    // MFCR_rlc, MOVH_A_rlc, MOVH_rlc, MOV_U_rlc, MOV_rlc, MOV_rlc_e
    printZExtImm_16(MI, 1, O);
    return;
    break;
  case 12:
    // ST_A_bol, ST_B_bol, ST_H_bol, ST_W_bol
    printSExtImm_16(MI, 2, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 1, O);
    return;
    break;
  }


  // Fragment 3 encoded into 4 bits for 11 unique commands.
  switch ((Bits >> 24) & 15) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_B_rr_v110, ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ...
    SStream_concat0(O, ", ");
    break;
  case 1:
    // ABS_B_rr, ABS_H_rr, ABS_rr, ADDS_srr, ADD_A_srr, ADD_srr, ADD_srr_15a,...
    return;
    break;
  case 2:
    // ADDSC_A_srrs
    SStream_concat0(O, ", %d15, ");
    printZExtImm_2(MI, 2, O);
    return;
    break;
  case 3:
    // LD_A_bo_bso, LD_A_bo_pre, LD_A_bol, LD_A_slr, LD_A_slr_v110, LD_BU_bo_...
    SStream_concat1(O, ']');
    break;
  case 4:
    // LD_A_bo_c, LD_BU_bo_c, LD_B_bo_c, LD_DA_bo_c, LD_D_bo_c, LD_HU_bo_c, L...
    SStream_concat0(O, "+c]");
    set_mem_access(MI, false);
    printSExtImm_10(MI, 2, O);
    return;
    break;
  case 5:
    // LD_A_bo_pos, LD_A_slr_post, LD_A_slr_post_v110, LD_BU_bo_pos, LD_BU_sl...
    SStream_concat0(O, "+]");
    set_mem_access(MI, false);
    break;
  case 6:
    // LD_A_bo_r, LD_BU_bo_r, LD_B_bo_r, LD_DA_bo_r, LD_D_bo_r, LD_HU_bo_r, L...
    SStream_concat0(O, "+r]");
    set_mem_access(MI, false);
    return;
    break;
  case 7:
    // MADDRS_Q_rrr1_L_L, MADDR_Q_rrr1_L_L, MADDS_Q_rrr1_L_L, MADDS_Q_rrr1_e_...
    SStream_concat0(O, "L, ");
    printOperand(MI, 2, O);
    SStream_concat0(O, "L, ");
    break;
  case 8:
    // MADDRS_Q_rrr1_U_U, MADDR_Q_rrr1_U_U, MADDS_Q_rrr1_U_U, MADDS_Q_rrr1_e_...
    SStream_concat0(O, "U, ");
    printOperand(MI, 2, O);
    SStream_concat0(O, "U, ");
    break;
  case 9:
    // ST_A_sro
    SStream_concat0(O, ", %a15");
    return;
    break;
  case 10:
    // ST_B_sro, ST_H_sro, ST_W_sro
    SStream_concat0(O, ", %d15");
    return;
    break;
  }


  // Fragment 4 encoded into 4 bits for 11 unique commands.
  switch ((Bits >> 28) & 15) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_B_rr_v110, ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ...
    printOperand(MI, 2, O);
    break;
  case 1:
    // ABSDIF_rc, ADDC_rc, ADDS_U_rc, ADDS_rc, ADDX_rc, ADD_rc, ANDN_rc, AND_...
    printSExtImm_9(MI, 2, O);
    return;
    break;
  case 2:
    // ADDIH_A_rlc, ADDIH_rlc, ADDI_rlc
    printSExtImm_16(MI, 2, O);
    return;
    break;
  case 3:
    // ADDSC_A_rr, ADD_F_rrr, CADDN_A_rcr_v110, CADDN_rcr, CADD_A_rcr_v110, C...
    printOperand(MI, 1, O);
    break;
  case 4:
    // ADDSC_A_srrs_v110
    printZExtImm_2(MI, 2, O);
    return;
    break;
  case 5:
    // ANDN_T, AND_ANDN_T, AND_AND_T, AND_NOR_T, AND_OR_T, AND_T, INSN_T, INS...
    printZExtImm_4(MI, 3, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 2, O);
    SStream_concat0(O, ", ");
    printZExtImm_4(MI, 4, O);
    return;
    break;
  case 6:
    // JEQ_A_brr, JEQ_brc, JEQ_brr, JGE_U_brc, JGE_U_brr, JGE_brc, JGE_brr, J...
    printDisp15Imm(MI, 2, O);
    return;
    break;
  case 7:
    // LD_A_bo_bso, LD_A_bo_pos, LD_A_bo_pre, LD_BU_bo_bso, LD_BU_bo_pos, LD_...
    printSExtImm_10(MI, 2, O);
    return;
    break;
  case 8:
    // LD_A_slr, LD_A_slr_post, LD_A_slr_post_v110, LD_A_slr_v110, LD_BU_slr,...
    return;
    break;
  case 9:
    // MADDRS_Q_rrr1_L_L, MADDRS_Q_rrr1_U_U, MADDR_Q_rrr1_L_L, MADDR_Q_rrr1_U...
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 10:
    // MULR_Q_rr1_2LL, MULR_Q_rr1_2UU, MUL_Q_rr1_2LL, MUL_Q_rr1_2UU
    printZExtImm_2(MI, 3, O);
    return;
    break;
  }


  // Fragment 5 encoded into 4 bits for 14 unique commands.
  switch ((Bits >> 32) & 15) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_B_rr_v110, ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ...
    return;
    break;
  case 1:
    // ADDSC_A_rr, ADDSC_A_rr_v110, CADDN_A_rcr_v110, CADDN_rcr, CADD_A_rcr_v...
    SStream_concat0(O, ", ");
    break;
  case 2:
    // MADDMS_H_rrr1_LL, MADDM_H_rrr1_LL, MADDRS_H_rrr1_LL, MADDR_H_rrr1_LL, ...
    SStream_concat0(O, " LL, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 3:
    // MADDMS_H_rrr1_LU, MADDM_H_rrr1_LU, MADDRS_H_rrr1_LU, MADDR_H_rrr1_LU, ...
    SStream_concat0(O, " LU, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 4:
    // MADDMS_H_rrr1_UL, MADDM_H_rrr1_UL, MADDRS_H_rrr1_UL, MADDRS_H_rrr1_UL_...
    SStream_concat0(O, " UL, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 5:
    // MADDMS_H_rrr1_UU, MADDM_H_rrr1_UU, MADDRS_H_rrr1_UU, MADDR_H_rrr1_UU, ...
    SStream_concat0(O, " UU, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 6:
    // MADDS_Q_rrr1_L, MADDS_Q_rrr1_e_L, MADD_Q_rrr1_L, MADD_Q_rrr1_e_L, MSUB...
    SStream_concat0(O, " L, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 7:
    // MADDS_Q_rrr1_U, MADDS_Q_rrr1_e_U, MADD_Q_rrr1_U, MADD_Q_rrr1_e_U, MSUB...
    SStream_concat0(O, " U, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 8:
    // MULMS_H_rr1_LL2e, MULM_H_rr1_LL2e, MULR_H_rr1_LL2e, MUL_H_rr1_LL2e
    SStream_concat0(O, "LL, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 9:
    // MULMS_H_rr1_LU2e, MULM_H_rr1_LU2e, MULR_H_rr1_LU2e, MUL_H_rr1_LU2e
    SStream_concat0(O, "LU, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 10:
    // MULMS_H_rr1_UL2e, MULM_H_rr1_UL2e, MULR_H_rr1_UL2e, MUL_H_rr1_UL2e
    SStream_concat0(O, "UL, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 11:
    // MULMS_H_rr1_UU2e, MULM_H_rr1_UU2e, MULR_H_rr1_UU2e, MUL_H_rr1_UU2e
    SStream_concat0(O, "UU, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 12:
    // MUL_Q_rr1_2_L, MUL_Q_rr1_2_Le
    SStream_concat0(O, "L, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 13:
    // MUL_Q_rr1_2_U, MUL_Q_rr1_2_Ue
    SStream_concat0(O, "U, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  }


  // Fragment 6 encoded into 3 bits for 5 unique commands.
  switch ((Bits >> 36) & 7) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ADDSC_A_rr, ADDSC_A_rr_v110, DEXTR_rrpw, DEXTR_rrrr, EXTR_U_rrpw, EXTR...
    printOperand(MI, 3, O);
    break;
  case 1:
    // CADDN_A_rcr_v110, CADDN_rcr, CADD_A_rcr_v110, CADD_rcr, MADDMS_rcr_v11...
    printSExtImm_9(MI, 3, O);
    return;
    break;
  case 2:
    // DIFSC_A_rr_v110, MUL_Q_rr1_2, MUL_Q_rr1_2__e
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 3:
    // MADDMS_U_rcr_v110, MADDM_U_rcr_v110, MADD_U_rcr, MSUB_U_rcr
    printZExtImm_9(MI, 3, O);
    return;
    break;
  case 4:
    // MADDM_H_rrr1_v110, MADDM_Q_rrr1_v110, MADDRS_H_rrr1_v110, MADDRS_Q_rrr...
    printZExtImm_2(MI, 4, O);
    return;
    break;
  }


  // Fragment 7 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 39) & 1) {
    // INSERT_rcpw, INSERT_rcrw, INSERT_rrpw, INSERT_rrrr, INSERT_rrrw
    SStream_concat0(O, ", ");
    printOperand(MI, 4, O);
    return;
  } else {
    // ADDSC_A_rr, ADDSC_A_rr_v110, DEXTR_rrpw, DEXTR_rrrr, EXTR_U_rrpw, EXTR...
    return;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 61 && "Invalid register number!");

  static const char AsmStrs[] = {
  /* 0 */ "d10\0"
  /* 4 */ "e10\0"
  /* 8 */ "p10\0"
  /* 12 */ "a0\0"
  /* 15 */ "d0\0"
  /* 18 */ "e0\0"
  /* 21 */ "p0\0"
  /* 24 */ "A10_A11\0"
  /* 32 */ "a11\0"
  /* 36 */ "d11\0"
  /* 40 */ "A0_A1\0"
  /* 46 */ "a1\0"
  /* 49 */ "d1\0"
  /* 52 */ "a12\0"
  /* 56 */ "d12\0"
  /* 60 */ "e12\0"
  /* 64 */ "p12\0"
  /* 68 */ "a2\0"
  /* 71 */ "d2\0"
  /* 74 */ "e2\0"
  /* 77 */ "p2\0"
  /* 80 */ "A12_A13\0"
  /* 88 */ "a13\0"
  /* 92 */ "d13\0"
  /* 96 */ "A2_A3\0"
  /* 102 */ "a3\0"
  /* 105 */ "d3\0"
  /* 108 */ "a14\0"
  /* 112 */ "d14\0"
  /* 116 */ "e14\0"
  /* 120 */ "p14\0"
  /* 124 */ "a4\0"
  /* 127 */ "d4\0"
  /* 130 */ "e4\0"
  /* 133 */ "p4\0"
  /* 136 */ "A14_A15\0"
  /* 144 */ "a15\0"
  /* 148 */ "d15\0"
  /* 152 */ "A4_A5\0"
  /* 158 */ "a5\0"
  /* 161 */ "d5\0"
  /* 164 */ "a6\0"
  /* 167 */ "d6\0"
  /* 170 */ "e6\0"
  /* 173 */ "p6\0"
  /* 176 */ "A6_A7\0"
  /* 182 */ "a7\0"
  /* 185 */ "d7\0"
  /* 188 */ "a8\0"
  /* 191 */ "d8\0"
  /* 194 */ "e8\0"
  /* 197 */ "p8\0"
  /* 200 */ "A8_A9\0"
  /* 206 */ "a9\0"
  /* 209 */ "d9\0"
  /* 212 */ "pc\0"
  /* 215 */ "pcxi\0"
  /* 220 */ "sp\0"
  /* 223 */ "psw\0"
  /* 227 */ "fcx\0"
};
  static const uint8_t RegAsmOffset[] = {
    227, 212, 215, 223, 12, 46, 68, 102, 124, 158, 164, 182, 188, 206, 
    220, 32, 52, 88, 108, 144, 15, 49, 71, 105, 127, 161, 167, 185, 
    191, 209, 0, 36, 56, 92, 112, 148, 18, 74, 130, 170, 194, 4, 
    60, 116, 21, 77, 133, 173, 197, 8, 64, 120, 40, 96, 152, 176, 
    200, 24, 80, 136, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}
#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

bool printAliasInstr(MCInst *MI, uint64_t Address, SStream *OS) {
  return false;
}

#endif // PRINT_ALIAS_INSTR
