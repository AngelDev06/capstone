/* Capstone Disassembly Engine, http://www.capstone-engine.org */
/* By Nguyen Anh Quynh <aquynh@gmail.com>, 2013-2022, */
/*    Rot127 <unisono@quyllur.org> 2022-2023 */
/* Automatically generated file by the LLVM TableGen Disassembler Backend. */
/* Do not edit. */

#include <capstone/platform.h>
#include <assert.h>

/// getMnemonic - This method is automatically generated by tablegen
/// from the instruction set description.
MnemonicBitsInfo getMnemonic(MCInst *MI, SStream *O) {
  static const char AsmStrs[] = {
  /* 0 */ "sub %d15, \0"
  /* 11 */ "add %d15, \0"
  /* 22 */ "and %d15, \0"
  /* 33 */ "jne %d15, \0"
  /* 44 */ "jeq %d15, \0"
  /* 55 */ "or %d15, \0"
  /* 65 */ "jz.t %d15, \0"
  /* 77 */ "jnz.t %d15, \0"
  /* 90 */ "lt %d15, \0"
  /* 100 */ "mov %d15, \0"
  /* 111 */ "jz %d15, \0"
  /* 121 */ "jnz %d15, \0"
  /* 132 */ "ld.a %a15, %sp, \0"
  /* 149 */ "ld.w %a15, %sp, \0"
  /* 166 */ "sub.a %sp, \0"
  /* 178 */ "st.a %sp, \0"
  /* 189 */ "ftoq31 \0"
  /* 197 */ "CMPSWAP.W \0"
  /* 208 */ "addsc.a \0"
  /* 217 */ "add.a \0"
  /* 224 */ "ld.a \0"
  /* 230 */ "ge.a \0"
  /* 236 */ "jne.a \0"
  /* 243 */ "addih.a \0"
  /* 252 */ "movh.a \0"
  /* 260 */ "jeq.a \0"
  /* 267 */ "lt.a \0"
  /* 273 */ "st.a \0"
  /* 279 */ "mov.a \0"
  /* 286 */ "nez.a \0"
  /* 293 */ "jz.a \0"
  /* 299 */ "jnz.a \0"
  /* 306 */ "eqz.a \0"
  /* 313 */ "mov.aa \0"
  /* 321 */ "ld.da \0"
  /* 328 */ "st.da \0"
  /* 335 */ "lea \0"
  /* 340 */ "lha \0"
  /* 345 */ "sha \0"
  /* 350 */ "ja \0"
  /* 354 */ "jla \0"
  /* 359 */ "fcalla \0"
  /* 367 */ "crc32.b \0"
  /* 376 */ "sub.b \0"
  /* 383 */ "add.b \0"
  /* 390 */ "ld.b \0"
  /* 396 */ "absdif.b \0"
  /* 406 */ "min.b \0"
  /* 413 */ "eq.b \0"
  /* 419 */ "abs.b \0"
  /* 426 */ "sat.b \0"
  /* 433 */ "dvinit.b \0"
  /* 443 */ "lt.b \0"
  /* 449 */ "st.b \0"
  /* 455 */ "max.b \0"
  /* 462 */ "eqany.b \0"
  /* 471 */ "csub \0"
  /* 477 */ "msub \0"
  /* 483 */ "rsub \0"
  /* 489 */ "subc \0"
  /* 495 */ "addc \0"
  /* 501 */ "ld.d \0"
  /* 507 */ "st.d \0"
  /* 513 */ "mov.d \0"
  /* 520 */ "cadd \0"
  /* 526 */ "madd \0"
  /* 532 */ "jned \0"
  /* 538 */ "nand \0"
  /* 544 */ "and.ge \0"
  /* 552 */ "sh.ge \0"
  /* 559 */ "xor.ge \0"
  /* 567 */ "jge \0"
  /* 572 */ "bmerge \0"
  /* 580 */ "disable \0"
  /* 589 */ "shuffle \0"
  /* 598 */ "and.ne \0"
  /* 606 */ "xor.ne \0"
  /* 614 */ "jne \0"
  /* 619 */ "msub.f \0"
  /* 627 */ "madd.f \0"
  /* 635 */ "qseed.f \0"
  /* 644 */ "mul.f \0"
  /* 651 */ "cmp.f \0"
  /* 658 */ "div.f \0"
  /* 665 */ "absdif \0"
  /* 673 */ "q31tof \0"
  /* 681 */ "itof \0"
  /* 687 */ "hptof \0"
  /* 694 */ "utof \0"
  /* 700 */ "sha.h \0"
  /* 707 */ "msub.h \0"
  /* 715 */ "msubad.h \0"
  /* 725 */ "madd.h \0"
  /* 733 */ "ld.h \0"
  /* 739 */ "absdif.h \0"
  /* 749 */ "sh.h \0"
  /* 755 */ "mul.h \0"
  /* 762 */ "msubm.h \0"
  /* 771 */ "msubadm.h \0"
  /* 782 */ "maddm.h \0"
  /* 791 */ "mulm.h \0"
  /* 799 */ "maddsum.h \0"
  /* 810 */ "min.h \0"
  /* 817 */ "clo.h \0"
  /* 824 */ "eq.h \0"
  /* 830 */ "msubr.h \0"
  /* 839 */ "msubadr.h \0"
  /* 850 */ "maddr.h \0"
  /* 859 */ "mulr.h \0"
  /* 867 */ "maddsur.h \0"
  /* 878 */ "abs.h \0"
  /* 885 */ "msubs.h \0"
  /* 894 */ "msubads.h \0"
  /* 905 */ "madds.h \0"
  /* 914 */ "absdifs.h \0"
  /* 925 */ "cls.h \0"
  /* 932 */ "msubms.h \0"
  /* 942 */ "msubadms.h \0"
  /* 954 */ "maddms.h \0"
  /* 964 */ "maddsums.h \0"
  /* 976 */ "msubrs.h \0"
  /* 986 */ "msubadrs.h \0"
  /* 998 */ "maddrs.h \0"
  /* 1008 */ "maddsurs.h \0"
  /* 1020 */ "abss.h \0"
  /* 1028 */ "maddsus.h \0"
  /* 1039 */ "sat.h \0"
  /* 1046 */ "dvinit.h \0"
  /* 1056 */ "lt.h \0"
  /* 1062 */ "st.h \0"
  /* 1068 */ "maddsu.h \0"
  /* 1078 */ "max.h \0"
  /* 1085 */ "eqany.h \0"
  /* 1094 */ "clz.h \0"
  /* 1101 */ "addih \0"
  /* 1108 */ "sh \0"
  /* 1112 */ "movh \0"
  /* 1118 */ "addi \0"
  /* 1124 */ "jnei \0"
  /* 1130 */ "ji \0"
  /* 1134 */ "jli \0"
  /* 1139 */ "fcalli \0"
  /* 1147 */ "ftoi \0"
  /* 1153 */ "dvadj \0"
  /* 1160 */ "unpack \0"
  /* 1168 */ "imask \0"
  /* 1175 */ "sel \0"
  /* 1180 */ "updfl \0"
  /* 1187 */ "jl \0"
  /* 1191 */ "fcall \0"
  /* 1198 */ "syscall \0"
  /* 1207 */ "mul \0"
  /* 1212 */ "crcn \0"
  /* 1218 */ "caddn \0"
  /* 1225 */ "andn \0"
  /* 1231 */ "ixmin \0"
  /* 1238 */ "seln \0"
  /* 1244 */ "orn \0"
  /* 1249 */ "cmovn \0"
  /* 1256 */ "clo \0"
  /* 1261 */ "dvstep \0"
  /* 1269 */ "ftohp \0"
  /* 1276 */ "loop \0"
  /* 1282 */ "msub.q \0"
  /* 1290 */ "madd.q \0"
  /* 1298 */ "ld.q \0"
  /* 1304 */ "mul.q \0"
  /* 1311 */ "msubr.q \0"
  /* 1320 */ "maddr.q \0"
  /* 1329 */ "mulr.q \0"
  /* 1337 */ "msubs.q \0"
  /* 1346 */ "madds.q \0"
  /* 1355 */ "msubrs.q \0"
  /* 1365 */ "maddrs.q \0"
  /* 1375 */ "st.q \0"
  /* 1381 */ "and.eq \0"
  /* 1389 */ "sh.eq \0"
  /* 1396 */ "xor.eq \0"
  /* 1404 */ "jeq \0"
  /* 1409 */ "mfcr \0"
  /* 1415 */ "mtcr \0"
  /* 1421 */ "xnor \0"
  /* 1427 */ "xor \0"
  /* 1432 */ "bisr \0"
  /* 1438 */ "dextr \0"
  /* 1445 */ "shas \0"
  /* 1451 */ "abs \0"
  /* 1456 */ "msubs \0"
  /* 1463 */ "rsubs \0"
  /* 1470 */ "madds \0"
  /* 1477 */ "absdifs \0"
  /* 1486 */ "cls \0"
  /* 1491 */ "muls \0"
  /* 1497 */ "abss \0"
  /* 1503 */ "and.and.t \0"
  /* 1514 */ "sh.and.t \0"
  /* 1524 */ "or.and.t \0"
  /* 1534 */ "sh.nand.t \0"
  /* 1545 */ "and.andn.t \0"
  /* 1557 */ "sh.andn.t \0"
  /* 1568 */ "or.andn.t \0"
  /* 1579 */ "sh.orn.t \0"
  /* 1589 */ "insn.t \0"
  /* 1597 */ "and.or.t \0"
  /* 1607 */ "sh.or.t \0"
  /* 1616 */ "or.or.t \0"
  /* 1625 */ "and.nor.t \0"
  /* 1636 */ "sh.nor.t \0"
  /* 1646 */ "or.nor.t \0"
  /* 1656 */ "sh.xnor.t \0"
  /* 1667 */ "sh.xor.t \0"
  /* 1677 */ "ins.t \0"
  /* 1684 */ "st.t \0"
  /* 1690 */ "jz.t \0"
  /* 1696 */ "jnz.t \0"
  /* 1703 */ "addsc.at \0"
  /* 1713 */ "bsplit \0"
  /* 1721 */ "dvinit \0"
  /* 1729 */ "and.lt \0"
  /* 1737 */ "sh.lt \0"
  /* 1744 */ "xor.lt \0"
  /* 1752 */ "jlt \0"
  /* 1757 */ "not \0"
  /* 1762 */ "insert \0"
  /* 1770 */ "ldmst \0"
  /* 1777 */ "madd.u \0"
  /* 1785 */ "and.ge.u \0"
  /* 1795 */ "sh.ge.u \0"
  /* 1804 */ "xor.ge.u \0"
  /* 1814 */ "jge.u \0"
  /* 1821 */ "mul.u \0"
  /* 1828 */ "ixmin.u \0"
  /* 1837 */ "dvstep.u \0"
  /* 1847 */ "extr.u \0"
  /* 1855 */ "rsubs.u \0"
  /* 1864 */ "madds.u \0"
  /* 1873 */ "muls.u \0"
  /* 1881 */ "dvinit.u \0"
  /* 1891 */ "and.lt.u \0"
  /* 1901 */ "sh.lt.u \0"
  /* 1910 */ "xor.lt.u \0"
  /* 1920 */ "jlt.u \0"
  /* 1927 */ "div.u \0"
  /* 1934 */ "mov.u \0"
  /* 1941 */ "ixmax.u \0"
  /* 1950 */ "ld.bu \0"
  /* 1957 */ "min.bu \0"
  /* 1965 */ "sat.bu \0"
  /* 1973 */ "dvinit.bu \0"
  /* 1984 */ "lt.bu \0"
  /* 1991 */ "max.bu \0"
  /* 1999 */ "ld.hu \0"
  /* 2006 */ "min.hu \0"
  /* 2014 */ "subs.hu \0"
  /* 2023 */ "adds.hu \0"
  /* 2032 */ "sat.hu \0"
  /* 2040 */ "dvinit.hu \0"
  /* 2051 */ "lt.hu \0"
  /* 2058 */ "max.hu \0"
  /* 2066 */ "ftou \0"
  /* 2072 */ "loopu \0"
  /* 2079 */ "lt.wu \0"
  /* 2086 */ "div \0"
  /* 2091 */ "cmov \0"
  /* 2097 */ "crc32b.w \0"
  /* 2107 */ "ld.w \0"
  /* 2113 */ "swapmsk.w \0"
  /* 2124 */ "crc32l.w \0"
  /* 2134 */ "swap.w \0"
  /* 2142 */ "eq.w \0"
  /* 2148 */ "lt.w \0"
  /* 2154 */ "popcnt.w \0"
  /* 2164 */ "st.w \0"
  /* 2170 */ "ixmax \0"
  /* 2177 */ "subx \0"
  /* 2183 */ "ldlcx \0"
  /* 2190 */ "stlcx \0"
  /* 2197 */ "lducx \0"
  /* 2204 */ "stucx \0"
  /* 2211 */ "addx \0"
  /* 2217 */ "parity \0"
  /* 2225 */ "ftoq31z \0"
  /* 2234 */ "jgez \0"
  /* 2240 */ "jlez \0"
  /* 2246 */ "ftoiz \0"
  /* 2253 */ "jz \0"
  /* 2257 */ "clz \0"
  /* 2262 */ "jnz \0"
  /* 2267 */ "jgtz \0"
  /* 2273 */ "jltz \0"
  /* 2279 */ "ftouz \0"
  /* 2286 */ "CMPSWAP.W [+\0"
  /* 2299 */ "cache.i [+\0"
  /* 2310 */ "cachei.i [+\0"
  /* 2322 */ "cache.wi [+\0"
  /* 2334 */ "cachei.wi [+\0"
  /* 2347 */ "ldmst [+\0"
  /* 2356 */ "cache.w [+\0"
  /* 2367 */ "cachei.w [+\0"
  /* 2379 */ "# XRay Function Patchable RET.\0"
  /* 2410 */ "# XRay Typed Event Log.\0"
  /* 2434 */ "# XRay Custom Event Log.\0"
  /* 2459 */ "# XRay Function Enter.\0"
  /* 2482 */ "# XRay Tail Call Exit.\0"
  /* 2505 */ "# XRay Function Exit.\0"
  /* 2527 */ "LIFETIME_END\0"
  /* 2540 */ "PSEUDO_PROBE\0"
  /* 2553 */ "BUNDLE\0"
  /* 2560 */ "DBG_VALUE\0"
  /* 2570 */ "DBG_INSTR_REF\0"
  /* 2584 */ "DBG_PHI\0"
  /* 2592 */ "DBG_LABEL\0"
  /* 2602 */ "LIFETIME_START\0"
  /* 2617 */ "DBG_VALUE_LIST\0"
  /* 2632 */ "ld.a %a15, [\0"
  /* 2645 */ "ld.h %d15, [\0"
  /* 2658 */ "ld.bu %d15, [\0"
  /* 2672 */ "ld.w %d15, [\0"
  /* 2685 */ "CMPSWAP.W [\0"
  /* 2697 */ "st.a [\0"
  /* 2704 */ "st.da [\0"
  /* 2712 */ "st.b [\0"
  /* 2719 */ "st.d [\0"
  /* 2726 */ "st.h [\0"
  /* 2733 */ "cache.i [\0"
  /* 2743 */ "cachei.i [\0"
  /* 2754 */ "cache.wi [\0"
  /* 2765 */ "cachei.wi [\0"
  /* 2777 */ "st.q [\0"
  /* 2784 */ "ldmst [\0"
  /* 2792 */ "cache.w [\0"
  /* 2802 */ "cachei.w [\0"
  /* 2813 */ "swapmsk.w [\0"
  /* 2825 */ "swap.w [\0"
  /* 2834 */ "st.w [\0"
  /* 2841 */ "ldlcx [\0"
  /* 2849 */ "stlcx [\0"
  /* 2857 */ "lducx [\0"
  /* 2865 */ "stucx [\0"
  /* 2873 */ "st.a [%a15]\0"
  /* 2885 */ "st.b [%a15]\0"
  /* 2897 */ "st.h [%a15]\0"
  /* 2909 */ "st.w [%a15]\0"
  /* 2921 */ "sub.a\0"
  /* 2927 */ "add.a\0"
  /* 2933 */ "mov.a\0"
  /* 2939 */ "dsync\0"
  /* 2945 */ "isync\0"
  /* 2951 */ "rfe\0"
  /* 2955 */ "enable\0"
  /* 2962 */ "disable\0"
  /* 2970 */ "restore\0"
  /* 2978 */ "debug\0"
  /* 2984 */ "relck\0"
  /* 2990 */ "# FEntry call\0"
  /* 3004 */ "rfm\0"
  /* 3008 */ "nop\0"
  /* 3012 */ "fret\0"
  /* 3017 */ "wait\0"
  /* 3022 */ "trapv\0"
  /* 3028 */ "trapsv\0"
  /* 3035 */ "svlcx\0"
};
  static const uint32_t OpInfo0[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// INLINEASM_BR
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    2561U,	// DBG_VALUE
    2618U,	// DBG_VALUE_LIST
    2571U,	// DBG_INSTR_REF
    2585U,	// DBG_PHI
    2593U,	// DBG_LABEL
    0U,	// REG_SEQUENCE
    0U,	// COPY
    2554U,	// BUNDLE
    2603U,	// LIFETIME_START
    2528U,	// LIFETIME_END
    2541U,	// PSEUDO_PROBE
    0U,	// ARITH_FENCE
    0U,	// STACKMAP
    2991U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// PREALLOCATED_SETUP
    0U,	// PREALLOCATED_ARG
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    2460U,	// PATCHABLE_FUNCTION_ENTER
    2380U,	// PATCHABLE_RET
    2506U,	// PATCHABLE_FUNCTION_EXIT
    2483U,	// PATCHABLE_TAIL_CALL
    2435U,	// PATCHABLE_EVENT_CALL
    2411U,	// PATCHABLE_TYPED_EVENT_CALL
    0U,	// ICALL_BRANCH_FUNNEL
    0U,	// G_ASSERT_SEXT
    0U,	// G_ASSERT_ZEXT
    0U,	// G_ASSERT_ALIGN
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_SDIVREM
    0U,	// G_UDIVREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_BUILD_VECTOR
    0U,	// G_BUILD_VECTOR_TRUNC
    0U,	// G_CONCAT_VECTORS
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_FREEZE
    0U,	// G_INTRINSIC_FPTRUNC_ROUND
    0U,	// G_INTRINSIC_TRUNC
    0U,	// G_INTRINSIC_ROUND
    0U,	// G_INTRINSIC_LRINT
    0U,	// G_INTRINSIC_ROUNDEVEN
    0U,	// G_READCYCLECOUNTER
    0U,	// G_LOAD
    0U,	// G_SEXTLOAD
    0U,	// G_ZEXTLOAD
    0U,	// G_INDEXED_LOAD
    0U,	// G_INDEXED_SEXTLOAD
    0U,	// G_INDEXED_ZEXTLOAD
    0U,	// G_STORE
    0U,	// G_INDEXED_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_ATOMICRMW_FADD
    0U,	// G_ATOMICRMW_FSUB
    0U,	// G_ATOMICRMW_FMAX
    0U,	// G_ATOMICRMW_FMIN
    0U,	// G_FENCE
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INVOKE_REGION_START
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_SEXT_INREG
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_FSHL
    0U,	// G_FSHR
    0U,	// G_ROTR
    0U,	// G_ROTL
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDO
    0U,	// G_UADDE
    0U,	// G_USUBO
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SADDE
    0U,	// G_SSUBO
    0U,	// G_SSUBE
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_UADDSAT
    0U,	// G_SADDSAT
    0U,	// G_USUBSAT
    0U,	// G_SSUBSAT
    0U,	// G_USHLSAT
    0U,	// G_SSHLSAT
    0U,	// G_SMULFIX
    0U,	// G_UMULFIX
    0U,	// G_SMULFIXSAT
    0U,	// G_UMULFIXSAT
    0U,	// G_SDIVFIX
    0U,	// G_UDIVFIX
    0U,	// G_SDIVFIXSAT
    0U,	// G_UDIVFIXSAT
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FMAD
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FPOWI
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FLOG10
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_FABS
    0U,	// G_FCOPYSIGN
    0U,	// G_IS_FPCLASS
    0U,	// G_FCANONICALIZE
    0U,	// G_FMINNUM
    0U,	// G_FMAXNUM
    0U,	// G_FMINNUM_IEEE
    0U,	// G_FMAXNUM_IEEE
    0U,	// G_FMINIMUM
    0U,	// G_FMAXIMUM
    0U,	// G_PTR_ADD
    0U,	// G_PTRMASK
    0U,	// G_SMIN
    0U,	// G_SMAX
    0U,	// G_UMIN
    0U,	// G_UMAX
    0U,	// G_ABS
    0U,	// G_LROUND
    0U,	// G_LLROUND
    0U,	// G_BR
    0U,	// G_BRJT
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_CTTZ
    0U,	// G_CTTZ_ZERO_UNDEF
    0U,	// G_CTLZ
    0U,	// G_CTLZ_ZERO_UNDEF
    0U,	// G_CTPOP
    0U,	// G_BSWAP
    0U,	// G_BITREVERSE
    0U,	// G_FCEIL
    0U,	// G_FCOS
    0U,	// G_FSIN
    0U,	// G_FSQRT
    0U,	// G_FFLOOR
    0U,	// G_FRINT
    0U,	// G_FNEARBYINT
    0U,	// G_ADDRSPACE_CAST
    0U,	// G_BLOCK_ADDR
    0U,	// G_JUMP_TABLE
    0U,	// G_DYN_STACKALLOC
    0U,	// G_STRICT_FADD
    0U,	// G_STRICT_FSUB
    0U,	// G_STRICT_FMUL
    0U,	// G_STRICT_FDIV
    0U,	// G_STRICT_FREM
    0U,	// G_STRICT_FMA
    0U,	// G_STRICT_FSQRT
    0U,	// G_READ_REGISTER
    0U,	// G_WRITE_REGISTER
    0U,	// G_MEMCPY
    0U,	// G_MEMCPY_INLINE
    0U,	// G_MEMMOVE
    0U,	// G_MEMSET
    0U,	// G_BZERO
    0U,	// G_VECREDUCE_SEQ_FADD
    0U,	// G_VECREDUCE_SEQ_FMUL
    0U,	// G_VECREDUCE_FADD
    0U,	// G_VECREDUCE_FMUL
    0U,	// G_VECREDUCE_FMAX
    0U,	// G_VECREDUCE_FMIN
    0U,	// G_VECREDUCE_ADD
    0U,	// G_VECREDUCE_MUL
    0U,	// G_VECREDUCE_AND
    0U,	// G_VECREDUCE_OR
    0U,	// G_VECREDUCE_XOR
    0U,	// G_VECREDUCE_SMAX
    0U,	// G_VECREDUCE_SMIN
    0U,	// G_VECREDUCE_UMAX
    0U,	// G_VECREDUCE_UMIN
    0U,	// G_SBFX
    0U,	// G_UBFX
    5011U,	// ABSDIFS_H_rr
    5574U,	// ABSDIFS_rc
    5574U,	// ABSDIFS_rr
    4493U,	// ABSDIF_B_rr
    4836U,	// ABSDIF_H_rr
    268440218U,	// ABSDIF_rc
    4762U,	// ABSDIF_rr
    5117U,	// ABSS_H_rr
    5594U,	// ABSS_rr
    16781732U,	// ABS_B_rr
    16782191U,	// ABS_H_rr
    16782764U,	// ABS_rr
    268440048U,	// ADDC_rc
    4592U,	// ADDC_rr
    536875252U,	// ADDIH_A_rlc
    536876110U,	// ADDIH_rlc
    536876127U,	// ADDI_rlc
    5800U,	// ADDSC_AT_rr
    806359249U,	// ADDSC_A_rr
    33558737U,	// ADDSC_A_srrs
    5003U,	// ADDS_H
    6120U,	// ADDS_HU
    5962U,	// ADDS_U
    268441418U,	// ADDS_U_rc
    268441024U,	// ADDS_rc
    5568U,	// ADDS_rr
    16782784U,	// ADDS_srr
    268441764U,	// ADDX_rc
    6308U,	// ADDX_rr
    2928U,	// ADD_A_rr
    2101466U,	// ADD_A_src
    16781530U,	// ADD_A_srr
    4480U,	// ADD_B_rr
    806359669U,	// ADD_F_rrr
    4823U,	// ADD_H_rr
    268440074U,	// ADD_rc
    4618U,	// ADD_rr
    2101770U,	// ADD_src
    2101260U,	// ADD_src_15a
    2167306U,	// ADD_src_a15
    16781834U,	// ADD_srr
    16781324U,	// ADD_srr_15a
    16847370U,	// ADD_srr_a15
    1073747470U,	// ANDN_T
    268440778U,	// ANDN_rc
    5322U,	// ANDN_rr
    1073747466U,	// AND_ANDN_T
    1073747424U,	// AND_AND_T
    268440934U,	// AND_EQ_rc
    5478U,	// AND_EQ_rr
    268441338U,	// AND_GE_U_rc
    5882U,	// AND_GE_U_rr
    268440097U,	// AND_GE_rc
    4641U,	// AND_GE_rr
    268441444U,	// AND_LT_U_rc
    5988U,	// AND_LT_U_rr
    268441282U,	// AND_LT_rc
    5826U,	// AND_LT_rr
    268440151U,	// AND_NE_rc
    4695U,	// AND_NE_rr
    1073747546U,	// AND_NOR_T
    1073747518U,	// AND_OR_T
    1073747428U,	// AND_T
    268440092U,	// AND_rc
    4636U,	// AND_rr
    139287U,	// AND_src
    16781852U,	// AND_srr
    13721U,	// BISR_rc
    140697U,	// BISR_sc
    4669U,	// BMAERGE_rr
    16783026U,	// BSPLIT_rr
    3349176U,	// CACHEI_I_bo_bso
    3414712U,	// CACHEI_I_bo_pos
    3348743U,	// CACHEI_I_bo_pre
    3349198U,	// CACHEI_WI_bo_bso
    3414734U,	// CACHEI_WI_bo_pos
    3348767U,	// CACHEI_WI_bo_pre
    3349235U,	// CACHEI_W_bo_bso
    334579U,	// CACHEI_W_bo_c
    3414771U,	// CACHEI_W_bo_pos
    3348800U,	// CACHEI_W_bo_pre
    400115U,	// CACHEI_W_bo_r
    3349166U,	// CACHE_I_bo_bso
    334510U,	// CACHE_I_bo_c
    3414702U,	// CACHE_I_bo_pos
    3348732U,	// CACHE_I_bo_pre
    400046U,	// CACHE_I_bo_r
    3349187U,	// CACHE_WI_bo_bso
    334531U,	// CACHE_WI_bo_c
    3414723U,	// CACHE_WI_bo_pos
    3348755U,	// CACHE_WI_bo_pre
    400067U,	// CACHE_WI_bo_r
    3349225U,	// CACHE_W_bo_bso
    334569U,	// CACHE_W_bo_c
    3414761U,	// CACHE_W_bo_pos
    3348789U,	// CACHE_W_bo_pre
    400105U,	// CACHE_W_bo_r
    806360259U,	// CADDN_rcr
    4199619U,	// CADDN_rrr
    2168003U,	// CADDN_src
    806359561U,	// CADD_rcr
    4198921U,	// CADD_rrr
    2167305U,	// CADD_src
    16745U,	// CALLA_b
    152693U,	// CALLI_rr
    17577U,	// CALL_b
    25769U,	// CALL_sb
    16782130U,	// CLO_H_rr
    16782569U,	// CLO_rr
    16782238U,	// CLS_H_rr
    16782799U,	// CLS_rr
    16782407U,	// CLZ_H_rr
    16783570U,	// CLZ_rr
    2168034U,	// CMOVN_src
    16848098U,	// CMOVN_srr
    2168876U,	// CMOV_src
    16848940U,	// CMOV_srr
    5462654U,	// CMPSWAP_W_bo_bso
    5462654U,	// CMPSWAP_W_bo_c
    5528190U,	// CMPSWAP_W_bo_pos
    5462255U,	// CMPSWAP_W_bo_pre
    23089350U,	// CMPSWAP_W_bo_r
    4748U,	// CMP_F_rr
    806361138U,	// CRC32B_W_rr
    806361165U,	// CRC32L_W_rr
    806359408U,	// CRC32_B_rr
    4199613U,	// CRCN_rrr
    4198872U,	// CSUBN_rrr
    4198872U,	// CSUB_rrr
    2979U,	// DEBUG_sr
    2979U,	// DEBUG_sys
    5535U,	// DEXTR_rrpw
    5535U,	// DEXTR_rrrr
    2963U,	// DISABLE_sys
    135749U,	// DISABLE_sys_1
    4755U,	// DIV_F_rr
    6024U,	// DIV_U_rr
    6183U,	// DIV_rr
    2940U,	// DSYNC_sys
    806360194U,	// DVADJ_rrr
    6070U,	// DVINIT_BU_rr
    4530U,	// DVINIT_B_rr
    6137U,	// DVINIT_HU_rr
    5143U,	// DVINIT_H_rr
    5978U,	// DVINIT_U_rr
    5818U,	// DVINIT_rr
    806360878U,	// DVSTEP_U_rrr
    806360302U,	// DVSTEP_rrr
    2956U,	// ENABLE_sys
    268440015U,	// EQANY_B_rc
    4559U,	// EQANY_B_rr
    268440638U,	// EQANY_H_rc
    5182U,	// EQANY_H_rr
    16781619U,	// EQZ_A_rr
    4358U,	// EQ_A_rr
    4510U,	// EQ_B_rr
    4921U,	// EQ_H_rr
    6239U,	// EQ_W_rr
    268440938U,	// EQ_rc
    5482U,	// EQ_rr
    2101294U,	// EQ_src
    16781358U,	// EQ_srr
    5944U,	// EXTR_U_rrpw
    5944U,	// EXTR_U_rrrr
    5944U,	// EXTR_U_rrrw
    5536U,	// EXTR_rrpw
    5536U,	// EXTR_rrrr
    5536U,	// EXTR_rrrw
    16744U,	// FCALLA_b
    152692U,	// FCALLA_i
    17576U,	// FCALL_b
    3013U,	// FRET_sr
    3013U,	// FRET_sys
    16782582U,	// FTOHP_rr
    16783559U,	// FTOIZ_rr
    16782460U,	// FTOI_rr
    6322U,	// FTOQ31Z_rr
    4286U,	// FTOQ31_rr
    16783592U,	// FTOUZ_rr
    16783379U,	// FTOU_rr
    4327U,	// GE_A_rr
    268441342U,	// GE_U_rc
    5886U,	// GE_U_rr
    268440101U,	// GE_rc
    4645U,	// GE_rr
    16782000U,	// HPTOF_rr
    5265U,	// IMASK_rcpw
    5265U,	// IMASK_rcrw
    5265U,	// IMASK_rrpw
    5265U,	// IMASK_rrrw
    5859U,	// INSERT_rcpw
    5859U,	// INSERT_rcrr
    5859U,	// INSERT_rcrw
    5859U,	// INSERT_rrpw
    5859U,	// INSERT_rrrr
    5859U,	// INSERT_rrrw
    1073747510U,	// INSN_T
    1073747598U,	// INS_T
    2946U,	// ISYNC_sys
    16781994U,	// ITOF_rr
    806360982U,	// IXMAX_U_rrr
    806361211U,	// IXMAX_rrr
    806360869U,	// IXMIN_U_rrr
    806360272U,	// IXMIN_rrr
    16735U,	// JA_b
    1342181637U,	// JEQ_A_brr
    1349522813U,	// JEQ_brc
    1342182781U,	// JEQ_brr
    28717U,	// JEQ_sbc1
    28717U,	// JEQ_sbc2
    8392749U,	// JEQ_sbr1
    8392749U,	// JEQ_sbr2
    8394939U,	// JGEZ_sbr
    1349523223U,	// JGE_U_brc
    1342183191U,	// JGE_U_brr
    1349521976U,	// JGE_brc
    1342181944U,	// JGE_brr
    8394972U,	// JGTZ_sbr
    152683U,	// JI_rr
    136299U,	// JI_sr
    16739U,	// JLA_b
    8394945U,	// JLEZ_sbr
    152687U,	// JLI_rr
    8394978U,	// JLTZ_sbr
    1349523329U,	// JLT_U_brc
    1342183297U,	// JLT_U_brr
    1349523161U,	// JLT_brc
    1342183129U,	// JLT_brr
    17572U,	// JL_b
    1349521941U,	// JNED_brc
    1342181909U,	// JNED_brr
    1349522533U,	// JNEI_brc
    1342182501U,	// JNEI_brr
    1342181613U,	// JNE_A_brr
    1349522023U,	// JNE_brc
    1342181991U,	// JNE_brr
    28706U,	// JNE_sbc1
    28706U,	// JNE_sbc2
    8392738U,	// JNE_sbr1
    8392738U,	// JNE_sbr2
    1342181676U,	// JNZ_A_brr
    8393004U,	// JNZ_A_sbr
    1342183073U,	// JNZ_T_brn
    8392782U,	// JNZ_T_sbrn
    24698U,	// JNZ_sb
    8394967U,	// JNZ_sbr
    1342181670U,	// JZ_A_brr
    8392998U,	// JZ_A_sbr
    1342183067U,	// JZ_T_brn
    8392770U,	// JZ_T_sbrn
    24688U,	// JZ_sb
    8394958U,	// JZ_sbr
    17542U,	// J_b
    25734U,	// J_sb
    166024U,	// LDLCX_abs
    3349274U,	// LDLCX_bo_bso
    38635U,	// LDMST_abs
    5462753U,	// LDMST_bo_bso
    5462753U,	// LDMST_bo_c
    5528289U,	// LDMST_bo_pos
    5462316U,	// LDMST_bo_pre
    23090923U,	// LDMST_bo_r
    166038U,	// LDUCX_abs
    3349290U,	// LDUCX_bo_bso
    9441505U,	// LD_A_abs
    1661407457U,	// LD_A_bo_bso
    67571937U,	// LD_A_bo_c
    1694961889U,	// LD_A_bo_pos
    1661472993U,	// LD_A_bo_pre
    101126369U,	// LD_A_bo_r
    50794721U,	// LD_A_bol
    139397U,	// LD_A_sc
    1929842913U,	// LD_A_slr
    1963397345U,	// LD_A_slr_post
    594145U,	// LD_A_slro
    24320585U,	// LD_A_sro
    9443231U,	// LD_BU_abs
    1661409183U,	// LD_BU_bo_bso
    67573663U,	// LD_BU_bo_c
    1694963615U,	// LD_BU_bo_pos
    1661474719U,	// LD_BU_bo_pre
    101128095U,	// LD_BU_bo_r
    50796447U,	// LD_BU_bol
    1929844639U,	// LD_BU_slr
    1963399071U,	// LD_BU_slr_post
    595871U,	// LD_BU_slro
    24320611U,	// LD_BU_sro
    9441671U,	// LD_B_abs
    1661407623U,	// LD_B_bo_bso
    67572103U,	// LD_B_bo_c
    1694962055U,	// LD_B_bo_pos
    1661473159U,	// LD_B_bo_pre
    101126535U,	// LD_B_bo_r
    50794887U,	// LD_B_bol
    9441602U,	// LD_DA_abs
    1661407554U,	// LD_DA_bo_bso
    67572034U,	// LD_DA_bo_c
    1694961986U,	// LD_DA_bo_pos
    1661473090U,	// LD_DA_bo_pre
    101126466U,	// LD_DA_bo_r
    9441782U,	// LD_D_abs
    1661407734U,	// LD_D_bo_bso
    67572214U,	// LD_D_bo_c
    1694962166U,	// LD_D_bo_pos
    1661473270U,	// LD_D_bo_pre
    101126646U,	// LD_D_bo_r
    9443280U,	// LD_HU_abs
    1661409232U,	// LD_HU_bo_bso
    67573712U,	// LD_HU_bo_c
    1694963664U,	// LD_HU_bo_pos
    1661474768U,	// LD_HU_bo_pre
    101128144U,	// LD_HU_bo_r
    50796496U,	// LD_HU_bol
    9442014U,	// LD_H_abs
    1661407966U,	// LD_H_bo_bso
    67572446U,	// LD_H_bo_c
    1694962398U,	// LD_H_bo_pos
    1661473502U,	// LD_H_bo_pre
    101126878U,	// LD_H_bo_r
    50795230U,	// LD_H_bol
    1929843422U,	// LD_H_slr
    1963397854U,	// LD_H_slr_post
    594654U,	// LD_H_slro
    24320598U,	// LD_H_sro
    9442579U,	// LD_Q_abs
    1661408531U,	// LD_Q_bo_bso
    67573011U,	// LD_Q_bo_c
    1694962963U,	// LD_Q_bo_pos
    1661474067U,	// LD_Q_bo_pre
    101127443U,	// LD_Q_bo_r
    9443388U,	// LD_W_abs
    1661409340U,	// LD_W_bo_bso
    67573820U,	// LD_W_bo_c
    1694963772U,	// LD_W_bo_pos
    1661474876U,	// LD_W_bo_pre
    101128252U,	// LD_W_bo_r
    50796604U,	// LD_W_bol
    139414U,	// LD_W_sc
    1929844796U,	// LD_W_slr
    1963399228U,	// LD_W_slr_post
    596028U,	// LD_W_slro
    24320625U,	// LD_W_sro
    9441616U,	// LEA_abs
    1661407568U,	// LEA_bo_bso
    50794832U,	// LEA_bol
    9441621U,	// LHA_abs
    43033U,	// LOOPU_brr
    10491133U,	// LOOP_brr
    8393981U,	// LOOP_sbr
    4364U,	// LT_A_rr
    4540U,	// LT_B
    6081U,	// LT_BU
    5153U,	// LT_H
    6148U,	// LT_HU
    268441448U,	// LT_U_rc
    5992U,	// LT_U_rr
    6245U,	// LT_W
    6176U,	// LT_WU
    268441286U,	// LT_rc
    5830U,	// LT_rr
    2101339U,	// LT_src
    16781403U,	// LT_srr
    4199355U,	// MADDMS_H_rrr1_LL
    4199355U,	// MADDMS_H_rrr1_LU
    4199355U,	// MADDMS_H_rrr1_UL
    4199355U,	// MADDMS_H_rrr1_UU
    4199183U,	// MADDM_H_rrr1_LL
    4199183U,	// MADDM_H_rrr1_LU
    4199183U,	// MADDM_H_rrr1_UL
    4199183U,	// MADDM_H_rrr1_UU
    4199399U,	// MADDRS_H_rrr1_DcEdDaDbUL
    4199399U,	// MADDRS_H_rrr1_LL
    4199399U,	// MADDRS_H_rrr1_LU
    4199399U,	// MADDRS_H_rrr1_UL
    4199399U,	// MADDRS_H_rrr1_UU
    2269123926U,	// MADDRS_Q_rrr1_L_L
    2285901142U,	// MADDRS_Q_rrr1_U_U
    4199251U,	// MADDR_H_rrr1_DcEdDaDbUL
    4199251U,	// MADDR_H_rrr1_LL
    4199251U,	// MADDR_H_rrr1_LU
    4199251U,	// MADDR_H_rrr1_UL
    4199251U,	// MADDR_H_rrr1_UU
    2269123881U,	// MADDR_Q_rrr1_L_L
    2285901097U,	// MADDR_Q_rrr1_U_U
    4199365U,	// MADDSUMS_H_rrr1_LL
    4199365U,	// MADDSUMS_H_rrr1_LU
    4199365U,	// MADDSUMS_H_rrr1_UL
    4199365U,	// MADDSUMS_H_rrr1_UU
    4199200U,	// MADDSUM_H_rrr1_LL
    4199200U,	// MADDSUM_H_rrr1_LU
    4199200U,	// MADDSUM_H_rrr1_UL
    4199200U,	// MADDSUM_H_rrr1_UU
    4199409U,	// MADDSURS_H_rrr1_LL
    4199409U,	// MADDSURS_H_rrr1_LU
    4199409U,	// MADDSURS_H_rrr1_UL
    4199409U,	// MADDSURS_H_rrr1_UU
    4199268U,	// MADDSUR_H_rrr1_LL
    4199268U,	// MADDSUR_H_rrr1_LU
    4199268U,	// MADDSUR_H_rrr1_UL
    4199268U,	// MADDSUR_H_rrr1_UU
    4199429U,	// MADDSUS_H_rrr1_LL
    4199429U,	// MADDSUS_H_rrr1_LU
    4199429U,	// MADDSUS_H_rrr1_UL
    4199429U,	// MADDSUS_H_rrr1_UU
    4199469U,	// MADDSU_H_rrr1_LL
    4199469U,	// MADDSU_H_rrr1_LU
    4199469U,	// MADDSU_H_rrr1_UL
    4199469U,	// MADDSU_H_rrr1_UU
    4199306U,	// MADDS_H_rrr1_LL
    4199306U,	// MADDS_H_rrr1_LU
    4199306U,	// MADDS_H_rrr1_UL
    4199306U,	// MADDS_H_rrr1_UU
    4199747U,	// MADDS_Q_rrr1
    4199747U,	// MADDS_Q_rrr1_L
    2269123907U,	// MADDS_Q_rrr1_L_L
    4199747U,	// MADDS_Q_rrr1_U
    2285901123U,	// MADDS_Q_rrr1_U_U
    4199747U,	// MADDS_Q_rrr1_e
    4199747U,	// MADDS_Q_rrr1_e_L
    2269123907U,	// MADDS_Q_rrr1_e_L_L
    4199747U,	// MADDS_Q_rrr1_e_U
    2285901123U,	// MADDS_Q_rrr1_e_U_U
    806360905U,	// MADDS_U_rcr
    806360905U,	// MADDS_U_rcr_e
    4200265U,	// MADDS_U_rrr2
    4200265U,	// MADDS_U_rrr2_e
    806360511U,	// MADDS_rcr
    806360511U,	// MADDS_rcr_e
    4199871U,	// MADDS_rrr2
    4199871U,	// MADDS_rrr2_e
    4199028U,	// MADD_F_rrr
    4199126U,	// MADD_H_rrr1_LL
    4199126U,	// MADD_H_rrr1_LU
    4199126U,	// MADD_H_rrr1_UL
    4199126U,	// MADD_H_rrr1_UU
    4199691U,	// MADD_Q_rrr1
    4199691U,	// MADD_Q_rrr1_L
    2269123851U,	// MADD_Q_rrr1_L_L
    4199691U,	// MADD_Q_rrr1_U
    2285901067U,	// MADD_Q_rrr1_U_U
    4199691U,	// MADD_Q_rrr1_e
    4199691U,	// MADD_Q_rrr1_e_L
    2269123851U,	// MADD_Q_rrr1_e_L_L
    4199691U,	// MADD_Q_rrr1_e_U
    2285901067U,	// MADD_Q_rrr1_e_U_U
    806360818U,	// MADD_U_rcr
    4200178U,	// MADD_U_rrr2
    806359567U,	// MADD_rcr
    806359567U,	// MADD_rcr_e
    4198927U,	// MADD_rrr2
    4198927U,	// MADD_rrr2_e
    4552U,	// MAX_B
    6088U,	// MAX_BU
    5175U,	// MAX_H
    6155U,	// MAX_HU
    268441496U,	// MAX_U_rc
    6040U,	// MAX_U_rr
    268441725U,	// MAX_rc
    6269U,	// MAX_rr
    11539842U,	// MFCR_rlc
    4503U,	// MIN_B
    6054U,	// MIN_BU
    4907U,	// MIN_H
    6103U,	// MIN_HU
    268441383U,	// MIN_U_rc
    5927U,	// MIN_U_rr
    268440786U,	// MIN_rc
    5330U,	// MIN_rr
    11538685U,	// MOVH_A_rlc
    11539545U,	// MOVH_rlc
    17830202U,	// MOV_AA_rr
    16781626U,	// MOV_AA_srr
    2934U,	// MOV_A_rr
    24121624U,	// MOV_A_src
    16781592U,	// MOV_A_srr
    17830402U,	// MOV_D_rr
    16781826U,	// MOV_D_srr
    11540367U,	// MOV_U_rlc
    11540525U,	// MOV_rlcDc
    11540525U,	// MOV_rlcEc
    17831981U,	// MOV_rrDcDb
    6189U,	// MOV_rrEcDaDb
    17831981U,	// MOV_rrEcDb
    139365U,	// MOV_sc
    2103341U,	// MOV_srcDa
    2103341U,	// MOV_srcEa
    16783405U,	// MOV_srr
    4199343U,	// MSUBADMS_H_rrr1_LL
    4199343U,	// MSUBADMS_H_rrr1_LU
    4199343U,	// MSUBADMS_H_rrr1_UL
    4199343U,	// MSUBADMS_H_rrr1_UU
    4199172U,	// MSUBADM_H_rrr1_LL
    4199172U,	// MSUBADM_H_rrr1_LU
    4199172U,	// MSUBADM_H_rrr1_UL
    4199172U,	// MSUBADM_H_rrr1_UU
    4199387U,	// MSUBADRS_H_rrr1_LL
    4199387U,	// MSUBADRS_H_rrr1_LU
    4199387U,	// MSUBADRS_H_rrr1_UL
    4199387U,	// MSUBADRS_H_rrr1_UU
    4199240U,	// MSUBADR_H_rrr1_LL
    4199240U,	// MSUBADR_H_rrr1_LU
    4199240U,	// MSUBADR_H_rrr1_UL
    4199240U,	// MSUBADR_H_rrr1_UU
    4199295U,	// MSUBADS_H_rrr1_LL
    4199295U,	// MSUBADS_H_rrr1_LU
    4199295U,	// MSUBADS_H_rrr1_UL
    4199295U,	// MSUBADS_H_rrr1_UU
    4199116U,	// MSUBAD_H_rrr1_LL
    4199116U,	// MSUBAD_H_rrr1_LU
    4199116U,	// MSUBAD_H_rrr1_UL
    4199116U,	// MSUBAD_H_rrr1_UU
    4199333U,	// MSUBMS_H_rrr1_LL
    4199333U,	// MSUBMS_H_rrr1_LU
    4199333U,	// MSUBMS_H_rrr1_UL
    4199333U,	// MSUBMS_H_rrr1_UU
    4199163U,	// MSUBM_H_rrr1_LL
    4199163U,	// MSUBM_H_rrr1_LU
    4199163U,	// MSUBM_H_rrr1_UL
    4199163U,	// MSUBM_H_rrr1_UU
    4199377U,	// MSUBRS_H_rrr1_DcEdDaDbUL
    4199377U,	// MSUBRS_H_rrr1_LL
    4199377U,	// MSUBRS_H_rrr1_LU
    4199377U,	// MSUBRS_H_rrr1_UL
    4199377U,	// MSUBRS_H_rrr1_UU
    2269123916U,	// MSUBRS_Q_rrr1_L_L
    2285901132U,	// MSUBRS_Q_rrr1_U_U
    4199231U,	// MSUBR_H_rrr1_DcEdDaDbUL
    4199231U,	// MSUBR_H_rrr1_LL
    4199231U,	// MSUBR_H_rrr1_LU
    4199231U,	// MSUBR_H_rrr1_UL
    4199231U,	// MSUBR_H_rrr1_UU
    2269123872U,	// MSUBR_Q_rrr1_L_L
    2285901088U,	// MSUBR_Q_rrr1_U_U
    4199286U,	// MSUBS_H_rrr1_LL
    4199286U,	// MSUBS_H_rrr1_LU
    4199286U,	// MSUBS_H_rrr1_UL
    4199286U,	// MSUBS_H_rrr1_UU
    4199738U,	// MSUBS_Q_rrr1
    4199738U,	// MSUBS_Q_rrr1_L
    2269123898U,	// MSUBS_Q_rrr1_L_L
    4199738U,	// MSUBS_Q_rrr1_U
    2285901114U,	// MSUBS_Q_rrr1_U_U
    4199738U,	// MSUBS_Q_rrr1_e
    4199738U,	// MSUBS_Q_rrr1_e_L
    2269123898U,	// MSUBS_Q_rrr1_e_L_L
    4199738U,	// MSUBS_Q_rrr1_e_U
    2285901114U,	// MSUBS_Q_rrr1_e_U_U
    806360905U,	// MSUBS_U_rcr
    806360905U,	// MSUBS_U_rcr_e
    4200265U,	// MSUBS_U_rrr2
    4200265U,	// MSUBS_U_rrr2_e
    806360497U,	// MSUBS_rcr
    806360497U,	// MSUBS_rcr_e
    4199857U,	// MSUBS_rrr2
    4199857U,	// MSUBS_rrr2_e
    4199020U,	// MSUB_F_rrr
    4199108U,	// MSUB_H_rrr1_LL
    4199108U,	// MSUB_H_rrr1_LU
    4199108U,	// MSUB_H_rrr1_UL
    4199108U,	// MSUB_H_rrr1_UU
    4199683U,	// MSUB_Q_rrr1
    4199683U,	// MSUB_Q_rrr1_L
    2269123843U,	// MSUB_Q_rrr1_L_L
    4199683U,	// MSUB_Q_rrr1_U
    2285901059U,	// MSUB_Q_rrr1_U_U
    4199683U,	// MSUB_Q_rrr1_e
    4199683U,	// MSUB_Q_rrr1_e_L
    2269123843U,	// MSUB_Q_rrr1_e_L_L
    4199683U,	// MSUB_Q_rrr1_e_U
    2285901059U,	// MSUB_Q_rrr1_e_U_U
    806360818U,	// MSUB_U_rcr
    4200178U,	// MSUB_U_rrr2
    806359518U,	// MSUB_rcr
    806359518U,	// MSUB_rcr_e
    4198878U,	// MSUB_rrr2
    4198878U,	// MSUB_rrr2_e
    46472U,	// MTCR_rlc
    4888U,	// MULM_H_rr1_LL2e
    4888U,	// MULM_H_rr1_LU2e
    4888U,	// MULM_H_rr1_UL2e
    4888U,	// MULM_H_rr1_UU2e
    4956U,	// MULR_H_rr1_LL2e
    4956U,	// MULR_H_rr1_LU2e
    4956U,	// MULR_H_rr1_UL2e
    4956U,	// MULR_H_rr1_UU2e
    2533365042U,	// MULR_Q_rr1_2LL
    2550142258U,	// MULR_Q_rr1_2UU
    268441426U,	// MULS_U_rc
    5970U,	// MULS_U_rr2
    268441044U,	// MULS_rc
    5588U,	// MULS_rr2
    4741U,	// MUL_F_rrr
    4852U,	// MUL_H_rr1_LL2e
    4852U,	// MUL_H_rr1_LU2e
    4852U,	// MUL_H_rr1_UL2e
    4852U,	// MUL_H_rr1_UU2e
    2533365017U,	// MUL_Q_rr1_2LL
    2550142233U,	// MUL_Q_rr1_2UU
    5401U,	// MUL_Q_rr1_2_L
    5401U,	// MUL_Q_rr1_2_Le
    5401U,	// MUL_Q_rr1_2_U
    5401U,	// MUL_Q_rr1_2_Ue
    5401U,	// MUL_Q_rr1_2__
    5401U,	// MUL_Q_rr1_2__e
    268441374U,	// MUL_U_rc
    5918U,	// MUL_U_rr2
    268440760U,	// MUL_rc
    268440760U,	// MUL_rc_e
    5304U,	// MUL_rr2
    5304U,	// MUL_rr2_e
    16782520U,	// MUL_srr
    1073747458U,	// NAND_T
    268440091U,	// NAND_rc
    4635U,	// NAND_rr
    16781599U,	// NEZ_A
    4334U,	// NE_A
    268440155U,	// NE_rc
    4699U,	// NE_rr
    3009U,	// NOP_sr
    3009U,	// NOP_sys
    1073747550U,	// NOR_T
    268440975U,	// NOR_rc
    5519U,	// NOR_rr
    136926U,	// NOT_sr
    1073747503U,	// ORN_T
    268440797U,	// ORN_rc
    5341U,	// ORN_rr
    1073747489U,	// OR_ANDN_T
    1073747445U,	// OR_AND_T
    268440950U,	// OR_EQ_rc
    5494U,	// OR_EQ_rr
    268441358U,	// OR_GE_U_rc
    5902U,	// OR_GE_U_rr
    268440113U,	// OR_GE_rc
    4657U,	// OR_GE_rr
    268441464U,	// OR_LT_U_rc
    6008U,	// OR_LT_U_rr
    268441298U,	// OR_LT_rc
    5842U,	// OR_LT_rr
    268440160U,	// OR_NE_rc
    4704U,	// OR_NE_rr
    1073747567U,	// OR_NOR_T
    1073747537U,	// OR_OR_T
    1073747522U,	// OR_T
    268440976U,	// OR_rc
    5520U,	// OR_rr
    139320U,	// OR_sc
    16782736U,	// OR_srr
    806360203U,	// PACK_rrr
    16783530U,	// PARITY_rr
    16783467U,	// POPCNT_W_rr
    4770U,	// Q31TOF_rr
    16781948U,	// QSEED_F_rr
    2971U,	// RESTORE_sys
    3014U,	// RET_sr
    3014U,	// RET_sys
    2952U,	// RFE_sr
    2952U,	// RFE_sys
    3005U,	// RFM_sys
    2985U,	// RSLCX_sys
    2971U,	// RSTV_sys
    268441408U,	// RSUBS_U_rc
    268441016U,	// RSUBS_rc
    268440036U,	// RSUB_rc
    135652U,	// RSUB_sr
    16783278U,	// SAT_BU_rr
    137134U,	// SAT_BU_sr
    16781739U,	// SAT_B_rr
    135595U,	// SAT_B_sr
    16783345U,	// SAT_HU_rr
    137201U,	// SAT_HU_sr
    16782352U,	// SAT_H_rr
    136208U,	// SAT_H_sr
    806360279U,	// SELN_rcr
    4199639U,	// SELN_rrr
    806360216U,	// SEL_rcr
    4199576U,	// SEL_rrr
    268440998U,	// SHAS_rc
    5542U,	// SHAS_rr
    268440253U,	// SHA_H_rc
    4797U,	// SHA_H_rr
    268439898U,	// SHA_rc
    4442U,	// SHA_rr
    2101594U,	// SHA_src
    268440142U,	// SHUFFLE_rc
    1073747478U,	// SH_ANDN_T
    1073747435U,	// SH_AND_T
    268440942U,	// SH_EQ_rc
    5486U,	// SH_EQ_rr
    268441348U,	// SH_GE_U_rc
    5892U,	// SH_GE_U_rr
    268440105U,	// SH_GE_rc
    4649U,	// SH_GE_rr
    268440302U,	// SH_H_rc
    4846U,	// SH_H_rr
    268441454U,	// SH_LT_U_rc
    5998U,	// SH_LT_U_rr
    268441290U,	// SH_LT_rc
    5834U,	// SH_LT_rr
    1073747455U,	// SH_NAND_T
    268441290U,	// SH_NE_rc
    5834U,	// SH_NE_rr
    1073747557U,	// SH_NOR_T
    1073747500U,	// SH_ORN_T
    1073747528U,	// SH_OR_T
    1073747577U,	// SH_XNOR_T
    1073747588U,	// SH_XOR_T
    268440661U,	// SH_rc
    5205U,	// SH_rr
    2102357U,	// SH_src
    166031U,	// STLCX_abs
    3349282U,	// STLCX_bo_bso
    166045U,	// STUCX_abs
    3349298U,	// STUCX_bo_bso
    37138U,	// ST_A_abs
    5462666U,	// ST_A_bo_bso
    67571986U,	// ST_A_bo_c
    1701269778U,	// ST_A_bo_pos
    1667780882U,	// ST_A_bo_pre
    101126418U,	// ST_A_bo_r
    12786314U,	// ST_A_bol
    663731U,	// ST_A_sc
    158538378U,	// ST_A_sro
    727690U,	// ST_A_ssr
    793226U,	// ST_A_ssr_pos
    52026U,	// ST_A_ssro
    37314U,	// ST_B_abs
    5462681U,	// ST_B_bo_bso
    67572162U,	// ST_B_bo_c
    1701269954U,	// ST_B_bo_pos
    1667781058U,	// ST_B_bo_pre
    101126594U,	// ST_B_bo_r
    12786329U,	// ST_B_bol
    175315609U,	// ST_B_sro
    727705U,	// ST_B_ssr
    793241U,	// ST_B_ssr_pos
    52038U,	// ST_B_ssro
    37193U,	// ST_DA_abs
    5462673U,	// ST_DA_bo_bso
    67572041U,	// ST_DA_bo_c
    1701269833U,	// ST_DA_bo_pos
    1667780937U,	// ST_DA_bo_pre
    101126473U,	// ST_DA_bo_r
    37372U,	// ST_D_abs
    5462688U,	// ST_D_bo_bso
    67572220U,	// ST_D_bo_c
    1701270012U,	// ST_D_bo_pos
    1667781116U,	// ST_D_bo_pre
    101126652U,	// ST_D_bo_r
    37927U,	// ST_H_abs
    5462695U,	// ST_H_bo_bso
    67572775U,	// ST_H_bo_c
    1701270567U,	// ST_H_bo_pos
    1667781671U,	// ST_H_bo_pre
    101127207U,	// ST_H_bo_r
    12786343U,	// ST_H_bol
    175315623U,	// ST_H_sro
    727719U,	// ST_H_ssr
    793255U,	// ST_H_ssr_pos
    52050U,	// ST_H_ssro
    38240U,	// ST_Q_abs
    5462746U,	// ST_Q_bo_bso
    67573088U,	// ST_Q_bo_c
    1701270880U,	// ST_Q_bo_pos
    1667781984U,	// ST_Q_bo_pre
    101127520U,	// ST_Q_bo_r
    34453U,	// ST_T
    39029U,	// ST_W_abs
    5462803U,	// ST_W_bo_bso
    67573877U,	// ST_W_bo_c
    1701271669U,	// ST_W_bo_pos
    1667782773U,	// ST_W_bo_pre
    101128309U,	// ST_W_bo_r
    12786451U,	// ST_W_bol
    175315731U,	// ST_W_sro
    727827U,	// ST_W_ssr
    793363U,	// ST_W_ssr_pos
    52062U,	// ST_W_ssro
    4586U,	// SUBC_rr
    6111U,	// SUBS_HU_rr
    4983U,	// SUBS_H_rr
    5953U,	// SUBS_U_rr
    5554U,	// SUBS_rr
    16782770U,	// SUBS_srr
    6274U,	// SUBX_rr
    2922U,	// SUB_A_rr
    139431U,	// SUB_A_sc
    4473U,	// SUB_B_rr
    806359661U,	// SUB_F_rrr
    4805U,	// SUB_H_rr
    4569U,	// SUB_rr
    16781785U,	// SUB_srr
    16781313U,	// SUB_srr_15a
    16847321U,	// SUB_srr_a15
    3036U,	// SVLCX_sys
    5462782U,	// SWAPMSK_W_bo_bso
    67573826U,	// SWAPMSK_W_bo_c
    1701271618U,	// SWAPMSK_W_bo_pos
    1667782722U,	// SWAPMSK_W_bo_pre
    101128258U,	// SWAPMSK_W_bo_r
    38999U,	// SWAP_W_abs
    5462794U,	// SWAP_W_bo_bso
    67573847U,	// SWAP_W_bo_c
    1701271639U,	// SWAP_W_bo_pos
    1667782743U,	// SWAP_W_bo_pre
    101128279U,	// SWAP_W_bo_r
    13487U,	// SYSCALL_rc
    3029U,	// TRAPSV_sys
    3023U,	// TRAPV_sys
    16782473U,	// UNPACK_rr
    152733U,	// UPDFL_rr
    16782007U,	// UTOF_rr
    3018U,	// WAIT_sys
    1073747580U,	// XNOR_T
    268440974U,	// XNOR_rc
    5518U,	// XNOR_rr
    268440949U,	// XOR_EQ_rc
    5493U,	// XOR_EQ_rr
    268441357U,	// XOR_GE_U_rc
    5901U,	// XOR_GE_U_rr
    268440112U,	// XOR_GE_rc
    4656U,	// XOR_GE_rr
    268441463U,	// XOR_LT_U_rc
    6007U,	// XOR_LT_U_rr
    268441297U,	// XOR_LT_rc
    5841U,	// XOR_LT_rr
    268440159U,	// XOR_NE_rc
    4703U,	// XOR_NE_rr
    1073747591U,	// XOR_T
    268440980U,	// XOR_rc
    5524U,	// XOR_rr
    16782740U,	// XOR_srr
  };

  static const uint8_t OpInfo1[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// INLINEASM_BR
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// DBG_VALUE_LIST
    0U,	// DBG_INSTR_REF
    0U,	// DBG_PHI
    0U,	// DBG_LABEL
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// PSEUDO_PROBE
    0U,	// ARITH_FENCE
    0U,	// STACKMAP
    0U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// PREALLOCATED_SETUP
    0U,	// PREALLOCATED_ARG
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    0U,	// PATCHABLE_FUNCTION_ENTER
    0U,	// PATCHABLE_RET
    0U,	// PATCHABLE_FUNCTION_EXIT
    0U,	// PATCHABLE_TAIL_CALL
    0U,	// PATCHABLE_EVENT_CALL
    0U,	// PATCHABLE_TYPED_EVENT_CALL
    0U,	// ICALL_BRANCH_FUNNEL
    0U,	// G_ASSERT_SEXT
    0U,	// G_ASSERT_ZEXT
    0U,	// G_ASSERT_ALIGN
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_SDIVREM
    0U,	// G_UDIVREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_BUILD_VECTOR
    0U,	// G_BUILD_VECTOR_TRUNC
    0U,	// G_CONCAT_VECTORS
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_FREEZE
    0U,	// G_INTRINSIC_FPTRUNC_ROUND
    0U,	// G_INTRINSIC_TRUNC
    0U,	// G_INTRINSIC_ROUND
    0U,	// G_INTRINSIC_LRINT
    0U,	// G_INTRINSIC_ROUNDEVEN
    0U,	// G_READCYCLECOUNTER
    0U,	// G_LOAD
    0U,	// G_SEXTLOAD
    0U,	// G_ZEXTLOAD
    0U,	// G_INDEXED_LOAD
    0U,	// G_INDEXED_SEXTLOAD
    0U,	// G_INDEXED_ZEXTLOAD
    0U,	// G_STORE
    0U,	// G_INDEXED_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_ATOMICRMW_FADD
    0U,	// G_ATOMICRMW_FSUB
    0U,	// G_ATOMICRMW_FMAX
    0U,	// G_ATOMICRMW_FMIN
    0U,	// G_FENCE
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INVOKE_REGION_START
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_SEXT_INREG
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_FSHL
    0U,	// G_FSHR
    0U,	// G_ROTR
    0U,	// G_ROTL
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDO
    0U,	// G_UADDE
    0U,	// G_USUBO
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SADDE
    0U,	// G_SSUBO
    0U,	// G_SSUBE
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_UADDSAT
    0U,	// G_SADDSAT
    0U,	// G_USUBSAT
    0U,	// G_SSUBSAT
    0U,	// G_USHLSAT
    0U,	// G_SSHLSAT
    0U,	// G_SMULFIX
    0U,	// G_UMULFIX
    0U,	// G_SMULFIXSAT
    0U,	// G_UMULFIXSAT
    0U,	// G_SDIVFIX
    0U,	// G_UDIVFIX
    0U,	// G_SDIVFIXSAT
    0U,	// G_UDIVFIXSAT
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FMAD
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FPOWI
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FLOG10
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_FABS
    0U,	// G_FCOPYSIGN
    0U,	// G_IS_FPCLASS
    0U,	// G_FCANONICALIZE
    0U,	// G_FMINNUM
    0U,	// G_FMAXNUM
    0U,	// G_FMINNUM_IEEE
    0U,	// G_FMAXNUM_IEEE
    0U,	// G_FMINIMUM
    0U,	// G_FMAXIMUM
    0U,	// G_PTR_ADD
    0U,	// G_PTRMASK
    0U,	// G_SMIN
    0U,	// G_SMAX
    0U,	// G_UMIN
    0U,	// G_UMAX
    0U,	// G_ABS
    0U,	// G_LROUND
    0U,	// G_LLROUND
    0U,	// G_BR
    0U,	// G_BRJT
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_CTTZ
    0U,	// G_CTTZ_ZERO_UNDEF
    0U,	// G_CTLZ
    0U,	// G_CTLZ_ZERO_UNDEF
    0U,	// G_CTPOP
    0U,	// G_BSWAP
    0U,	// G_BITREVERSE
    0U,	// G_FCEIL
    0U,	// G_FCOS
    0U,	// G_FSIN
    0U,	// G_FSQRT
    0U,	// G_FFLOOR
    0U,	// G_FRINT
    0U,	// G_FNEARBYINT
    0U,	// G_ADDRSPACE_CAST
    0U,	// G_BLOCK_ADDR
    0U,	// G_JUMP_TABLE
    0U,	// G_DYN_STACKALLOC
    0U,	// G_STRICT_FADD
    0U,	// G_STRICT_FSUB
    0U,	// G_STRICT_FMUL
    0U,	// G_STRICT_FDIV
    0U,	// G_STRICT_FREM
    0U,	// G_STRICT_FMA
    0U,	// G_STRICT_FSQRT
    0U,	// G_READ_REGISTER
    0U,	// G_WRITE_REGISTER
    0U,	// G_MEMCPY
    0U,	// G_MEMCPY_INLINE
    0U,	// G_MEMMOVE
    0U,	// G_MEMSET
    0U,	// G_BZERO
    0U,	// G_VECREDUCE_SEQ_FADD
    0U,	// G_VECREDUCE_SEQ_FMUL
    0U,	// G_VECREDUCE_FADD
    0U,	// G_VECREDUCE_FMUL
    0U,	// G_VECREDUCE_FMAX
    0U,	// G_VECREDUCE_FMIN
    0U,	// G_VECREDUCE_ADD
    0U,	// G_VECREDUCE_MUL
    0U,	// G_VECREDUCE_AND
    0U,	// G_VECREDUCE_OR
    0U,	// G_VECREDUCE_XOR
    0U,	// G_VECREDUCE_SMAX
    0U,	// G_VECREDUCE_SMIN
    0U,	// G_VECREDUCE_UMAX
    0U,	// G_VECREDUCE_UMIN
    0U,	// G_SBFX
    0U,	// G_UBFX
    0U,	// ABSDIFS_H_rr
    0U,	// ABSDIFS_rc
    0U,	// ABSDIFS_rr
    0U,	// ABSDIF_B_rr
    0U,	// ABSDIF_H_rr
    0U,	// ABSDIF_rc
    0U,	// ABSDIF_rr
    0U,	// ABSS_H_rr
    0U,	// ABSS_rr
    0U,	// ABS_B_rr
    0U,	// ABS_H_rr
    0U,	// ABS_rr
    0U,	// ADDC_rc
    0U,	// ADDC_rr
    0U,	// ADDIH_A_rlc
    0U,	// ADDIH_rlc
    0U,	// ADDI_rlc
    0U,	// ADDSC_AT_rr
    1U,	// ADDSC_A_rr
    0U,	// ADDSC_A_srrs
    0U,	// ADDS_H
    0U,	// ADDS_HU
    0U,	// ADDS_U
    0U,	// ADDS_U_rc
    0U,	// ADDS_rc
    0U,	// ADDS_rr
    0U,	// ADDS_srr
    0U,	// ADDX_rc
    0U,	// ADDX_rr
    0U,	// ADD_A_rr
    0U,	// ADD_A_src
    0U,	// ADD_A_srr
    0U,	// ADD_B_rr
    0U,	// ADD_F_rrr
    0U,	// ADD_H_rr
    0U,	// ADD_rc
    0U,	// ADD_rr
    0U,	// ADD_src
    0U,	// ADD_src_15a
    0U,	// ADD_src_a15
    0U,	// ADD_srr
    0U,	// ADD_srr_15a
    0U,	// ADD_srr_a15
    0U,	// ANDN_T
    0U,	// ANDN_rc
    0U,	// ANDN_rr
    0U,	// AND_ANDN_T
    0U,	// AND_AND_T
    0U,	// AND_EQ_rc
    0U,	// AND_EQ_rr
    0U,	// AND_GE_U_rc
    0U,	// AND_GE_U_rr
    0U,	// AND_GE_rc
    0U,	// AND_GE_rr
    0U,	// AND_LT_U_rc
    0U,	// AND_LT_U_rr
    0U,	// AND_LT_rc
    0U,	// AND_LT_rr
    0U,	// AND_NE_rc
    0U,	// AND_NE_rr
    0U,	// AND_NOR_T
    0U,	// AND_OR_T
    0U,	// AND_T
    0U,	// AND_rc
    0U,	// AND_rr
    0U,	// AND_src
    0U,	// AND_srr
    0U,	// BISR_rc
    0U,	// BISR_sc
    0U,	// BMAERGE_rr
    0U,	// BSPLIT_rr
    0U,	// CACHEI_I_bo_bso
    0U,	// CACHEI_I_bo_pos
    0U,	// CACHEI_I_bo_pre
    0U,	// CACHEI_WI_bo_bso
    0U,	// CACHEI_WI_bo_pos
    0U,	// CACHEI_WI_bo_pre
    0U,	// CACHEI_W_bo_bso
    0U,	// CACHEI_W_bo_c
    0U,	// CACHEI_W_bo_pos
    0U,	// CACHEI_W_bo_pre
    0U,	// CACHEI_W_bo_r
    0U,	// CACHE_I_bo_bso
    0U,	// CACHE_I_bo_c
    0U,	// CACHE_I_bo_pos
    0U,	// CACHE_I_bo_pre
    0U,	// CACHE_I_bo_r
    0U,	// CACHE_WI_bo_bso
    0U,	// CACHE_WI_bo_c
    0U,	// CACHE_WI_bo_pos
    0U,	// CACHE_WI_bo_pre
    0U,	// CACHE_WI_bo_r
    0U,	// CACHE_W_bo_bso
    0U,	// CACHE_W_bo_c
    0U,	// CACHE_W_bo_pos
    0U,	// CACHE_W_bo_pre
    0U,	// CACHE_W_bo_r
    17U,	// CADDN_rcr
    0U,	// CADDN_rrr
    0U,	// CADDN_src
    17U,	// CADD_rcr
    0U,	// CADD_rrr
    0U,	// CADD_src
    0U,	// CALLA_b
    0U,	// CALLI_rr
    0U,	// CALL_b
    0U,	// CALL_sb
    0U,	// CLO_H_rr
    0U,	// CLO_rr
    0U,	// CLS_H_rr
    0U,	// CLS_rr
    0U,	// CLZ_H_rr
    0U,	// CLZ_rr
    0U,	// CMOVN_src
    0U,	// CMOVN_srr
    0U,	// CMOV_src
    0U,	// CMOV_srr
    0U,	// CMPSWAP_W_bo_bso
    0U,	// CMPSWAP_W_bo_c
    0U,	// CMPSWAP_W_bo_pos
    0U,	// CMPSWAP_W_bo_pre
    0U,	// CMPSWAP_W_bo_r
    0U,	// CMP_F_rr
    0U,	// CRC32B_W_rr
    0U,	// CRC32L_W_rr
    0U,	// CRC32_B_rr
    0U,	// CRCN_rrr
    0U,	// CSUBN_rrr
    0U,	// CSUB_rrr
    0U,	// DEBUG_sr
    0U,	// DEBUG_sys
    1U,	// DEXTR_rrpw
    1U,	// DEXTR_rrrr
    0U,	// DISABLE_sys
    0U,	// DISABLE_sys_1
    0U,	// DIV_F_rr
    0U,	// DIV_U_rr
    0U,	// DIV_rr
    0U,	// DSYNC_sys
    0U,	// DVADJ_rrr
    0U,	// DVINIT_BU_rr
    0U,	// DVINIT_B_rr
    0U,	// DVINIT_HU_rr
    0U,	// DVINIT_H_rr
    0U,	// DVINIT_U_rr
    0U,	// DVINIT_rr
    0U,	// DVSTEP_U_rrr
    0U,	// DVSTEP_rrr
    0U,	// ENABLE_sys
    0U,	// EQANY_B_rc
    0U,	// EQANY_B_rr
    0U,	// EQANY_H_rc
    0U,	// EQANY_H_rr
    0U,	// EQZ_A_rr
    0U,	// EQ_A_rr
    0U,	// EQ_B_rr
    0U,	// EQ_H_rr
    0U,	// EQ_W_rr
    0U,	// EQ_rc
    0U,	// EQ_rr
    0U,	// EQ_src
    0U,	// EQ_srr
    1U,	// EXTR_U_rrpw
    0U,	// EXTR_U_rrrr
    1U,	// EXTR_U_rrrw
    1U,	// EXTR_rrpw
    0U,	// EXTR_rrrr
    1U,	// EXTR_rrrw
    0U,	// FCALLA_b
    0U,	// FCALLA_i
    0U,	// FCALL_b
    0U,	// FRET_sr
    0U,	// FRET_sys
    0U,	// FTOHP_rr
    0U,	// FTOIZ_rr
    0U,	// FTOI_rr
    0U,	// FTOQ31Z_rr
    0U,	// FTOQ31_rr
    0U,	// FTOUZ_rr
    0U,	// FTOU_rr
    0U,	// GE_A_rr
    0U,	// GE_U_rc
    0U,	// GE_U_rr
    0U,	// GE_rc
    0U,	// GE_rr
    0U,	// HPTOF_rr
    1U,	// IMASK_rcpw
    1U,	// IMASK_rcrw
    1U,	// IMASK_rrpw
    1U,	// IMASK_rrrw
    65U,	// INSERT_rcpw
    1U,	// INSERT_rcrr
    65U,	// INSERT_rcrw
    65U,	// INSERT_rrpw
    65U,	// INSERT_rrrr
    65U,	// INSERT_rrrw
    0U,	// INSN_T
    0U,	// INS_T
    0U,	// ISYNC_sys
    0U,	// ITOF_rr
    0U,	// IXMAX_U_rrr
    0U,	// IXMAX_rrr
    0U,	// IXMIN_U_rrr
    0U,	// IXMIN_rrr
    0U,	// JA_b
    0U,	// JEQ_A_brr
    0U,	// JEQ_brc
    0U,	// JEQ_brr
    0U,	// JEQ_sbc1
    0U,	// JEQ_sbc2
    0U,	// JEQ_sbr1
    0U,	// JEQ_sbr2
    0U,	// JGEZ_sbr
    0U,	// JGE_U_brc
    0U,	// JGE_U_brr
    0U,	// JGE_brc
    0U,	// JGE_brr
    0U,	// JGTZ_sbr
    0U,	// JI_rr
    0U,	// JI_sr
    0U,	// JLA_b
    0U,	// JLEZ_sbr
    0U,	// JLI_rr
    0U,	// JLTZ_sbr
    0U,	// JLT_U_brc
    0U,	// JLT_U_brr
    0U,	// JLT_brc
    0U,	// JLT_brr
    0U,	// JL_b
    0U,	// JNED_brc
    0U,	// JNED_brr
    0U,	// JNEI_brc
    0U,	// JNEI_brr
    0U,	// JNE_A_brr
    0U,	// JNE_brc
    0U,	// JNE_brr
    0U,	// JNE_sbc1
    0U,	// JNE_sbc2
    0U,	// JNE_sbr1
    0U,	// JNE_sbr2
    0U,	// JNZ_A_brr
    0U,	// JNZ_A_sbr
    0U,	// JNZ_T_brn
    0U,	// JNZ_T_sbrn
    0U,	// JNZ_sb
    0U,	// JNZ_sbr
    0U,	// JZ_A_brr
    0U,	// JZ_A_sbr
    0U,	// JZ_T_brn
    0U,	// JZ_T_sbrn
    0U,	// JZ_sb
    0U,	// JZ_sbr
    0U,	// J_b
    0U,	// J_sb
    0U,	// LDLCX_abs
    0U,	// LDLCX_bo_bso
    0U,	// LDMST_abs
    0U,	// LDMST_bo_bso
    0U,	// LDMST_bo_c
    0U,	// LDMST_bo_pos
    0U,	// LDMST_bo_pre
    0U,	// LDMST_bo_r
    0U,	// LDUCX_abs
    0U,	// LDUCX_bo_bso
    0U,	// LD_A_abs
    0U,	// LD_A_bo_bso
    0U,	// LD_A_bo_c
    0U,	// LD_A_bo_pos
    0U,	// LD_A_bo_pre
    0U,	// LD_A_bo_r
    0U,	// LD_A_bol
    0U,	// LD_A_sc
    0U,	// LD_A_slr
    0U,	// LD_A_slr_post
    0U,	// LD_A_slro
    0U,	// LD_A_sro
    0U,	// LD_BU_abs
    0U,	// LD_BU_bo_bso
    0U,	// LD_BU_bo_c
    0U,	// LD_BU_bo_pos
    0U,	// LD_BU_bo_pre
    0U,	// LD_BU_bo_r
    0U,	// LD_BU_bol
    0U,	// LD_BU_slr
    0U,	// LD_BU_slr_post
    0U,	// LD_BU_slro
    0U,	// LD_BU_sro
    0U,	// LD_B_abs
    0U,	// LD_B_bo_bso
    0U,	// LD_B_bo_c
    0U,	// LD_B_bo_pos
    0U,	// LD_B_bo_pre
    0U,	// LD_B_bo_r
    0U,	// LD_B_bol
    0U,	// LD_DA_abs
    0U,	// LD_DA_bo_bso
    0U,	// LD_DA_bo_c
    0U,	// LD_DA_bo_pos
    0U,	// LD_DA_bo_pre
    0U,	// LD_DA_bo_r
    0U,	// LD_D_abs
    0U,	// LD_D_bo_bso
    0U,	// LD_D_bo_c
    0U,	// LD_D_bo_pos
    0U,	// LD_D_bo_pre
    0U,	// LD_D_bo_r
    0U,	// LD_HU_abs
    0U,	// LD_HU_bo_bso
    0U,	// LD_HU_bo_c
    0U,	// LD_HU_bo_pos
    0U,	// LD_HU_bo_pre
    0U,	// LD_HU_bo_r
    0U,	// LD_HU_bol
    0U,	// LD_H_abs
    0U,	// LD_H_bo_bso
    0U,	// LD_H_bo_c
    0U,	// LD_H_bo_pos
    0U,	// LD_H_bo_pre
    0U,	// LD_H_bo_r
    0U,	// LD_H_bol
    0U,	// LD_H_slr
    0U,	// LD_H_slr_post
    0U,	// LD_H_slro
    0U,	// LD_H_sro
    0U,	// LD_Q_abs
    0U,	// LD_Q_bo_bso
    0U,	// LD_Q_bo_c
    0U,	// LD_Q_bo_pos
    0U,	// LD_Q_bo_pre
    0U,	// LD_Q_bo_r
    0U,	// LD_W_abs
    0U,	// LD_W_bo_bso
    0U,	// LD_W_bo_c
    0U,	// LD_W_bo_pos
    0U,	// LD_W_bo_pre
    0U,	// LD_W_bo_r
    0U,	// LD_W_bol
    0U,	// LD_W_sc
    0U,	// LD_W_slr
    0U,	// LD_W_slr_post
    0U,	// LD_W_slro
    0U,	// LD_W_sro
    0U,	// LEA_abs
    0U,	// LEA_bo_bso
    0U,	// LEA_bol
    0U,	// LHA_abs
    0U,	// LOOPU_brr
    0U,	// LOOP_brr
    0U,	// LOOP_sbr
    0U,	// LT_A_rr
    0U,	// LT_B
    0U,	// LT_BU
    0U,	// LT_H
    0U,	// LT_HU
    0U,	// LT_U_rc
    0U,	// LT_U_rr
    0U,	// LT_W
    0U,	// LT_WU
    0U,	// LT_rc
    0U,	// LT_rr
    0U,	// LT_src
    0U,	// LT_srr
    2U,	// MADDMS_H_rrr1_LL
    3U,	// MADDMS_H_rrr1_LU
    4U,	// MADDMS_H_rrr1_UL
    5U,	// MADDMS_H_rrr1_UU
    2U,	// MADDM_H_rrr1_LL
    3U,	// MADDM_H_rrr1_LU
    4U,	// MADDM_H_rrr1_UL
    5U,	// MADDM_H_rrr1_UU
    6U,	// MADDRS_H_rrr1_DcEdDaDbUL
    2U,	// MADDRS_H_rrr1_LL
    3U,	// MADDRS_H_rrr1_LU
    4U,	// MADDRS_H_rrr1_UL
    5U,	// MADDRS_H_rrr1_UU
    0U,	// MADDRS_Q_rrr1_L_L
    0U,	// MADDRS_Q_rrr1_U_U
    6U,	// MADDR_H_rrr1_DcEdDaDbUL
    2U,	// MADDR_H_rrr1_LL
    3U,	// MADDR_H_rrr1_LU
    4U,	// MADDR_H_rrr1_UL
    5U,	// MADDR_H_rrr1_UU
    0U,	// MADDR_Q_rrr1_L_L
    0U,	// MADDR_Q_rrr1_U_U
    2U,	// MADDSUMS_H_rrr1_LL
    3U,	// MADDSUMS_H_rrr1_LU
    4U,	// MADDSUMS_H_rrr1_UL
    5U,	// MADDSUMS_H_rrr1_UU
    2U,	// MADDSUM_H_rrr1_LL
    3U,	// MADDSUM_H_rrr1_LU
    4U,	// MADDSUM_H_rrr1_UL
    5U,	// MADDSUM_H_rrr1_UU
    2U,	// MADDSURS_H_rrr1_LL
    3U,	// MADDSURS_H_rrr1_LU
    4U,	// MADDSURS_H_rrr1_UL
    5U,	// MADDSURS_H_rrr1_UU
    2U,	// MADDSUR_H_rrr1_LL
    3U,	// MADDSUR_H_rrr1_LU
    4U,	// MADDSUR_H_rrr1_UL
    5U,	// MADDSUR_H_rrr1_UU
    2U,	// MADDSUS_H_rrr1_LL
    3U,	// MADDSUS_H_rrr1_LU
    4U,	// MADDSUS_H_rrr1_UL
    5U,	// MADDSUS_H_rrr1_UU
    2U,	// MADDSU_H_rrr1_LL
    3U,	// MADDSU_H_rrr1_LU
    4U,	// MADDSU_H_rrr1_UL
    5U,	// MADDSU_H_rrr1_UU
    2U,	// MADDS_H_rrr1_LL
    3U,	// MADDS_H_rrr1_LU
    4U,	// MADDS_H_rrr1_UL
    5U,	// MADDS_H_rrr1_UU
    33U,	// MADDS_Q_rrr1
    7U,	// MADDS_Q_rrr1_L
    0U,	// MADDS_Q_rrr1_L_L
    8U,	// MADDS_Q_rrr1_U
    0U,	// MADDS_Q_rrr1_U_U
    33U,	// MADDS_Q_rrr1_e
    7U,	// MADDS_Q_rrr1_e_L
    0U,	// MADDS_Q_rrr1_e_L_L
    8U,	// MADDS_Q_rrr1_e_U
    0U,	// MADDS_Q_rrr1_e_U_U
    17U,	// MADDS_U_rcr
    17U,	// MADDS_U_rcr_e
    0U,	// MADDS_U_rrr2
    0U,	// MADDS_U_rrr2_e
    17U,	// MADDS_rcr
    17U,	// MADDS_rcr_e
    0U,	// MADDS_rrr2
    0U,	// MADDS_rrr2_e
    0U,	// MADD_F_rrr
    2U,	// MADD_H_rrr1_LL
    3U,	// MADD_H_rrr1_LU
    4U,	// MADD_H_rrr1_UL
    5U,	// MADD_H_rrr1_UU
    33U,	// MADD_Q_rrr1
    7U,	// MADD_Q_rrr1_L
    0U,	// MADD_Q_rrr1_L_L
    8U,	// MADD_Q_rrr1_U
    0U,	// MADD_Q_rrr1_U_U
    33U,	// MADD_Q_rrr1_e
    7U,	// MADD_Q_rrr1_e_L
    0U,	// MADD_Q_rrr1_e_L_L
    8U,	// MADD_Q_rrr1_e_U
    0U,	// MADD_Q_rrr1_e_U_U
    17U,	// MADD_U_rcr
    0U,	// MADD_U_rrr2
    17U,	// MADD_rcr
    17U,	// MADD_rcr_e
    0U,	// MADD_rrr2
    0U,	// MADD_rrr2_e
    0U,	// MAX_B
    0U,	// MAX_BU
    0U,	// MAX_H
    0U,	// MAX_HU
    0U,	// MAX_U_rc
    0U,	// MAX_U_rr
    0U,	// MAX_rc
    0U,	// MAX_rr
    0U,	// MFCR_rlc
    0U,	// MIN_B
    0U,	// MIN_BU
    0U,	// MIN_H
    0U,	// MIN_HU
    0U,	// MIN_U_rc
    0U,	// MIN_U_rr
    0U,	// MIN_rc
    0U,	// MIN_rr
    0U,	// MOVH_A_rlc
    0U,	// MOVH_rlc
    0U,	// MOV_AA_rr
    0U,	// MOV_AA_srr
    0U,	// MOV_A_rr
    0U,	// MOV_A_src
    0U,	// MOV_A_srr
    0U,	// MOV_D_rr
    0U,	// MOV_D_srr
    0U,	// MOV_U_rlc
    0U,	// MOV_rlcDc
    0U,	// MOV_rlcEc
    0U,	// MOV_rrDcDb
    0U,	// MOV_rrEcDaDb
    0U,	// MOV_rrEcDb
    0U,	// MOV_sc
    0U,	// MOV_srcDa
    0U,	// MOV_srcEa
    0U,	// MOV_srr
    2U,	// MSUBADMS_H_rrr1_LL
    3U,	// MSUBADMS_H_rrr1_LU
    4U,	// MSUBADMS_H_rrr1_UL
    5U,	// MSUBADMS_H_rrr1_UU
    2U,	// MSUBADM_H_rrr1_LL
    3U,	// MSUBADM_H_rrr1_LU
    4U,	// MSUBADM_H_rrr1_UL
    5U,	// MSUBADM_H_rrr1_UU
    2U,	// MSUBADRS_H_rrr1_LL
    3U,	// MSUBADRS_H_rrr1_LU
    4U,	// MSUBADRS_H_rrr1_UL
    5U,	// MSUBADRS_H_rrr1_UU
    2U,	// MSUBADR_H_rrr1_LL
    3U,	// MSUBADR_H_rrr1_LU
    4U,	// MSUBADR_H_rrr1_UL
    5U,	// MSUBADR_H_rrr1_UU
    2U,	// MSUBADS_H_rrr1_LL
    3U,	// MSUBADS_H_rrr1_LU
    4U,	// MSUBADS_H_rrr1_UL
    5U,	// MSUBADS_H_rrr1_UU
    2U,	// MSUBAD_H_rrr1_LL
    3U,	// MSUBAD_H_rrr1_LU
    4U,	// MSUBAD_H_rrr1_UL
    5U,	// MSUBAD_H_rrr1_UU
    2U,	// MSUBMS_H_rrr1_LL
    3U,	// MSUBMS_H_rrr1_LU
    4U,	// MSUBMS_H_rrr1_UL
    5U,	// MSUBMS_H_rrr1_UU
    2U,	// MSUBM_H_rrr1_LL
    3U,	// MSUBM_H_rrr1_LU
    4U,	// MSUBM_H_rrr1_UL
    5U,	// MSUBM_H_rrr1_UU
    6U,	// MSUBRS_H_rrr1_DcEdDaDbUL
    2U,	// MSUBRS_H_rrr1_LL
    3U,	// MSUBRS_H_rrr1_LU
    4U,	// MSUBRS_H_rrr1_UL
    5U,	// MSUBRS_H_rrr1_UU
    0U,	// MSUBRS_Q_rrr1_L_L
    0U,	// MSUBRS_Q_rrr1_U_U
    6U,	// MSUBR_H_rrr1_DcEdDaDbUL
    2U,	// MSUBR_H_rrr1_LL
    3U,	// MSUBR_H_rrr1_LU
    4U,	// MSUBR_H_rrr1_UL
    5U,	// MSUBR_H_rrr1_UU
    0U,	// MSUBR_Q_rrr1_L_L
    0U,	// MSUBR_Q_rrr1_U_U
    2U,	// MSUBS_H_rrr1_LL
    3U,	// MSUBS_H_rrr1_LU
    4U,	// MSUBS_H_rrr1_UL
    5U,	// MSUBS_H_rrr1_UU
    33U,	// MSUBS_Q_rrr1
    7U,	// MSUBS_Q_rrr1_L
    0U,	// MSUBS_Q_rrr1_L_L
    8U,	// MSUBS_Q_rrr1_U
    0U,	// MSUBS_Q_rrr1_U_U
    33U,	// MSUBS_Q_rrr1_e
    7U,	// MSUBS_Q_rrr1_e_L
    0U,	// MSUBS_Q_rrr1_e_L_L
    8U,	// MSUBS_Q_rrr1_e_U
    0U,	// MSUBS_Q_rrr1_e_U_U
    17U,	// MSUBS_U_rcr
    17U,	// MSUBS_U_rcr_e
    0U,	// MSUBS_U_rrr2
    0U,	// MSUBS_U_rrr2_e
    17U,	// MSUBS_rcr
    17U,	// MSUBS_rcr_e
    0U,	// MSUBS_rrr2
    0U,	// MSUBS_rrr2_e
    0U,	// MSUB_F_rrr
    2U,	// MSUB_H_rrr1_LL
    3U,	// MSUB_H_rrr1_LU
    4U,	// MSUB_H_rrr1_UL
    5U,	// MSUB_H_rrr1_UU
    33U,	// MSUB_Q_rrr1
    7U,	// MSUB_Q_rrr1_L
    0U,	// MSUB_Q_rrr1_L_L
    8U,	// MSUB_Q_rrr1_U
    0U,	// MSUB_Q_rrr1_U_U
    33U,	// MSUB_Q_rrr1_e
    7U,	// MSUB_Q_rrr1_e_L
    0U,	// MSUB_Q_rrr1_e_L_L
    8U,	// MSUB_Q_rrr1_e_U
    0U,	// MSUB_Q_rrr1_e_U_U
    17U,	// MSUB_U_rcr
    0U,	// MSUB_U_rrr2
    17U,	// MSUB_rcr
    17U,	// MSUB_rcr_e
    0U,	// MSUB_rrr2
    0U,	// MSUB_rrr2_e
    0U,	// MTCR_rlc
    9U,	// MULM_H_rr1_LL2e
    10U,	// MULM_H_rr1_LU2e
    11U,	// MULM_H_rr1_UL2e
    12U,	// MULM_H_rr1_UU2e
    9U,	// MULR_H_rr1_LL2e
    10U,	// MULR_H_rr1_LU2e
    11U,	// MULR_H_rr1_UL2e
    12U,	// MULR_H_rr1_UU2e
    0U,	// MULR_Q_rr1_2LL
    0U,	// MULR_Q_rr1_2UU
    0U,	// MULS_U_rc
    0U,	// MULS_U_rr2
    0U,	// MULS_rc
    0U,	// MULS_rr2
    0U,	// MUL_F_rrr
    9U,	// MUL_H_rr1_LL2e
    10U,	// MUL_H_rr1_LU2e
    11U,	// MUL_H_rr1_UL2e
    12U,	// MUL_H_rr1_UU2e
    0U,	// MUL_Q_rr1_2LL
    0U,	// MUL_Q_rr1_2UU
    13U,	// MUL_Q_rr1_2_L
    13U,	// MUL_Q_rr1_2_Le
    14U,	// MUL_Q_rr1_2_U
    14U,	// MUL_Q_rr1_2_Ue
    49U,	// MUL_Q_rr1_2__
    49U,	// MUL_Q_rr1_2__e
    0U,	// MUL_U_rc
    0U,	// MUL_U_rr2
    0U,	// MUL_rc
    0U,	// MUL_rc_e
    0U,	// MUL_rr2
    0U,	// MUL_rr2_e
    0U,	// MUL_srr
    0U,	// NAND_T
    0U,	// NAND_rc
    0U,	// NAND_rr
    0U,	// NEZ_A
    0U,	// NE_A
    0U,	// NE_rc
    0U,	// NE_rr
    0U,	// NOP_sr
    0U,	// NOP_sys
    0U,	// NOR_T
    0U,	// NOR_rc
    0U,	// NOR_rr
    0U,	// NOT_sr
    0U,	// ORN_T
    0U,	// ORN_rc
    0U,	// ORN_rr
    0U,	// OR_ANDN_T
    0U,	// OR_AND_T
    0U,	// OR_EQ_rc
    0U,	// OR_EQ_rr
    0U,	// OR_GE_U_rc
    0U,	// OR_GE_U_rr
    0U,	// OR_GE_rc
    0U,	// OR_GE_rr
    0U,	// OR_LT_U_rc
    0U,	// OR_LT_U_rr
    0U,	// OR_LT_rc
    0U,	// OR_LT_rr
    0U,	// OR_NE_rc
    0U,	// OR_NE_rr
    0U,	// OR_NOR_T
    0U,	// OR_OR_T
    0U,	// OR_T
    0U,	// OR_rc
    0U,	// OR_rr
    0U,	// OR_sc
    0U,	// OR_srr
    0U,	// PACK_rrr
    0U,	// PARITY_rr
    0U,	// POPCNT_W_rr
    0U,	// Q31TOF_rr
    0U,	// QSEED_F_rr
    0U,	// RESTORE_sys
    0U,	// RET_sr
    0U,	// RET_sys
    0U,	// RFE_sr
    0U,	// RFE_sys
    0U,	// RFM_sys
    0U,	// RSLCX_sys
    0U,	// RSTV_sys
    0U,	// RSUBS_U_rc
    0U,	// RSUBS_rc
    0U,	// RSUB_rc
    0U,	// RSUB_sr
    0U,	// SAT_BU_rr
    0U,	// SAT_BU_sr
    0U,	// SAT_B_rr
    0U,	// SAT_B_sr
    0U,	// SAT_HU_rr
    0U,	// SAT_HU_sr
    0U,	// SAT_H_rr
    0U,	// SAT_H_sr
    17U,	// SELN_rcr
    0U,	// SELN_rrr
    17U,	// SEL_rcr
    0U,	// SEL_rrr
    0U,	// SHAS_rc
    0U,	// SHAS_rr
    0U,	// SHA_H_rc
    0U,	// SHA_H_rr
    0U,	// SHA_rc
    0U,	// SHA_rr
    0U,	// SHA_src
    0U,	// SHUFFLE_rc
    0U,	// SH_ANDN_T
    0U,	// SH_AND_T
    0U,	// SH_EQ_rc
    0U,	// SH_EQ_rr
    0U,	// SH_GE_U_rc
    0U,	// SH_GE_U_rr
    0U,	// SH_GE_rc
    0U,	// SH_GE_rr
    0U,	// SH_H_rc
    0U,	// SH_H_rr
    0U,	// SH_LT_U_rc
    0U,	// SH_LT_U_rr
    0U,	// SH_LT_rc
    0U,	// SH_LT_rr
    0U,	// SH_NAND_T
    0U,	// SH_NE_rc
    0U,	// SH_NE_rr
    0U,	// SH_NOR_T
    0U,	// SH_ORN_T
    0U,	// SH_OR_T
    0U,	// SH_XNOR_T
    0U,	// SH_XOR_T
    0U,	// SH_rc
    0U,	// SH_rr
    0U,	// SH_src
    0U,	// STLCX_abs
    0U,	// STLCX_bo_bso
    0U,	// STUCX_abs
    0U,	// STUCX_bo_bso
    0U,	// ST_A_abs
    0U,	// ST_A_bo_bso
    0U,	// ST_A_bo_c
    0U,	// ST_A_bo_pos
    0U,	// ST_A_bo_pre
    0U,	// ST_A_bo_r
    0U,	// ST_A_bol
    0U,	// ST_A_sc
    0U,	// ST_A_sro
    0U,	// ST_A_ssr
    0U,	// ST_A_ssr_pos
    0U,	// ST_A_ssro
    0U,	// ST_B_abs
    0U,	// ST_B_bo_bso
    0U,	// ST_B_bo_c
    0U,	// ST_B_bo_pos
    0U,	// ST_B_bo_pre
    0U,	// ST_B_bo_r
    0U,	// ST_B_bol
    0U,	// ST_B_sro
    0U,	// ST_B_ssr
    0U,	// ST_B_ssr_pos
    0U,	// ST_B_ssro
    0U,	// ST_DA_abs
    0U,	// ST_DA_bo_bso
    0U,	// ST_DA_bo_c
    0U,	// ST_DA_bo_pos
    0U,	// ST_DA_bo_pre
    0U,	// ST_DA_bo_r
    0U,	// ST_D_abs
    0U,	// ST_D_bo_bso
    0U,	// ST_D_bo_c
    0U,	// ST_D_bo_pos
    0U,	// ST_D_bo_pre
    0U,	// ST_D_bo_r
    0U,	// ST_H_abs
    0U,	// ST_H_bo_bso
    0U,	// ST_H_bo_c
    0U,	// ST_H_bo_pos
    0U,	// ST_H_bo_pre
    0U,	// ST_H_bo_r
    0U,	// ST_H_bol
    0U,	// ST_H_sro
    0U,	// ST_H_ssr
    0U,	// ST_H_ssr_pos
    0U,	// ST_H_ssro
    0U,	// ST_Q_abs
    0U,	// ST_Q_bo_bso
    0U,	// ST_Q_bo_c
    0U,	// ST_Q_bo_pos
    0U,	// ST_Q_bo_pre
    0U,	// ST_Q_bo_r
    0U,	// ST_T
    0U,	// ST_W_abs
    0U,	// ST_W_bo_bso
    0U,	// ST_W_bo_c
    0U,	// ST_W_bo_pos
    0U,	// ST_W_bo_pre
    0U,	// ST_W_bo_r
    0U,	// ST_W_bol
    0U,	// ST_W_sro
    0U,	// ST_W_ssr
    0U,	// ST_W_ssr_pos
    0U,	// ST_W_ssro
    0U,	// SUBC_rr
    0U,	// SUBS_HU_rr
    0U,	// SUBS_H_rr
    0U,	// SUBS_U_rr
    0U,	// SUBS_rr
    0U,	// SUBS_srr
    0U,	// SUBX_rr
    0U,	// SUB_A_rr
    0U,	// SUB_A_sc
    0U,	// SUB_B_rr
    0U,	// SUB_F_rrr
    0U,	// SUB_H_rr
    0U,	// SUB_rr
    0U,	// SUB_srr
    0U,	// SUB_srr_15a
    0U,	// SUB_srr_a15
    0U,	// SVLCX_sys
    0U,	// SWAPMSK_W_bo_bso
    0U,	// SWAPMSK_W_bo_c
    0U,	// SWAPMSK_W_bo_pos
    0U,	// SWAPMSK_W_bo_pre
    0U,	// SWAPMSK_W_bo_r
    0U,	// SWAP_W_abs
    0U,	// SWAP_W_bo_bso
    0U,	// SWAP_W_bo_c
    0U,	// SWAP_W_bo_pos
    0U,	// SWAP_W_bo_pre
    0U,	// SWAP_W_bo_r
    0U,	// SYSCALL_rc
    0U,	// TRAPSV_sys
    0U,	// TRAPV_sys
    0U,	// UNPACK_rr
    0U,	// UPDFL_rr
    0U,	// UTOF_rr
    0U,	// WAIT_sys
    0U,	// XNOR_T
    0U,	// XNOR_rc
    0U,	// XNOR_rr
    0U,	// XOR_EQ_rc
    0U,	// XOR_EQ_rr
    0U,	// XOR_GE_U_rc
    0U,	// XOR_GE_U_rr
    0U,	// XOR_GE_rc
    0U,	// XOR_GE_rr
    0U,	// XOR_LT_U_rc
    0U,	// XOR_LT_U_rr
    0U,	// XOR_LT_rc
    0U,	// XOR_LT_rr
    0U,	// XOR_NE_rc
    0U,	// XOR_NE_rr
    0U,	// XOR_T
    0U,	// XOR_rc
    0U,	// XOR_rr
    0U,	// XOR_srr
  };

  // Emit the opcode for the instruction.
  uint64_t Bits = 0;
  Bits |= (uint64_t)OpInfo0[MCInst_getOpcode(MI)] << 0;
  Bits |= (uint64_t)OpInfo1[MCInst_getOpcode(MI)] << 32;
  MnemonicBitsInfo MBI = {AsmStrs+(Bits & 4095)-1, Bits};
  return MBI;

}
/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void printInstruction(MCInst *MI, uint64_t Address, SStream *O) {
  SStream_concat0(O, "");
  MnemonicBitsInfo MnemonicInfo = getMnemonic(MI, O);

  SStream_concat0(O, MnemonicInfo.first);

  uint64_t Bits = MnemonicInfo.second;
  assert(Bits != 0 && "Cannot print this instruction.");

  // Fragment 0 encoded into 4 bits for 13 unique commands.
  switch ((Bits >> 12) & 15) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // DBG_VALUE, DBG_VALUE_LIST, DBG_INSTR_REF, DBG_PHI, DBG_LABEL, BUNDLE, ...
    return;
    break;
  case 1:
    // ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ABSDIF_H_rr, ABSDIF...
    printOperand(MI, 0, O);
    break;
  case 2:
    // AND_src, BISR_sc, LD_A_sc, LD_W_sc, MOV_sc, OR_sc, ST_A_sc, SUB_A_sc
    printZExtImm_8(MI, 0, O);
    break;
  case 3:
    // BISR_rc, SYSCALL_rc
    printSExtImm_9(MI, 0, O);
    return;
    break;
  case 4:
    // CALLA_b, CALL_b, FCALLA_b, FCALL_b, JA_b, JLA_b, JL_b, J_b
    printDisp24Imm(MI, 0, O);
    return;
    break;
  case 5:
    // CALLI_rr, CMPSWAP_W_bo_bso, CMPSWAP_W_bo_c, CMPSWAP_W_bo_pos, CMPSWAP_...
    printOperand(MI, 1, O);
    break;
  case 6:
    // CALL_sb, JNZ_sb, JZ_sb, J_sb
    printDisp8Imm(MI, 0, O);
    return;
    break;
  case 7:
    // JEQ_sbc1, JEQ_sbc2, JNE_sbc1, JNE_sbc2
    printSExtImm_4(MI, 1, O);
    SStream_concat0(O, ", ");
    printDisp4Imm(MI, 0, O);
    return;
    break;
  case 8:
    // LDLCX_abs, LDUCX_abs, STLCX_abs, STUCX_abs, ST_T
    printOff18Imm(MI, 0, O);
    break;
  case 9:
    // LDMST_abs, ST_A_abs, ST_B_abs, ST_DA_abs, ST_D_abs, ST_H_abs, ST_Q_abs...
    printOff18Imm(MI, 1, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 0, O);
    return;
    break;
  case 10:
    // LOOPU_brr
    printDisp15Imm(MI, 0, O);
    return;
    break;
  case 11:
    // MTCR_rlc
    printSExtImm_16(MI, 0, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 1, O);
    return;
    break;
  case 12:
    // ST_A_ssro, ST_B_ssro, ST_H_ssro, ST_W_ssro
    printZExtImm_4(MI, 1, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 0, O);
    return;
    break;
  }


  // Fragment 1 encoded into 4 bits for 13 unique commands.
  switch ((Bits >> 16) & 15) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ABSDIF_H_rr, ABSDIF...
    SStream_concat0(O, ", ");
    break;
  case 1:
    // ADD_src_a15, ADD_srr_a15, CADDN_src, CADD_src, CMOVN_src, CMOVN_srr, C...
    SStream_concat0(O, ", %d15, ");
    break;
  case 2:
    // AND_src, BISR_sc, CALLI_rr, DISABLE_sys_1, FCALLA_i, JI_rr, JI_sr, JLI...
    return;
    break;
  case 3:
    // CACHEI_I_bo_bso, CACHEI_I_bo_pre, CACHEI_WI_bo_bso, CACHEI_WI_bo_pre, ...
    SStream_concat1(O, ']');
    break;
  case 4:
    // CACHEI_I_bo_pos, CACHEI_WI_bo_pos, CACHEI_W_bo_pos, CACHE_I_bo_pos, CA...
    SStream_concat0(O, "+]");
    set_mem_access(MI, false);
    break;
  case 5:
    // CACHEI_W_bo_c, CACHE_I_bo_c, CACHE_WI_bo_c, CACHE_W_bo_c
    SStream_concat0(O, "+c]");
    set_mem_access(MI, false);
    printSExtImm_10(MI, 1, O);
    return;
    break;
  case 6:
    // CACHEI_W_bo_r, CACHE_I_bo_r, CACHE_WI_bo_r, CACHE_W_bo_r
    SStream_concat0(O, "+r]");
    set_mem_access(MI, false);
    return;
    break;
  case 7:
    // LD_A_bo_bso, LD_A_bo_c, LD_A_bo_pos, LD_A_bo_r, LD_A_bol, LD_A_slr, LD...
    SStream_concat0(O, ", [");
    set_mem_access(MI, true);
    break;
  case 8:
    // LD_A_bo_pre, LD_BU_bo_pre, LD_B_bo_pre, LD_DA_bo_pre, LD_D_bo_pre, LD_...
    SStream_concat0(O, ", [+");
    set_mem_access(MI, true);
    break;
  case 9:
    // LD_A_slro, LD_BU_slro, LD_H_slro, LD_W_slro
    SStream_concat0(O, ", [%a15]");
    set_mem_access(MI, true);
    printZExtImm_4(MI, 1, O);
    return;
    break;
  case 10:
    // ST_A_sc
    SStream_concat0(O, ", %a15");
    return;
    break;
  case 11:
    // ST_A_ssr, ST_B_ssr, ST_H_ssr, ST_W_ssr
    SStream_concat0(O, "], ");
    set_mem_access(MI, false);
    printOperand(MI, 1, O);
    return;
    break;
  case 12:
    // ST_A_ssr_pos, ST_B_ssr_pos, ST_H_ssr_pos, ST_W_ssr_pos
    SStream_concat0(O, "+], ");
    set_mem_access(MI, false);
    printOperand(MI, 1, O);
    return;
    break;
  }


  // Fragment 2 encoded into 4 bits for 13 unique commands.
  switch ((Bits >> 20) & 15) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ABSDIF_H_rr, ABSDIF...
    printOperand(MI, 1, O);
    break;
  case 1:
    // ADDSC_A_rr, ADD_F_rrr, CADDN_rcr, CADD_rcr, CRC32B_W_rr, CRC32L_W_rr, ...
    printOperand(MI, 2, O);
    break;
  case 2:
    // ADD_A_src, ADD_src, ADD_src_15a, ADD_src_a15, CADDN_src, CADD_src, CMO...
    printSExtImm_4(MI, 1, O);
    return;
    break;
  case 3:
    // CACHEI_I_bo_bso, CACHEI_I_bo_pos, CACHEI_I_bo_pre, CACHEI_WI_bo_bso, C...
    printSExtImm_10(MI, 1, O);
    return;
    break;
  case 4:
    // CADDN_rrr, CADD_rrr, CRCN_rrr, CSUBN_rrr, CSUB_rrr, MADDMS_H_rrr1_LL, ...
    printOperand(MI, 3, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 1, O);
    break;
  case 5:
    // CMPSWAP_W_bo_bso, CMPSWAP_W_bo_c, CMPSWAP_W_bo_pos, CMPSWAP_W_bo_pre, ...
    printSExtImm_10(MI, 2, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 0, O);
    return;
    break;
  case 6:
    // CMPSWAP_W_bo_r, LDMST_bo_r, ST_A_bo_pos, ST_A_bo_pre, ST_B_bo_pos, ST_...
    printOperand(MI, 0, O);
    break;
  case 7:
    // JEQ_brc, JGE_U_brc, JGE_brc, JLT_U_brc, JLT_brc, JNED_brc, JNEI_brc, J...
    printZExtImm_4(MI, 1, O);
    break;
  case 8:
    // JEQ_sbr1, JEQ_sbr2, JGEZ_sbr, JGTZ_sbr, JLEZ_sbr, JLTZ_sbr, JNE_sbr1, ...
    printDisp4Imm(MI, 1, O);
    return;
    break;
  case 9:
    // LD_A_abs, LD_BU_abs, LD_B_abs, LD_DA_abs, LD_D_abs, LD_HU_abs, LD_H_ab...
    printOff18Imm(MI, 1, O);
    return;
    break;
  case 10:
    // LOOP_brr
    printDisp15Imm(MI, 1, O);
    return;
    break;
  case 11:
    // MFCR_rlc, MOVH_A_rlc, MOVH_rlc, MOV_U_rlc, MOV_rlcDc, MOV_rlcEc
    printZExtImm_16(MI, 1, O);
    return;
    break;
  case 12:
    // ST_A_bol, ST_B_bol, ST_H_bol, ST_W_bol
    printSExtImm_16(MI, 2, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 1, O);
    return;
    break;
  }


  // Fragment 3 encoded into 4 bits for 11 unique commands.
  switch ((Bits >> 24) & 15) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ABSDIF_H_rr, ABSDIF...
    SStream_concat0(O, ", ");
    break;
  case 1:
    // ABS_B_rr, ABS_H_rr, ABS_rr, ADDS_srr, ADD_A_srr, ADD_srr, ADD_srr_15a,...
    return;
    break;
  case 2:
    // ADDSC_A_srrs
    SStream_concat0(O, ", %d15, ");
    printZExtImm_2(MI, 2, O);
    return;
    break;
  case 3:
    // LD_A_bo_bso, LD_A_bo_pre, LD_A_bol, LD_A_slr, LD_BU_bo_bso, LD_BU_bo_p...
    SStream_concat1(O, ']');
    break;
  case 4:
    // LD_A_bo_c, LD_BU_bo_c, LD_B_bo_c, LD_DA_bo_c, LD_D_bo_c, LD_HU_bo_c, L...
    SStream_concat0(O, "+c]");
    set_mem_access(MI, false);
    printSExtImm_10(MI, 2, O);
    return;
    break;
  case 5:
    // LD_A_bo_pos, LD_A_slr_post, LD_BU_bo_pos, LD_BU_slr_post, LD_B_bo_pos,...
    SStream_concat0(O, "+]");
    set_mem_access(MI, false);
    break;
  case 6:
    // LD_A_bo_r, LD_BU_bo_r, LD_B_bo_r, LD_DA_bo_r, LD_D_bo_r, LD_HU_bo_r, L...
    SStream_concat0(O, "+r]");
    set_mem_access(MI, false);
    return;
    break;
  case 7:
    // MADDRS_Q_rrr1_L_L, MADDR_Q_rrr1_L_L, MADDS_Q_rrr1_L_L, MADDS_Q_rrr1_e_...
    SStream_concat0(O, "L, ");
    printOperand(MI, 2, O);
    SStream_concat0(O, "L, ");
    break;
  case 8:
    // MADDRS_Q_rrr1_U_U, MADDR_Q_rrr1_U_U, MADDS_Q_rrr1_U_U, MADDS_Q_rrr1_e_...
    SStream_concat0(O, "U, ");
    printOperand(MI, 2, O);
    SStream_concat0(O, "U, ");
    break;
  case 9:
    // ST_A_sro
    SStream_concat0(O, ", %a15");
    return;
    break;
  case 10:
    // ST_B_sro, ST_H_sro, ST_W_sro
    SStream_concat0(O, ", %d15");
    return;
    break;
  }


  // Fragment 4 encoded into 4 bits for 10 unique commands.
  switch ((Bits >> 28) & 15) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ABSDIF_H_rr, ABSDIF...
    printOperand(MI, 2, O);
    break;
  case 1:
    // ABSDIF_rc, ADDC_rc, ADDS_U_rc, ADDS_rc, ADDX_rc, ADD_rc, ANDN_rc, AND_...
    printSExtImm_9(MI, 2, O);
    return;
    break;
  case 2:
    // ADDIH_A_rlc, ADDIH_rlc, ADDI_rlc
    printSExtImm_16(MI, 2, O);
    return;
    break;
  case 3:
    // ADDSC_A_rr, ADD_F_rrr, CADDN_rcr, CADD_rcr, CRC32B_W_rr, CRC32L_W_rr, ...
    printOperand(MI, 1, O);
    break;
  case 4:
    // ANDN_T, AND_ANDN_T, AND_AND_T, AND_NOR_T, AND_OR_T, AND_T, INSN_T, INS...
    printZExtImm_4(MI, 3, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 2, O);
    SStream_concat0(O, ", ");
    printZExtImm_4(MI, 4, O);
    return;
    break;
  case 5:
    // JEQ_A_brr, JEQ_brc, JEQ_brr, JGE_U_brc, JGE_U_brr, JGE_brc, JGE_brr, J...
    printDisp15Imm(MI, 2, O);
    return;
    break;
  case 6:
    // LD_A_bo_bso, LD_A_bo_pos, LD_A_bo_pre, LD_BU_bo_bso, LD_BU_bo_pos, LD_...
    printSExtImm_10(MI, 2, O);
    return;
    break;
  case 7:
    // LD_A_slr, LD_A_slr_post, LD_BU_slr, LD_BU_slr_post, LD_H_slr, LD_H_slr...
    return;
    break;
  case 8:
    // MADDRS_Q_rrr1_L_L, MADDRS_Q_rrr1_U_U, MADDR_Q_rrr1_L_L, MADDR_Q_rrr1_U...
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 9:
    // MULR_Q_rr1_2LL, MULR_Q_rr1_2UU, MUL_Q_rr1_2LL, MUL_Q_rr1_2UU
    printZExtImm_2(MI, 3, O);
    return;
    break;
  }


  // Fragment 5 encoded into 4 bits for 15 unique commands.
  switch ((Bits >> 32) & 15) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ABSDIF_H_rr, ABSDIF...
    return;
    break;
  case 1:
    // ADDSC_A_rr, CADDN_rcr, CADD_rcr, DEXTR_rrpw, DEXTR_rrrr, EXTR_U_rrpw, ...
    SStream_concat0(O, ", ");
    break;
  case 2:
    // MADDMS_H_rrr1_LL, MADDM_H_rrr1_LL, MADDRS_H_rrr1_LL, MADDR_H_rrr1_LL, ...
    SStream_concat0(O, " LL, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 3:
    // MADDMS_H_rrr1_LU, MADDM_H_rrr1_LU, MADDRS_H_rrr1_LU, MADDR_H_rrr1_LU, ...
    SStream_concat0(O, " LU, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 4:
    // MADDMS_H_rrr1_UL, MADDM_H_rrr1_UL, MADDRS_H_rrr1_UL, MADDR_H_rrr1_UL, ...
    SStream_concat0(O, " UL, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 5:
    // MADDMS_H_rrr1_UU, MADDM_H_rrr1_UU, MADDRS_H_rrr1_UU, MADDR_H_rrr1_UU, ...
    SStream_concat0(O, " UU, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 6:
    // MADDRS_H_rrr1_DcEdDaDbUL, MADDR_H_rrr1_DcEdDaDbUL, MSUBRS_H_rrr1_DcEdD...
    SStream_concat0(O, ", UL, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 7:
    // MADDS_Q_rrr1_L, MADDS_Q_rrr1_e_L, MADD_Q_rrr1_L, MADD_Q_rrr1_e_L, MSUB...
    SStream_concat0(O, " L, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 8:
    // MADDS_Q_rrr1_U, MADDS_Q_rrr1_e_U, MADD_Q_rrr1_U, MADD_Q_rrr1_e_U, MSUB...
    SStream_concat0(O, " U, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 9:
    // MULM_H_rr1_LL2e, MULR_H_rr1_LL2e, MUL_H_rr1_LL2e
    SStream_concat0(O, "LL, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 10:
    // MULM_H_rr1_LU2e, MULR_H_rr1_LU2e, MUL_H_rr1_LU2e
    SStream_concat0(O, "LU, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 11:
    // MULM_H_rr1_UL2e, MULR_H_rr1_UL2e, MUL_H_rr1_UL2e
    SStream_concat0(O, "UL, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 12:
    // MULM_H_rr1_UU2e, MULR_H_rr1_UU2e, MUL_H_rr1_UU2e
    SStream_concat0(O, "UU, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 13:
    // MUL_Q_rr1_2_L, MUL_Q_rr1_2_Le
    SStream_concat0(O, "L, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 14:
    // MUL_Q_rr1_2_U, MUL_Q_rr1_2_Ue
    SStream_concat0(O, "U, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  }


  // Fragment 6 encoded into 2 bits for 4 unique commands.
  switch ((Bits >> 36) & 3) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ADDSC_A_rr, DEXTR_rrpw, DEXTR_rrrr, EXTR_U_rrpw, EXTR_U_rrrw, EXTR_rrp...
    printOperand(MI, 3, O);
    break;
  case 1:
    // CADDN_rcr, CADD_rcr, MADDS_U_rcr, MADDS_U_rcr_e, MADDS_rcr, MADDS_rcr_...
    printSExtImm_9(MI, 3, O);
    return;
    break;
  case 2:
    // MADDS_Q_rrr1, MADDS_Q_rrr1_e, MADD_Q_rrr1, MADD_Q_rrr1_e, MSUBS_Q_rrr1...
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 3:
    // MUL_Q_rr1_2__, MUL_Q_rr1_2__e
    printZExtImm_2(MI, 3, O);
    return;
    break;
  }


  // Fragment 7 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 38) & 1) {
    // INSERT_rcpw, INSERT_rcrw, INSERT_rrpw, INSERT_rrrr, INSERT_rrrw
    SStream_concat0(O, ", ");
    printOperand(MI, 4, O);
    return;
  } else {
    // ADDSC_A_rr, DEXTR_rrpw, DEXTR_rrrr, EXTR_U_rrpw, EXTR_U_rrrw, EXTR_rrp...
    return;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 61 && "Invalid register number!");

  static const char AsmStrs[] = {
  /* 0 */ "d10\0"
  /* 4 */ "e10\0"
  /* 8 */ "p10\0"
  /* 12 */ "a0\0"
  /* 15 */ "d0\0"
  /* 18 */ "e0\0"
  /* 21 */ "p0\0"
  /* 24 */ "A10_A11\0"
  /* 32 */ "a11\0"
  /* 36 */ "d11\0"
  /* 40 */ "A0_A1\0"
  /* 46 */ "a1\0"
  /* 49 */ "d1\0"
  /* 52 */ "a12\0"
  /* 56 */ "d12\0"
  /* 60 */ "e12\0"
  /* 64 */ "p12\0"
  /* 68 */ "a2\0"
  /* 71 */ "d2\0"
  /* 74 */ "e2\0"
  /* 77 */ "p2\0"
  /* 80 */ "A12_A13\0"
  /* 88 */ "a13\0"
  /* 92 */ "d13\0"
  /* 96 */ "A2_A3\0"
  /* 102 */ "a3\0"
  /* 105 */ "d3\0"
  /* 108 */ "a14\0"
  /* 112 */ "d14\0"
  /* 116 */ "e14\0"
  /* 120 */ "p14\0"
  /* 124 */ "a4\0"
  /* 127 */ "d4\0"
  /* 130 */ "e4\0"
  /* 133 */ "p4\0"
  /* 136 */ "A14_A15\0"
  /* 144 */ "a15\0"
  /* 148 */ "d15\0"
  /* 152 */ "A4_A5\0"
  /* 158 */ "a5\0"
  /* 161 */ "d5\0"
  /* 164 */ "a6\0"
  /* 167 */ "d6\0"
  /* 170 */ "e6\0"
  /* 173 */ "p6\0"
  /* 176 */ "A6_A7\0"
  /* 182 */ "a7\0"
  /* 185 */ "d7\0"
  /* 188 */ "a8\0"
  /* 191 */ "d8\0"
  /* 194 */ "e8\0"
  /* 197 */ "p8\0"
  /* 200 */ "A8_A9\0"
  /* 206 */ "a9\0"
  /* 209 */ "d9\0"
  /* 212 */ "pc\0"
  /* 215 */ "pcxi\0"
  /* 220 */ "sp\0"
  /* 223 */ "psw\0"
  /* 227 */ "fcx\0"
};
  static const uint8_t RegAsmOffset[] = {
    227, 212, 215, 223, 12, 46, 68, 102, 124, 158, 164, 182, 188, 206, 
    220, 32, 52, 88, 108, 144, 15, 49, 71, 105, 127, 161, 167, 185, 
    191, 209, 0, 36, 56, 92, 112, 148, 18, 74, 130, 170, 194, 4, 
    60, 116, 21, 77, 133, 173, 197, 8, 64, 120, 40, 96, 152, 176, 
    200, 24, 80, 136, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}
#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

bool printAliasInstr(MCInst *MI, uint64_t Address, SStream *OS) {
  return false;
}

#endif // PRINT_ALIAS_INSTR
