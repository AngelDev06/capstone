/* Capstone Disassembly Engine, http://www.capstone-engine.org */
/* By Nguyen Anh Quynh <aquynh@gmail.com>, 2013-2022, */
/*    Rot127 <unisono@quyllur.org> 2022-2023 */
/* Automatically generated file by the LLVM TableGen Disassembler Backend. */
/* Do not edit. */

#include <capstone/platform.h>
#include <assert.h>

/// getMnemonic - This method is automatically generated by tablegen
/// from the instruction set description.
MnemonicBitsInfo getMnemonic(MCInst *MI, SStream *O) {
  static const char AsmStrs[] = {
  /* 0 */ "sub %d15, \0"
  /* 11 */ "add %d15, \0"
  /* 22 */ "and %d15, \0"
  /* 33 */ "jne %d15, \0"
  /* 44 */ "jeq %d15, \0"
  /* 55 */ "or %d15, \0"
  /* 65 */ "jz.t %d15, \0"
  /* 77 */ "jnz.t %d15, \0"
  /* 90 */ "lt %d15, \0"
  /* 100 */ "lt.u %d15, \0"
  /* 112 */ "mov %d15, \0"
  /* 123 */ "jz %d15, \0"
  /* 133 */ "jnz %d15, \0"
  /* 144 */ "ld.a %a15, %sp, \0"
  /* 161 */ "ld.w %a15, %sp, \0"
  /* 178 */ "sub.a %sp, \0"
  /* 190 */ "st.a %sp, \0"
  /* 201 */ "ftoq31 \0"
  /* 209 */ "CMPSWAP.W \0"
  /* 220 */ "csub.a \0"
  /* 228 */ "addsc.a \0"
  /* 237 */ "difsc.a \0"
  /* 246 */ "cadd.a \0"
  /* 254 */ "ld.a \0"
  /* 260 */ "ge.a \0"
  /* 266 */ "jne.a \0"
  /* 273 */ "addih.a \0"
  /* 282 */ "movh.a \0"
  /* 290 */ "csubn.a \0"
  /* 299 */ "caddn.a \0"
  /* 308 */ "jeq.a \0"
  /* 315 */ "lt.a \0"
  /* 321 */ "st.a \0"
  /* 327 */ "mov.a \0"
  /* 334 */ "nez.a \0"
  /* 341 */ "jz.a \0"
  /* 347 */ "jnz.a \0"
  /* 354 */ "eqz.a \0"
  /* 361 */ "mov.aa \0"
  /* 369 */ "ld.da \0"
  /* 376 */ "st.da \0"
  /* 383 */ "lea \0"
  /* 388 */ "lha \0"
  /* 393 */ "sha \0"
  /* 398 */ "ja \0"
  /* 402 */ "jla \0"
  /* 407 */ "fcalla \0"
  /* 415 */ "crc32.b \0"
  /* 424 */ "sub.b \0"
  /* 431 */ "add.b \0"
  /* 438 */ "ld.b \0"
  /* 444 */ "absdif.b \0"
  /* 454 */ "min.b \0"
  /* 461 */ "clo.b \0"
  /* 468 */ "eq.b \0"
  /* 474 */ "abs.b \0"
  /* 481 */ "adds.b \0"
  /* 489 */ "absdifs.b \0"
  /* 500 */ "cls.b \0"
  /* 507 */ "abss.b \0"
  /* 515 */ "sat.b \0"
  /* 522 */ "dvinit.b \0"
  /* 532 */ "lt.b \0"
  /* 538 */ "st.b \0"
  /* 544 */ "max.b \0"
  /* 551 */ "eqany.b \0"
  /* 560 */ "clz.b \0"
  /* 567 */ "csub \0"
  /* 573 */ "msub \0"
  /* 579 */ "rsub \0"
  /* 585 */ "subc \0"
  /* 591 */ "addc \0"
  /* 597 */ "ld.d \0"
  /* 603 */ "st.d \0"
  /* 609 */ "mov.d \0"
  /* 616 */ "cadd \0"
  /* 622 */ "madd \0"
  /* 628 */ "jned \0"
  /* 634 */ "nand \0"
  /* 640 */ "and.ge \0"
  /* 648 */ "sh.ge \0"
  /* 655 */ "xor.ge \0"
  /* 663 */ "jge \0"
  /* 668 */ "bmerge \0"
  /* 676 */ "disable \0"
  /* 685 */ "shuffle \0"
  /* 694 */ "and.ne \0"
  /* 702 */ "xor.ne \0"
  /* 710 */ "jne \0"
  /* 715 */ "msub.f \0"
  /* 723 */ "madd.f \0"
  /* 731 */ "qseed.f \0"
  /* 740 */ "mul.f \0"
  /* 747 */ "cmp.f \0"
  /* 754 */ "div.f \0"
  /* 761 */ "absdif \0"
  /* 769 */ "q31tof \0"
  /* 777 */ "itof \0"
  /* 783 */ "hptof \0"
  /* 790 */ "utof \0"
  /* 796 */ "sha.h \0"
  /* 803 */ "msub.h \0"
  /* 811 */ "msubad.h \0"
  /* 821 */ "madd.h \0"
  /* 829 */ "ld.h \0"
  /* 835 */ "absdif.h \0"
  /* 845 */ "sh.h \0"
  /* 851 */ "mul.h \0"
  /* 858 */ "msubm.h \0"
  /* 867 */ "msubadm.h \0"
  /* 878 */ "maddm.h \0"
  /* 887 */ "mulm.h \0"
  /* 895 */ "maddsum.h \0"
  /* 906 */ "min.h \0"
  /* 913 */ "clo.h \0"
  /* 920 */ "eq.h \0"
  /* 926 */ "msubr.h \0"
  /* 935 */ "msubadr.h \0"
  /* 946 */ "maddr.h \0"
  /* 955 */ "mulr.h \0"
  /* 963 */ "maddsur.h \0"
  /* 974 */ "abs.h \0"
  /* 981 */ "msubs.h \0"
  /* 990 */ "msubads.h \0"
  /* 1001 */ "madds.h \0"
  /* 1010 */ "absdifs.h \0"
  /* 1021 */ "cls.h \0"
  /* 1028 */ "msubms.h \0"
  /* 1038 */ "msubadms.h \0"
  /* 1050 */ "maddms.h \0"
  /* 1060 */ "maddsums.h \0"
  /* 1072 */ "msubrs.h \0"
  /* 1082 */ "msubadrs.h \0"
  /* 1094 */ "maddrs.h \0"
  /* 1104 */ "maddsurs.h \0"
  /* 1116 */ "abss.h \0"
  /* 1124 */ "maddsus.h \0"
  /* 1135 */ "sat.h \0"
  /* 1142 */ "dvinit.h \0"
  /* 1152 */ "lt.h \0"
  /* 1158 */ "st.h \0"
  /* 1164 */ "maddsu.h \0"
  /* 1174 */ "max.h \0"
  /* 1181 */ "eqany.h \0"
  /* 1190 */ "clz.h \0"
  /* 1197 */ "addih \0"
  /* 1204 */ "sh \0"
  /* 1208 */ "movh \0"
  /* 1214 */ "addi \0"
  /* 1220 */ "jnei \0"
  /* 1226 */ "ji \0"
  /* 1230 */ "jli \0"
  /* 1235 */ "fcalli \0"
  /* 1243 */ "ftoi \0"
  /* 1249 */ "dvadj \0"
  /* 1256 */ "unpack \0"
  /* 1264 */ "imask \0"
  /* 1271 */ "sel \0"
  /* 1276 */ "updfl \0"
  /* 1283 */ "jl \0"
  /* 1287 */ "fcall \0"
  /* 1294 */ "syscall \0"
  /* 1303 */ "mul \0"
  /* 1308 */ "maddm \0"
  /* 1315 */ "crcn \0"
  /* 1321 */ "caddn \0"
  /* 1328 */ "andn \0"
  /* 1334 */ "ixmin \0"
  /* 1341 */ "seln \0"
  /* 1347 */ "orn \0"
  /* 1352 */ "cmovn \0"
  /* 1359 */ "clo \0"
  /* 1364 */ "dvstep \0"
  /* 1372 */ "ftohp \0"
  /* 1379 */ "loop \0"
  /* 1385 */ "msub.q \0"
  /* 1393 */ "madd.q \0"
  /* 1401 */ "ld.q \0"
  /* 1407 */ "mul.q \0"
  /* 1414 */ "maddm.q \0"
  /* 1423 */ "msubr.q \0"
  /* 1432 */ "maddr.q \0"
  /* 1441 */ "mulr.q \0"
  /* 1449 */ "msubs.q \0"
  /* 1458 */ "madds.q \0"
  /* 1467 */ "msubrs.q \0"
  /* 1477 */ "maddrs.q \0"
  /* 1487 */ "st.q \0"
  /* 1493 */ "and.eq \0"
  /* 1501 */ "sh.eq \0"
  /* 1508 */ "xor.eq \0"
  /* 1516 */ "jeq \0"
  /* 1521 */ "mfcr \0"
  /* 1527 */ "mtcr \0"
  /* 1533 */ "xnor \0"
  /* 1539 */ "xor \0"
  /* 1544 */ "bisr \0"
  /* 1550 */ "dextr \0"
  /* 1557 */ "shas \0"
  /* 1563 */ "abs \0"
  /* 1568 */ "msubs \0"
  /* 1575 */ "rsubs \0"
  /* 1582 */ "madds \0"
  /* 1589 */ "absdifs \0"
  /* 1598 */ "cls \0"
  /* 1603 */ "muls \0"
  /* 1609 */ "maddms \0"
  /* 1617 */ "abss \0"
  /* 1623 */ "and.and.t \0"
  /* 1634 */ "sh.and.t \0"
  /* 1644 */ "or.and.t \0"
  /* 1654 */ "sh.nand.t \0"
  /* 1665 */ "and.andn.t \0"
  /* 1677 */ "sh.andn.t \0"
  /* 1688 */ "or.andn.t \0"
  /* 1699 */ "sh.orn.t \0"
  /* 1709 */ "insn.t \0"
  /* 1717 */ "and.or.t \0"
  /* 1727 */ "sh.or.t \0"
  /* 1736 */ "or.or.t \0"
  /* 1745 */ "and.nor.t \0"
  /* 1756 */ "sh.nor.t \0"
  /* 1766 */ "or.nor.t \0"
  /* 1776 */ "sh.xnor.t \0"
  /* 1787 */ "sh.xor.t \0"
  /* 1797 */ "ins.t \0"
  /* 1804 */ "st.t \0"
  /* 1810 */ "jz.t \0"
  /* 1816 */ "jnz.t \0"
  /* 1823 */ "bsplit \0"
  /* 1831 */ "dvinit \0"
  /* 1839 */ "and.lt \0"
  /* 1847 */ "sh.lt \0"
  /* 1854 */ "xor.lt \0"
  /* 1862 */ "jlt \0"
  /* 1867 */ "not \0"
  /* 1872 */ "insert \0"
  /* 1880 */ "ldmst \0"
  /* 1887 */ "madd.u \0"
  /* 1895 */ "and.ge.u \0"
  /* 1905 */ "sh.ge.u \0"
  /* 1914 */ "xor.ge.u \0"
  /* 1924 */ "jge.u \0"
  /* 1931 */ "mul.u \0"
  /* 1938 */ "maddm.u \0"
  /* 1947 */ "ixmin.u \0"
  /* 1956 */ "dvstep.u \0"
  /* 1966 */ "extr.u \0"
  /* 1974 */ "rsubs.u \0"
  /* 1983 */ "madds.u \0"
  /* 1992 */ "muls.u \0"
  /* 2000 */ "maddms.u \0"
  /* 2010 */ "dvinit.u \0"
  /* 2020 */ "and.lt.u \0"
  /* 2030 */ "sh.lt.u \0"
  /* 2039 */ "xor.lt.u \0"
  /* 2049 */ "jlt.u \0"
  /* 2056 */ "div.u \0"
  /* 2063 */ "mov.u \0"
  /* 2070 */ "ixmax.u \0"
  /* 2079 */ "ld.bu \0"
  /* 2086 */ "min.bu \0"
  /* 2094 */ "adds.bu \0"
  /* 2103 */ "sat.bu \0"
  /* 2111 */ "dvinit.bu \0"
  /* 2122 */ "lt.bu \0"
  /* 2129 */ "max.bu \0"
  /* 2137 */ "ld.hu \0"
  /* 2144 */ "min.hu \0"
  /* 2152 */ "subs.hu \0"
  /* 2161 */ "adds.hu \0"
  /* 2170 */ "sat.hu \0"
  /* 2178 */ "dvinit.hu \0"
  /* 2189 */ "lt.hu \0"
  /* 2196 */ "max.hu \0"
  /* 2204 */ "ftou \0"
  /* 2210 */ "loopu \0"
  /* 2217 */ "lt.wu \0"
  /* 2224 */ "div \0"
  /* 2229 */ "cmov \0"
  /* 2235 */ "crc32b.w \0"
  /* 2245 */ "ld.w \0"
  /* 2251 */ "swapmsk.w \0"
  /* 2262 */ "crc32l.w \0"
  /* 2272 */ "swap.w \0"
  /* 2280 */ "eq.w \0"
  /* 2286 */ "lt.w \0"
  /* 2292 */ "popcnt.w \0"
  /* 2302 */ "st.w \0"
  /* 2308 */ "ixmax \0"
  /* 2315 */ "subx \0"
  /* 2321 */ "ldlcx \0"
  /* 2328 */ "stlcx \0"
  /* 2335 */ "lducx \0"
  /* 2342 */ "stucx \0"
  /* 2349 */ "addx \0"
  /* 2355 */ "parity \0"
  /* 2363 */ "ftoq31z \0"
  /* 2372 */ "jgez \0"
  /* 2378 */ "jlez \0"
  /* 2384 */ "ftoiz \0"
  /* 2391 */ "jz \0"
  /* 2395 */ "clz \0"
  /* 2400 */ "jnz \0"
  /* 2405 */ "jgtz \0"
  /* 2411 */ "jltz \0"
  /* 2417 */ "ftouz \0"
  /* 2424 */ "CMPSWAP.W [+\0"
  /* 2437 */ "cachea.i [+\0"
  /* 2449 */ "cachei.i [+\0"
  /* 2461 */ "cachea.wi [+\0"
  /* 2474 */ "cachei.wi [+\0"
  /* 2487 */ "ldmst [+\0"
  /* 2496 */ "cachea.w [+\0"
  /* 2508 */ "cachei.w [+\0"
  /* 2520 */ "# XRay Function Patchable RET.\0"
  /* 2551 */ "# XRay Typed Event Log.\0"
  /* 2575 */ "# XRay Custom Event Log.\0"
  /* 2600 */ "# XRay Function Enter.\0"
  /* 2623 */ "# XRay Tail Call Exit.\0"
  /* 2646 */ "# XRay Function Exit.\0"
  /* 2668 */ "addsc.at %d, %s2, %s1\0"
  /* 2690 */ "addsc.at %d, %s1, %s2\0"
  /* 2712 */ "LIFETIME_END\0"
  /* 2725 */ "PSEUDO_PROBE\0"
  /* 2738 */ "BUNDLE\0"
  /* 2745 */ "DBG_VALUE\0"
  /* 2755 */ "DBG_INSTR_REF\0"
  /* 2769 */ "DBG_PHI\0"
  /* 2777 */ "DBG_LABEL\0"
  /* 2787 */ "LIFETIME_START\0"
  /* 2802 */ "DBG_VALUE_LIST\0"
  /* 2817 */ "ld.a %a15, [\0"
  /* 2830 */ "ld.b %d15, [\0"
  /* 2843 */ "ld.h %d15, [\0"
  /* 2856 */ "ld.bu %d15, [\0"
  /* 2870 */ "ld.w %d15, [\0"
  /* 2883 */ "CMPSWAP.W [\0"
  /* 2895 */ "st.a [\0"
  /* 2902 */ "st.da [\0"
  /* 2910 */ "st.b [\0"
  /* 2917 */ "st.d [\0"
  /* 2924 */ "st.h [\0"
  /* 2931 */ "cachea.i [\0"
  /* 2942 */ "cachei.i [\0"
  /* 2953 */ "cachea.wi [\0"
  /* 2965 */ "cachei.wi [\0"
  /* 2977 */ "st.q [\0"
  /* 2984 */ "ldmst [\0"
  /* 2992 */ "cachea.w [\0"
  /* 3003 */ "cachei.w [\0"
  /* 3014 */ "swapmsk.w [\0"
  /* 3026 */ "swap.w [\0"
  /* 3035 */ "st.w [\0"
  /* 3042 */ "ldlcx [\0"
  /* 3050 */ "stlcx [\0"
  /* 3058 */ "lducx [\0"
  /* 3066 */ "stucx [\0"
  /* 3074 */ "st.a [%a15]\0"
  /* 3086 */ "st.b [%a15]\0"
  /* 3098 */ "st.h [%a15]\0"
  /* 3110 */ "st.w [%a15]\0"
  /* 3122 */ "sub.a\0"
  /* 3128 */ "add.a\0"
  /* 3134 */ "mov.a\0"
  /* 3140 */ "dsync\0"
  /* 3146 */ "isync\0"
  /* 3152 */ "rfe\0"
  /* 3156 */ "enable\0"
  /* 3163 */ "disable\0"
  /* 3171 */ "restore\0"
  /* 3179 */ "debug\0"
  /* 3185 */ "relck\0"
  /* 3191 */ "# FEntry call\0"
  /* 3205 */ "rfm\0"
  /* 3209 */ "nop\0"
  /* 3213 */ "fret\0"
  /* 3218 */ "wait\0"
  /* 3223 */ "trapv\0"
  /* 3229 */ "trapsv\0"
  /* 3236 */ "svlcx\0"
};
  static const uint32_t OpInfo0[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// INLINEASM_BR
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    2746U,	// DBG_VALUE
    2803U,	// DBG_VALUE_LIST
    2756U,	// DBG_INSTR_REF
    2770U,	// DBG_PHI
    2778U,	// DBG_LABEL
    0U,	// REG_SEQUENCE
    0U,	// COPY
    2739U,	// BUNDLE
    2788U,	// LIFETIME_START
    2713U,	// LIFETIME_END
    2726U,	// PSEUDO_PROBE
    0U,	// ARITH_FENCE
    0U,	// STACKMAP
    3192U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// PREALLOCATED_SETUP
    0U,	// PREALLOCATED_ARG
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    2601U,	// PATCHABLE_FUNCTION_ENTER
    2521U,	// PATCHABLE_RET
    2647U,	// PATCHABLE_FUNCTION_EXIT
    2624U,	// PATCHABLE_TAIL_CALL
    2576U,	// PATCHABLE_EVENT_CALL
    2552U,	// PATCHABLE_TYPED_EVENT_CALL
    0U,	// ICALL_BRANCH_FUNNEL
    0U,	// G_ASSERT_SEXT
    0U,	// G_ASSERT_ZEXT
    0U,	// G_ASSERT_ALIGN
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_SDIVREM
    0U,	// G_UDIVREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_BUILD_VECTOR
    0U,	// G_BUILD_VECTOR_TRUNC
    0U,	// G_CONCAT_VECTORS
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_FREEZE
    0U,	// G_INTRINSIC_FPTRUNC_ROUND
    0U,	// G_INTRINSIC_TRUNC
    0U,	// G_INTRINSIC_ROUND
    0U,	// G_INTRINSIC_LRINT
    0U,	// G_INTRINSIC_ROUNDEVEN
    0U,	// G_READCYCLECOUNTER
    0U,	// G_LOAD
    0U,	// G_SEXTLOAD
    0U,	// G_ZEXTLOAD
    0U,	// G_INDEXED_LOAD
    0U,	// G_INDEXED_SEXTLOAD
    0U,	// G_INDEXED_ZEXTLOAD
    0U,	// G_STORE
    0U,	// G_INDEXED_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_ATOMICRMW_FADD
    0U,	// G_ATOMICRMW_FSUB
    0U,	// G_ATOMICRMW_FMAX
    0U,	// G_ATOMICRMW_FMIN
    0U,	// G_FENCE
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INVOKE_REGION_START
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_SEXT_INREG
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_FSHL
    0U,	// G_FSHR
    0U,	// G_ROTR
    0U,	// G_ROTL
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDO
    0U,	// G_UADDE
    0U,	// G_USUBO
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SADDE
    0U,	// G_SSUBO
    0U,	// G_SSUBE
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_UADDSAT
    0U,	// G_SADDSAT
    0U,	// G_USUBSAT
    0U,	// G_SSUBSAT
    0U,	// G_USHLSAT
    0U,	// G_SSHLSAT
    0U,	// G_SMULFIX
    0U,	// G_UMULFIX
    0U,	// G_SMULFIXSAT
    0U,	// G_UMULFIXSAT
    0U,	// G_SDIVFIX
    0U,	// G_UDIVFIX
    0U,	// G_SDIVFIXSAT
    0U,	// G_UDIVFIXSAT
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FMAD
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FPOWI
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FLOG10
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_FABS
    0U,	// G_FCOPYSIGN
    0U,	// G_IS_FPCLASS
    0U,	// G_FCANONICALIZE
    0U,	// G_FMINNUM
    0U,	// G_FMAXNUM
    0U,	// G_FMINNUM_IEEE
    0U,	// G_FMAXNUM_IEEE
    0U,	// G_FMINIMUM
    0U,	// G_FMAXIMUM
    0U,	// G_PTR_ADD
    0U,	// G_PTRMASK
    0U,	// G_SMIN
    0U,	// G_SMAX
    0U,	// G_UMIN
    0U,	// G_UMAX
    0U,	// G_ABS
    0U,	// G_LROUND
    0U,	// G_LLROUND
    0U,	// G_BR
    0U,	// G_BRJT
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_CTTZ
    0U,	// G_CTTZ_ZERO_UNDEF
    0U,	// G_CTLZ
    0U,	// G_CTLZ_ZERO_UNDEF
    0U,	// G_CTPOP
    0U,	// G_BSWAP
    0U,	// G_BITREVERSE
    0U,	// G_FCEIL
    0U,	// G_FCOS
    0U,	// G_FSIN
    0U,	// G_FSQRT
    0U,	// G_FFLOOR
    0U,	// G_FRINT
    0U,	// G_FNEARBYINT
    0U,	// G_ADDRSPACE_CAST
    0U,	// G_BLOCK_ADDR
    0U,	// G_JUMP_TABLE
    0U,	// G_DYN_STACKALLOC
    0U,	// G_STRICT_FADD
    0U,	// G_STRICT_FSUB
    0U,	// G_STRICT_FMUL
    0U,	// G_STRICT_FDIV
    0U,	// G_STRICT_FREM
    0U,	// G_STRICT_FMA
    0U,	// G_STRICT_FSQRT
    0U,	// G_READ_REGISTER
    0U,	// G_WRITE_REGISTER
    0U,	// G_MEMCPY
    0U,	// G_MEMCPY_INLINE
    0U,	// G_MEMMOVE
    0U,	// G_MEMSET
    0U,	// G_BZERO
    0U,	// G_VECREDUCE_SEQ_FADD
    0U,	// G_VECREDUCE_SEQ_FMUL
    0U,	// G_VECREDUCE_FADD
    0U,	// G_VECREDUCE_FMUL
    0U,	// G_VECREDUCE_FMAX
    0U,	// G_VECREDUCE_FMIN
    0U,	// G_VECREDUCE_ADD
    0U,	// G_VECREDUCE_MUL
    0U,	// G_VECREDUCE_AND
    0U,	// G_VECREDUCE_OR
    0U,	// G_VECREDUCE_XOR
    0U,	// G_VECREDUCE_SMAX
    0U,	// G_VECREDUCE_SMIN
    0U,	// G_VECREDUCE_UMAX
    0U,	// G_VECREDUCE_UMIN
    0U,	// G_SBFX
    0U,	// G_UBFX
    4586U,	// ABSDIFS_B_rr_v110
    5107U,	// ABSDIFS_H_rr
    5686U,	// ABSDIFS_rc
    5686U,	// ABSDIFS_rr
    4541U,	// ABSDIF_B_rr
    4932U,	// ABSDIF_H_rr
    268440314U,	// ABSDIF_rc
    4858U,	// ABSDIF_rr
    4604U,	// ABSS_B_rr_v110
    5213U,	// ABSS_H_rr
    5714U,	// ABSS_rr
    16781787U,	// ABS_B_rr
    16782287U,	// ABS_H_rr
    16782876U,	// ABS_rr
    268440144U,	// ADDC_rc
    4688U,	// ADDC_rr
    536875282U,	// ADDIH_A_rlc
    536876206U,	// ADDIH_rlc
    536876223U,	// ADDI_rlc
    2669U,	// ADDSC_AT_rr
    2691U,	// ADDSC_AT_rr_v110
    806359269U,	// ADDSC_A_rr
    4325U,	// ADDSC_A_rr_v110
    33558757U,	// ADDSC_A_srrs
    1073746149U,	// ADDSC_A_srrs_v110
    6191U,	// ADDS_BU_rr_v110
    4578U,	// ADDS_B_rr_v110
    5099U,	// ADDS_H
    6258U,	// ADDS_HU
    6081U,	// ADDS_U
    268441537U,	// ADDS_U_rc
    268441136U,	// ADDS_rc
    5680U,	// ADDS_rr
    16782896U,	// ADDS_srr
    268441902U,	// ADDX_rc
    6446U,	// ADDX_rr
    3129U,	// ADD_A_rr
    2101496U,	// ADD_A_src
    16781560U,	// ADD_A_srr
    4528U,	// ADD_B_rr
    806359765U,	// ADD_F_rrr
    4919U,	// ADD_H_rr
    268440170U,	// ADD_rc
    4714U,	// ADD_rr
    2101866U,	// ADD_src
    2101260U,	// ADD_src_15a
    2167402U,	// ADD_src_a15
    16781930U,	// ADD_srr
    16781324U,	// ADD_srr_15a
    16847466U,	// ADD_srr_a15
    1342183046U,	// ANDN_T
    268440881U,	// ANDN_rc
    5425U,	// ANDN_rr
    1342183042U,	// AND_ANDN_T
    1342183000U,	// AND_AND_T
    268441046U,	// AND_EQ_rc
    5590U,	// AND_EQ_rr
    268441448U,	// AND_GE_U_rc
    5992U,	// AND_GE_U_rr
    268440193U,	// AND_GE_rc
    4737U,	// AND_GE_rr
    268441573U,	// AND_LT_U_rc
    6117U,	// AND_LT_U_rr
    268441392U,	// AND_LT_rc
    5936U,	// AND_LT_rr
    268440247U,	// AND_NE_rc
    4791U,	// AND_NE_rr
    1342183122U,	// AND_NOR_T
    1342183094U,	// AND_OR_T
    1342183004U,	// AND_T
    268440188U,	// AND_rc
    4732U,	// AND_rr
    139287U,	// AND_sc
    139287U,	// AND_sc_v110
    16781948U,	// AND_srr
    16781948U,	// AND_srr_v110
    13833U,	// BISR_rc
    13833U,	// BISR_rc_v161
    140809U,	// BISR_sc
    140809U,	// BISR_sc_v110
    4765U,	// BMERGAE_rr_v110
    4765U,	// BMERGE_rr
    16783136U,	// BSPLIT_rr
    16783136U,	// BSPLIT_rr_v110
    3349364U,	// CACHEA_I_bo_bso
    269172U,	// CACHEA_I_bo_c
    3480436U,	// CACHEA_I_bo_pos
    3348870U,	// CACHEA_I_bo_pre
    400244U,	// CACHEA_I_bo_r
    3349386U,	// CACHEA_WI_bo_bso
    269194U,	// CACHEA_WI_bo_c
    3480458U,	// CACHEA_WI_bo_pos
    3348894U,	// CACHEA_WI_bo_pre
    400266U,	// CACHEA_WI_bo_r
    3349425U,	// CACHEA_W_bo_bso
    269233U,	// CACHEA_W_bo_c
    3480497U,	// CACHEA_W_bo_pos
    3348929U,	// CACHEA_W_bo_pre
    400305U,	// CACHEA_W_bo_r
    3349375U,	// CACHEI_I_bo_bso
    3480447U,	// CACHEI_I_bo_pos
    3348882U,	// CACHEI_I_bo_pre
    3349398U,	// CACHEI_WI_bo_bso
    3480470U,	// CACHEI_WI_bo_pos
    3348907U,	// CACHEI_WI_bo_pre
    3349436U,	// CACHEI_W_bo_bso
    269244U,	// CACHEI_W_bo_c
    3480508U,	// CACHEI_W_bo_pos
    3348941U,	// CACHEI_W_bo_pre
    400316U,	// CACHEI_W_bo_r
    806359340U,	// CADDN_A_rcr_v110
    463148U,	// CADDN_A_rrr_v110
    806360362U,	// CADDN_rcr
    4199722U,	// CADDN_rrr
    2168106U,	// CADDN_src
    16848170U,	// CADDN_srr_v110
    806359287U,	// CADD_A_rcr_v110
    463095U,	// CADD_A_rrr_v110
    806359657U,	// CADD_rcr
    4199017U,	// CADD_rrr
    2167401U,	// CADD_src
    16847465U,	// CADD_srr_v110
    16793U,	// CALLA_b
    136405U,	// CALLI_rr
    136405U,	// CALLI_rr_v110
    17673U,	// CALL_b
    21769U,	// CALL_sb
    16781774U,	// CLO_B_rr_v110
    16782226U,	// CLO_H_rr
    16782672U,	// CLO_rr
    16781813U,	// CLS_B_rr_v110
    16782334U,	// CLS_H_rr
    16782911U,	// CLS_rr
    16781873U,	// CLZ_B_rr_v110
    16782503U,	// CLZ_H_rr
    16783708U,	// CLZ_rr
    2168137U,	// CMOVN_src
    16848201U,	// CMOVN_srr
    2169014U,	// CMOV_src
    16849078U,	// CMOV_srr
    5466948U,	// CMPSWAP_W_bo_bso
    5466948U,	// CMPSWAP_W_bo_c
    5598020U,	// CMPSWAP_W_bo_pos
    5466489U,	// CMPSWAP_W_bo_pre
    23093458U,	// CMPSWAP_W_bo_r
    4844U,	// CMP_F_rr
    806361276U,	// CRC32B_W_rr
    806361303U,	// CRC32L_W_rr
    806359456U,	// CRC32_B_rr
    4199716U,	// CRCN_rrr
    4198691U,	// CSUBN_A_rrr_v110
    4198968U,	// CSUBN_rrr
    4198621U,	// CSUB_A_rrr_v110
    4198968U,	// CSUB_rrr
    3180U,	// DEBUG_sr
    3180U,	// DEBUG_sys
    5647U,	// DEXTR_rrpw
    5647U,	// DEXTR_rrrr
    4334U,	// DIFSC_A_rr_v110
    3164U,	// DISABLE_sys
    135845U,	// DISABLE_sys_1
    4851U,	// DIV_F_rr
    6153U,	// DIV_U_rr
    6321U,	// DIV_rr
    3141U,	// DSYNC_sys
    806360290U,	// DVADJ_rrr
    806360290U,	// DVADJ_rrr_v110
    16782562U,	// DVADJ_srr_v110
    6208U,	// DVINIT_BU_rr
    6208U,	// DVINIT_BU_rr_v110
    4619U,	// DVINIT_B_rr
    4619U,	// DVINIT_B_rr_v110
    6275U,	// DVINIT_HU_rr
    6275U,	// DVINIT_HU_rr_v110
    5239U,	// DVINIT_H_rr
    5239U,	// DVINIT_H_rr_v110
    6107U,	// DVINIT_U_rr
    6107U,	// DVINIT_U_rr_v110
    5928U,	// DVINIT_rr
    5928U,	// DVINIT_rr_v110
    806360997U,	// DVSTEP_U_rrr
    806360997U,	// DVSTEP_U_rrrv110
    16783269U,	// DVSTEP_Uv110
    806360405U,	// DVSTEP_rrr
    806360405U,	// DVSTEP_rrrv110
    16782677U,	// DVSTEPv110
    3157U,	// ENABLE_sys
    268440104U,	// EQANY_B_rc
    4648U,	// EQANY_B_rr
    268440734U,	// EQANY_H_rc
    5278U,	// EQANY_H_rr
    16781667U,	// EQZ_A_rr
    4406U,	// EQ_A_rr
    4565U,	// EQ_B_rr
    5017U,	// EQ_H_rr
    6377U,	// EQ_W_rr
    268441050U,	// EQ_rc
    5594U,	// EQ_rr
    2101294U,	// EQ_src
    16781358U,	// EQ_srr
    6063U,	// EXTR_U_rrpw
    6063U,	// EXTR_U_rrrr
    6063U,	// EXTR_U_rrrw
    5648U,	// EXTR_rrpw
    5648U,	// EXTR_rrrr
    5648U,	// EXTR_rrrw
    16792U,	// FCALLA_b
    136404U,	// FCALLA_i
    17672U,	// FCALL_b
    3214U,	// FRET_sr
    3214U,	// FRET_sys
    16782685U,	// FTOHP_rr
    16783697U,	// FTOIZ_rr
    16782556U,	// FTOI_rr
    6460U,	// FTOQ31Z_rr
    4298U,	// FTOQ31_rr
    16783730U,	// FTOUZ_rr
    16783517U,	// FTOU_rr
    4357U,	// GE_A_rr
    268441452U,	// GE_U_rc
    5996U,	// GE_U_rr
    268440197U,	// GE_rc
    4741U,	// GE_rr
    16782096U,	// HPTOF_rr
    5361U,	// IMASK_rcpw
    5361U,	// IMASK_rcrw
    5361U,	// IMASK_rrpw
    5361U,	// IMASK_rrrw
    5969U,	// INSERT_rcpw
    5969U,	// INSERT_rcrr
    5969U,	// INSERT_rcrw
    5969U,	// INSERT_rrpw
    5969U,	// INSERT_rrrr
    5969U,	// INSERT_rrrw
    1342183086U,	// INSN_T
    1342183174U,	// INS_T
    3147U,	// ISYNC_sys
    16782090U,	// ITOF_rr
    806361111U,	// IXMAX_U_rrr
    806361349U,	// IXMAX_rrr
    806360988U,	// IXMIN_U_rrr
    806360375U,	// IXMIN_rrr
    16783U,	// JA_b
    1610617141U,	// JEQ_A_brr
    1617958381U,	// JEQ_brc
    1610618349U,	// JEQ_brr
    28717U,	// JEQ_sbc1
    28717U,	// JEQ_sbc2
    28717U,	// JEQ_sbc_v110
    8392749U,	// JEQ_sbr1
    8392749U,	// JEQ_sbr2
    8392749U,	// JEQ_sbr_v110
    8395077U,	// JGEZ_sbr
    8395077U,	// JGEZ_sbr_v110
    1617958789U,	// JGE_U_brc
    1610618757U,	// JGE_U_brr
    1617957528U,	// JGE_brc
    1610617496U,	// JGE_brr
    8395110U,	// JGTZ_sbr
    8395110U,	// JGTZ_sbr_v110
    136395U,	// JI_rr
    136395U,	// JI_rr_v110
    8393931U,	// JI_sbr_v110
    136395U,	// JI_sr
    16787U,	// JLA_b
    8395083U,	// JLEZ_sbr
    8395083U,	// JLEZ_sbr_v110
    136399U,	// JLI_rr
    136399U,	// JLI_rr_v110
    8395116U,	// JLTZ_sbr
    8395116U,	// JLTZ_sbr_v110
    1617958914U,	// JLT_U_brc
    1610618882U,	// JLT_U_brr
    1617958727U,	// JLT_brc
    1610618695U,	// JLT_brr
    17668U,	// JL_b
    1617957493U,	// JNED_brc
    1610617461U,	// JNED_brr
    1617958085U,	// JNEI_brc
    1610618053U,	// JNEI_brr
    1610617099U,	// JNE_A_brr
    1617957575U,	// JNE_brc
    1610617543U,	// JNE_brr
    28706U,	// JNE_sbc1
    28706U,	// JNE_sbc2
    28706U,	// JNE_sbc_v110
    8392738U,	// JNE_sbr1
    8392738U,	// JNE_sbr2
    8392738U,	// JNE_sbr_v110
    1610617180U,	// JNZ_A_brr
    8393052U,	// JNZ_A_sbr
    1610618649U,	// JNZ_T_brn
    8392782U,	// JNZ_T_sbrn
    8392782U,	// JNZ_T_sbrn_v110
    20614U,	// JNZ_sb
    20614U,	// JNZ_sb_v110
    8395105U,	// JNZ_sbr
    8395105U,	// JNZ_sbr_v110
    1610617174U,	// JZ_A_brr
    8393046U,	// JZ_A_sbr
    1610618643U,	// JZ_T_brn
    8392770U,	// JZ_T_sbrn
    8392770U,	// JZ_T_sbrn_v110
    20604U,	// JZ_sb
    20604U,	// JZ_sb_v110
    8395096U,	// JZ_sbr
    8395096U,	// JZ_sbr_v110
    17638U,	// J_b
    21734U,	// J_sb
    21734U,	// J_sb_v110
    166162U,	// LDLCX_abs
    3349475U,	// LDLCX_bo_bso
    38745U,	// LDMST_abs
    5467049U,	// LDMST_bo_bso
    5467049U,	// LDMST_bo_c
    5598121U,	// LDMST_bo_pos
    5466552U,	// LDMST_bo_pre
    23095129U,	// LDMST_bo_r
    166176U,	// LDUCX_abs
    3349491U,	// LDUCX_bo_bso
    9441535U,	// LD_A_abs
    1929908479U,	// LD_A_bo_bso
    67637503U,	// LD_A_bo_c
    1963462911U,	// LD_A_bo_pos
    1929974015U,	// LD_A_bo_pre
    101191935U,	// LD_A_bo_r
    50860287U,	// LD_A_bol
    139409U,	// LD_A_sc
    2198343935U,	// LD_A_slr
    2231898367U,	// LD_A_slr_post
    2231898367U,	// LD_A_slr_post_v110
    2198343935U,	// LD_A_slr_v110
    659711U,	// LD_A_slro
    659711U,	// LD_A_slro_v110
    24320770U,	// LD_A_sro
    24320770U,	// LD_A_sro_v110
    9443360U,	// LD_BU_abs
    1929910304U,	// LD_BU_bo_bso
    67639328U,	// LD_BU_bo_c
    1963464736U,	// LD_BU_bo_pos
    1929975840U,	// LD_BU_bo_pre
    101193760U,	// LD_BU_bo_r
    50862112U,	// LD_BU_bol
    2198345760U,	// LD_BU_slr
    2231900192U,	// LD_BU_slr_post
    2231900192U,	// LD_BU_slr_post_v110
    2198345760U,	// LD_BU_slr_v110
    661536U,	// LD_BU_slro
    661536U,	// LD_BU_slro_v110
    24320809U,	// LD_BU_sro
    24320809U,	// LD_BU_sro_v110
    9441719U,	// LD_B_abs
    1929908663U,	// LD_B_bo_bso
    67637687U,	// LD_B_bo_c
    1963463095U,	// LD_B_bo_pos
    1929974199U,	// LD_B_bo_pre
    101192119U,	// LD_B_bo_r
    50860471U,	// LD_B_bol
    2231898551U,	// LD_B_slr_post_v110
    2198344119U,	// LD_B_slr_v110
    659895U,	// LD_B_slro_v110
    24320783U,	// LD_B_sro_v110
    9441650U,	// LD_DA_abs
    1929908594U,	// LD_DA_bo_bso
    67637618U,	// LD_DA_bo_c
    1963463026U,	// LD_DA_bo_pos
    1929974130U,	// LD_DA_bo_pre
    101192050U,	// LD_DA_bo_r
    9441878U,	// LD_D_abs
    1929908822U,	// LD_D_bo_bso
    67637846U,	// LD_D_bo_c
    1963463254U,	// LD_D_bo_pos
    1929974358U,	// LD_D_bo_pre
    101192278U,	// LD_D_bo_r
    9443418U,	// LD_HU_abs
    1929910362U,	// LD_HU_bo_bso
    67639386U,	// LD_HU_bo_c
    1963464794U,	// LD_HU_bo_pos
    1929975898U,	// LD_HU_bo_pre
    101193818U,	// LD_HU_bo_r
    50862170U,	// LD_HU_bol
    9442110U,	// LD_H_abs
    1929909054U,	// LD_H_bo_bso
    67638078U,	// LD_H_bo_c
    1963463486U,	// LD_H_bo_pos
    1929974590U,	// LD_H_bo_pre
    101192510U,	// LD_H_bo_r
    50860862U,	// LD_H_bol
    2198344510U,	// LD_H_slr
    2231898942U,	// LD_H_slr_post
    2231898942U,	// LD_H_slr_post_v110
    2198344510U,	// LD_H_slr_v110
    660286U,	// LD_H_slro
    660286U,	// LD_H_slro_v110
    24320796U,	// LD_H_sro
    24320796U,	// LD_H_sro_v110
    9442682U,	// LD_Q_abs
    1929909626U,	// LD_Q_bo_bso
    67638650U,	// LD_Q_bo_c
    1963464058U,	// LD_Q_bo_pos
    1929975162U,	// LD_Q_bo_pre
    101193082U,	// LD_Q_bo_r
    9443526U,	// LD_W_abs
    1929910470U,	// LD_W_bo_bso
    67639494U,	// LD_W_bo_c
    1963464902U,	// LD_W_bo_pos
    1929976006U,	// LD_W_bo_pre
    101193926U,	// LD_W_bo_r
    50862278U,	// LD_W_bol
    139426U,	// LD_W_sc
    2198345926U,	// LD_W_slr
    2231900358U,	// LD_W_slr_post
    2231900358U,	// LD_W_slr_post_v110
    2198345926U,	// LD_W_slr_v110
    661702U,	// LD_W_slro
    661702U,	// LD_W_slro_v110
    24320823U,	// LD_W_sro
    24320823U,	// LD_W_sro_v110
    9441664U,	// LEA_abs
    1929908608U,	// LEA_bo_bso
    50860416U,	// LEA_bol
    9441669U,	// LHA_abs
    43171U,	// LOOPU_brr
    10491236U,	// LOOP_brr
    8394084U,	// LOOP_sbr
    4412U,	// LT_A_rr
    4629U,	// LT_B
    6219U,	// LT_BU
    5249U,	// LT_H
    6286U,	// LT_HU
    268441577U,	// LT_U_rc
    6121U,	// LT_U_rr
    24121445U,	// LT_U_srcv110
    16781413U,	// LT_U_srrv110
    6383U,	// LT_W
    6314U,	// LT_WU
    268441396U,	// LT_rc
    5940U,	// LT_rr
    2101339U,	// LT_src
    16781403U,	// LT_srr
    4199451U,	// MADDMS_H_rrr1_LL
    4199451U,	// MADDMS_H_rrr1_LU
    4199451U,	// MADDMS_H_rrr1_UL
    4199451U,	// MADDMS_H_rrr1_UU
    806361041U,	// MADDMS_U_rcr_v110
    4200401U,	// MADDMS_U_rrr2_v110
    806360650U,	// MADDMS_rcr_v110
    4200010U,	// MADDMS_rrr2_v110
    4199279U,	// MADDM_H_rrr1_LL
    4199279U,	// MADDM_H_rrr1_LU
    4199279U,	// MADDM_H_rrr1_UL
    4199279U,	// MADDM_H_rrr1_UU
    4199279U,	// MADDM_H_rrr1_v110
    4199815U,	// MADDM_Q_rrr1_v110
    806360979U,	// MADDM_U_rcr_v110
    4200339U,	// MADDM_U_rrr2_v110
    806360349U,	// MADDM_rcr_v110
    4199709U,	// MADDM_rrr2_v110
    4199495U,	// MADDRS_H_rrr1_DcEdDaDbUL
    4199495U,	// MADDRS_H_rrr1_LL
    4199495U,	// MADDRS_H_rrr1_LU
    4199495U,	// MADDRS_H_rrr1_UL
    4199495U,	// MADDRS_H_rrr1_UU
    2537559494U,	// MADDRS_Q_rrr1_L_L
    2554336710U,	// MADDRS_Q_rrr1_U_U
    4199347U,	// MADDR_H_rrr1_DcEdDaDbUL
    4199347U,	// MADDR_H_rrr1_LL
    4199347U,	// MADDR_H_rrr1_LU
    4199347U,	// MADDR_H_rrr1_UL
    4199347U,	// MADDR_H_rrr1_UU
    2537559449U,	// MADDR_Q_rrr1_L_L
    2554336665U,	// MADDR_Q_rrr1_U_U
    4199461U,	// MADDSUMS_H_rrr1_LL
    4199461U,	// MADDSUMS_H_rrr1_LU
    4199461U,	// MADDSUMS_H_rrr1_UL
    4199461U,	// MADDSUMS_H_rrr1_UU
    4199461U,	// MADDSUMS_H_rrr1_v110
    4199296U,	// MADDSUM_H_rrr1_LL
    4199296U,	// MADDSUM_H_rrr1_LU
    4199296U,	// MADDSUM_H_rrr1_UL
    4199296U,	// MADDSUM_H_rrr1_UU
    4199296U,	// MADDSUM_H_rrr1_v110
    4199505U,	// MADDSURS_H_rrr1_LL
    4199505U,	// MADDSURS_H_rrr1_LU
    4199505U,	// MADDSURS_H_rrr1_UL
    4199505U,	// MADDSURS_H_rrr1_UU
    4199364U,	// MADDSUR_H_rrr1_LL
    4199364U,	// MADDSUR_H_rrr1_LU
    4199364U,	// MADDSUR_H_rrr1_UL
    4199364U,	// MADDSUR_H_rrr1_UU
    4199525U,	// MADDSUS_H_rrr1_LL
    4199525U,	// MADDSUS_H_rrr1_LU
    4199525U,	// MADDSUS_H_rrr1_UL
    4199525U,	// MADDSUS_H_rrr1_UU
    4199525U,	// MADDSUS_H_rrr1_v110
    4199565U,	// MADDSU_H_rrr1_LL
    4199565U,	// MADDSU_H_rrr1_LU
    4199565U,	// MADDSU_H_rrr1_UL
    4199565U,	// MADDSU_H_rrr1_UU
    4199565U,	// MADDSU_H_rrr1_v110
    4199402U,	// MADDS_H_rrr1_LL
    4199402U,	// MADDS_H_rrr1_LU
    4199402U,	// MADDS_H_rrr1_UL
    4199402U,	// MADDS_H_rrr1_UU
    4199402U,	// MADDS_H_rrr1_v110
    4199859U,	// MADDS_Q_rrr1
    4199859U,	// MADDS_Q_rrr1_L
    2537559475U,	// MADDS_Q_rrr1_L_L
    4199859U,	// MADDS_Q_rrr1_L_v110
    4199859U,	// MADDS_Q_rrr1_U
    2554336691U,	// MADDS_Q_rrr1_U_U
    4199859U,	// MADDS_Q_rrr1_e
    4199859U,	// MADDS_Q_rrr1_e_L
    2537559475U,	// MADDS_Q_rrr1_e_L_L
    4199859U,	// MADDS_Q_rrr1_e_U
    2554336691U,	// MADDS_Q_rrr1_e_U_U
    806361024U,	// MADDS_U_rcr
    806361024U,	// MADDS_U_rcr_e
    4200384U,	// MADDS_U_rrr2
    4200384U,	// MADDS_U_rrr2_e
    806360623U,	// MADDS_rcr
    806360623U,	// MADDS_rcr_e
    4199983U,	// MADDS_rrr2
    4199983U,	// MADDS_rrr2_e
    4199124U,	// MADD_F_rrr
    4199222U,	// MADD_H_rrr1_LL
    4199222U,	// MADD_H_rrr1_LU
    4199222U,	// MADD_H_rrr1_UL
    4199222U,	// MADD_H_rrr1_UU
    4199222U,	// MADD_H_rrr1_v110
    4199794U,	// MADD_Q_rrr1
    4199794U,	// MADD_Q_rrr1_L
    2537559410U,	// MADD_Q_rrr1_L_L
    4199794U,	// MADD_Q_rrr1_L_v110
    4199794U,	// MADD_Q_rrr1_U
    2554336626U,	// MADD_Q_rrr1_U_U
    4199794U,	// MADD_Q_rrr1_e
    4199794U,	// MADD_Q_rrr1_e_L
    2537559410U,	// MADD_Q_rrr1_e_L_L
    4199794U,	// MADD_Q_rrr1_e_U
    2554336626U,	// MADD_Q_rrr1_e_U_U
    806360928U,	// MADD_U_rcr
    4200288U,	// MADD_U_rrr2
    806359663U,	// MADD_rcr
    806359663U,	// MADD_rcr_e
    4199023U,	// MADD_rrr2
    4199023U,	// MADD_rrr2_e
    4641U,	// MAX_B
    6226U,	// MAX_BU
    5271U,	// MAX_H
    6293U,	// MAX_HU
    268441625U,	// MAX_U_rc
    6169U,	// MAX_U_rr
    268441863U,	// MAX_rc
    6407U,	// MAX_rr
    11539954U,	// MFCR_rlc
    4551U,	// MIN_B
    6183U,	// MIN_BU
    5003U,	// MIN_H
    6241U,	// MIN_HU
    268441502U,	// MIN_U_rc
    6046U,	// MIN_U_rr
    268440889U,	// MIN_rc
    5433U,	// MIN_rr
    11538715U,	// MOVH_A_rlc
    11539641U,	// MOVH_rlc
    17830250U,	// MOV_AA_rr
    16781674U,	// MOV_AA_srr
    3135U,	// MOV_A_rr
    24121672U,	// MOV_A_src
    16781640U,	// MOV_A_srr
    17830498U,	// MOV_D_rr
    16781922U,	// MOV_D_srr
    11540496U,	// MOV_U_rlc
    11540663U,	// MOV_rlcDc
    11540663U,	// MOV_rlcEc
    17832119U,	// MOV_rrDcDb
    6327U,	// MOV_rrEcDaDb
    17832119U,	// MOV_rrEcDb
    139377U,	// MOV_sc
    2103479U,	// MOV_srcDa
    2103479U,	// MOV_srcEa
    16783543U,	// MOV_srr
    4199439U,	// MSUBADMS_H_rrr1_LL
    4199439U,	// MSUBADMS_H_rrr1_LU
    4199439U,	// MSUBADMS_H_rrr1_UL
    4199439U,	// MSUBADMS_H_rrr1_UU
    4199439U,	// MSUBADMS_H_rrr1_v110
    4199268U,	// MSUBADM_H_rrr1_LL
    4199268U,	// MSUBADM_H_rrr1_LU
    4199268U,	// MSUBADM_H_rrr1_UL
    4199268U,	// MSUBADM_H_rrr1_UU
    4199268U,	// MSUBADM_H_rrr1_v110
    4199483U,	// MSUBADRS_H_rrr1_LL
    4199483U,	// MSUBADRS_H_rrr1_LU
    4199483U,	// MSUBADRS_H_rrr1_UL
    4199483U,	// MSUBADRS_H_rrr1_UU
    4199336U,	// MSUBADR_H_rrr1_LL
    4199336U,	// MSUBADR_H_rrr1_LU
    4199336U,	// MSUBADR_H_rrr1_UL
    4199336U,	// MSUBADR_H_rrr1_UU
    4199391U,	// MSUBADS_H_rrr1_LL
    4199391U,	// MSUBADS_H_rrr1_LU
    4199391U,	// MSUBADS_H_rrr1_UL
    4199391U,	// MSUBADS_H_rrr1_UU
    4199391U,	// MSUBADS_H_rrr1_v110
    4199212U,	// MSUBAD_H_rrr1_LL
    4199212U,	// MSUBAD_H_rrr1_LU
    4199212U,	// MSUBAD_H_rrr1_UL
    4199212U,	// MSUBAD_H_rrr1_UU
    4199212U,	// MSUBAD_H_rrr1_v110
    4199429U,	// MSUBMS_H_rrr1_LL
    4199429U,	// MSUBMS_H_rrr1_LU
    4199429U,	// MSUBMS_H_rrr1_UL
    4199429U,	// MSUBMS_H_rrr1_UU
    4199429U,	// MSUBMS_H_rrr1_v110
    4199259U,	// MSUBM_H_rrr1_LL
    4199259U,	// MSUBM_H_rrr1_LU
    4199259U,	// MSUBM_H_rrr1_UL
    4199259U,	// MSUBM_H_rrr1_UU
    4199259U,	// MSUBM_H_rrr1_v110
    4199473U,	// MSUBRS_H_rrr1_DcEdDaDbUL
    4199473U,	// MSUBRS_H_rrr1_LL
    4199473U,	// MSUBRS_H_rrr1_LU
    4199473U,	// MSUBRS_H_rrr1_UL
    4199473U,	// MSUBRS_H_rrr1_UU
    2537559484U,	// MSUBRS_Q_rrr1_L_L
    2554336700U,	// MSUBRS_Q_rrr1_U_U
    4199327U,	// MSUBR_H_rrr1_DcEdDaDbUL
    4199327U,	// MSUBR_H_rrr1_LL
    4199327U,	// MSUBR_H_rrr1_LU
    4199327U,	// MSUBR_H_rrr1_UL
    4199327U,	// MSUBR_H_rrr1_UU
    2537559440U,	// MSUBR_Q_rrr1_L_L
    2554336656U,	// MSUBR_Q_rrr1_U_U
    4199382U,	// MSUBS_H_rrr1_LL
    4199382U,	// MSUBS_H_rrr1_LU
    4199382U,	// MSUBS_H_rrr1_UL
    4199382U,	// MSUBS_H_rrr1_UU
    4199382U,	// MSUBS_H_rrr1_v110
    4199850U,	// MSUBS_Q_rrr1
    4199850U,	// MSUBS_Q_rrr1_L
    2537559466U,	// MSUBS_Q_rrr1_L_L
    4199850U,	// MSUBS_Q_rrr1_U
    2554336682U,	// MSUBS_Q_rrr1_U_U
    4199850U,	// MSUBS_Q_rrr1_e
    4199850U,	// MSUBS_Q_rrr1_e_L
    2537559466U,	// MSUBS_Q_rrr1_e_L_L
    4199850U,	// MSUBS_Q_rrr1_e_U
    2554336682U,	// MSUBS_Q_rrr1_e_U_U
    806361024U,	// MSUBS_U_rcr
    806361024U,	// MSUBS_U_rcr_e
    4200384U,	// MSUBS_U_rrr2
    4200384U,	// MSUBS_U_rrr2_e
    806360609U,	// MSUBS_rcr
    806360609U,	// MSUBS_rcr_e
    4199969U,	// MSUBS_rrr2
    4199969U,	// MSUBS_rrr2_e
    4199116U,	// MSUB_F_rrr
    4199204U,	// MSUB_H_rrr1_LL
    4199204U,	// MSUB_H_rrr1_LU
    4199204U,	// MSUB_H_rrr1_UL
    4199204U,	// MSUB_H_rrr1_UU
    4199204U,	// MSUB_H_rrr1_v110
    4199786U,	// MSUB_Q_rrr1
    4199786U,	// MSUB_Q_rrr1_L
    2537559402U,	// MSUB_Q_rrr1_L_L
    4199786U,	// MSUB_Q_rrr1_U
    2554336618U,	// MSUB_Q_rrr1_U_U
    4199786U,	// MSUB_Q_rrr1_e
    4199786U,	// MSUB_Q_rrr1_e_L
    2537559402U,	// MSUB_Q_rrr1_e_L_L
    4199786U,	// MSUB_Q_rrr1_e_U
    2554336618U,	// MSUB_Q_rrr1_e_U_U
    806360928U,	// MSUB_U_rcr
    4200288U,	// MSUB_U_rrr2
    806359614U,	// MSUB_rcr
    806359614U,	// MSUB_rcr_e
    4198974U,	// MSUB_rrr2
    4198974U,	// MSUB_rrr2_e
    46584U,	// MTCR_rlc
    4984U,	// MULM_H_rr1_LL2e
    4984U,	// MULM_H_rr1_LU2e
    4984U,	// MULM_H_rr1_UL2e
    4984U,	// MULM_H_rr1_UU2e
    5052U,	// MULR_H_rr1_LL2e
    5052U,	// MULR_H_rr1_LU2e
    5052U,	// MULR_H_rr1_UL2e
    5052U,	// MULR_H_rr1_UU2e
    2801800610U,	// MULR_Q_rr1_2LL
    2818577826U,	// MULR_Q_rr1_2UU
    268441545U,	// MULS_U_rc
    6089U,	// MULS_U_rr2
    268441156U,	// MULS_rc
    5700U,	// MULS_rr2
    4837U,	// MUL_F_rrr
    4948U,	// MUL_H_rr1_LL2e
    4948U,	// MUL_H_rr1_LU2e
    4948U,	// MUL_H_rr1_UL2e
    4948U,	// MUL_H_rr1_UU2e
    2801800576U,	// MUL_Q_rr1_2LL
    2818577792U,	// MUL_Q_rr1_2UU
    5504U,	// MUL_Q_rr1_2_L
    5504U,	// MUL_Q_rr1_2_Le
    5504U,	// MUL_Q_rr1_2_U
    5504U,	// MUL_Q_rr1_2_Ue
    5504U,	// MUL_Q_rr1_2__
    5504U,	// MUL_Q_rr1_2__e
    268441484U,	// MUL_U_rc
    6028U,	// MUL_U_rr2
    268440856U,	// MUL_rc
    268440856U,	// MUL_rc_e
    5400U,	// MUL_rr2
    5400U,	// MUL_rr2_e
    16782616U,	// MUL_srr
    1342183034U,	// NAND_T
    268440187U,	// NAND_rc
    4731U,	// NAND_rr
    16781647U,	// NEZ_A
    4364U,	// NE_A
    268440251U,	// NE_rc
    4795U,	// NE_rr
    3210U,	// NOP_sr
    3210U,	// NOP_sys
    1342183126U,	// NOR_T
    268441087U,	// NOR_rc
    5631U,	// NOR_rr
    137036U,	// NOT_sr
    1342183079U,	// ORN_T
    268440900U,	// ORN_rc
    5444U,	// ORN_rr
    1342183065U,	// OR_ANDN_T
    1342183021U,	// OR_AND_T
    268441062U,	// OR_EQ_rc
    5606U,	// OR_EQ_rr
    268441468U,	// OR_GE_U_rc
    6012U,	// OR_GE_U_rr
    268440209U,	// OR_GE_rc
    4753U,	// OR_GE_rr
    268441593U,	// OR_LT_U_rc
    6137U,	// OR_LT_U_rr
    268441408U,	// OR_LT_rc
    5952U,	// OR_LT_rr
    268440256U,	// OR_NE_rc
    4800U,	// OR_NE_rr
    1342183143U,	// OR_NOR_T
    1342183113U,	// OR_OR_T
    1342183098U,	// OR_T
    268441088U,	// OR_rc
    5632U,	// OR_rr
    139320U,	// OR_sc
    16782848U,	// OR_srr
    806360299U,	// PACK_rrr
    16783668U,	// PARITY_rr
    16783605U,	// POPCNT_W_rr
    4866U,	// Q31TOF_rr
    16782044U,	// QSEED_F_rr
    3172U,	// RESTORE_sys
    3215U,	// RET_sr
    3215U,	// RET_sys
    3153U,	// RFE_sr
    3153U,	// RFE_sys
    3206U,	// RFM_sys
    3186U,	// RSLCX_sys
    3172U,	// RSTV_sys
    268441527U,	// RSUBS_U_rc
    268441128U,	// RSUBS_rc
    268440132U,	// RSUB_rc
    135748U,	// RSUB_sr
    16783416U,	// SAT_BU_rr
    137272U,	// SAT_BU_sr
    16781828U,	// SAT_B_rr
    135684U,	// SAT_B_sr
    16783483U,	// SAT_HU_rr
    137339U,	// SAT_HU_sr
    16782448U,	// SAT_H_rr
    136304U,	// SAT_H_sr
    806360382U,	// SELN_rcr
    4199742U,	// SELN_rrr
    806360312U,	// SEL_rcr
    4199672U,	// SEL_rrr
    268441110U,	// SHAS_rc
    5654U,	// SHAS_rr
    268440349U,	// SHA_H_rc
    4893U,	// SHA_H_rr
    268439946U,	// SHA_rc
    4490U,	// SHA_rr
    2101642U,	// SHA_src
    268440238U,	// SHUFFLE_rc
    1342183054U,	// SH_ANDN_T
    1342183011U,	// SH_AND_T
    268441054U,	// SH_EQ_rc
    5598U,	// SH_EQ_rr
    268441458U,	// SH_GE_U_rc
    6002U,	// SH_GE_U_rr
    268440201U,	// SH_GE_rc
    4745U,	// SH_GE_rr
    268440398U,	// SH_H_rc
    4942U,	// SH_H_rr
    268441583U,	// SH_LT_U_rc
    6127U,	// SH_LT_U_rr
    268441400U,	// SH_LT_rc
    5944U,	// SH_LT_rr
    1342183031U,	// SH_NAND_T
    268441400U,	// SH_NE_rc
    5944U,	// SH_NE_rr
    1342183133U,	// SH_NOR_T
    1342183076U,	// SH_ORN_T
    1342183104U,	// SH_OR_T
    1342183153U,	// SH_XNOR_T
    1342183164U,	// SH_XOR_T
    268440757U,	// SH_rc
    5301U,	// SH_rr
    2102453U,	// SH_src
    166169U,	// STLCX_abs
    3349483U,	// STLCX_bo_bso
    166183U,	// STUCX_abs
    3349499U,	// STUCX_bo_bso
    37186U,	// ST_A_abs
    5466960U,	// ST_A_bo_bso
    67637570U,	// ST_A_bo_c
    1969774914U,	// ST_A_bo_pos
    1936286018U,	// ST_A_bo_pre
    101192002U,	// ST_A_bo_r
    12786512U,	// ST_A_bol
    729279U,	// ST_A_sc
    158538576U,	// ST_A_sro
    793424U,	// ST_A_ssr
    858960U,	// ST_A_ssr_pos
    52227U,	// ST_A_ssro
    37403U,	// ST_B_abs
    5466975U,	// ST_B_bo_bso
    67637787U,	// ST_B_bo_c
    1969775131U,	// ST_B_bo_pos
    1936286235U,	// ST_B_bo_pre
    101192219U,	// ST_B_bo_r
    12786527U,	// ST_B_bol
    175315807U,	// ST_B_sro
    793439U,	// ST_B_ssr
    858975U,	// ST_B_ssr_pos
    52239U,	// ST_B_ssro
    37241U,	// ST_DA_abs
    5466967U,	// ST_DA_bo_bso
    67637625U,	// ST_DA_bo_c
    1969774969U,	// ST_DA_bo_pos
    1936286073U,	// ST_DA_bo_pre
    101192057U,	// ST_DA_bo_r
    37468U,	// ST_D_abs
    5466982U,	// ST_D_bo_bso
    67637852U,	// ST_D_bo_c
    1969775196U,	// ST_D_bo_pos
    1936286300U,	// ST_D_bo_pre
    101192284U,	// ST_D_bo_r
    38023U,	// ST_H_abs
    5466989U,	// ST_H_bo_bso
    67638407U,	// ST_H_bo_c
    1969775751U,	// ST_H_bo_pos
    1936286855U,	// ST_H_bo_pre
    101192839U,	// ST_H_bo_r
    12786541U,	// ST_H_bol
    175315821U,	// ST_H_sro
    793453U,	// ST_H_ssr
    858989U,	// ST_H_ssr_pos
    52251U,	// ST_H_ssro
    38352U,	// ST_Q_abs
    5467042U,	// ST_Q_bo_bso
    67638736U,	// ST_Q_bo_c
    1969776080U,	// ST_Q_bo_pos
    1936287184U,	// ST_Q_bo_pre
    101193168U,	// ST_Q_bo_r
    34573U,	// ST_T
    39167U,	// ST_W_abs
    5467100U,	// ST_W_bo_bso
    67639551U,	// ST_W_bo_c
    1969776895U,	// ST_W_bo_pos
    1936287999U,	// ST_W_bo_pre
    101193983U,	// ST_W_bo_r
    12786652U,	// ST_W_bol
    175315932U,	// ST_W_sro
    793564U,	// ST_W_ssr
    859100U,	// ST_W_ssr_pos
    52263U,	// ST_W_ssro
    4682U,	// SUBC_rr
    6249U,	// SUBS_HU_rr
    5079U,	// SUBS_H_rr
    6072U,	// SUBS_U_rr
    5666U,	// SUBS_rr
    16782882U,	// SUBS_srr
    6412U,	// SUBX_rr
    3123U,	// SUB_A_rr
    139443U,	// SUB_A_sc
    4521U,	// SUB_B_rr
    806359757U,	// SUB_F_rrr
    4901U,	// SUB_H_rr
    4665U,	// SUB_rr
    16781881U,	// SUB_srr
    16781313U,	// SUB_srr_15a
    16847417U,	// SUB_srr_a15
    3237U,	// SVLCX_sys
    5467079U,	// SWAPMSK_W_bo_bso
    67639500U,	// SWAPMSK_W_bo_c
    1969776844U,	// SWAPMSK_W_bo_pos
    1936287948U,	// SWAPMSK_W_bo_pre
    101193932U,	// SWAPMSK_W_bo_r
    39137U,	// SWAP_W_abs
    5467091U,	// SWAP_W_bo_bso
    67639521U,	// SWAP_W_bo_c
    1969776865U,	// SWAP_W_bo_pos
    1936287969U,	// SWAP_W_bo_pre
    101193953U,	// SWAP_W_bo_r
    13583U,	// SYSCALL_rc
    3230U,	// TRAPSV_sys
    3224U,	// TRAPV_sys
    16782569U,	// UNPACK_rr
    136445U,	// UPDFL_rr
    16782103U,	// UTOF_rr
    3219U,	// WAIT_sys
    1342183156U,	// XNOR_T
    268441086U,	// XNOR_rc
    5630U,	// XNOR_rr
    268441061U,	// XOR_EQ_rc
    5605U,	// XOR_EQ_rr
    268441467U,	// XOR_GE_U_rc
    6011U,	// XOR_GE_U_rr
    268440208U,	// XOR_GE_rc
    4752U,	// XOR_GE_rr
    268441592U,	// XOR_LT_U_rc
    6136U,	// XOR_LT_U_rr
    268441407U,	// XOR_LT_rc
    5951U,	// XOR_LT_rr
    268440255U,	// XOR_NE_rc
    4799U,	// XOR_NE_rr
    1342183167U,	// XOR_T
    268441092U,	// XOR_rc
    5636U,	// XOR_rr
    16782852U,	// XOR_srr
  };

  static const uint8_t OpInfo1[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// INLINEASM_BR
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// DBG_VALUE_LIST
    0U,	// DBG_INSTR_REF
    0U,	// DBG_PHI
    0U,	// DBG_LABEL
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// PSEUDO_PROBE
    0U,	// ARITH_FENCE
    0U,	// STACKMAP
    0U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// PREALLOCATED_SETUP
    0U,	// PREALLOCATED_ARG
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    0U,	// PATCHABLE_FUNCTION_ENTER
    0U,	// PATCHABLE_RET
    0U,	// PATCHABLE_FUNCTION_EXIT
    0U,	// PATCHABLE_TAIL_CALL
    0U,	// PATCHABLE_EVENT_CALL
    0U,	// PATCHABLE_TYPED_EVENT_CALL
    0U,	// ICALL_BRANCH_FUNNEL
    0U,	// G_ASSERT_SEXT
    0U,	// G_ASSERT_ZEXT
    0U,	// G_ASSERT_ALIGN
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_SDIVREM
    0U,	// G_UDIVREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_BUILD_VECTOR
    0U,	// G_BUILD_VECTOR_TRUNC
    0U,	// G_CONCAT_VECTORS
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_FREEZE
    0U,	// G_INTRINSIC_FPTRUNC_ROUND
    0U,	// G_INTRINSIC_TRUNC
    0U,	// G_INTRINSIC_ROUND
    0U,	// G_INTRINSIC_LRINT
    0U,	// G_INTRINSIC_ROUNDEVEN
    0U,	// G_READCYCLECOUNTER
    0U,	// G_LOAD
    0U,	// G_SEXTLOAD
    0U,	// G_ZEXTLOAD
    0U,	// G_INDEXED_LOAD
    0U,	// G_INDEXED_SEXTLOAD
    0U,	// G_INDEXED_ZEXTLOAD
    0U,	// G_STORE
    0U,	// G_INDEXED_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_ATOMICRMW_FADD
    0U,	// G_ATOMICRMW_FSUB
    0U,	// G_ATOMICRMW_FMAX
    0U,	// G_ATOMICRMW_FMIN
    0U,	// G_FENCE
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INVOKE_REGION_START
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_SEXT_INREG
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_FSHL
    0U,	// G_FSHR
    0U,	// G_ROTR
    0U,	// G_ROTL
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDO
    0U,	// G_UADDE
    0U,	// G_USUBO
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SADDE
    0U,	// G_SSUBO
    0U,	// G_SSUBE
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_UADDSAT
    0U,	// G_SADDSAT
    0U,	// G_USUBSAT
    0U,	// G_SSUBSAT
    0U,	// G_USHLSAT
    0U,	// G_SSHLSAT
    0U,	// G_SMULFIX
    0U,	// G_UMULFIX
    0U,	// G_SMULFIXSAT
    0U,	// G_UMULFIXSAT
    0U,	// G_SDIVFIX
    0U,	// G_UDIVFIX
    0U,	// G_SDIVFIXSAT
    0U,	// G_UDIVFIXSAT
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FMAD
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FPOWI
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FLOG10
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_FABS
    0U,	// G_FCOPYSIGN
    0U,	// G_IS_FPCLASS
    0U,	// G_FCANONICALIZE
    0U,	// G_FMINNUM
    0U,	// G_FMAXNUM
    0U,	// G_FMINNUM_IEEE
    0U,	// G_FMAXNUM_IEEE
    0U,	// G_FMINIMUM
    0U,	// G_FMAXIMUM
    0U,	// G_PTR_ADD
    0U,	// G_PTRMASK
    0U,	// G_SMIN
    0U,	// G_SMAX
    0U,	// G_UMIN
    0U,	// G_UMAX
    0U,	// G_ABS
    0U,	// G_LROUND
    0U,	// G_LLROUND
    0U,	// G_BR
    0U,	// G_BRJT
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_CTTZ
    0U,	// G_CTTZ_ZERO_UNDEF
    0U,	// G_CTLZ
    0U,	// G_CTLZ_ZERO_UNDEF
    0U,	// G_CTPOP
    0U,	// G_BSWAP
    0U,	// G_BITREVERSE
    0U,	// G_FCEIL
    0U,	// G_FCOS
    0U,	// G_FSIN
    0U,	// G_FSQRT
    0U,	// G_FFLOOR
    0U,	// G_FRINT
    0U,	// G_FNEARBYINT
    0U,	// G_ADDRSPACE_CAST
    0U,	// G_BLOCK_ADDR
    0U,	// G_JUMP_TABLE
    0U,	// G_DYN_STACKALLOC
    0U,	// G_STRICT_FADD
    0U,	// G_STRICT_FSUB
    0U,	// G_STRICT_FMUL
    0U,	// G_STRICT_FDIV
    0U,	// G_STRICT_FREM
    0U,	// G_STRICT_FMA
    0U,	// G_STRICT_FSQRT
    0U,	// G_READ_REGISTER
    0U,	// G_WRITE_REGISTER
    0U,	// G_MEMCPY
    0U,	// G_MEMCPY_INLINE
    0U,	// G_MEMMOVE
    0U,	// G_MEMSET
    0U,	// G_BZERO
    0U,	// G_VECREDUCE_SEQ_FADD
    0U,	// G_VECREDUCE_SEQ_FMUL
    0U,	// G_VECREDUCE_FADD
    0U,	// G_VECREDUCE_FMUL
    0U,	// G_VECREDUCE_FMAX
    0U,	// G_VECREDUCE_FMIN
    0U,	// G_VECREDUCE_ADD
    0U,	// G_VECREDUCE_MUL
    0U,	// G_VECREDUCE_AND
    0U,	// G_VECREDUCE_OR
    0U,	// G_VECREDUCE_XOR
    0U,	// G_VECREDUCE_SMAX
    0U,	// G_VECREDUCE_SMIN
    0U,	// G_VECREDUCE_UMAX
    0U,	// G_VECREDUCE_UMIN
    0U,	// G_SBFX
    0U,	// G_UBFX
    0U,	// ABSDIFS_B_rr_v110
    0U,	// ABSDIFS_H_rr
    0U,	// ABSDIFS_rc
    0U,	// ABSDIFS_rr
    0U,	// ABSDIF_B_rr
    0U,	// ABSDIF_H_rr
    0U,	// ABSDIF_rc
    0U,	// ABSDIF_rr
    0U,	// ABSS_B_rr_v110
    0U,	// ABSS_H_rr
    0U,	// ABSS_rr
    0U,	// ABS_B_rr
    0U,	// ABS_H_rr
    0U,	// ABS_rr
    0U,	// ADDC_rc
    0U,	// ADDC_rr
    0U,	// ADDIH_A_rlc
    0U,	// ADDIH_rlc
    0U,	// ADDI_rlc
    0U,	// ADDSC_AT_rr
    0U,	// ADDSC_AT_rr_v110
    1U,	// ADDSC_A_rr
    1U,	// ADDSC_A_rr_v110
    0U,	// ADDSC_A_srrs
    0U,	// ADDSC_A_srrs_v110
    0U,	// ADDS_BU_rr_v110
    0U,	// ADDS_B_rr_v110
    0U,	// ADDS_H
    0U,	// ADDS_HU
    0U,	// ADDS_U
    0U,	// ADDS_U_rc
    0U,	// ADDS_rc
    0U,	// ADDS_rr
    0U,	// ADDS_srr
    0U,	// ADDX_rc
    0U,	// ADDX_rr
    0U,	// ADD_A_rr
    0U,	// ADD_A_src
    0U,	// ADD_A_srr
    0U,	// ADD_B_rr
    0U,	// ADD_F_rrr
    0U,	// ADD_H_rr
    0U,	// ADD_rc
    0U,	// ADD_rr
    0U,	// ADD_src
    0U,	// ADD_src_15a
    0U,	// ADD_src_a15
    0U,	// ADD_srr
    0U,	// ADD_srr_15a
    0U,	// ADD_srr_a15
    0U,	// ANDN_T
    0U,	// ANDN_rc
    0U,	// ANDN_rr
    0U,	// AND_ANDN_T
    0U,	// AND_AND_T
    0U,	// AND_EQ_rc
    0U,	// AND_EQ_rr
    0U,	// AND_GE_U_rc
    0U,	// AND_GE_U_rr
    0U,	// AND_GE_rc
    0U,	// AND_GE_rr
    0U,	// AND_LT_U_rc
    0U,	// AND_LT_U_rr
    0U,	// AND_LT_rc
    0U,	// AND_LT_rr
    0U,	// AND_NE_rc
    0U,	// AND_NE_rr
    0U,	// AND_NOR_T
    0U,	// AND_OR_T
    0U,	// AND_T
    0U,	// AND_rc
    0U,	// AND_rr
    0U,	// AND_sc
    0U,	// AND_sc_v110
    0U,	// AND_srr
    0U,	// AND_srr_v110
    0U,	// BISR_rc
    0U,	// BISR_rc_v161
    0U,	// BISR_sc
    0U,	// BISR_sc_v110
    0U,	// BMERGAE_rr_v110
    0U,	// BMERGE_rr
    0U,	// BSPLIT_rr
    0U,	// BSPLIT_rr_v110
    0U,	// CACHEA_I_bo_bso
    0U,	// CACHEA_I_bo_c
    0U,	// CACHEA_I_bo_pos
    0U,	// CACHEA_I_bo_pre
    0U,	// CACHEA_I_bo_r
    0U,	// CACHEA_WI_bo_bso
    0U,	// CACHEA_WI_bo_c
    0U,	// CACHEA_WI_bo_pos
    0U,	// CACHEA_WI_bo_pre
    0U,	// CACHEA_WI_bo_r
    0U,	// CACHEA_W_bo_bso
    0U,	// CACHEA_W_bo_c
    0U,	// CACHEA_W_bo_pos
    0U,	// CACHEA_W_bo_pre
    0U,	// CACHEA_W_bo_r
    0U,	// CACHEI_I_bo_bso
    0U,	// CACHEI_I_bo_pos
    0U,	// CACHEI_I_bo_pre
    0U,	// CACHEI_WI_bo_bso
    0U,	// CACHEI_WI_bo_pos
    0U,	// CACHEI_WI_bo_pre
    0U,	// CACHEI_W_bo_bso
    0U,	// CACHEI_W_bo_c
    0U,	// CACHEI_W_bo_pos
    0U,	// CACHEI_W_bo_pre
    0U,	// CACHEI_W_bo_r
    17U,	// CADDN_A_rcr_v110
    0U,	// CADDN_A_rrr_v110
    17U,	// CADDN_rcr
    0U,	// CADDN_rrr
    0U,	// CADDN_src
    0U,	// CADDN_srr_v110
    17U,	// CADD_A_rcr_v110
    0U,	// CADD_A_rrr_v110
    17U,	// CADD_rcr
    0U,	// CADD_rrr
    0U,	// CADD_src
    0U,	// CADD_srr_v110
    0U,	// CALLA_b
    0U,	// CALLI_rr
    0U,	// CALLI_rr_v110
    0U,	// CALL_b
    0U,	// CALL_sb
    0U,	// CLO_B_rr_v110
    0U,	// CLO_H_rr
    0U,	// CLO_rr
    0U,	// CLS_B_rr_v110
    0U,	// CLS_H_rr
    0U,	// CLS_rr
    0U,	// CLZ_B_rr_v110
    0U,	// CLZ_H_rr
    0U,	// CLZ_rr
    0U,	// CMOVN_src
    0U,	// CMOVN_srr
    0U,	// CMOV_src
    0U,	// CMOV_srr
    0U,	// CMPSWAP_W_bo_bso
    0U,	// CMPSWAP_W_bo_c
    0U,	// CMPSWAP_W_bo_pos
    0U,	// CMPSWAP_W_bo_pre
    0U,	// CMPSWAP_W_bo_r
    0U,	// CMP_F_rr
    0U,	// CRC32B_W_rr
    0U,	// CRC32L_W_rr
    0U,	// CRC32_B_rr
    0U,	// CRCN_rrr
    0U,	// CSUBN_A_rrr_v110
    0U,	// CSUBN_rrr
    0U,	// CSUB_A_rrr_v110
    0U,	// CSUB_rrr
    0U,	// DEBUG_sr
    0U,	// DEBUG_sys
    1U,	// DEXTR_rrpw
    1U,	// DEXTR_rrrr
    33U,	// DIFSC_A_rr_v110
    0U,	// DISABLE_sys
    0U,	// DISABLE_sys_1
    0U,	// DIV_F_rr
    0U,	// DIV_U_rr
    0U,	// DIV_rr
    0U,	// DSYNC_sys
    0U,	// DVADJ_rrr
    0U,	// DVADJ_rrr_v110
    0U,	// DVADJ_srr_v110
    0U,	// DVINIT_BU_rr
    0U,	// DVINIT_BU_rr_v110
    0U,	// DVINIT_B_rr
    0U,	// DVINIT_B_rr_v110
    0U,	// DVINIT_HU_rr
    0U,	// DVINIT_HU_rr_v110
    0U,	// DVINIT_H_rr
    0U,	// DVINIT_H_rr_v110
    0U,	// DVINIT_U_rr
    0U,	// DVINIT_U_rr_v110
    0U,	// DVINIT_rr
    0U,	// DVINIT_rr_v110
    0U,	// DVSTEP_U_rrr
    0U,	// DVSTEP_U_rrrv110
    0U,	// DVSTEP_Uv110
    0U,	// DVSTEP_rrr
    0U,	// DVSTEP_rrrv110
    0U,	// DVSTEPv110
    0U,	// ENABLE_sys
    0U,	// EQANY_B_rc
    0U,	// EQANY_B_rr
    0U,	// EQANY_H_rc
    0U,	// EQANY_H_rr
    0U,	// EQZ_A_rr
    0U,	// EQ_A_rr
    0U,	// EQ_B_rr
    0U,	// EQ_H_rr
    0U,	// EQ_W_rr
    0U,	// EQ_rc
    0U,	// EQ_rr
    0U,	// EQ_src
    0U,	// EQ_srr
    1U,	// EXTR_U_rrpw
    0U,	// EXTR_U_rrrr
    1U,	// EXTR_U_rrrw
    1U,	// EXTR_rrpw
    0U,	// EXTR_rrrr
    1U,	// EXTR_rrrw
    0U,	// FCALLA_b
    0U,	// FCALLA_i
    0U,	// FCALL_b
    0U,	// FRET_sr
    0U,	// FRET_sys
    0U,	// FTOHP_rr
    0U,	// FTOIZ_rr
    0U,	// FTOI_rr
    0U,	// FTOQ31Z_rr
    0U,	// FTOQ31_rr
    0U,	// FTOUZ_rr
    0U,	// FTOU_rr
    0U,	// GE_A_rr
    0U,	// GE_U_rc
    0U,	// GE_U_rr
    0U,	// GE_rc
    0U,	// GE_rr
    0U,	// HPTOF_rr
    1U,	// IMASK_rcpw
    1U,	// IMASK_rcrw
    1U,	// IMASK_rrpw
    1U,	// IMASK_rrrw
    129U,	// INSERT_rcpw
    1U,	// INSERT_rcrr
    129U,	// INSERT_rcrw
    129U,	// INSERT_rrpw
    129U,	// INSERT_rrrr
    129U,	// INSERT_rrrw
    0U,	// INSN_T
    0U,	// INS_T
    0U,	// ISYNC_sys
    0U,	// ITOF_rr
    0U,	// IXMAX_U_rrr
    0U,	// IXMAX_rrr
    0U,	// IXMIN_U_rrr
    0U,	// IXMIN_rrr
    0U,	// JA_b
    0U,	// JEQ_A_brr
    0U,	// JEQ_brc
    0U,	// JEQ_brr
    0U,	// JEQ_sbc1
    0U,	// JEQ_sbc2
    0U,	// JEQ_sbc_v110
    0U,	// JEQ_sbr1
    0U,	// JEQ_sbr2
    0U,	// JEQ_sbr_v110
    0U,	// JGEZ_sbr
    0U,	// JGEZ_sbr_v110
    0U,	// JGE_U_brc
    0U,	// JGE_U_brr
    0U,	// JGE_brc
    0U,	// JGE_brr
    0U,	// JGTZ_sbr
    0U,	// JGTZ_sbr_v110
    0U,	// JI_rr
    0U,	// JI_rr_v110
    0U,	// JI_sbr_v110
    0U,	// JI_sr
    0U,	// JLA_b
    0U,	// JLEZ_sbr
    0U,	// JLEZ_sbr_v110
    0U,	// JLI_rr
    0U,	// JLI_rr_v110
    0U,	// JLTZ_sbr
    0U,	// JLTZ_sbr_v110
    0U,	// JLT_U_brc
    0U,	// JLT_U_brr
    0U,	// JLT_brc
    0U,	// JLT_brr
    0U,	// JL_b
    0U,	// JNED_brc
    0U,	// JNED_brr
    0U,	// JNEI_brc
    0U,	// JNEI_brr
    0U,	// JNE_A_brr
    0U,	// JNE_brc
    0U,	// JNE_brr
    0U,	// JNE_sbc1
    0U,	// JNE_sbc2
    0U,	// JNE_sbc_v110
    0U,	// JNE_sbr1
    0U,	// JNE_sbr2
    0U,	// JNE_sbr_v110
    0U,	// JNZ_A_brr
    0U,	// JNZ_A_sbr
    0U,	// JNZ_T_brn
    0U,	// JNZ_T_sbrn
    0U,	// JNZ_T_sbrn_v110
    0U,	// JNZ_sb
    0U,	// JNZ_sb_v110
    0U,	// JNZ_sbr
    0U,	// JNZ_sbr_v110
    0U,	// JZ_A_brr
    0U,	// JZ_A_sbr
    0U,	// JZ_T_brn
    0U,	// JZ_T_sbrn
    0U,	// JZ_T_sbrn_v110
    0U,	// JZ_sb
    0U,	// JZ_sb_v110
    0U,	// JZ_sbr
    0U,	// JZ_sbr_v110
    0U,	// J_b
    0U,	// J_sb
    0U,	// J_sb_v110
    0U,	// LDLCX_abs
    0U,	// LDLCX_bo_bso
    0U,	// LDMST_abs
    0U,	// LDMST_bo_bso
    0U,	// LDMST_bo_c
    0U,	// LDMST_bo_pos
    0U,	// LDMST_bo_pre
    0U,	// LDMST_bo_r
    0U,	// LDUCX_abs
    0U,	// LDUCX_bo_bso
    0U,	// LD_A_abs
    0U,	// LD_A_bo_bso
    0U,	// LD_A_bo_c
    0U,	// LD_A_bo_pos
    0U,	// LD_A_bo_pre
    0U,	// LD_A_bo_r
    0U,	// LD_A_bol
    0U,	// LD_A_sc
    0U,	// LD_A_slr
    0U,	// LD_A_slr_post
    0U,	// LD_A_slr_post_v110
    0U,	// LD_A_slr_v110
    0U,	// LD_A_slro
    0U,	// LD_A_slro_v110
    0U,	// LD_A_sro
    0U,	// LD_A_sro_v110
    0U,	// LD_BU_abs
    0U,	// LD_BU_bo_bso
    0U,	// LD_BU_bo_c
    0U,	// LD_BU_bo_pos
    0U,	// LD_BU_bo_pre
    0U,	// LD_BU_bo_r
    0U,	// LD_BU_bol
    0U,	// LD_BU_slr
    0U,	// LD_BU_slr_post
    0U,	// LD_BU_slr_post_v110
    0U,	// LD_BU_slr_v110
    0U,	// LD_BU_slro
    0U,	// LD_BU_slro_v110
    0U,	// LD_BU_sro
    0U,	// LD_BU_sro_v110
    0U,	// LD_B_abs
    0U,	// LD_B_bo_bso
    0U,	// LD_B_bo_c
    0U,	// LD_B_bo_pos
    0U,	// LD_B_bo_pre
    0U,	// LD_B_bo_r
    0U,	// LD_B_bol
    0U,	// LD_B_slr_post_v110
    0U,	// LD_B_slr_v110
    0U,	// LD_B_slro_v110
    0U,	// LD_B_sro_v110
    0U,	// LD_DA_abs
    0U,	// LD_DA_bo_bso
    0U,	// LD_DA_bo_c
    0U,	// LD_DA_bo_pos
    0U,	// LD_DA_bo_pre
    0U,	// LD_DA_bo_r
    0U,	// LD_D_abs
    0U,	// LD_D_bo_bso
    0U,	// LD_D_bo_c
    0U,	// LD_D_bo_pos
    0U,	// LD_D_bo_pre
    0U,	// LD_D_bo_r
    0U,	// LD_HU_abs
    0U,	// LD_HU_bo_bso
    0U,	// LD_HU_bo_c
    0U,	// LD_HU_bo_pos
    0U,	// LD_HU_bo_pre
    0U,	// LD_HU_bo_r
    0U,	// LD_HU_bol
    0U,	// LD_H_abs
    0U,	// LD_H_bo_bso
    0U,	// LD_H_bo_c
    0U,	// LD_H_bo_pos
    0U,	// LD_H_bo_pre
    0U,	// LD_H_bo_r
    0U,	// LD_H_bol
    0U,	// LD_H_slr
    0U,	// LD_H_slr_post
    0U,	// LD_H_slr_post_v110
    0U,	// LD_H_slr_v110
    0U,	// LD_H_slro
    0U,	// LD_H_slro_v110
    0U,	// LD_H_sro
    0U,	// LD_H_sro_v110
    0U,	// LD_Q_abs
    0U,	// LD_Q_bo_bso
    0U,	// LD_Q_bo_c
    0U,	// LD_Q_bo_pos
    0U,	// LD_Q_bo_pre
    0U,	// LD_Q_bo_r
    0U,	// LD_W_abs
    0U,	// LD_W_bo_bso
    0U,	// LD_W_bo_c
    0U,	// LD_W_bo_pos
    0U,	// LD_W_bo_pre
    0U,	// LD_W_bo_r
    0U,	// LD_W_bol
    0U,	// LD_W_sc
    0U,	// LD_W_slr
    0U,	// LD_W_slr_post
    0U,	// LD_W_slr_post_v110
    0U,	// LD_W_slr_v110
    0U,	// LD_W_slro
    0U,	// LD_W_slro_v110
    0U,	// LD_W_sro
    0U,	// LD_W_sro_v110
    0U,	// LEA_abs
    0U,	// LEA_bo_bso
    0U,	// LEA_bol
    0U,	// LHA_abs
    0U,	// LOOPU_brr
    0U,	// LOOP_brr
    0U,	// LOOP_sbr
    0U,	// LT_A_rr
    0U,	// LT_B
    0U,	// LT_BU
    0U,	// LT_H
    0U,	// LT_HU
    0U,	// LT_U_rc
    0U,	// LT_U_rr
    0U,	// LT_U_srcv110
    0U,	// LT_U_srrv110
    0U,	// LT_W
    0U,	// LT_WU
    0U,	// LT_rc
    0U,	// LT_rr
    0U,	// LT_src
    0U,	// LT_srr
    2U,	// MADDMS_H_rrr1_LL
    3U,	// MADDMS_H_rrr1_LU
    4U,	// MADDMS_H_rrr1_UL
    5U,	// MADDMS_H_rrr1_UU
    49U,	// MADDMS_U_rcr_v110
    0U,	// MADDMS_U_rrr2_v110
    17U,	// MADDMS_rcr_v110
    0U,	// MADDMS_rrr2_v110
    2U,	// MADDM_H_rrr1_LL
    3U,	// MADDM_H_rrr1_LU
    4U,	// MADDM_H_rrr1_UL
    5U,	// MADDM_H_rrr1_UU
    65U,	// MADDM_H_rrr1_v110
    65U,	// MADDM_Q_rrr1_v110
    49U,	// MADDM_U_rcr_v110
    0U,	// MADDM_U_rrr2_v110
    17U,	// MADDM_rcr_v110
    0U,	// MADDM_rrr2_v110
    6U,	// MADDRS_H_rrr1_DcEdDaDbUL
    2U,	// MADDRS_H_rrr1_LL
    3U,	// MADDRS_H_rrr1_LU
    4U,	// MADDRS_H_rrr1_UL
    5U,	// MADDRS_H_rrr1_UU
    0U,	// MADDRS_Q_rrr1_L_L
    0U,	// MADDRS_Q_rrr1_U_U
    6U,	// MADDR_H_rrr1_DcEdDaDbUL
    2U,	// MADDR_H_rrr1_LL
    3U,	// MADDR_H_rrr1_LU
    4U,	// MADDR_H_rrr1_UL
    5U,	// MADDR_H_rrr1_UU
    0U,	// MADDR_Q_rrr1_L_L
    0U,	// MADDR_Q_rrr1_U_U
    2U,	// MADDSUMS_H_rrr1_LL
    3U,	// MADDSUMS_H_rrr1_LU
    4U,	// MADDSUMS_H_rrr1_UL
    5U,	// MADDSUMS_H_rrr1_UU
    65U,	// MADDSUMS_H_rrr1_v110
    2U,	// MADDSUM_H_rrr1_LL
    3U,	// MADDSUM_H_rrr1_LU
    4U,	// MADDSUM_H_rrr1_UL
    5U,	// MADDSUM_H_rrr1_UU
    65U,	// MADDSUM_H_rrr1_v110
    2U,	// MADDSURS_H_rrr1_LL
    3U,	// MADDSURS_H_rrr1_LU
    4U,	// MADDSURS_H_rrr1_UL
    5U,	// MADDSURS_H_rrr1_UU
    2U,	// MADDSUR_H_rrr1_LL
    3U,	// MADDSUR_H_rrr1_LU
    4U,	// MADDSUR_H_rrr1_UL
    5U,	// MADDSUR_H_rrr1_UU
    2U,	// MADDSUS_H_rrr1_LL
    3U,	// MADDSUS_H_rrr1_LU
    4U,	// MADDSUS_H_rrr1_UL
    5U,	// MADDSUS_H_rrr1_UU
    65U,	// MADDSUS_H_rrr1_v110
    2U,	// MADDSU_H_rrr1_LL
    3U,	// MADDSU_H_rrr1_LU
    4U,	// MADDSU_H_rrr1_UL
    5U,	// MADDSU_H_rrr1_UU
    65U,	// MADDSU_H_rrr1_v110
    2U,	// MADDS_H_rrr1_LL
    3U,	// MADDS_H_rrr1_LU
    4U,	// MADDS_H_rrr1_UL
    5U,	// MADDS_H_rrr1_UU
    65U,	// MADDS_H_rrr1_v110
    65U,	// MADDS_Q_rrr1
    7U,	// MADDS_Q_rrr1_L
    0U,	// MADDS_Q_rrr1_L_L
    65U,	// MADDS_Q_rrr1_L_v110
    8U,	// MADDS_Q_rrr1_U
    0U,	// MADDS_Q_rrr1_U_U
    65U,	// MADDS_Q_rrr1_e
    7U,	// MADDS_Q_rrr1_e_L
    0U,	// MADDS_Q_rrr1_e_L_L
    8U,	// MADDS_Q_rrr1_e_U
    0U,	// MADDS_Q_rrr1_e_U_U
    17U,	// MADDS_U_rcr
    17U,	// MADDS_U_rcr_e
    0U,	// MADDS_U_rrr2
    0U,	// MADDS_U_rrr2_e
    17U,	// MADDS_rcr
    17U,	// MADDS_rcr_e
    0U,	// MADDS_rrr2
    0U,	// MADDS_rrr2_e
    0U,	// MADD_F_rrr
    2U,	// MADD_H_rrr1_LL
    3U,	// MADD_H_rrr1_LU
    4U,	// MADD_H_rrr1_UL
    5U,	// MADD_H_rrr1_UU
    65U,	// MADD_H_rrr1_v110
    65U,	// MADD_Q_rrr1
    7U,	// MADD_Q_rrr1_L
    0U,	// MADD_Q_rrr1_L_L
    65U,	// MADD_Q_rrr1_L_v110
    8U,	// MADD_Q_rrr1_U
    0U,	// MADD_Q_rrr1_U_U
    65U,	// MADD_Q_rrr1_e
    7U,	// MADD_Q_rrr1_e_L
    0U,	// MADD_Q_rrr1_e_L_L
    8U,	// MADD_Q_rrr1_e_U
    0U,	// MADD_Q_rrr1_e_U_U
    49U,	// MADD_U_rcr
    0U,	// MADD_U_rrr2
    17U,	// MADD_rcr
    17U,	// MADD_rcr_e
    0U,	// MADD_rrr2
    0U,	// MADD_rrr2_e
    0U,	// MAX_B
    0U,	// MAX_BU
    0U,	// MAX_H
    0U,	// MAX_HU
    0U,	// MAX_U_rc
    0U,	// MAX_U_rr
    0U,	// MAX_rc
    0U,	// MAX_rr
    0U,	// MFCR_rlc
    0U,	// MIN_B
    0U,	// MIN_BU
    0U,	// MIN_H
    0U,	// MIN_HU
    0U,	// MIN_U_rc
    0U,	// MIN_U_rr
    0U,	// MIN_rc
    0U,	// MIN_rr
    0U,	// MOVH_A_rlc
    0U,	// MOVH_rlc
    0U,	// MOV_AA_rr
    0U,	// MOV_AA_srr
    0U,	// MOV_A_rr
    0U,	// MOV_A_src
    0U,	// MOV_A_srr
    0U,	// MOV_D_rr
    0U,	// MOV_D_srr
    0U,	// MOV_U_rlc
    0U,	// MOV_rlcDc
    0U,	// MOV_rlcEc
    0U,	// MOV_rrDcDb
    0U,	// MOV_rrEcDaDb
    0U,	// MOV_rrEcDb
    0U,	// MOV_sc
    0U,	// MOV_srcDa
    0U,	// MOV_srcEa
    0U,	// MOV_srr
    2U,	// MSUBADMS_H_rrr1_LL
    3U,	// MSUBADMS_H_rrr1_LU
    4U,	// MSUBADMS_H_rrr1_UL
    5U,	// MSUBADMS_H_rrr1_UU
    65U,	// MSUBADMS_H_rrr1_v110
    2U,	// MSUBADM_H_rrr1_LL
    3U,	// MSUBADM_H_rrr1_LU
    4U,	// MSUBADM_H_rrr1_UL
    5U,	// MSUBADM_H_rrr1_UU
    65U,	// MSUBADM_H_rrr1_v110
    2U,	// MSUBADRS_H_rrr1_LL
    3U,	// MSUBADRS_H_rrr1_LU
    4U,	// MSUBADRS_H_rrr1_UL
    5U,	// MSUBADRS_H_rrr1_UU
    2U,	// MSUBADR_H_rrr1_LL
    3U,	// MSUBADR_H_rrr1_LU
    4U,	// MSUBADR_H_rrr1_UL
    5U,	// MSUBADR_H_rrr1_UU
    2U,	// MSUBADS_H_rrr1_LL
    3U,	// MSUBADS_H_rrr1_LU
    4U,	// MSUBADS_H_rrr1_UL
    5U,	// MSUBADS_H_rrr1_UU
    65U,	// MSUBADS_H_rrr1_v110
    2U,	// MSUBAD_H_rrr1_LL
    3U,	// MSUBAD_H_rrr1_LU
    4U,	// MSUBAD_H_rrr1_UL
    5U,	// MSUBAD_H_rrr1_UU
    65U,	// MSUBAD_H_rrr1_v110
    2U,	// MSUBMS_H_rrr1_LL
    3U,	// MSUBMS_H_rrr1_LU
    4U,	// MSUBMS_H_rrr1_UL
    5U,	// MSUBMS_H_rrr1_UU
    65U,	// MSUBMS_H_rrr1_v110
    2U,	// MSUBM_H_rrr1_LL
    3U,	// MSUBM_H_rrr1_LU
    4U,	// MSUBM_H_rrr1_UL
    5U,	// MSUBM_H_rrr1_UU
    65U,	// MSUBM_H_rrr1_v110
    6U,	// MSUBRS_H_rrr1_DcEdDaDbUL
    2U,	// MSUBRS_H_rrr1_LL
    3U,	// MSUBRS_H_rrr1_LU
    4U,	// MSUBRS_H_rrr1_UL
    5U,	// MSUBRS_H_rrr1_UU
    0U,	// MSUBRS_Q_rrr1_L_L
    0U,	// MSUBRS_Q_rrr1_U_U
    6U,	// MSUBR_H_rrr1_DcEdDaDbUL
    2U,	// MSUBR_H_rrr1_LL
    3U,	// MSUBR_H_rrr1_LU
    4U,	// MSUBR_H_rrr1_UL
    5U,	// MSUBR_H_rrr1_UU
    0U,	// MSUBR_Q_rrr1_L_L
    0U,	// MSUBR_Q_rrr1_U_U
    2U,	// MSUBS_H_rrr1_LL
    3U,	// MSUBS_H_rrr1_LU
    4U,	// MSUBS_H_rrr1_UL
    5U,	// MSUBS_H_rrr1_UU
    65U,	// MSUBS_H_rrr1_v110
    65U,	// MSUBS_Q_rrr1
    7U,	// MSUBS_Q_rrr1_L
    0U,	// MSUBS_Q_rrr1_L_L
    8U,	// MSUBS_Q_rrr1_U
    0U,	// MSUBS_Q_rrr1_U_U
    65U,	// MSUBS_Q_rrr1_e
    7U,	// MSUBS_Q_rrr1_e_L
    0U,	// MSUBS_Q_rrr1_e_L_L
    8U,	// MSUBS_Q_rrr1_e_U
    0U,	// MSUBS_Q_rrr1_e_U_U
    17U,	// MSUBS_U_rcr
    17U,	// MSUBS_U_rcr_e
    0U,	// MSUBS_U_rrr2
    0U,	// MSUBS_U_rrr2_e
    17U,	// MSUBS_rcr
    17U,	// MSUBS_rcr_e
    0U,	// MSUBS_rrr2
    0U,	// MSUBS_rrr2_e
    0U,	// MSUB_F_rrr
    2U,	// MSUB_H_rrr1_LL
    3U,	// MSUB_H_rrr1_LU
    4U,	// MSUB_H_rrr1_UL
    5U,	// MSUB_H_rrr1_UU
    65U,	// MSUB_H_rrr1_v110
    65U,	// MSUB_Q_rrr1
    7U,	// MSUB_Q_rrr1_L
    0U,	// MSUB_Q_rrr1_L_L
    8U,	// MSUB_Q_rrr1_U
    0U,	// MSUB_Q_rrr1_U_U
    65U,	// MSUB_Q_rrr1_e
    7U,	// MSUB_Q_rrr1_e_L
    0U,	// MSUB_Q_rrr1_e_L_L
    8U,	// MSUB_Q_rrr1_e_U
    0U,	// MSUB_Q_rrr1_e_U_U
    49U,	// MSUB_U_rcr
    0U,	// MSUB_U_rrr2
    17U,	// MSUB_rcr
    17U,	// MSUB_rcr_e
    0U,	// MSUB_rrr2
    0U,	// MSUB_rrr2_e
    0U,	// MTCR_rlc
    9U,	// MULM_H_rr1_LL2e
    10U,	// MULM_H_rr1_LU2e
    11U,	// MULM_H_rr1_UL2e
    12U,	// MULM_H_rr1_UU2e
    9U,	// MULR_H_rr1_LL2e
    10U,	// MULR_H_rr1_LU2e
    11U,	// MULR_H_rr1_UL2e
    12U,	// MULR_H_rr1_UU2e
    0U,	// MULR_Q_rr1_2LL
    0U,	// MULR_Q_rr1_2UU
    0U,	// MULS_U_rc
    0U,	// MULS_U_rr2
    0U,	// MULS_rc
    0U,	// MULS_rr2
    0U,	// MUL_F_rrr
    9U,	// MUL_H_rr1_LL2e
    10U,	// MUL_H_rr1_LU2e
    11U,	// MUL_H_rr1_UL2e
    12U,	// MUL_H_rr1_UU2e
    0U,	// MUL_Q_rr1_2LL
    0U,	// MUL_Q_rr1_2UU
    13U,	// MUL_Q_rr1_2_L
    13U,	// MUL_Q_rr1_2_Le
    14U,	// MUL_Q_rr1_2_U
    14U,	// MUL_Q_rr1_2_Ue
    33U,	// MUL_Q_rr1_2__
    33U,	// MUL_Q_rr1_2__e
    0U,	// MUL_U_rc
    0U,	// MUL_U_rr2
    0U,	// MUL_rc
    0U,	// MUL_rc_e
    0U,	// MUL_rr2
    0U,	// MUL_rr2_e
    0U,	// MUL_srr
    0U,	// NAND_T
    0U,	// NAND_rc
    0U,	// NAND_rr
    0U,	// NEZ_A
    0U,	// NE_A
    0U,	// NE_rc
    0U,	// NE_rr
    0U,	// NOP_sr
    0U,	// NOP_sys
    0U,	// NOR_T
    0U,	// NOR_rc
    0U,	// NOR_rr
    0U,	// NOT_sr
    0U,	// ORN_T
    0U,	// ORN_rc
    0U,	// ORN_rr
    0U,	// OR_ANDN_T
    0U,	// OR_AND_T
    0U,	// OR_EQ_rc
    0U,	// OR_EQ_rr
    0U,	// OR_GE_U_rc
    0U,	// OR_GE_U_rr
    0U,	// OR_GE_rc
    0U,	// OR_GE_rr
    0U,	// OR_LT_U_rc
    0U,	// OR_LT_U_rr
    0U,	// OR_LT_rc
    0U,	// OR_LT_rr
    0U,	// OR_NE_rc
    0U,	// OR_NE_rr
    0U,	// OR_NOR_T
    0U,	// OR_OR_T
    0U,	// OR_T
    0U,	// OR_rc
    0U,	// OR_rr
    0U,	// OR_sc
    0U,	// OR_srr
    0U,	// PACK_rrr
    0U,	// PARITY_rr
    0U,	// POPCNT_W_rr
    0U,	// Q31TOF_rr
    0U,	// QSEED_F_rr
    0U,	// RESTORE_sys
    0U,	// RET_sr
    0U,	// RET_sys
    0U,	// RFE_sr
    0U,	// RFE_sys
    0U,	// RFM_sys
    0U,	// RSLCX_sys
    0U,	// RSTV_sys
    0U,	// RSUBS_U_rc
    0U,	// RSUBS_rc
    0U,	// RSUB_rc
    0U,	// RSUB_sr
    0U,	// SAT_BU_rr
    0U,	// SAT_BU_sr
    0U,	// SAT_B_rr
    0U,	// SAT_B_sr
    0U,	// SAT_HU_rr
    0U,	// SAT_HU_sr
    0U,	// SAT_H_rr
    0U,	// SAT_H_sr
    17U,	// SELN_rcr
    0U,	// SELN_rrr
    17U,	// SEL_rcr
    0U,	// SEL_rrr
    0U,	// SHAS_rc
    0U,	// SHAS_rr
    0U,	// SHA_H_rc
    0U,	// SHA_H_rr
    0U,	// SHA_rc
    0U,	// SHA_rr
    0U,	// SHA_src
    0U,	// SHUFFLE_rc
    0U,	// SH_ANDN_T
    0U,	// SH_AND_T
    0U,	// SH_EQ_rc
    0U,	// SH_EQ_rr
    0U,	// SH_GE_U_rc
    0U,	// SH_GE_U_rr
    0U,	// SH_GE_rc
    0U,	// SH_GE_rr
    0U,	// SH_H_rc
    0U,	// SH_H_rr
    0U,	// SH_LT_U_rc
    0U,	// SH_LT_U_rr
    0U,	// SH_LT_rc
    0U,	// SH_LT_rr
    0U,	// SH_NAND_T
    0U,	// SH_NE_rc
    0U,	// SH_NE_rr
    0U,	// SH_NOR_T
    0U,	// SH_ORN_T
    0U,	// SH_OR_T
    0U,	// SH_XNOR_T
    0U,	// SH_XOR_T
    0U,	// SH_rc
    0U,	// SH_rr
    0U,	// SH_src
    0U,	// STLCX_abs
    0U,	// STLCX_bo_bso
    0U,	// STUCX_abs
    0U,	// STUCX_bo_bso
    0U,	// ST_A_abs
    0U,	// ST_A_bo_bso
    0U,	// ST_A_bo_c
    0U,	// ST_A_bo_pos
    0U,	// ST_A_bo_pre
    0U,	// ST_A_bo_r
    0U,	// ST_A_bol
    0U,	// ST_A_sc
    0U,	// ST_A_sro
    0U,	// ST_A_ssr
    0U,	// ST_A_ssr_pos
    0U,	// ST_A_ssro
    0U,	// ST_B_abs
    0U,	// ST_B_bo_bso
    0U,	// ST_B_bo_c
    0U,	// ST_B_bo_pos
    0U,	// ST_B_bo_pre
    0U,	// ST_B_bo_r
    0U,	// ST_B_bol
    0U,	// ST_B_sro
    0U,	// ST_B_ssr
    0U,	// ST_B_ssr_pos
    0U,	// ST_B_ssro
    0U,	// ST_DA_abs
    0U,	// ST_DA_bo_bso
    0U,	// ST_DA_bo_c
    0U,	// ST_DA_bo_pos
    0U,	// ST_DA_bo_pre
    0U,	// ST_DA_bo_r
    0U,	// ST_D_abs
    0U,	// ST_D_bo_bso
    0U,	// ST_D_bo_c
    0U,	// ST_D_bo_pos
    0U,	// ST_D_bo_pre
    0U,	// ST_D_bo_r
    0U,	// ST_H_abs
    0U,	// ST_H_bo_bso
    0U,	// ST_H_bo_c
    0U,	// ST_H_bo_pos
    0U,	// ST_H_bo_pre
    0U,	// ST_H_bo_r
    0U,	// ST_H_bol
    0U,	// ST_H_sro
    0U,	// ST_H_ssr
    0U,	// ST_H_ssr_pos
    0U,	// ST_H_ssro
    0U,	// ST_Q_abs
    0U,	// ST_Q_bo_bso
    0U,	// ST_Q_bo_c
    0U,	// ST_Q_bo_pos
    0U,	// ST_Q_bo_pre
    0U,	// ST_Q_bo_r
    0U,	// ST_T
    0U,	// ST_W_abs
    0U,	// ST_W_bo_bso
    0U,	// ST_W_bo_c
    0U,	// ST_W_bo_pos
    0U,	// ST_W_bo_pre
    0U,	// ST_W_bo_r
    0U,	// ST_W_bol
    0U,	// ST_W_sro
    0U,	// ST_W_ssr
    0U,	// ST_W_ssr_pos
    0U,	// ST_W_ssro
    0U,	// SUBC_rr
    0U,	// SUBS_HU_rr
    0U,	// SUBS_H_rr
    0U,	// SUBS_U_rr
    0U,	// SUBS_rr
    0U,	// SUBS_srr
    0U,	// SUBX_rr
    0U,	// SUB_A_rr
    0U,	// SUB_A_sc
    0U,	// SUB_B_rr
    0U,	// SUB_F_rrr
    0U,	// SUB_H_rr
    0U,	// SUB_rr
    0U,	// SUB_srr
    0U,	// SUB_srr_15a
    0U,	// SUB_srr_a15
    0U,	// SVLCX_sys
    0U,	// SWAPMSK_W_bo_bso
    0U,	// SWAPMSK_W_bo_c
    0U,	// SWAPMSK_W_bo_pos
    0U,	// SWAPMSK_W_bo_pre
    0U,	// SWAPMSK_W_bo_r
    0U,	// SWAP_W_abs
    0U,	// SWAP_W_bo_bso
    0U,	// SWAP_W_bo_c
    0U,	// SWAP_W_bo_pos
    0U,	// SWAP_W_bo_pre
    0U,	// SWAP_W_bo_r
    0U,	// SYSCALL_rc
    0U,	// TRAPSV_sys
    0U,	// TRAPV_sys
    0U,	// UNPACK_rr
    0U,	// UPDFL_rr
    0U,	// UTOF_rr
    0U,	// WAIT_sys
    0U,	// XNOR_T
    0U,	// XNOR_rc
    0U,	// XNOR_rr
    0U,	// XOR_EQ_rc
    0U,	// XOR_EQ_rr
    0U,	// XOR_GE_U_rc
    0U,	// XOR_GE_U_rr
    0U,	// XOR_GE_rc
    0U,	// XOR_GE_rr
    0U,	// XOR_LT_U_rc
    0U,	// XOR_LT_U_rr
    0U,	// XOR_LT_rc
    0U,	// XOR_LT_rr
    0U,	// XOR_NE_rc
    0U,	// XOR_NE_rr
    0U,	// XOR_T
    0U,	// XOR_rc
    0U,	// XOR_rr
    0U,	// XOR_srr
  };

  // Emit the opcode for the instruction.
  uint64_t Bits = 0;
  Bits |= (uint64_t)OpInfo0[MCInst_getOpcode(MI)] << 0;
  Bits |= (uint64_t)OpInfo1[MCInst_getOpcode(MI)] << 32;
  MnemonicBitsInfo MBI = {AsmStrs+(Bits & 4095)-1, Bits};
  return MBI;

}
/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void printInstruction(MCInst *MI, uint64_t Address, SStream *O) {
  SStream_concat0(O, "");
  MnemonicBitsInfo MnemonicInfo = getMnemonic(MI, O);

  SStream_concat0(O, MnemonicInfo.first);

  uint64_t Bits = MnemonicInfo.second;
  assert(Bits != 0 && "Cannot print this instruction.");

  // Fragment 0 encoded into 4 bits for 13 unique commands.
  switch ((Bits >> 12) & 15) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // DBG_VALUE, DBG_VALUE_LIST, DBG_INSTR_REF, DBG_PHI, DBG_LABEL, BUNDLE, ...
    return;
    break;
  case 1:
    // ABSDIFS_B_rr_v110, ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ...
    printOperand(MI, 0, O);
    break;
  case 2:
    // AND_sc, AND_sc_v110, BISR_sc, BISR_sc_v110, LD_A_sc, LD_W_sc, MOV_sc, ...
    printZExtImm_8(MI, 0, O);
    break;
  case 3:
    // BISR_rc, BISR_rc_v161, SYSCALL_rc
    printSExtImm_9(MI, 0, O);
    return;
    break;
  case 4:
    // CALLA_b, CALL_b, FCALLA_b, FCALL_b, JA_b, JLA_b, JL_b, J_b
    printDisp24Imm(MI, 0, O);
    return;
    break;
  case 5:
    // CALL_sb, JNZ_sb, JNZ_sb_v110, JZ_sb, JZ_sb_v110, J_sb, J_sb_v110
    printDisp8Imm(MI, 0, O);
    return;
    break;
  case 6:
    // CMPSWAP_W_bo_bso, CMPSWAP_W_bo_c, CMPSWAP_W_bo_pos, CMPSWAP_W_bo_pre, ...
    printOperand(MI, 1, O);
    break;
  case 7:
    // JEQ_sbc1, JEQ_sbc2, JEQ_sbc_v110, JNE_sbc1, JNE_sbc2, JNE_sbc_v110
    printSExtImm_4(MI, 1, O);
    SStream_concat0(O, ", ");
    printDisp4Imm(MI, 0, O);
    return;
    break;
  case 8:
    // LDLCX_abs, LDUCX_abs, STLCX_abs, STUCX_abs, ST_T
    printOff18Imm(MI, 0, O);
    break;
  case 9:
    // LDMST_abs, ST_A_abs, ST_B_abs, ST_DA_abs, ST_D_abs, ST_H_abs, ST_Q_abs...
    printOff18Imm(MI, 1, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 0, O);
    return;
    break;
  case 10:
    // LOOPU_brr
    printDisp15Imm(MI, 0, O);
    return;
    break;
  case 11:
    // MTCR_rlc
    printSExtImm_16(MI, 0, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 1, O);
    return;
    break;
  case 12:
    // ST_A_ssro, ST_B_ssro, ST_H_ssro, ST_W_ssro
    printZExtImm_4(MI, 1, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 0, O);
    return;
    break;
  }


  // Fragment 1 encoded into 4 bits for 14 unique commands.
  switch ((Bits >> 16) & 15) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_B_rr_v110, ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ...
    SStream_concat0(O, ", ");
    break;
  case 1:
    // ADD_src_a15, ADD_srr_a15, CADDN_src, CADDN_srr_v110, CADD_src, CADD_sr...
    SStream_concat0(O, ", %d15, ");
    break;
  case 2:
    // AND_sc, AND_sc_v110, BISR_sc, BISR_sc_v110, CALLI_rr, CALLI_rr_v110, D...
    return;
    break;
  case 3:
    // CACHEA_I_bo_bso, CACHEA_I_bo_pre, CACHEA_WI_bo_bso, CACHEA_WI_bo_pre, ...
    SStream_concat1(O, ']');
    break;
  case 4:
    // CACHEA_I_bo_c, CACHEA_WI_bo_c, CACHEA_W_bo_c, CACHEI_W_bo_c
    SStream_concat0(O, "+c]");
    set_mem_access(MI, false);
    printSExtImm_10(MI, 1, O);
    return;
    break;
  case 5:
    // CACHEA_I_bo_pos, CACHEA_WI_bo_pos, CACHEA_W_bo_pos, CACHEI_I_bo_pos, C...
    SStream_concat0(O, "+]");
    set_mem_access(MI, false);
    break;
  case 6:
    // CACHEA_I_bo_r, CACHEA_WI_bo_r, CACHEA_W_bo_r, CACHEI_W_bo_r
    SStream_concat0(O, "+r]");
    set_mem_access(MI, false);
    return;
    break;
  case 7:
    // CADDN_A_rrr_v110, CADD_A_rrr_v110
    SStream_concat1(O, ' ');
    printOperand(MI, 3, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 1, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 2, O);
    return;
    break;
  case 8:
    // LD_A_bo_bso, LD_A_bo_c, LD_A_bo_pos, LD_A_bo_r, LD_A_bol, LD_A_slr, LD...
    SStream_concat0(O, ", [");
    set_mem_access(MI, true);
    break;
  case 9:
    // LD_A_bo_pre, LD_BU_bo_pre, LD_B_bo_pre, LD_DA_bo_pre, LD_D_bo_pre, LD_...
    SStream_concat0(O, ", [+");
    set_mem_access(MI, true);
    break;
  case 10:
    // LD_A_slro, LD_A_slro_v110, LD_BU_slro, LD_BU_slro_v110, LD_B_slro_v110...
    SStream_concat0(O, ", [%a15]");
    set_mem_access(MI, true);
    printZExtImm_4(MI, 1, O);
    return;
    break;
  case 11:
    // ST_A_sc
    SStream_concat0(O, ", %a15");
    return;
    break;
  case 12:
    // ST_A_ssr, ST_B_ssr, ST_H_ssr, ST_W_ssr
    SStream_concat0(O, "], ");
    set_mem_access(MI, false);
    printOperand(MI, 1, O);
    return;
    break;
  case 13:
    // ST_A_ssr_pos, ST_B_ssr_pos, ST_H_ssr_pos, ST_W_ssr_pos
    SStream_concat0(O, "+], ");
    set_mem_access(MI, false);
    printOperand(MI, 1, O);
    return;
    break;
  }


  // Fragment 2 encoded into 4 bits for 13 unique commands.
  switch ((Bits >> 20) & 15) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_B_rr_v110, ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ...
    printOperand(MI, 1, O);
    break;
  case 1:
    // ADDSC_A_rr, ADD_F_rrr, CADDN_A_rcr_v110, CADDN_rcr, CADD_A_rcr_v110, C...
    printOperand(MI, 2, O);
    break;
  case 2:
    // ADD_A_src, ADD_src, ADD_src_15a, ADD_src_a15, CADDN_src, CADD_src, CMO...
    printSExtImm_4(MI, 1, O);
    return;
    break;
  case 3:
    // CACHEA_I_bo_bso, CACHEA_I_bo_pos, CACHEA_I_bo_pre, CACHEA_WI_bo_bso, C...
    printSExtImm_10(MI, 1, O);
    return;
    break;
  case 4:
    // CADDN_rrr, CADD_rrr, CRCN_rrr, CSUBN_A_rrr_v110, CSUBN_rrr, CSUB_A_rrr...
    printOperand(MI, 3, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 1, O);
    break;
  case 5:
    // CMPSWAP_W_bo_bso, CMPSWAP_W_bo_c, CMPSWAP_W_bo_pos, CMPSWAP_W_bo_pre, ...
    printSExtImm_10(MI, 2, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 0, O);
    return;
    break;
  case 6:
    // CMPSWAP_W_bo_r, LDMST_bo_r, ST_A_bo_pos, ST_A_bo_pre, ST_B_bo_pos, ST_...
    printOperand(MI, 0, O);
    break;
  case 7:
    // JEQ_brc, JGE_U_brc, JGE_brc, JLT_U_brc, JLT_brc, JNED_brc, JNEI_brc, J...
    printZExtImm_4(MI, 1, O);
    break;
  case 8:
    // JEQ_sbr1, JEQ_sbr2, JEQ_sbr_v110, JGEZ_sbr, JGEZ_sbr_v110, JGTZ_sbr, J...
    printDisp4Imm(MI, 1, O);
    return;
    break;
  case 9:
    // LD_A_abs, LD_BU_abs, LD_B_abs, LD_DA_abs, LD_D_abs, LD_HU_abs, LD_H_ab...
    printOff18Imm(MI, 1, O);
    return;
    break;
  case 10:
    // LOOP_brr
    printDisp15Imm(MI, 1, O);
    return;
    break;
  case 11:
    // MFCR_rlc, MOVH_A_rlc, MOVH_rlc, MOV_U_rlc, MOV_rlcDc, MOV_rlcEc
    printZExtImm_16(MI, 1, O);
    return;
    break;
  case 12:
    // ST_A_bol, ST_B_bol, ST_H_bol, ST_W_bol
    printSExtImm_16(MI, 2, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 1, O);
    return;
    break;
  }


  // Fragment 3 encoded into 4 bits for 11 unique commands.
  switch ((Bits >> 24) & 15) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_B_rr_v110, ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ...
    SStream_concat0(O, ", ");
    break;
  case 1:
    // ABS_B_rr, ABS_H_rr, ABS_rr, ADDS_srr, ADD_A_srr, ADD_srr, ADD_srr_15a,...
    return;
    break;
  case 2:
    // ADDSC_A_srrs
    SStream_concat0(O, ", %d15, ");
    printZExtImm_2(MI, 2, O);
    return;
    break;
  case 3:
    // LD_A_bo_bso, LD_A_bo_pre, LD_A_bol, LD_A_slr, LD_A_slr_v110, LD_BU_bo_...
    SStream_concat1(O, ']');
    break;
  case 4:
    // LD_A_bo_c, LD_BU_bo_c, LD_B_bo_c, LD_DA_bo_c, LD_D_bo_c, LD_HU_bo_c, L...
    SStream_concat0(O, "+c]");
    set_mem_access(MI, false);
    printSExtImm_10(MI, 2, O);
    return;
    break;
  case 5:
    // LD_A_bo_pos, LD_A_slr_post, LD_A_slr_post_v110, LD_BU_bo_pos, LD_BU_sl...
    SStream_concat0(O, "+]");
    set_mem_access(MI, false);
    break;
  case 6:
    // LD_A_bo_r, LD_BU_bo_r, LD_B_bo_r, LD_DA_bo_r, LD_D_bo_r, LD_HU_bo_r, L...
    SStream_concat0(O, "+r]");
    set_mem_access(MI, false);
    return;
    break;
  case 7:
    // MADDRS_Q_rrr1_L_L, MADDR_Q_rrr1_L_L, MADDS_Q_rrr1_L_L, MADDS_Q_rrr1_e_...
    SStream_concat0(O, "L, ");
    printOperand(MI, 2, O);
    SStream_concat0(O, "L, ");
    break;
  case 8:
    // MADDRS_Q_rrr1_U_U, MADDR_Q_rrr1_U_U, MADDS_Q_rrr1_U_U, MADDS_Q_rrr1_e_...
    SStream_concat0(O, "U, ");
    printOperand(MI, 2, O);
    SStream_concat0(O, "U, ");
    break;
  case 9:
    // ST_A_sro
    SStream_concat0(O, ", %a15");
    return;
    break;
  case 10:
    // ST_B_sro, ST_H_sro, ST_W_sro
    SStream_concat0(O, ", %d15");
    return;
    break;
  }


  // Fragment 4 encoded into 4 bits for 11 unique commands.
  switch ((Bits >> 28) & 15) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_B_rr_v110, ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ...
    printOperand(MI, 2, O);
    break;
  case 1:
    // ABSDIF_rc, ADDC_rc, ADDS_U_rc, ADDS_rc, ADDX_rc, ADD_rc, ANDN_rc, AND_...
    printSExtImm_9(MI, 2, O);
    return;
    break;
  case 2:
    // ADDIH_A_rlc, ADDIH_rlc, ADDI_rlc
    printSExtImm_16(MI, 2, O);
    return;
    break;
  case 3:
    // ADDSC_A_rr, ADD_F_rrr, CADDN_A_rcr_v110, CADDN_rcr, CADD_A_rcr_v110, C...
    printOperand(MI, 1, O);
    break;
  case 4:
    // ADDSC_A_srrs_v110
    printZExtImm_2(MI, 2, O);
    return;
    break;
  case 5:
    // ANDN_T, AND_ANDN_T, AND_AND_T, AND_NOR_T, AND_OR_T, AND_T, INSN_T, INS...
    printZExtImm_4(MI, 3, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 2, O);
    SStream_concat0(O, ", ");
    printZExtImm_4(MI, 4, O);
    return;
    break;
  case 6:
    // JEQ_A_brr, JEQ_brc, JEQ_brr, JGE_U_brc, JGE_U_brr, JGE_brc, JGE_brr, J...
    printDisp15Imm(MI, 2, O);
    return;
    break;
  case 7:
    // LD_A_bo_bso, LD_A_bo_pos, LD_A_bo_pre, LD_BU_bo_bso, LD_BU_bo_pos, LD_...
    printSExtImm_10(MI, 2, O);
    return;
    break;
  case 8:
    // LD_A_slr, LD_A_slr_post, LD_A_slr_post_v110, LD_A_slr_v110, LD_BU_slr,...
    return;
    break;
  case 9:
    // MADDRS_Q_rrr1_L_L, MADDRS_Q_rrr1_U_U, MADDR_Q_rrr1_L_L, MADDR_Q_rrr1_U...
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 10:
    // MULR_Q_rr1_2LL, MULR_Q_rr1_2UU, MUL_Q_rr1_2LL, MUL_Q_rr1_2UU
    printZExtImm_2(MI, 3, O);
    return;
    break;
  }


  // Fragment 5 encoded into 4 bits for 15 unique commands.
  switch ((Bits >> 32) & 15) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_B_rr_v110, ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ...
    return;
    break;
  case 1:
    // ADDSC_A_rr, ADDSC_A_rr_v110, CADDN_A_rcr_v110, CADDN_rcr, CADD_A_rcr_v...
    SStream_concat0(O, ", ");
    break;
  case 2:
    // MADDMS_H_rrr1_LL, MADDM_H_rrr1_LL, MADDRS_H_rrr1_LL, MADDR_H_rrr1_LL, ...
    SStream_concat0(O, " LL, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 3:
    // MADDMS_H_rrr1_LU, MADDM_H_rrr1_LU, MADDRS_H_rrr1_LU, MADDR_H_rrr1_LU, ...
    SStream_concat0(O, " LU, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 4:
    // MADDMS_H_rrr1_UL, MADDM_H_rrr1_UL, MADDRS_H_rrr1_UL, MADDR_H_rrr1_UL, ...
    SStream_concat0(O, " UL, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 5:
    // MADDMS_H_rrr1_UU, MADDM_H_rrr1_UU, MADDRS_H_rrr1_UU, MADDR_H_rrr1_UU, ...
    SStream_concat0(O, " UU, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 6:
    // MADDRS_H_rrr1_DcEdDaDbUL, MADDR_H_rrr1_DcEdDaDbUL, MSUBRS_H_rrr1_DcEdD...
    SStream_concat0(O, ", UL, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 7:
    // MADDS_Q_rrr1_L, MADDS_Q_rrr1_e_L, MADD_Q_rrr1_L, MADD_Q_rrr1_e_L, MSUB...
    SStream_concat0(O, " L, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 8:
    // MADDS_Q_rrr1_U, MADDS_Q_rrr1_e_U, MADD_Q_rrr1_U, MADD_Q_rrr1_e_U, MSUB...
    SStream_concat0(O, " U, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 9:
    // MULM_H_rr1_LL2e, MULR_H_rr1_LL2e, MUL_H_rr1_LL2e
    SStream_concat0(O, "LL, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 10:
    // MULM_H_rr1_LU2e, MULR_H_rr1_LU2e, MUL_H_rr1_LU2e
    SStream_concat0(O, "LU, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 11:
    // MULM_H_rr1_UL2e, MULR_H_rr1_UL2e, MUL_H_rr1_UL2e
    SStream_concat0(O, "UL, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 12:
    // MULM_H_rr1_UU2e, MULR_H_rr1_UU2e, MUL_H_rr1_UU2e
    SStream_concat0(O, "UU, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 13:
    // MUL_Q_rr1_2_L, MUL_Q_rr1_2_Le
    SStream_concat0(O, "L, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 14:
    // MUL_Q_rr1_2_U, MUL_Q_rr1_2_Ue
    SStream_concat0(O, "U, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  }


  // Fragment 6 encoded into 3 bits for 5 unique commands.
  switch ((Bits >> 36) & 7) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ADDSC_A_rr, ADDSC_A_rr_v110, DEXTR_rrpw, DEXTR_rrrr, EXTR_U_rrpw, EXTR...
    printOperand(MI, 3, O);
    break;
  case 1:
    // CADDN_A_rcr_v110, CADDN_rcr, CADD_A_rcr_v110, CADD_rcr, MADDMS_rcr_v11...
    printSExtImm_9(MI, 3, O);
    return;
    break;
  case 2:
    // DIFSC_A_rr_v110, MUL_Q_rr1_2__, MUL_Q_rr1_2__e
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 3:
    // MADDMS_U_rcr_v110, MADDM_U_rcr_v110, MADD_U_rcr, MSUB_U_rcr
    printZExtImm_9(MI, 3, O);
    return;
    break;
  case 4:
    // MADDM_H_rrr1_v110, MADDM_Q_rrr1_v110, MADDSUMS_H_rrr1_v110, MADDSUM_H_...
    printZExtImm_2(MI, 4, O);
    return;
    break;
  }


  // Fragment 7 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 39) & 1) {
    // INSERT_rcpw, INSERT_rcrw, INSERT_rrpw, INSERT_rrrr, INSERT_rrrw
    SStream_concat0(O, ", ");
    printOperand(MI, 4, O);
    return;
  } else {
    // ADDSC_A_rr, ADDSC_A_rr_v110, DEXTR_rrpw, DEXTR_rrrr, EXTR_U_rrpw, EXTR...
    return;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 61 && "Invalid register number!");

  static const char AsmStrs[] = {
  /* 0 */ "d10\0"
  /* 4 */ "e10\0"
  /* 8 */ "p10\0"
  /* 12 */ "a0\0"
  /* 15 */ "d0\0"
  /* 18 */ "e0\0"
  /* 21 */ "p0\0"
  /* 24 */ "A10_A11\0"
  /* 32 */ "a11\0"
  /* 36 */ "d11\0"
  /* 40 */ "A0_A1\0"
  /* 46 */ "a1\0"
  /* 49 */ "d1\0"
  /* 52 */ "a12\0"
  /* 56 */ "d12\0"
  /* 60 */ "e12\0"
  /* 64 */ "p12\0"
  /* 68 */ "a2\0"
  /* 71 */ "d2\0"
  /* 74 */ "e2\0"
  /* 77 */ "p2\0"
  /* 80 */ "A12_A13\0"
  /* 88 */ "a13\0"
  /* 92 */ "d13\0"
  /* 96 */ "A2_A3\0"
  /* 102 */ "a3\0"
  /* 105 */ "d3\0"
  /* 108 */ "a14\0"
  /* 112 */ "d14\0"
  /* 116 */ "e14\0"
  /* 120 */ "p14\0"
  /* 124 */ "a4\0"
  /* 127 */ "d4\0"
  /* 130 */ "e4\0"
  /* 133 */ "p4\0"
  /* 136 */ "A14_A15\0"
  /* 144 */ "a15\0"
  /* 148 */ "d15\0"
  /* 152 */ "A4_A5\0"
  /* 158 */ "a5\0"
  /* 161 */ "d5\0"
  /* 164 */ "a6\0"
  /* 167 */ "d6\0"
  /* 170 */ "e6\0"
  /* 173 */ "p6\0"
  /* 176 */ "A6_A7\0"
  /* 182 */ "a7\0"
  /* 185 */ "d7\0"
  /* 188 */ "a8\0"
  /* 191 */ "d8\0"
  /* 194 */ "e8\0"
  /* 197 */ "p8\0"
  /* 200 */ "A8_A9\0"
  /* 206 */ "a9\0"
  /* 209 */ "d9\0"
  /* 212 */ "pc\0"
  /* 215 */ "pcxi\0"
  /* 220 */ "sp\0"
  /* 223 */ "psw\0"
  /* 227 */ "fcx\0"
};
  static const uint8_t RegAsmOffset[] = {
    227, 212, 215, 223, 12, 46, 68, 102, 124, 158, 164, 182, 188, 206, 
    220, 32, 52, 88, 108, 144, 15, 49, 71, 105, 127, 161, 167, 185, 
    191, 209, 0, 36, 56, 92, 112, 148, 18, 74, 130, 170, 194, 4, 
    60, 116, 21, 77, 133, 173, 197, 8, 64, 120, 40, 96, 152, 176, 
    200, 24, 80, 136, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}
#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

bool printAliasInstr(MCInst *MI, uint64_t Address, SStream *OS) {
  return false;
}

#endif // PRINT_ALIAS_INSTR
