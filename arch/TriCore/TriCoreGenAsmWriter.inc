/* Capstone Disassembly Engine, http://www.capstone-engine.org */
/* By Nguyen Anh Quynh <aquynh@gmail.com>, 2013-2022, */
/*    Rot127 <unisono@quyllur.org> 2022-2023 */
/* Automatically generated file by the LLVM TableGen Disassembler Backend. */
/* Do not edit. */

#include <capstone/platform.h>
#include <assert.h>

/// getMnemonic - This method is automatically generated by tablegen
/// from the instruction set description.
MnemonicBitsInfo getMnemonic(MCInst *MI, SStream *O) {
  static const char AsmStrs[] = {
  /* 0 */ "sub %d15, \0"
  /* 11 */ "add %d15, \0"
  /* 22 */ "and %d15, \0"
  /* 33 */ "jne %d15, \0"
  /* 44 */ "jeq %d15, \0"
  /* 55 */ "or %d15, \0"
  /* 65 */ "jz.t %d15, \0"
  /* 77 */ "jnz.t %d15, \0"
  /* 90 */ "lt %d15, \0"
  /* 100 */ "lt.u %d15, \0"
  /* 112 */ "mov %d15, \0"
  /* 123 */ "jz %d15, \0"
  /* 133 */ "jnz %d15, \0"
  /* 144 */ "ld.a %a15, %sp, \0"
  /* 161 */ "ld.w %a15, %sp, \0"
  /* 178 */ "sub.a %sp, \0"
  /* 190 */ "st.a %sp, \0"
  /* 201 */ "ftoq31 \0"
  /* 209 */ "CMPSWAP.W \0"
  /* 220 */ "csub.a \0"
  /* 228 */ "addsc.a \0"
  /* 237 */ "difsc.a \0"
  /* 246 */ "cadd.a \0"
  /* 254 */ "ld.a \0"
  /* 260 */ "ge.a \0"
  /* 266 */ "jne.a \0"
  /* 273 */ "addih.a \0"
  /* 282 */ "movh.a \0"
  /* 290 */ "csubn.a \0"
  /* 299 */ "caddn.a \0"
  /* 308 */ "jeq.a \0"
  /* 315 */ "lt.a \0"
  /* 321 */ "st.a \0"
  /* 327 */ "mov.a \0"
  /* 334 */ "nez.a \0"
  /* 341 */ "jz.a \0"
  /* 347 */ "jnz.a \0"
  /* 354 */ "eqz.a \0"
  /* 361 */ "mov.aa \0"
  /* 369 */ "ld.da \0"
  /* 376 */ "st.da \0"
  /* 383 */ "lea \0"
  /* 388 */ "lha \0"
  /* 393 */ "sha \0"
  /* 398 */ "ja \0"
  /* 402 */ "jla \0"
  /* 407 */ "fcalla \0"
  /* 415 */ "crc32.b \0"
  /* 424 */ "sub.b \0"
  /* 431 */ "add.b \0"
  /* 438 */ "ld.b \0"
  /* 444 */ "absdif.b \0"
  /* 454 */ "min.b \0"
  /* 461 */ "clo.b \0"
  /* 468 */ "eq.b \0"
  /* 474 */ "abs.b \0"
  /* 481 */ "adds.b \0"
  /* 489 */ "absdifs.b \0"
  /* 500 */ "cls.b \0"
  /* 507 */ "abss.b \0"
  /* 515 */ "sat.b \0"
  /* 522 */ "dvinit.b \0"
  /* 532 */ "lt.b \0"
  /* 538 */ "st.b \0"
  /* 544 */ "max.b \0"
  /* 551 */ "eqany.b \0"
  /* 560 */ "clz.b \0"
  /* 567 */ "csub \0"
  /* 573 */ "msub \0"
  /* 579 */ "rsub \0"
  /* 585 */ "subc \0"
  /* 591 */ "addc \0"
  /* 597 */ "ld.d \0"
  /* 603 */ "st.d \0"
  /* 609 */ "mov.d \0"
  /* 616 */ "cadd \0"
  /* 622 */ "madd \0"
  /* 628 */ "jned \0"
  /* 634 */ "nand \0"
  /* 640 */ "and.ge \0"
  /* 648 */ "sh.ge \0"
  /* 655 */ "xor.ge \0"
  /* 663 */ "jge \0"
  /* 668 */ "bmerge \0"
  /* 676 */ "disable \0"
  /* 685 */ "shuffle \0"
  /* 694 */ "and.ne \0"
  /* 702 */ "xor.ne \0"
  /* 710 */ "jne \0"
  /* 715 */ "msub.f \0"
  /* 723 */ "madd.f \0"
  /* 731 */ "qseed.f \0"
  /* 740 */ "mul.f \0"
  /* 747 */ "cmp.f \0"
  /* 754 */ "div.f \0"
  /* 761 */ "absdif \0"
  /* 769 */ "q31tof \0"
  /* 777 */ "itof \0"
  /* 783 */ "hptof \0"
  /* 790 */ "utof \0"
  /* 796 */ "sha.h \0"
  /* 803 */ "msub.h \0"
  /* 811 */ "msubad.h \0"
  /* 821 */ "madd.h \0"
  /* 829 */ "ld.h \0"
  /* 835 */ "absdif.h \0"
  /* 845 */ "sh.h \0"
  /* 851 */ "mul.h \0"
  /* 858 */ "msubm.h \0"
  /* 867 */ "msubadm.h \0"
  /* 878 */ "maddm.h \0"
  /* 887 */ "mulm.h \0"
  /* 895 */ "maddsum.h \0"
  /* 906 */ "min.h \0"
  /* 913 */ "clo.h \0"
  /* 920 */ "eq.h \0"
  /* 926 */ "msubr.h \0"
  /* 935 */ "msubadr.h \0"
  /* 946 */ "maddr.h \0"
  /* 955 */ "mulr.h \0"
  /* 963 */ "maddsur.h \0"
  /* 974 */ "abs.h \0"
  /* 981 */ "msubs.h \0"
  /* 990 */ "msubads.h \0"
  /* 1001 */ "madds.h \0"
  /* 1010 */ "absdifs.h \0"
  /* 1021 */ "cls.h \0"
  /* 1028 */ "msubms.h \0"
  /* 1038 */ "msubadms.h \0"
  /* 1050 */ "maddms.h \0"
  /* 1060 */ "maddsums.h \0"
  /* 1072 */ "msubrs.h \0"
  /* 1082 */ "msubadrs.h \0"
  /* 1094 */ "maddrs.h \0"
  /* 1104 */ "maddsurs.h \0"
  /* 1116 */ "abss.h \0"
  /* 1124 */ "maddsus.h \0"
  /* 1135 */ "sat.h \0"
  /* 1142 */ "dvinit.h \0"
  /* 1152 */ "lt.h \0"
  /* 1158 */ "st.h \0"
  /* 1164 */ "maddsu.h \0"
  /* 1174 */ "max.h \0"
  /* 1181 */ "eqany.h \0"
  /* 1190 */ "clz.h \0"
  /* 1197 */ "addih \0"
  /* 1204 */ "sh \0"
  /* 1208 */ "movh \0"
  /* 1214 */ "addi \0"
  /* 1220 */ "jnei \0"
  /* 1226 */ "ji \0"
  /* 1230 */ "jli \0"
  /* 1235 */ "fcalli \0"
  /* 1243 */ "ftoi \0"
  /* 1249 */ "dvadj \0"
  /* 1256 */ "unpack \0"
  /* 1264 */ "imask \0"
  /* 1271 */ "sel \0"
  /* 1276 */ "updfl \0"
  /* 1283 */ "jl \0"
  /* 1287 */ "fcall \0"
  /* 1294 */ "syscall \0"
  /* 1303 */ "mul \0"
  /* 1308 */ "crcn \0"
  /* 1314 */ "caddn \0"
  /* 1321 */ "andn \0"
  /* 1327 */ "ixmin \0"
  /* 1334 */ "seln \0"
  /* 1340 */ "orn \0"
  /* 1345 */ "cmovn \0"
  /* 1352 */ "clo \0"
  /* 1357 */ "dvstep \0"
  /* 1365 */ "ftohp \0"
  /* 1372 */ "loop \0"
  /* 1378 */ "msub.q \0"
  /* 1386 */ "madd.q \0"
  /* 1394 */ "ld.q \0"
  /* 1400 */ "mul.q \0"
  /* 1407 */ "msubr.q \0"
  /* 1416 */ "maddr.q \0"
  /* 1425 */ "mulr.q \0"
  /* 1433 */ "msubs.q \0"
  /* 1442 */ "madds.q \0"
  /* 1451 */ "msubrs.q \0"
  /* 1461 */ "maddrs.q \0"
  /* 1471 */ "st.q \0"
  /* 1477 */ "and.eq \0"
  /* 1485 */ "sh.eq \0"
  /* 1492 */ "xor.eq \0"
  /* 1500 */ "jeq \0"
  /* 1505 */ "mfcr \0"
  /* 1511 */ "mtcr \0"
  /* 1517 */ "xnor \0"
  /* 1523 */ "xor \0"
  /* 1528 */ "bisr \0"
  /* 1534 */ "dextr \0"
  /* 1541 */ "shas \0"
  /* 1547 */ "abs \0"
  /* 1552 */ "msubs \0"
  /* 1559 */ "rsubs \0"
  /* 1566 */ "madds \0"
  /* 1573 */ "absdifs \0"
  /* 1582 */ "cls \0"
  /* 1587 */ "muls \0"
  /* 1593 */ "abss \0"
  /* 1599 */ "and.and.t \0"
  /* 1610 */ "sh.and.t \0"
  /* 1620 */ "or.and.t \0"
  /* 1630 */ "sh.nand.t \0"
  /* 1641 */ "and.andn.t \0"
  /* 1653 */ "sh.andn.t \0"
  /* 1664 */ "or.andn.t \0"
  /* 1675 */ "sh.orn.t \0"
  /* 1685 */ "insn.t \0"
  /* 1693 */ "and.or.t \0"
  /* 1703 */ "sh.or.t \0"
  /* 1712 */ "or.or.t \0"
  /* 1721 */ "and.nor.t \0"
  /* 1732 */ "sh.nor.t \0"
  /* 1742 */ "or.nor.t \0"
  /* 1752 */ "sh.xnor.t \0"
  /* 1763 */ "sh.xor.t \0"
  /* 1773 */ "ins.t \0"
  /* 1780 */ "st.t \0"
  /* 1786 */ "jz.t \0"
  /* 1792 */ "jnz.t \0"
  /* 1799 */ "bsplit \0"
  /* 1807 */ "dvinit \0"
  /* 1815 */ "and.lt \0"
  /* 1823 */ "sh.lt \0"
  /* 1830 */ "xor.lt \0"
  /* 1838 */ "jlt \0"
  /* 1843 */ "not \0"
  /* 1848 */ "insert \0"
  /* 1856 */ "ldmst \0"
  /* 1863 */ "madd.u \0"
  /* 1871 */ "and.ge.u \0"
  /* 1881 */ "sh.ge.u \0"
  /* 1890 */ "xor.ge.u \0"
  /* 1900 */ "jge.u \0"
  /* 1907 */ "mul.u \0"
  /* 1914 */ "ixmin.u \0"
  /* 1923 */ "dvstep.u \0"
  /* 1933 */ "extr.u \0"
  /* 1941 */ "rsubs.u \0"
  /* 1950 */ "madds.u \0"
  /* 1959 */ "muls.u \0"
  /* 1967 */ "dvinit.u \0"
  /* 1977 */ "and.lt.u \0"
  /* 1987 */ "sh.lt.u \0"
  /* 1996 */ "xor.lt.u \0"
  /* 2006 */ "jlt.u \0"
  /* 2013 */ "div.u \0"
  /* 2020 */ "mov.u \0"
  /* 2027 */ "ixmax.u \0"
  /* 2036 */ "ld.bu \0"
  /* 2043 */ "min.bu \0"
  /* 2051 */ "adds.bu \0"
  /* 2060 */ "sat.bu \0"
  /* 2068 */ "dvinit.bu \0"
  /* 2079 */ "lt.bu \0"
  /* 2086 */ "max.bu \0"
  /* 2094 */ "ld.hu \0"
  /* 2101 */ "min.hu \0"
  /* 2109 */ "subs.hu \0"
  /* 2118 */ "adds.hu \0"
  /* 2127 */ "sat.hu \0"
  /* 2135 */ "dvinit.hu \0"
  /* 2146 */ "lt.hu \0"
  /* 2153 */ "max.hu \0"
  /* 2161 */ "ftou \0"
  /* 2167 */ "loopu \0"
  /* 2174 */ "lt.wu \0"
  /* 2181 */ "div \0"
  /* 2186 */ "cmov \0"
  /* 2192 */ "crc32b.w \0"
  /* 2202 */ "ld.w \0"
  /* 2208 */ "swapmsk.w \0"
  /* 2219 */ "crc32l.w \0"
  /* 2229 */ "swap.w \0"
  /* 2237 */ "eq.w \0"
  /* 2243 */ "lt.w \0"
  /* 2249 */ "popcnt.w \0"
  /* 2259 */ "st.w \0"
  /* 2265 */ "ixmax \0"
  /* 2272 */ "subx \0"
  /* 2278 */ "ldlcx \0"
  /* 2285 */ "stlcx \0"
  /* 2292 */ "lducx \0"
  /* 2299 */ "stucx \0"
  /* 2306 */ "addx \0"
  /* 2312 */ "parity \0"
  /* 2320 */ "ftoq31z \0"
  /* 2329 */ "jgez \0"
  /* 2335 */ "jlez \0"
  /* 2341 */ "ftoiz \0"
  /* 2348 */ "jz \0"
  /* 2352 */ "clz \0"
  /* 2357 */ "jnz \0"
  /* 2362 */ "jgtz \0"
  /* 2368 */ "jltz \0"
  /* 2374 */ "ftouz \0"
  /* 2381 */ "CMPSWAP.W [+\0"
  /* 2394 */ "cachea.i [+\0"
  /* 2406 */ "cachei.i [+\0"
  /* 2418 */ "cachea.wi [+\0"
  /* 2431 */ "cachei.wi [+\0"
  /* 2444 */ "ldmst [+\0"
  /* 2453 */ "cachea.w [+\0"
  /* 2465 */ "cachei.w [+\0"
  /* 2477 */ "# XRay Function Patchable RET.\0"
  /* 2508 */ "# XRay Typed Event Log.\0"
  /* 2532 */ "# XRay Custom Event Log.\0"
  /* 2557 */ "# XRay Function Enter.\0"
  /* 2580 */ "# XRay Tail Call Exit.\0"
  /* 2603 */ "# XRay Function Exit.\0"
  /* 2625 */ "addsc.at %d, %s2, %s1\0"
  /* 2647 */ "addsc.at %d, %s1, %s2\0"
  /* 2669 */ "LIFETIME_END\0"
  /* 2682 */ "PSEUDO_PROBE\0"
  /* 2695 */ "BUNDLE\0"
  /* 2702 */ "DBG_VALUE\0"
  /* 2712 */ "DBG_INSTR_REF\0"
  /* 2726 */ "DBG_PHI\0"
  /* 2734 */ "DBG_LABEL\0"
  /* 2744 */ "LIFETIME_START\0"
  /* 2759 */ "DBG_VALUE_LIST\0"
  /* 2774 */ "ld.a %a15, [\0"
  /* 2787 */ "ld.b %d15, [\0"
  /* 2800 */ "ld.h %d15, [\0"
  /* 2813 */ "ld.bu %d15, [\0"
  /* 2827 */ "ld.w %d15, [\0"
  /* 2840 */ "CMPSWAP.W [\0"
  /* 2852 */ "st.a [\0"
  /* 2859 */ "st.da [\0"
  /* 2867 */ "st.b [\0"
  /* 2874 */ "st.d [\0"
  /* 2881 */ "st.h [\0"
  /* 2888 */ "cachea.i [\0"
  /* 2899 */ "cachei.i [\0"
  /* 2910 */ "cachea.wi [\0"
  /* 2922 */ "cachei.wi [\0"
  /* 2934 */ "st.q [\0"
  /* 2941 */ "ldmst [\0"
  /* 2949 */ "cachea.w [\0"
  /* 2960 */ "cachei.w [\0"
  /* 2971 */ "swapmsk.w [\0"
  /* 2983 */ "swap.w [\0"
  /* 2992 */ "st.w [\0"
  /* 2999 */ "ldlcx [\0"
  /* 3007 */ "stlcx [\0"
  /* 3015 */ "lducx [\0"
  /* 3023 */ "stucx [\0"
  /* 3031 */ "st.a [%a15]\0"
  /* 3043 */ "st.b [%a15]\0"
  /* 3055 */ "st.h [%a15]\0"
  /* 3067 */ "st.w [%a15]\0"
  /* 3079 */ "sub.a\0"
  /* 3085 */ "add.a\0"
  /* 3091 */ "mov.a\0"
  /* 3097 */ "dsync\0"
  /* 3103 */ "isync\0"
  /* 3109 */ "rfe\0"
  /* 3113 */ "enable\0"
  /* 3120 */ "disable\0"
  /* 3128 */ "restore\0"
  /* 3136 */ "debug\0"
  /* 3142 */ "relck\0"
  /* 3148 */ "# FEntry call\0"
  /* 3162 */ "rfm\0"
  /* 3166 */ "nop\0"
  /* 3170 */ "fret\0"
  /* 3175 */ "wait\0"
  /* 3180 */ "trapv\0"
  /* 3186 */ "trapsv\0"
  /* 3193 */ "svlcx\0"
};
  static const uint32_t OpInfo0[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// INLINEASM_BR
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    2703U,	// DBG_VALUE
    2760U,	// DBG_VALUE_LIST
    2713U,	// DBG_INSTR_REF
    2727U,	// DBG_PHI
    2735U,	// DBG_LABEL
    0U,	// REG_SEQUENCE
    0U,	// COPY
    2696U,	// BUNDLE
    2745U,	// LIFETIME_START
    2670U,	// LIFETIME_END
    2683U,	// PSEUDO_PROBE
    0U,	// ARITH_FENCE
    0U,	// STACKMAP
    3149U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// PREALLOCATED_SETUP
    0U,	// PREALLOCATED_ARG
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    2558U,	// PATCHABLE_FUNCTION_ENTER
    2478U,	// PATCHABLE_RET
    2604U,	// PATCHABLE_FUNCTION_EXIT
    2581U,	// PATCHABLE_TAIL_CALL
    2533U,	// PATCHABLE_EVENT_CALL
    2509U,	// PATCHABLE_TYPED_EVENT_CALL
    0U,	// ICALL_BRANCH_FUNNEL
    0U,	// G_ASSERT_SEXT
    0U,	// G_ASSERT_ZEXT
    0U,	// G_ASSERT_ALIGN
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_SDIVREM
    0U,	// G_UDIVREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_BUILD_VECTOR
    0U,	// G_BUILD_VECTOR_TRUNC
    0U,	// G_CONCAT_VECTORS
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_FREEZE
    0U,	// G_INTRINSIC_FPTRUNC_ROUND
    0U,	// G_INTRINSIC_TRUNC
    0U,	// G_INTRINSIC_ROUND
    0U,	// G_INTRINSIC_LRINT
    0U,	// G_INTRINSIC_ROUNDEVEN
    0U,	// G_READCYCLECOUNTER
    0U,	// G_LOAD
    0U,	// G_SEXTLOAD
    0U,	// G_ZEXTLOAD
    0U,	// G_INDEXED_LOAD
    0U,	// G_INDEXED_SEXTLOAD
    0U,	// G_INDEXED_ZEXTLOAD
    0U,	// G_STORE
    0U,	// G_INDEXED_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_ATOMICRMW_FADD
    0U,	// G_ATOMICRMW_FSUB
    0U,	// G_ATOMICRMW_FMAX
    0U,	// G_ATOMICRMW_FMIN
    0U,	// G_FENCE
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INVOKE_REGION_START
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_SEXT_INREG
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_FSHL
    0U,	// G_FSHR
    0U,	// G_ROTR
    0U,	// G_ROTL
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDO
    0U,	// G_UADDE
    0U,	// G_USUBO
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SADDE
    0U,	// G_SSUBO
    0U,	// G_SSUBE
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_UADDSAT
    0U,	// G_SADDSAT
    0U,	// G_USUBSAT
    0U,	// G_SSUBSAT
    0U,	// G_USHLSAT
    0U,	// G_SSHLSAT
    0U,	// G_SMULFIX
    0U,	// G_UMULFIX
    0U,	// G_SMULFIXSAT
    0U,	// G_UMULFIXSAT
    0U,	// G_SDIVFIX
    0U,	// G_UDIVFIX
    0U,	// G_SDIVFIXSAT
    0U,	// G_UDIVFIXSAT
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FMAD
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FPOWI
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FLOG10
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_FABS
    0U,	// G_FCOPYSIGN
    0U,	// G_IS_FPCLASS
    0U,	// G_FCANONICALIZE
    0U,	// G_FMINNUM
    0U,	// G_FMAXNUM
    0U,	// G_FMINNUM_IEEE
    0U,	// G_FMAXNUM_IEEE
    0U,	// G_FMINIMUM
    0U,	// G_FMAXIMUM
    0U,	// G_PTR_ADD
    0U,	// G_PTRMASK
    0U,	// G_SMIN
    0U,	// G_SMAX
    0U,	// G_UMIN
    0U,	// G_UMAX
    0U,	// G_ABS
    0U,	// G_LROUND
    0U,	// G_LLROUND
    0U,	// G_BR
    0U,	// G_BRJT
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_CTTZ
    0U,	// G_CTTZ_ZERO_UNDEF
    0U,	// G_CTLZ
    0U,	// G_CTLZ_ZERO_UNDEF
    0U,	// G_CTPOP
    0U,	// G_BSWAP
    0U,	// G_BITREVERSE
    0U,	// G_FCEIL
    0U,	// G_FCOS
    0U,	// G_FSIN
    0U,	// G_FSQRT
    0U,	// G_FFLOOR
    0U,	// G_FRINT
    0U,	// G_FNEARBYINT
    0U,	// G_ADDRSPACE_CAST
    0U,	// G_BLOCK_ADDR
    0U,	// G_JUMP_TABLE
    0U,	// G_DYN_STACKALLOC
    0U,	// G_STRICT_FADD
    0U,	// G_STRICT_FSUB
    0U,	// G_STRICT_FMUL
    0U,	// G_STRICT_FDIV
    0U,	// G_STRICT_FREM
    0U,	// G_STRICT_FMA
    0U,	// G_STRICT_FSQRT
    0U,	// G_READ_REGISTER
    0U,	// G_WRITE_REGISTER
    0U,	// G_MEMCPY
    0U,	// G_MEMCPY_INLINE
    0U,	// G_MEMMOVE
    0U,	// G_MEMSET
    0U,	// G_BZERO
    0U,	// G_VECREDUCE_SEQ_FADD
    0U,	// G_VECREDUCE_SEQ_FMUL
    0U,	// G_VECREDUCE_FADD
    0U,	// G_VECREDUCE_FMUL
    0U,	// G_VECREDUCE_FMAX
    0U,	// G_VECREDUCE_FMIN
    0U,	// G_VECREDUCE_ADD
    0U,	// G_VECREDUCE_MUL
    0U,	// G_VECREDUCE_AND
    0U,	// G_VECREDUCE_OR
    0U,	// G_VECREDUCE_XOR
    0U,	// G_VECREDUCE_SMAX
    0U,	// G_VECREDUCE_SMIN
    0U,	// G_VECREDUCE_UMAX
    0U,	// G_VECREDUCE_UMIN
    0U,	// G_SBFX
    0U,	// G_UBFX
    4586U,	// ABSDIFS_B_rr_v110
    5107U,	// ABSDIFS_H_rr
    5670U,	// ABSDIFS_rc
    5670U,	// ABSDIFS_rr
    4541U,	// ABSDIF_B_rr
    4932U,	// ABSDIF_H_rr
    268440314U,	// ABSDIF_rc
    4858U,	// ABSDIF_rr
    4604U,	// ABSS_B_rr_v110
    5213U,	// ABSS_H_rr
    5690U,	// ABSS_rr
    16781787U,	// ABS_B_rr
    16782287U,	// ABS_H_rr
    16782860U,	// ABS_rr
    268440144U,	// ADDC_rc
    4688U,	// ADDC_rr
    536875282U,	// ADDIH_A_rlc
    536876206U,	// ADDIH_rlc
    536876223U,	// ADDI_rlc
    2626U,	// ADDSC_AT_rr
    2648U,	// ADDSC_AT_rr_v110
    806359269U,	// ADDSC_A_rr
    4325U,	// ADDSC_A_rr_v110
    33558757U,	// ADDSC_A_srrs
    1073746149U,	// ADDSC_A_srrs_v110
    6148U,	// ADDS_BU_rr_v110
    4578U,	// ADDS_B_rr_v110
    5099U,	// ADDS_H
    6215U,	// ADDS_HU
    6048U,	// ADDS_U
    268441504U,	// ADDS_U_rc
    268441120U,	// ADDS_rc
    5664U,	// ADDS_rr
    16782880U,	// ADDS_srr
    268441859U,	// ADDX_rc
    6403U,	// ADDX_rr
    3086U,	// ADD_A_rr
    2101496U,	// ADD_A_src
    16781560U,	// ADD_A_srr
    4528U,	// ADD_B_rr
    806359765U,	// ADD_F_rrr
    4919U,	// ADD_H_rr
    268440170U,	// ADD_rc
    4714U,	// ADD_rr
    2101866U,	// ADD_src
    2101260U,	// ADD_src_15a
    2167402U,	// ADD_src_a15
    16781930U,	// ADD_srr
    16781324U,	// ADD_srr_15a
    16847466U,	// ADD_srr_a15
    1342183022U,	// ANDN_T
    268440874U,	// ANDN_rc
    5418U,	// ANDN_rr
    1342183018U,	// AND_ANDN_T
    1342182976U,	// AND_AND_T
    268441030U,	// AND_EQ_rc
    5574U,	// AND_EQ_rr
    268441424U,	// AND_GE_U_rc
    5968U,	// AND_GE_U_rr
    268440193U,	// AND_GE_rc
    4737U,	// AND_GE_rr
    268441530U,	// AND_LT_U_rc
    6074U,	// AND_LT_U_rr
    268441368U,	// AND_LT_rc
    5912U,	// AND_LT_rr
    268440247U,	// AND_NE_rc
    4791U,	// AND_NE_rr
    1342183098U,	// AND_NOR_T
    1342183070U,	// AND_OR_T
    1342182980U,	// AND_T
    268440188U,	// AND_rc
    4732U,	// AND_rr
    139287U,	// AND_sc
    139287U,	// AND_sc_v110
    16781948U,	// AND_srr
    16781948U,	// AND_srr_v110
    13817U,	// BISR_rc
    13817U,	// BISR_rc_v161
    140793U,	// BISR_sc
    140793U,	// BISR_sc_v110
    4765U,	// BMERGAE_rr_v110
    4765U,	// BMERGE_rr
    16783112U,	// BSPLIT_rr
    16783112U,	// BSPLIT_rr_v110
    3349321U,	// CACHEA_I_bo_bso
    269129U,	// CACHEA_I_bo_c
    3480393U,	// CACHEA_I_bo_pos
    3348827U,	// CACHEA_I_bo_pre
    400201U,	// CACHEA_I_bo_r
    3349343U,	// CACHEA_WI_bo_bso
    269151U,	// CACHEA_WI_bo_c
    3480415U,	// CACHEA_WI_bo_pos
    3348851U,	// CACHEA_WI_bo_pre
    400223U,	// CACHEA_WI_bo_r
    3349382U,	// CACHEA_W_bo_bso
    269190U,	// CACHEA_W_bo_c
    3480454U,	// CACHEA_W_bo_pos
    3348886U,	// CACHEA_W_bo_pre
    400262U,	// CACHEA_W_bo_r
    3349332U,	// CACHEI_I_bo_bso
    3480404U,	// CACHEI_I_bo_pos
    3348839U,	// CACHEI_I_bo_pre
    3349355U,	// CACHEI_WI_bo_bso
    3480427U,	// CACHEI_WI_bo_pos
    3348864U,	// CACHEI_WI_bo_pre
    3349393U,	// CACHEI_W_bo_bso
    269201U,	// CACHEI_W_bo_c
    3480465U,	// CACHEI_W_bo_pos
    3348898U,	// CACHEI_W_bo_pre
    400273U,	// CACHEI_W_bo_r
    806359340U,	// CADDN_A_rcr_v110
    463148U,	// CADDN_A_rrr_v110
    806360355U,	// CADDN_rcr
    4199715U,	// CADDN_rrr
    2168099U,	// CADDN_src
    16848163U,	// CADDN_srr_v110
    806359287U,	// CADD_A_rcr_v110
    463095U,	// CADD_A_rrr_v110
    806359657U,	// CADD_rcr
    4199017U,	// CADD_rrr
    2167401U,	// CADD_src
    16847465U,	// CADD_srr_v110
    16793U,	// CALLA_b
    136405U,	// CALLI_rr
    136405U,	// CALLI_rr_v110
    17673U,	// CALL_b
    21769U,	// CALL_sb
    16781774U,	// CLO_B_rr_v110
    16782226U,	// CLO_H_rr
    16782665U,	// CLO_rr
    16781813U,	// CLS_B_rr_v110
    16782334U,	// CLS_H_rr
    16782895U,	// CLS_rr
    16781873U,	// CLZ_B_rr_v110
    16782503U,	// CLZ_H_rr
    16783665U,	// CLZ_rr
    2168130U,	// CMOVN_src
    16848194U,	// CMOVN_srr
    2168971U,	// CMOV_src
    16849035U,	// CMOV_srr
    5466905U,	// CMPSWAP_W_bo_bso
    5466905U,	// CMPSWAP_W_bo_c
    5597977U,	// CMPSWAP_W_bo_pos
    5466446U,	// CMPSWAP_W_bo_pre
    23093458U,	// CMPSWAP_W_bo_r
    4844U,	// CMP_F_rr
    806361233U,	// CRC32B_W_rr
    806361260U,	// CRC32L_W_rr
    806359456U,	// CRC32_B_rr
    4199709U,	// CRCN_rrr
    4198691U,	// CSUBN_A_rrr_v110
    4198968U,	// CSUBN_rrr
    4198621U,	// CSUB_A_rrr_v110
    4198968U,	// CSUB_rrr
    3137U,	// DEBUG_sr
    3137U,	// DEBUG_sys
    5631U,	// DEXTR_rrpw
    5631U,	// DEXTR_rrrr
    4334U,	// DIFSC_A_rr_v110
    3121U,	// DISABLE_sys
    135845U,	// DISABLE_sys_1
    4851U,	// DIV_F_rr
    6110U,	// DIV_U_rr
    6278U,	// DIV_rr
    3098U,	// DSYNC_sys
    806360290U,	// DVADJ_rrr
    806360290U,	// DVADJ_rrr_v110
    16782562U,	// DVADJ_srr_v110
    6165U,	// DVINIT_BU_rr
    6165U,	// DVINIT_BU_rr_v110
    4619U,	// DVINIT_B_rr
    4619U,	// DVINIT_B_rr_v110
    6232U,	// DVINIT_HU_rr
    6232U,	// DVINIT_HU_rr_v110
    5239U,	// DVINIT_H_rr
    5239U,	// DVINIT_H_rr_v110
    6064U,	// DVINIT_U_rr
    6064U,	// DVINIT_U_rr_v110
    5904U,	// DVINIT_rr
    5904U,	// DVINIT_rr_v110
    806360964U,	// DVSTEP_U_rrr
    806360964U,	// DVSTEP_U_rrrv110
    16783236U,	// DVSTEP_Uv110
    806360398U,	// DVSTEP_rrr
    806360398U,	// DVSTEP_rrrv110
    16782670U,	// DVSTEPv110
    3114U,	// ENABLE_sys
    268440104U,	// EQANY_B_rc
    4648U,	// EQANY_B_rr
    268440734U,	// EQANY_H_rc
    5278U,	// EQANY_H_rr
    16781667U,	// EQZ_A_rr
    4406U,	// EQ_A_rr
    4565U,	// EQ_B_rr
    5017U,	// EQ_H_rr
    6334U,	// EQ_W_rr
    268441034U,	// EQ_rc
    5578U,	// EQ_rr
    2101294U,	// EQ_src
    16781358U,	// EQ_srr
    6030U,	// EXTR_U_rrpw
    6030U,	// EXTR_U_rrrr
    6030U,	// EXTR_U_rrrw
    5632U,	// EXTR_rrpw
    5632U,	// EXTR_rrrr
    5632U,	// EXTR_rrrw
    16792U,	// FCALLA_b
    136404U,	// FCALLA_i
    17672U,	// FCALL_b
    3171U,	// FRET_sr
    3171U,	// FRET_sys
    16782678U,	// FTOHP_rr
    16783654U,	// FTOIZ_rr
    16782556U,	// FTOI_rr
    6417U,	// FTOQ31Z_rr
    4298U,	// FTOQ31_rr
    16783687U,	// FTOUZ_rr
    16783474U,	// FTOU_rr
    4357U,	// GE_A_rr
    268441428U,	// GE_U_rc
    5972U,	// GE_U_rr
    268440197U,	// GE_rc
    4741U,	// GE_rr
    16782096U,	// HPTOF_rr
    5361U,	// IMASK_rcpw
    5361U,	// IMASK_rcrw
    5361U,	// IMASK_rrpw
    5361U,	// IMASK_rrrw
    5945U,	// INSERT_rcpw
    5945U,	// INSERT_rcrr
    5945U,	// INSERT_rcrw
    5945U,	// INSERT_rrpw
    5945U,	// INSERT_rrrr
    5945U,	// INSERT_rrrw
    1342183062U,	// INSN_T
    1342183150U,	// INS_T
    3104U,	// ISYNC_sys
    16782090U,	// ITOF_rr
    806361068U,	// IXMAX_U_rrr
    806361306U,	// IXMAX_rrr
    806360955U,	// IXMIN_U_rrr
    806360368U,	// IXMIN_rrr
    16783U,	// JA_b
    1610617141U,	// JEQ_A_brr
    1617958365U,	// JEQ_brc
    1610618333U,	// JEQ_brr
    28717U,	// JEQ_sbc1
    28717U,	// JEQ_sbc2
    28717U,	// JEQ_sbc_v110
    8392749U,	// JEQ_sbr1
    8392749U,	// JEQ_sbr2
    8392749U,	// JEQ_sbr_v110
    8395034U,	// JGEZ_sbr
    8395034U,	// JGEZ_sbr_v110
    1617958765U,	// JGE_U_brc
    1610618733U,	// JGE_U_brr
    1617957528U,	// JGE_brc
    1610617496U,	// JGE_brr
    8395067U,	// JGTZ_sbr
    8395067U,	// JGTZ_sbr_v110
    136395U,	// JI_rr
    136395U,	// JI_rr_v110
    8393931U,	// JI_sbr_v110
    136395U,	// JI_sr
    16787U,	// JLA_b
    8395040U,	// JLEZ_sbr
    8395040U,	// JLEZ_sbr_v110
    136399U,	// JLI_rr
    136399U,	// JLI_rr_v110
    8395073U,	// JLTZ_sbr
    8395073U,	// JLTZ_sbr_v110
    1617958871U,	// JLT_U_brc
    1610618839U,	// JLT_U_brr
    1617958703U,	// JLT_brc
    1610618671U,	// JLT_brr
    17668U,	// JL_b
    1617957493U,	// JNED_brc
    1610617461U,	// JNED_brr
    1617958085U,	// JNEI_brc
    1610618053U,	// JNEI_brr
    1610617099U,	// JNE_A_brr
    1617957575U,	// JNE_brc
    1610617543U,	// JNE_brr
    28706U,	// JNE_sbc1
    28706U,	// JNE_sbc2
    28706U,	// JNE_sbc_v110
    8392738U,	// JNE_sbr1
    8392738U,	// JNE_sbr2
    8392738U,	// JNE_sbr_v110
    1610617180U,	// JNZ_A_brr
    8393052U,	// JNZ_A_sbr
    1610618625U,	// JNZ_T_brn
    8392782U,	// JNZ_T_sbrn
    8392782U,	// JNZ_T_sbrn_v110
    20614U,	// JNZ_sb
    20614U,	// JNZ_sb_v110
    8395062U,	// JNZ_sbr
    8395062U,	// JNZ_sbr_v110
    1610617174U,	// JZ_A_brr
    8393046U,	// JZ_A_sbr
    1610618619U,	// JZ_T_brn
    8392770U,	// JZ_T_sbrn
    8392770U,	// JZ_T_sbrn_v110
    20604U,	// JZ_sb
    20604U,	// JZ_sb_v110
    8395053U,	// JZ_sbr
    8395053U,	// JZ_sbr_v110
    17638U,	// J_b
    21734U,	// J_sb
    21734U,	// J_sb_v110
    166119U,	// LDLCX_abs
    3349432U,	// LDLCX_bo_bso
    38721U,	// LDMST_abs
    5467006U,	// LDMST_bo_bso
    5467006U,	// LDMST_bo_c
    5598078U,	// LDMST_bo_pos
    5466509U,	// LDMST_bo_pre
    23095105U,	// LDMST_bo_r
    166133U,	// LDUCX_abs
    3349448U,	// LDUCX_bo_bso
    9441535U,	// LD_A_abs
    1929908479U,	// LD_A_bo_bso
    67637503U,	// LD_A_bo_c
    1963462911U,	// LD_A_bo_pos
    1929974015U,	// LD_A_bo_pre
    101191935U,	// LD_A_bo_r
    50860287U,	// LD_A_bol
    139409U,	// LD_A_sc
    2198343935U,	// LD_A_slr
    2231898367U,	// LD_A_slr_post
    2231898367U,	// LD_A_slr_post_v110
    2198343935U,	// LD_A_slr_v110
    659711U,	// LD_A_slro
    659711U,	// LD_A_slro_v110
    24320727U,	// LD_A_sro
    24320727U,	// LD_A_sro_v110
    9443317U,	// LD_BU_abs
    1929910261U,	// LD_BU_bo_bso
    67639285U,	// LD_BU_bo_c
    1963464693U,	// LD_BU_bo_pos
    1929975797U,	// LD_BU_bo_pre
    101193717U,	// LD_BU_bo_r
    50862069U,	// LD_BU_bol
    2198345717U,	// LD_BU_slr
    2231900149U,	// LD_BU_slr_post
    2231900149U,	// LD_BU_slr_post_v110
    2198345717U,	// LD_BU_slr_v110
    661493U,	// LD_BU_slro
    661493U,	// LD_BU_slro_v110
    24320766U,	// LD_BU_sro
    24320766U,	// LD_BU_sro_v110
    9441719U,	// LD_B_abs
    1929908663U,	// LD_B_bo_bso
    67637687U,	// LD_B_bo_c
    1963463095U,	// LD_B_bo_pos
    1929974199U,	// LD_B_bo_pre
    101192119U,	// LD_B_bo_r
    50860471U,	// LD_B_bol
    2231898551U,	// LD_B_slr_post_v110
    2198344119U,	// LD_B_slr_v110
    659895U,	// LD_B_slro_v110
    24320740U,	// LD_B_sro_v110
    9441650U,	// LD_DA_abs
    1929908594U,	// LD_DA_bo_bso
    67637618U,	// LD_DA_bo_c
    1963463026U,	// LD_DA_bo_pos
    1929974130U,	// LD_DA_bo_pre
    101192050U,	// LD_DA_bo_r
    9441878U,	// LD_D_abs
    1929908822U,	// LD_D_bo_bso
    67637846U,	// LD_D_bo_c
    1963463254U,	// LD_D_bo_pos
    1929974358U,	// LD_D_bo_pre
    101192278U,	// LD_D_bo_r
    9443375U,	// LD_HU_abs
    1929910319U,	// LD_HU_bo_bso
    67639343U,	// LD_HU_bo_c
    1963464751U,	// LD_HU_bo_pos
    1929975855U,	// LD_HU_bo_pre
    101193775U,	// LD_HU_bo_r
    50862127U,	// LD_HU_bol
    9442110U,	// LD_H_abs
    1929909054U,	// LD_H_bo_bso
    67638078U,	// LD_H_bo_c
    1963463486U,	// LD_H_bo_pos
    1929974590U,	// LD_H_bo_pre
    101192510U,	// LD_H_bo_r
    50860862U,	// LD_H_bol
    2198344510U,	// LD_H_slr
    2231898942U,	// LD_H_slr_post
    2231898942U,	// LD_H_slr_post_v110
    2198344510U,	// LD_H_slr_v110
    660286U,	// LD_H_slro
    660286U,	// LD_H_slro_v110
    24320753U,	// LD_H_sro
    24320753U,	// LD_H_sro_v110
    9442675U,	// LD_Q_abs
    1929909619U,	// LD_Q_bo_bso
    67638643U,	// LD_Q_bo_c
    1963464051U,	// LD_Q_bo_pos
    1929975155U,	// LD_Q_bo_pre
    101193075U,	// LD_Q_bo_r
    9443483U,	// LD_W_abs
    1929910427U,	// LD_W_bo_bso
    67639451U,	// LD_W_bo_c
    1963464859U,	// LD_W_bo_pos
    1929975963U,	// LD_W_bo_pre
    101193883U,	// LD_W_bo_r
    50862235U,	// LD_W_bol
    139426U,	// LD_W_sc
    2198345883U,	// LD_W_slr
    2231900315U,	// LD_W_slr_post
    2231900315U,	// LD_W_slr_post_v110
    2198345883U,	// LD_W_slr_v110
    661659U,	// LD_W_slro
    661659U,	// LD_W_slro_v110
    24320780U,	// LD_W_sro
    24320780U,	// LD_W_sro_v110
    9441664U,	// LEA_abs
    1929908608U,	// LEA_bo_bso
    50860416U,	// LEA_bol
    9441669U,	// LHA_abs
    43128U,	// LOOPU_brr
    10491229U,	// LOOP_brr
    8394077U,	// LOOP_sbr
    4412U,	// LT_A_rr
    4629U,	// LT_B
    6176U,	// LT_BU
    5249U,	// LT_H
    6243U,	// LT_HU
    268441534U,	// LT_U_rc
    6078U,	// LT_U_rr
    24121445U,	// LT_U_srcv110
    16781413U,	// LT_U_srrv110
    6340U,	// LT_W
    6271U,	// LT_WU
    268441372U,	// LT_rc
    5916U,	// LT_rr
    2101339U,	// LT_src
    16781403U,	// LT_srr
    4199451U,	// MADDMS_H_rrr1_LL
    4199451U,	// MADDMS_H_rrr1_LU
    4199451U,	// MADDMS_H_rrr1_UL
    4199451U,	// MADDMS_H_rrr1_UU
    4199279U,	// MADDM_H_rrr1_LL
    4199279U,	// MADDM_H_rrr1_LU
    4199279U,	// MADDM_H_rrr1_UL
    4199279U,	// MADDM_H_rrr1_UU
    4199495U,	// MADDRS_H_rrr1_DcEdDaDbUL
    4199495U,	// MADDRS_H_rrr1_LL
    4199495U,	// MADDRS_H_rrr1_LU
    4199495U,	// MADDRS_H_rrr1_UL
    4199495U,	// MADDRS_H_rrr1_UU
    2537559478U,	// MADDRS_Q_rrr1_L_L
    2554336694U,	// MADDRS_Q_rrr1_U_U
    4199347U,	// MADDR_H_rrr1_DcEdDaDbUL
    4199347U,	// MADDR_H_rrr1_LL
    4199347U,	// MADDR_H_rrr1_LU
    4199347U,	// MADDR_H_rrr1_UL
    4199347U,	// MADDR_H_rrr1_UU
    2537559433U,	// MADDR_Q_rrr1_L_L
    2554336649U,	// MADDR_Q_rrr1_U_U
    4199461U,	// MADDSUMS_H_rrr1_LL
    4199461U,	// MADDSUMS_H_rrr1_LU
    4199461U,	// MADDSUMS_H_rrr1_UL
    4199461U,	// MADDSUMS_H_rrr1_UU
    4199296U,	// MADDSUM_H_rrr1_LL
    4199296U,	// MADDSUM_H_rrr1_LU
    4199296U,	// MADDSUM_H_rrr1_UL
    4199296U,	// MADDSUM_H_rrr1_UU
    4199505U,	// MADDSURS_H_rrr1_LL
    4199505U,	// MADDSURS_H_rrr1_LU
    4199505U,	// MADDSURS_H_rrr1_UL
    4199505U,	// MADDSURS_H_rrr1_UU
    4199364U,	// MADDSUR_H_rrr1_LL
    4199364U,	// MADDSUR_H_rrr1_LU
    4199364U,	// MADDSUR_H_rrr1_UL
    4199364U,	// MADDSUR_H_rrr1_UU
    4199525U,	// MADDSUS_H_rrr1_LL
    4199525U,	// MADDSUS_H_rrr1_LU
    4199525U,	// MADDSUS_H_rrr1_UL
    4199525U,	// MADDSUS_H_rrr1_UU
    4199565U,	// MADDSU_H_rrr1_LL
    4199565U,	// MADDSU_H_rrr1_LU
    4199565U,	// MADDSU_H_rrr1_UL
    4199565U,	// MADDSU_H_rrr1_UU
    4199402U,	// MADDS_H_rrr1_LL
    4199402U,	// MADDS_H_rrr1_LU
    4199402U,	// MADDS_H_rrr1_UL
    4199402U,	// MADDS_H_rrr1_UU
    4199843U,	// MADDS_Q_rrr1
    4199843U,	// MADDS_Q_rrr1_L
    2537559459U,	// MADDS_Q_rrr1_L_L
    4199843U,	// MADDS_Q_rrr1_U
    2554336675U,	// MADDS_Q_rrr1_U_U
    4199843U,	// MADDS_Q_rrr1_e
    4199843U,	// MADDS_Q_rrr1_e_L
    2537559459U,	// MADDS_Q_rrr1_e_L_L
    4199843U,	// MADDS_Q_rrr1_e_U
    2554336675U,	// MADDS_Q_rrr1_e_U_U
    806360991U,	// MADDS_U_rcr
    806360991U,	// MADDS_U_rcr_e
    4200351U,	// MADDS_U_rrr2
    4200351U,	// MADDS_U_rrr2_e
    806360607U,	// MADDS_rcr
    806360607U,	// MADDS_rcr_e
    4199967U,	// MADDS_rrr2
    4199967U,	// MADDS_rrr2_e
    4199124U,	// MADD_F_rrr
    4199222U,	// MADD_H_rrr1_LL
    4199222U,	// MADD_H_rrr1_LU
    4199222U,	// MADD_H_rrr1_UL
    4199222U,	// MADD_H_rrr1_UU
    4199787U,	// MADD_Q_rrr1
    4199787U,	// MADD_Q_rrr1_L
    2537559403U,	// MADD_Q_rrr1_L_L
    4199787U,	// MADD_Q_rrr1_U
    2554336619U,	// MADD_Q_rrr1_U_U
    4199787U,	// MADD_Q_rrr1_e
    4199787U,	// MADD_Q_rrr1_e_L
    2537559403U,	// MADD_Q_rrr1_e_L_L
    4199787U,	// MADD_Q_rrr1_e_U
    2554336619U,	// MADD_Q_rrr1_e_U_U
    806360904U,	// MADD_U_rcr
    4200264U,	// MADD_U_rrr2
    806359663U,	// MADD_rcr
    806359663U,	// MADD_rcr_e
    4199023U,	// MADD_rrr2
    4199023U,	// MADD_rrr2_e
    4641U,	// MAX_B
    6183U,	// MAX_BU
    5271U,	// MAX_H
    6250U,	// MAX_HU
    268441582U,	// MAX_U_rc
    6126U,	// MAX_U_rr
    268441820U,	// MAX_rc
    6364U,	// MAX_rr
    11539938U,	// MFCR_rlc
    4551U,	// MIN_B
    6140U,	// MIN_BU
    5003U,	// MIN_H
    6198U,	// MIN_HU
    268441469U,	// MIN_U_rc
    6013U,	// MIN_U_rr
    268440882U,	// MIN_rc
    5426U,	// MIN_rr
    11538715U,	// MOVH_A_rlc
    11539641U,	// MOVH_rlc
    17830250U,	// MOV_AA_rr
    16781674U,	// MOV_AA_srr
    3092U,	// MOV_A_rr
    24121672U,	// MOV_A_src
    16781640U,	// MOV_A_srr
    17830498U,	// MOV_D_rr
    16781922U,	// MOV_D_srr
    11540453U,	// MOV_U_rlc
    11540620U,	// MOV_rlcDc
    11540620U,	// MOV_rlcEc
    17832076U,	// MOV_rrDcDb
    6284U,	// MOV_rrEcDaDb
    17832076U,	// MOV_rrEcDb
    139377U,	// MOV_sc
    2103436U,	// MOV_srcDa
    2103436U,	// MOV_srcEa
    16783500U,	// MOV_srr
    4199439U,	// MSUBADMS_H_rrr1_LL
    4199439U,	// MSUBADMS_H_rrr1_LU
    4199439U,	// MSUBADMS_H_rrr1_UL
    4199439U,	// MSUBADMS_H_rrr1_UU
    4199268U,	// MSUBADM_H_rrr1_LL
    4199268U,	// MSUBADM_H_rrr1_LU
    4199268U,	// MSUBADM_H_rrr1_UL
    4199268U,	// MSUBADM_H_rrr1_UU
    4199483U,	// MSUBADRS_H_rrr1_LL
    4199483U,	// MSUBADRS_H_rrr1_LU
    4199483U,	// MSUBADRS_H_rrr1_UL
    4199483U,	// MSUBADRS_H_rrr1_UU
    4199336U,	// MSUBADR_H_rrr1_LL
    4199336U,	// MSUBADR_H_rrr1_LU
    4199336U,	// MSUBADR_H_rrr1_UL
    4199336U,	// MSUBADR_H_rrr1_UU
    4199391U,	// MSUBADS_H_rrr1_LL
    4199391U,	// MSUBADS_H_rrr1_LU
    4199391U,	// MSUBADS_H_rrr1_UL
    4199391U,	// MSUBADS_H_rrr1_UU
    4199212U,	// MSUBAD_H_rrr1_LL
    4199212U,	// MSUBAD_H_rrr1_LU
    4199212U,	// MSUBAD_H_rrr1_UL
    4199212U,	// MSUBAD_H_rrr1_UU
    4199429U,	// MSUBMS_H_rrr1_LL
    4199429U,	// MSUBMS_H_rrr1_LU
    4199429U,	// MSUBMS_H_rrr1_UL
    4199429U,	// MSUBMS_H_rrr1_UU
    4199259U,	// MSUBM_H_rrr1_LL
    4199259U,	// MSUBM_H_rrr1_LU
    4199259U,	// MSUBM_H_rrr1_UL
    4199259U,	// MSUBM_H_rrr1_UU
    4199473U,	// MSUBRS_H_rrr1_DcEdDaDbUL
    4199473U,	// MSUBRS_H_rrr1_LL
    4199473U,	// MSUBRS_H_rrr1_LU
    4199473U,	// MSUBRS_H_rrr1_UL
    4199473U,	// MSUBRS_H_rrr1_UU
    2537559468U,	// MSUBRS_Q_rrr1_L_L
    2554336684U,	// MSUBRS_Q_rrr1_U_U
    4199327U,	// MSUBR_H_rrr1_DcEdDaDbUL
    4199327U,	// MSUBR_H_rrr1_LL
    4199327U,	// MSUBR_H_rrr1_LU
    4199327U,	// MSUBR_H_rrr1_UL
    4199327U,	// MSUBR_H_rrr1_UU
    2537559424U,	// MSUBR_Q_rrr1_L_L
    2554336640U,	// MSUBR_Q_rrr1_U_U
    4199382U,	// MSUBS_H_rrr1_LL
    4199382U,	// MSUBS_H_rrr1_LU
    4199382U,	// MSUBS_H_rrr1_UL
    4199382U,	// MSUBS_H_rrr1_UU
    4199834U,	// MSUBS_Q_rrr1
    4199834U,	// MSUBS_Q_rrr1_L
    2537559450U,	// MSUBS_Q_rrr1_L_L
    4199834U,	// MSUBS_Q_rrr1_U
    2554336666U,	// MSUBS_Q_rrr1_U_U
    4199834U,	// MSUBS_Q_rrr1_e
    4199834U,	// MSUBS_Q_rrr1_e_L
    2537559450U,	// MSUBS_Q_rrr1_e_L_L
    4199834U,	// MSUBS_Q_rrr1_e_U
    2554336666U,	// MSUBS_Q_rrr1_e_U_U
    806360991U,	// MSUBS_U_rcr
    806360991U,	// MSUBS_U_rcr_e
    4200351U,	// MSUBS_U_rrr2
    4200351U,	// MSUBS_U_rrr2_e
    806360593U,	// MSUBS_rcr
    806360593U,	// MSUBS_rcr_e
    4199953U,	// MSUBS_rrr2
    4199953U,	// MSUBS_rrr2_e
    4199116U,	// MSUB_F_rrr
    4199204U,	// MSUB_H_rrr1_LL
    4199204U,	// MSUB_H_rrr1_LU
    4199204U,	// MSUB_H_rrr1_UL
    4199204U,	// MSUB_H_rrr1_UU
    4199779U,	// MSUB_Q_rrr1
    4199779U,	// MSUB_Q_rrr1_L
    2537559395U,	// MSUB_Q_rrr1_L_L
    4199779U,	// MSUB_Q_rrr1_U
    2554336611U,	// MSUB_Q_rrr1_U_U
    4199779U,	// MSUB_Q_rrr1_e
    4199779U,	// MSUB_Q_rrr1_e_L
    2537559395U,	// MSUB_Q_rrr1_e_L_L
    4199779U,	// MSUB_Q_rrr1_e_U
    2554336611U,	// MSUB_Q_rrr1_e_U_U
    806360904U,	// MSUB_U_rcr
    4200264U,	// MSUB_U_rrr2
    806359614U,	// MSUB_rcr
    806359614U,	// MSUB_rcr_e
    4198974U,	// MSUB_rrr2
    4198974U,	// MSUB_rrr2_e
    46568U,	// MTCR_rlc
    4984U,	// MULM_H_rr1_LL2e
    4984U,	// MULM_H_rr1_LU2e
    4984U,	// MULM_H_rr1_UL2e
    4984U,	// MULM_H_rr1_UU2e
    5052U,	// MULR_H_rr1_LL2e
    5052U,	// MULR_H_rr1_LU2e
    5052U,	// MULR_H_rr1_UL2e
    5052U,	// MULR_H_rr1_UU2e
    2801800594U,	// MULR_Q_rr1_2LL
    2818577810U,	// MULR_Q_rr1_2UU
    268441512U,	// MULS_U_rc
    6056U,	// MULS_U_rr2
    268441140U,	// MULS_rc
    5684U,	// MULS_rr2
    4837U,	// MUL_F_rrr
    4948U,	// MUL_H_rr1_LL2e
    4948U,	// MUL_H_rr1_LU2e
    4948U,	// MUL_H_rr1_UL2e
    4948U,	// MUL_H_rr1_UU2e
    2801800569U,	// MUL_Q_rr1_2LL
    2818577785U,	// MUL_Q_rr1_2UU
    5497U,	// MUL_Q_rr1_2_L
    5497U,	// MUL_Q_rr1_2_Le
    5497U,	// MUL_Q_rr1_2_U
    5497U,	// MUL_Q_rr1_2_Ue
    5497U,	// MUL_Q_rr1_2__
    5497U,	// MUL_Q_rr1_2__e
    268441460U,	// MUL_U_rc
    6004U,	// MUL_U_rr2
    268440856U,	// MUL_rc
    268440856U,	// MUL_rc_e
    5400U,	// MUL_rr2
    5400U,	// MUL_rr2_e
    16782616U,	// MUL_srr
    1342183010U,	// NAND_T
    268440187U,	// NAND_rc
    4731U,	// NAND_rr
    16781647U,	// NEZ_A
    4364U,	// NE_A
    268440251U,	// NE_rc
    4795U,	// NE_rr
    3167U,	// NOP_sr
    3167U,	// NOP_sys
    1342183102U,	// NOR_T
    268441071U,	// NOR_rc
    5615U,	// NOR_rr
    137012U,	// NOT_sr
    1342183055U,	// ORN_T
    268440893U,	// ORN_rc
    5437U,	// ORN_rr
    1342183041U,	// OR_ANDN_T
    1342182997U,	// OR_AND_T
    268441046U,	// OR_EQ_rc
    5590U,	// OR_EQ_rr
    268441444U,	// OR_GE_U_rc
    5988U,	// OR_GE_U_rr
    268440209U,	// OR_GE_rc
    4753U,	// OR_GE_rr
    268441550U,	// OR_LT_U_rc
    6094U,	// OR_LT_U_rr
    268441384U,	// OR_LT_rc
    5928U,	// OR_LT_rr
    268440256U,	// OR_NE_rc
    4800U,	// OR_NE_rr
    1342183119U,	// OR_NOR_T
    1342183089U,	// OR_OR_T
    1342183074U,	// OR_T
    268441072U,	// OR_rc
    5616U,	// OR_rr
    139320U,	// OR_sc
    16782832U,	// OR_srr
    806360299U,	// PACK_rrr
    16783625U,	// PARITY_rr
    16783562U,	// POPCNT_W_rr
    4866U,	// Q31TOF_rr
    16782044U,	// QSEED_F_rr
    3129U,	// RESTORE_sys
    3172U,	// RET_sr
    3172U,	// RET_sys
    3110U,	// RFE_sr
    3110U,	// RFE_sys
    3163U,	// RFM_sys
    3143U,	// RSLCX_sys
    3129U,	// RSTV_sys
    268441494U,	// RSUBS_U_rc
    268441112U,	// RSUBS_rc
    268440132U,	// RSUB_rc
    135748U,	// RSUB_sr
    16783373U,	// SAT_BU_rr
    137229U,	// SAT_BU_sr
    16781828U,	// SAT_B_rr
    135684U,	// SAT_B_sr
    16783440U,	// SAT_HU_rr
    137296U,	// SAT_HU_sr
    16782448U,	// SAT_H_rr
    136304U,	// SAT_H_sr
    806360375U,	// SELN_rcr
    4199735U,	// SELN_rrr
    806360312U,	// SEL_rcr
    4199672U,	// SEL_rrr
    268441094U,	// SHAS_rc
    5638U,	// SHAS_rr
    268440349U,	// SHA_H_rc
    4893U,	// SHA_H_rr
    268439946U,	// SHA_rc
    4490U,	// SHA_rr
    2101642U,	// SHA_src
    268440238U,	// SHUFFLE_rc
    1342183030U,	// SH_ANDN_T
    1342182987U,	// SH_AND_T
    268441038U,	// SH_EQ_rc
    5582U,	// SH_EQ_rr
    268441434U,	// SH_GE_U_rc
    5978U,	// SH_GE_U_rr
    268440201U,	// SH_GE_rc
    4745U,	// SH_GE_rr
    268440398U,	// SH_H_rc
    4942U,	// SH_H_rr
    268441540U,	// SH_LT_U_rc
    6084U,	// SH_LT_U_rr
    268441376U,	// SH_LT_rc
    5920U,	// SH_LT_rr
    1342183007U,	// SH_NAND_T
    268441376U,	// SH_NE_rc
    5920U,	// SH_NE_rr
    1342183109U,	// SH_NOR_T
    1342183052U,	// SH_ORN_T
    1342183080U,	// SH_OR_T
    1342183129U,	// SH_XNOR_T
    1342183140U,	// SH_XOR_T
    268440757U,	// SH_rc
    5301U,	// SH_rr
    2102453U,	// SH_src
    166126U,	// STLCX_abs
    3349440U,	// STLCX_bo_bso
    166140U,	// STUCX_abs
    3349456U,	// STUCX_bo_bso
    37186U,	// ST_A_abs
    5466917U,	// ST_A_bo_bso
    67637570U,	// ST_A_bo_c
    1969774914U,	// ST_A_bo_pos
    1936286018U,	// ST_A_bo_pre
    101192002U,	// ST_A_bo_r
    12786469U,	// ST_A_bol
    729279U,	// ST_A_sc
    158538533U,	// ST_A_sro
    793381U,	// ST_A_ssr
    858917U,	// ST_A_ssr_pos
    52184U,	// ST_A_ssro
    37403U,	// ST_B_abs
    5466932U,	// ST_B_bo_bso
    67637787U,	// ST_B_bo_c
    1969775131U,	// ST_B_bo_pos
    1936286235U,	// ST_B_bo_pre
    101192219U,	// ST_B_bo_r
    12786484U,	// ST_B_bol
    175315764U,	// ST_B_sro
    793396U,	// ST_B_ssr
    858932U,	// ST_B_ssr_pos
    52196U,	// ST_B_ssro
    37241U,	// ST_DA_abs
    5466924U,	// ST_DA_bo_bso
    67637625U,	// ST_DA_bo_c
    1969774969U,	// ST_DA_bo_pos
    1936286073U,	// ST_DA_bo_pre
    101192057U,	// ST_DA_bo_r
    37468U,	// ST_D_abs
    5466939U,	// ST_D_bo_bso
    67637852U,	// ST_D_bo_c
    1969775196U,	// ST_D_bo_pos
    1936286300U,	// ST_D_bo_pre
    101192284U,	// ST_D_bo_r
    38023U,	// ST_H_abs
    5466946U,	// ST_H_bo_bso
    67638407U,	// ST_H_bo_c
    1969775751U,	// ST_H_bo_pos
    1936286855U,	// ST_H_bo_pre
    101192839U,	// ST_H_bo_r
    12786498U,	// ST_H_bol
    175315778U,	// ST_H_sro
    793410U,	// ST_H_ssr
    858946U,	// ST_H_ssr_pos
    52208U,	// ST_H_ssro
    38336U,	// ST_Q_abs
    5466999U,	// ST_Q_bo_bso
    67638720U,	// ST_Q_bo_c
    1969776064U,	// ST_Q_bo_pos
    1936287168U,	// ST_Q_bo_pre
    101193152U,	// ST_Q_bo_r
    34549U,	// ST_T
    39124U,	// ST_W_abs
    5467057U,	// ST_W_bo_bso
    67639508U,	// ST_W_bo_c
    1969776852U,	// ST_W_bo_pos
    1936287956U,	// ST_W_bo_pre
    101193940U,	// ST_W_bo_r
    12786609U,	// ST_W_bol
    175315889U,	// ST_W_sro
    793521U,	// ST_W_ssr
    859057U,	// ST_W_ssr_pos
    52220U,	// ST_W_ssro
    4682U,	// SUBC_rr
    6206U,	// SUBS_HU_rr
    5079U,	// SUBS_H_rr
    6039U,	// SUBS_U_rr
    5650U,	// SUBS_rr
    16782866U,	// SUBS_srr
    6369U,	// SUBX_rr
    3080U,	// SUB_A_rr
    139443U,	// SUB_A_sc
    4521U,	// SUB_B_rr
    806359757U,	// SUB_F_rrr
    4901U,	// SUB_H_rr
    4665U,	// SUB_rr
    16781881U,	// SUB_srr
    16781313U,	// SUB_srr_15a
    16847417U,	// SUB_srr_a15
    3194U,	// SVLCX_sys
    5467036U,	// SWAPMSK_W_bo_bso
    67639457U,	// SWAPMSK_W_bo_c
    1969776801U,	// SWAPMSK_W_bo_pos
    1936287905U,	// SWAPMSK_W_bo_pre
    101193889U,	// SWAPMSK_W_bo_r
    39094U,	// SWAP_W_abs
    5467048U,	// SWAP_W_bo_bso
    67639478U,	// SWAP_W_bo_c
    1969776822U,	// SWAP_W_bo_pos
    1936287926U,	// SWAP_W_bo_pre
    101193910U,	// SWAP_W_bo_r
    13583U,	// SYSCALL_rc
    3187U,	// TRAPSV_sys
    3181U,	// TRAPV_sys
    16782569U,	// UNPACK_rr
    136445U,	// UPDFL_rr
    16782103U,	// UTOF_rr
    3176U,	// WAIT_sys
    1342183132U,	// XNOR_T
    268441070U,	// XNOR_rc
    5614U,	// XNOR_rr
    268441045U,	// XOR_EQ_rc
    5589U,	// XOR_EQ_rr
    268441443U,	// XOR_GE_U_rc
    5987U,	// XOR_GE_U_rr
    268440208U,	// XOR_GE_rc
    4752U,	// XOR_GE_rr
    268441549U,	// XOR_LT_U_rc
    6093U,	// XOR_LT_U_rr
    268441383U,	// XOR_LT_rc
    5927U,	// XOR_LT_rr
    268440255U,	// XOR_NE_rc
    4799U,	// XOR_NE_rr
    1342183143U,	// XOR_T
    268441076U,	// XOR_rc
    5620U,	// XOR_rr
    16782836U,	// XOR_srr
  };

  static const uint8_t OpInfo1[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// INLINEASM_BR
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// DBG_VALUE_LIST
    0U,	// DBG_INSTR_REF
    0U,	// DBG_PHI
    0U,	// DBG_LABEL
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// PSEUDO_PROBE
    0U,	// ARITH_FENCE
    0U,	// STACKMAP
    0U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// PREALLOCATED_SETUP
    0U,	// PREALLOCATED_ARG
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    0U,	// PATCHABLE_FUNCTION_ENTER
    0U,	// PATCHABLE_RET
    0U,	// PATCHABLE_FUNCTION_EXIT
    0U,	// PATCHABLE_TAIL_CALL
    0U,	// PATCHABLE_EVENT_CALL
    0U,	// PATCHABLE_TYPED_EVENT_CALL
    0U,	// ICALL_BRANCH_FUNNEL
    0U,	// G_ASSERT_SEXT
    0U,	// G_ASSERT_ZEXT
    0U,	// G_ASSERT_ALIGN
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_SDIVREM
    0U,	// G_UDIVREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_BUILD_VECTOR
    0U,	// G_BUILD_VECTOR_TRUNC
    0U,	// G_CONCAT_VECTORS
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_FREEZE
    0U,	// G_INTRINSIC_FPTRUNC_ROUND
    0U,	// G_INTRINSIC_TRUNC
    0U,	// G_INTRINSIC_ROUND
    0U,	// G_INTRINSIC_LRINT
    0U,	// G_INTRINSIC_ROUNDEVEN
    0U,	// G_READCYCLECOUNTER
    0U,	// G_LOAD
    0U,	// G_SEXTLOAD
    0U,	// G_ZEXTLOAD
    0U,	// G_INDEXED_LOAD
    0U,	// G_INDEXED_SEXTLOAD
    0U,	// G_INDEXED_ZEXTLOAD
    0U,	// G_STORE
    0U,	// G_INDEXED_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_ATOMICRMW_FADD
    0U,	// G_ATOMICRMW_FSUB
    0U,	// G_ATOMICRMW_FMAX
    0U,	// G_ATOMICRMW_FMIN
    0U,	// G_FENCE
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INVOKE_REGION_START
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_SEXT_INREG
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_FSHL
    0U,	// G_FSHR
    0U,	// G_ROTR
    0U,	// G_ROTL
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDO
    0U,	// G_UADDE
    0U,	// G_USUBO
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SADDE
    0U,	// G_SSUBO
    0U,	// G_SSUBE
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_UADDSAT
    0U,	// G_SADDSAT
    0U,	// G_USUBSAT
    0U,	// G_SSUBSAT
    0U,	// G_USHLSAT
    0U,	// G_SSHLSAT
    0U,	// G_SMULFIX
    0U,	// G_UMULFIX
    0U,	// G_SMULFIXSAT
    0U,	// G_UMULFIXSAT
    0U,	// G_SDIVFIX
    0U,	// G_UDIVFIX
    0U,	// G_SDIVFIXSAT
    0U,	// G_UDIVFIXSAT
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FMAD
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FPOWI
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FLOG10
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_FABS
    0U,	// G_FCOPYSIGN
    0U,	// G_IS_FPCLASS
    0U,	// G_FCANONICALIZE
    0U,	// G_FMINNUM
    0U,	// G_FMAXNUM
    0U,	// G_FMINNUM_IEEE
    0U,	// G_FMAXNUM_IEEE
    0U,	// G_FMINIMUM
    0U,	// G_FMAXIMUM
    0U,	// G_PTR_ADD
    0U,	// G_PTRMASK
    0U,	// G_SMIN
    0U,	// G_SMAX
    0U,	// G_UMIN
    0U,	// G_UMAX
    0U,	// G_ABS
    0U,	// G_LROUND
    0U,	// G_LLROUND
    0U,	// G_BR
    0U,	// G_BRJT
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_CTTZ
    0U,	// G_CTTZ_ZERO_UNDEF
    0U,	// G_CTLZ
    0U,	// G_CTLZ_ZERO_UNDEF
    0U,	// G_CTPOP
    0U,	// G_BSWAP
    0U,	// G_BITREVERSE
    0U,	// G_FCEIL
    0U,	// G_FCOS
    0U,	// G_FSIN
    0U,	// G_FSQRT
    0U,	// G_FFLOOR
    0U,	// G_FRINT
    0U,	// G_FNEARBYINT
    0U,	// G_ADDRSPACE_CAST
    0U,	// G_BLOCK_ADDR
    0U,	// G_JUMP_TABLE
    0U,	// G_DYN_STACKALLOC
    0U,	// G_STRICT_FADD
    0U,	// G_STRICT_FSUB
    0U,	// G_STRICT_FMUL
    0U,	// G_STRICT_FDIV
    0U,	// G_STRICT_FREM
    0U,	// G_STRICT_FMA
    0U,	// G_STRICT_FSQRT
    0U,	// G_READ_REGISTER
    0U,	// G_WRITE_REGISTER
    0U,	// G_MEMCPY
    0U,	// G_MEMCPY_INLINE
    0U,	// G_MEMMOVE
    0U,	// G_MEMSET
    0U,	// G_BZERO
    0U,	// G_VECREDUCE_SEQ_FADD
    0U,	// G_VECREDUCE_SEQ_FMUL
    0U,	// G_VECREDUCE_FADD
    0U,	// G_VECREDUCE_FMUL
    0U,	// G_VECREDUCE_FMAX
    0U,	// G_VECREDUCE_FMIN
    0U,	// G_VECREDUCE_ADD
    0U,	// G_VECREDUCE_MUL
    0U,	// G_VECREDUCE_AND
    0U,	// G_VECREDUCE_OR
    0U,	// G_VECREDUCE_XOR
    0U,	// G_VECREDUCE_SMAX
    0U,	// G_VECREDUCE_SMIN
    0U,	// G_VECREDUCE_UMAX
    0U,	// G_VECREDUCE_UMIN
    0U,	// G_SBFX
    0U,	// G_UBFX
    0U,	// ABSDIFS_B_rr_v110
    0U,	// ABSDIFS_H_rr
    0U,	// ABSDIFS_rc
    0U,	// ABSDIFS_rr
    0U,	// ABSDIF_B_rr
    0U,	// ABSDIF_H_rr
    0U,	// ABSDIF_rc
    0U,	// ABSDIF_rr
    0U,	// ABSS_B_rr_v110
    0U,	// ABSS_H_rr
    0U,	// ABSS_rr
    0U,	// ABS_B_rr
    0U,	// ABS_H_rr
    0U,	// ABS_rr
    0U,	// ADDC_rc
    0U,	// ADDC_rr
    0U,	// ADDIH_A_rlc
    0U,	// ADDIH_rlc
    0U,	// ADDI_rlc
    0U,	// ADDSC_AT_rr
    0U,	// ADDSC_AT_rr_v110
    1U,	// ADDSC_A_rr
    1U,	// ADDSC_A_rr_v110
    0U,	// ADDSC_A_srrs
    0U,	// ADDSC_A_srrs_v110
    0U,	// ADDS_BU_rr_v110
    0U,	// ADDS_B_rr_v110
    0U,	// ADDS_H
    0U,	// ADDS_HU
    0U,	// ADDS_U
    0U,	// ADDS_U_rc
    0U,	// ADDS_rc
    0U,	// ADDS_rr
    0U,	// ADDS_srr
    0U,	// ADDX_rc
    0U,	// ADDX_rr
    0U,	// ADD_A_rr
    0U,	// ADD_A_src
    0U,	// ADD_A_srr
    0U,	// ADD_B_rr
    0U,	// ADD_F_rrr
    0U,	// ADD_H_rr
    0U,	// ADD_rc
    0U,	// ADD_rr
    0U,	// ADD_src
    0U,	// ADD_src_15a
    0U,	// ADD_src_a15
    0U,	// ADD_srr
    0U,	// ADD_srr_15a
    0U,	// ADD_srr_a15
    0U,	// ANDN_T
    0U,	// ANDN_rc
    0U,	// ANDN_rr
    0U,	// AND_ANDN_T
    0U,	// AND_AND_T
    0U,	// AND_EQ_rc
    0U,	// AND_EQ_rr
    0U,	// AND_GE_U_rc
    0U,	// AND_GE_U_rr
    0U,	// AND_GE_rc
    0U,	// AND_GE_rr
    0U,	// AND_LT_U_rc
    0U,	// AND_LT_U_rr
    0U,	// AND_LT_rc
    0U,	// AND_LT_rr
    0U,	// AND_NE_rc
    0U,	// AND_NE_rr
    0U,	// AND_NOR_T
    0U,	// AND_OR_T
    0U,	// AND_T
    0U,	// AND_rc
    0U,	// AND_rr
    0U,	// AND_sc
    0U,	// AND_sc_v110
    0U,	// AND_srr
    0U,	// AND_srr_v110
    0U,	// BISR_rc
    0U,	// BISR_rc_v161
    0U,	// BISR_sc
    0U,	// BISR_sc_v110
    0U,	// BMERGAE_rr_v110
    0U,	// BMERGE_rr
    0U,	// BSPLIT_rr
    0U,	// BSPLIT_rr_v110
    0U,	// CACHEA_I_bo_bso
    0U,	// CACHEA_I_bo_c
    0U,	// CACHEA_I_bo_pos
    0U,	// CACHEA_I_bo_pre
    0U,	// CACHEA_I_bo_r
    0U,	// CACHEA_WI_bo_bso
    0U,	// CACHEA_WI_bo_c
    0U,	// CACHEA_WI_bo_pos
    0U,	// CACHEA_WI_bo_pre
    0U,	// CACHEA_WI_bo_r
    0U,	// CACHEA_W_bo_bso
    0U,	// CACHEA_W_bo_c
    0U,	// CACHEA_W_bo_pos
    0U,	// CACHEA_W_bo_pre
    0U,	// CACHEA_W_bo_r
    0U,	// CACHEI_I_bo_bso
    0U,	// CACHEI_I_bo_pos
    0U,	// CACHEI_I_bo_pre
    0U,	// CACHEI_WI_bo_bso
    0U,	// CACHEI_WI_bo_pos
    0U,	// CACHEI_WI_bo_pre
    0U,	// CACHEI_W_bo_bso
    0U,	// CACHEI_W_bo_c
    0U,	// CACHEI_W_bo_pos
    0U,	// CACHEI_W_bo_pre
    0U,	// CACHEI_W_bo_r
    17U,	// CADDN_A_rcr_v110
    0U,	// CADDN_A_rrr_v110
    17U,	// CADDN_rcr
    0U,	// CADDN_rrr
    0U,	// CADDN_src
    0U,	// CADDN_srr_v110
    17U,	// CADD_A_rcr_v110
    0U,	// CADD_A_rrr_v110
    17U,	// CADD_rcr
    0U,	// CADD_rrr
    0U,	// CADD_src
    0U,	// CADD_srr_v110
    0U,	// CALLA_b
    0U,	// CALLI_rr
    0U,	// CALLI_rr_v110
    0U,	// CALL_b
    0U,	// CALL_sb
    0U,	// CLO_B_rr_v110
    0U,	// CLO_H_rr
    0U,	// CLO_rr
    0U,	// CLS_B_rr_v110
    0U,	// CLS_H_rr
    0U,	// CLS_rr
    0U,	// CLZ_B_rr_v110
    0U,	// CLZ_H_rr
    0U,	// CLZ_rr
    0U,	// CMOVN_src
    0U,	// CMOVN_srr
    0U,	// CMOV_src
    0U,	// CMOV_srr
    0U,	// CMPSWAP_W_bo_bso
    0U,	// CMPSWAP_W_bo_c
    0U,	// CMPSWAP_W_bo_pos
    0U,	// CMPSWAP_W_bo_pre
    0U,	// CMPSWAP_W_bo_r
    0U,	// CMP_F_rr
    0U,	// CRC32B_W_rr
    0U,	// CRC32L_W_rr
    0U,	// CRC32_B_rr
    0U,	// CRCN_rrr
    0U,	// CSUBN_A_rrr_v110
    0U,	// CSUBN_rrr
    0U,	// CSUB_A_rrr_v110
    0U,	// CSUB_rrr
    0U,	// DEBUG_sr
    0U,	// DEBUG_sys
    1U,	// DEXTR_rrpw
    1U,	// DEXTR_rrrr
    33U,	// DIFSC_A_rr_v110
    0U,	// DISABLE_sys
    0U,	// DISABLE_sys_1
    0U,	// DIV_F_rr
    0U,	// DIV_U_rr
    0U,	// DIV_rr
    0U,	// DSYNC_sys
    0U,	// DVADJ_rrr
    0U,	// DVADJ_rrr_v110
    0U,	// DVADJ_srr_v110
    0U,	// DVINIT_BU_rr
    0U,	// DVINIT_BU_rr_v110
    0U,	// DVINIT_B_rr
    0U,	// DVINIT_B_rr_v110
    0U,	// DVINIT_HU_rr
    0U,	// DVINIT_HU_rr_v110
    0U,	// DVINIT_H_rr
    0U,	// DVINIT_H_rr_v110
    0U,	// DVINIT_U_rr
    0U,	// DVINIT_U_rr_v110
    0U,	// DVINIT_rr
    0U,	// DVINIT_rr_v110
    0U,	// DVSTEP_U_rrr
    0U,	// DVSTEP_U_rrrv110
    0U,	// DVSTEP_Uv110
    0U,	// DVSTEP_rrr
    0U,	// DVSTEP_rrrv110
    0U,	// DVSTEPv110
    0U,	// ENABLE_sys
    0U,	// EQANY_B_rc
    0U,	// EQANY_B_rr
    0U,	// EQANY_H_rc
    0U,	// EQANY_H_rr
    0U,	// EQZ_A_rr
    0U,	// EQ_A_rr
    0U,	// EQ_B_rr
    0U,	// EQ_H_rr
    0U,	// EQ_W_rr
    0U,	// EQ_rc
    0U,	// EQ_rr
    0U,	// EQ_src
    0U,	// EQ_srr
    1U,	// EXTR_U_rrpw
    0U,	// EXTR_U_rrrr
    1U,	// EXTR_U_rrrw
    1U,	// EXTR_rrpw
    0U,	// EXTR_rrrr
    1U,	// EXTR_rrrw
    0U,	// FCALLA_b
    0U,	// FCALLA_i
    0U,	// FCALL_b
    0U,	// FRET_sr
    0U,	// FRET_sys
    0U,	// FTOHP_rr
    0U,	// FTOIZ_rr
    0U,	// FTOI_rr
    0U,	// FTOQ31Z_rr
    0U,	// FTOQ31_rr
    0U,	// FTOUZ_rr
    0U,	// FTOU_rr
    0U,	// GE_A_rr
    0U,	// GE_U_rc
    0U,	// GE_U_rr
    0U,	// GE_rc
    0U,	// GE_rr
    0U,	// HPTOF_rr
    1U,	// IMASK_rcpw
    1U,	// IMASK_rcrw
    1U,	// IMASK_rrpw
    1U,	// IMASK_rrrw
    65U,	// INSERT_rcpw
    1U,	// INSERT_rcrr
    65U,	// INSERT_rcrw
    65U,	// INSERT_rrpw
    65U,	// INSERT_rrrr
    65U,	// INSERT_rrrw
    0U,	// INSN_T
    0U,	// INS_T
    0U,	// ISYNC_sys
    0U,	// ITOF_rr
    0U,	// IXMAX_U_rrr
    0U,	// IXMAX_rrr
    0U,	// IXMIN_U_rrr
    0U,	// IXMIN_rrr
    0U,	// JA_b
    0U,	// JEQ_A_brr
    0U,	// JEQ_brc
    0U,	// JEQ_brr
    0U,	// JEQ_sbc1
    0U,	// JEQ_sbc2
    0U,	// JEQ_sbc_v110
    0U,	// JEQ_sbr1
    0U,	// JEQ_sbr2
    0U,	// JEQ_sbr_v110
    0U,	// JGEZ_sbr
    0U,	// JGEZ_sbr_v110
    0U,	// JGE_U_brc
    0U,	// JGE_U_brr
    0U,	// JGE_brc
    0U,	// JGE_brr
    0U,	// JGTZ_sbr
    0U,	// JGTZ_sbr_v110
    0U,	// JI_rr
    0U,	// JI_rr_v110
    0U,	// JI_sbr_v110
    0U,	// JI_sr
    0U,	// JLA_b
    0U,	// JLEZ_sbr
    0U,	// JLEZ_sbr_v110
    0U,	// JLI_rr
    0U,	// JLI_rr_v110
    0U,	// JLTZ_sbr
    0U,	// JLTZ_sbr_v110
    0U,	// JLT_U_brc
    0U,	// JLT_U_brr
    0U,	// JLT_brc
    0U,	// JLT_brr
    0U,	// JL_b
    0U,	// JNED_brc
    0U,	// JNED_brr
    0U,	// JNEI_brc
    0U,	// JNEI_brr
    0U,	// JNE_A_brr
    0U,	// JNE_brc
    0U,	// JNE_brr
    0U,	// JNE_sbc1
    0U,	// JNE_sbc2
    0U,	// JNE_sbc_v110
    0U,	// JNE_sbr1
    0U,	// JNE_sbr2
    0U,	// JNE_sbr_v110
    0U,	// JNZ_A_brr
    0U,	// JNZ_A_sbr
    0U,	// JNZ_T_brn
    0U,	// JNZ_T_sbrn
    0U,	// JNZ_T_sbrn_v110
    0U,	// JNZ_sb
    0U,	// JNZ_sb_v110
    0U,	// JNZ_sbr
    0U,	// JNZ_sbr_v110
    0U,	// JZ_A_brr
    0U,	// JZ_A_sbr
    0U,	// JZ_T_brn
    0U,	// JZ_T_sbrn
    0U,	// JZ_T_sbrn_v110
    0U,	// JZ_sb
    0U,	// JZ_sb_v110
    0U,	// JZ_sbr
    0U,	// JZ_sbr_v110
    0U,	// J_b
    0U,	// J_sb
    0U,	// J_sb_v110
    0U,	// LDLCX_abs
    0U,	// LDLCX_bo_bso
    0U,	// LDMST_abs
    0U,	// LDMST_bo_bso
    0U,	// LDMST_bo_c
    0U,	// LDMST_bo_pos
    0U,	// LDMST_bo_pre
    0U,	// LDMST_bo_r
    0U,	// LDUCX_abs
    0U,	// LDUCX_bo_bso
    0U,	// LD_A_abs
    0U,	// LD_A_bo_bso
    0U,	// LD_A_bo_c
    0U,	// LD_A_bo_pos
    0U,	// LD_A_bo_pre
    0U,	// LD_A_bo_r
    0U,	// LD_A_bol
    0U,	// LD_A_sc
    0U,	// LD_A_slr
    0U,	// LD_A_slr_post
    0U,	// LD_A_slr_post_v110
    0U,	// LD_A_slr_v110
    0U,	// LD_A_slro
    0U,	// LD_A_slro_v110
    0U,	// LD_A_sro
    0U,	// LD_A_sro_v110
    0U,	// LD_BU_abs
    0U,	// LD_BU_bo_bso
    0U,	// LD_BU_bo_c
    0U,	// LD_BU_bo_pos
    0U,	// LD_BU_bo_pre
    0U,	// LD_BU_bo_r
    0U,	// LD_BU_bol
    0U,	// LD_BU_slr
    0U,	// LD_BU_slr_post
    0U,	// LD_BU_slr_post_v110
    0U,	// LD_BU_slr_v110
    0U,	// LD_BU_slro
    0U,	// LD_BU_slro_v110
    0U,	// LD_BU_sro
    0U,	// LD_BU_sro_v110
    0U,	// LD_B_abs
    0U,	// LD_B_bo_bso
    0U,	// LD_B_bo_c
    0U,	// LD_B_bo_pos
    0U,	// LD_B_bo_pre
    0U,	// LD_B_bo_r
    0U,	// LD_B_bol
    0U,	// LD_B_slr_post_v110
    0U,	// LD_B_slr_v110
    0U,	// LD_B_slro_v110
    0U,	// LD_B_sro_v110
    0U,	// LD_DA_abs
    0U,	// LD_DA_bo_bso
    0U,	// LD_DA_bo_c
    0U,	// LD_DA_bo_pos
    0U,	// LD_DA_bo_pre
    0U,	// LD_DA_bo_r
    0U,	// LD_D_abs
    0U,	// LD_D_bo_bso
    0U,	// LD_D_bo_c
    0U,	// LD_D_bo_pos
    0U,	// LD_D_bo_pre
    0U,	// LD_D_bo_r
    0U,	// LD_HU_abs
    0U,	// LD_HU_bo_bso
    0U,	// LD_HU_bo_c
    0U,	// LD_HU_bo_pos
    0U,	// LD_HU_bo_pre
    0U,	// LD_HU_bo_r
    0U,	// LD_HU_bol
    0U,	// LD_H_abs
    0U,	// LD_H_bo_bso
    0U,	// LD_H_bo_c
    0U,	// LD_H_bo_pos
    0U,	// LD_H_bo_pre
    0U,	// LD_H_bo_r
    0U,	// LD_H_bol
    0U,	// LD_H_slr
    0U,	// LD_H_slr_post
    0U,	// LD_H_slr_post_v110
    0U,	// LD_H_slr_v110
    0U,	// LD_H_slro
    0U,	// LD_H_slro_v110
    0U,	// LD_H_sro
    0U,	// LD_H_sro_v110
    0U,	// LD_Q_abs
    0U,	// LD_Q_bo_bso
    0U,	// LD_Q_bo_c
    0U,	// LD_Q_bo_pos
    0U,	// LD_Q_bo_pre
    0U,	// LD_Q_bo_r
    0U,	// LD_W_abs
    0U,	// LD_W_bo_bso
    0U,	// LD_W_bo_c
    0U,	// LD_W_bo_pos
    0U,	// LD_W_bo_pre
    0U,	// LD_W_bo_r
    0U,	// LD_W_bol
    0U,	// LD_W_sc
    0U,	// LD_W_slr
    0U,	// LD_W_slr_post
    0U,	// LD_W_slr_post_v110
    0U,	// LD_W_slr_v110
    0U,	// LD_W_slro
    0U,	// LD_W_slro_v110
    0U,	// LD_W_sro
    0U,	// LD_W_sro_v110
    0U,	// LEA_abs
    0U,	// LEA_bo_bso
    0U,	// LEA_bol
    0U,	// LHA_abs
    0U,	// LOOPU_brr
    0U,	// LOOP_brr
    0U,	// LOOP_sbr
    0U,	// LT_A_rr
    0U,	// LT_B
    0U,	// LT_BU
    0U,	// LT_H
    0U,	// LT_HU
    0U,	// LT_U_rc
    0U,	// LT_U_rr
    0U,	// LT_U_srcv110
    0U,	// LT_U_srrv110
    0U,	// LT_W
    0U,	// LT_WU
    0U,	// LT_rc
    0U,	// LT_rr
    0U,	// LT_src
    0U,	// LT_srr
    2U,	// MADDMS_H_rrr1_LL
    3U,	// MADDMS_H_rrr1_LU
    4U,	// MADDMS_H_rrr1_UL
    5U,	// MADDMS_H_rrr1_UU
    2U,	// MADDM_H_rrr1_LL
    3U,	// MADDM_H_rrr1_LU
    4U,	// MADDM_H_rrr1_UL
    5U,	// MADDM_H_rrr1_UU
    6U,	// MADDRS_H_rrr1_DcEdDaDbUL
    2U,	// MADDRS_H_rrr1_LL
    3U,	// MADDRS_H_rrr1_LU
    4U,	// MADDRS_H_rrr1_UL
    5U,	// MADDRS_H_rrr1_UU
    0U,	// MADDRS_Q_rrr1_L_L
    0U,	// MADDRS_Q_rrr1_U_U
    6U,	// MADDR_H_rrr1_DcEdDaDbUL
    2U,	// MADDR_H_rrr1_LL
    3U,	// MADDR_H_rrr1_LU
    4U,	// MADDR_H_rrr1_UL
    5U,	// MADDR_H_rrr1_UU
    0U,	// MADDR_Q_rrr1_L_L
    0U,	// MADDR_Q_rrr1_U_U
    2U,	// MADDSUMS_H_rrr1_LL
    3U,	// MADDSUMS_H_rrr1_LU
    4U,	// MADDSUMS_H_rrr1_UL
    5U,	// MADDSUMS_H_rrr1_UU
    2U,	// MADDSUM_H_rrr1_LL
    3U,	// MADDSUM_H_rrr1_LU
    4U,	// MADDSUM_H_rrr1_UL
    5U,	// MADDSUM_H_rrr1_UU
    2U,	// MADDSURS_H_rrr1_LL
    3U,	// MADDSURS_H_rrr1_LU
    4U,	// MADDSURS_H_rrr1_UL
    5U,	// MADDSURS_H_rrr1_UU
    2U,	// MADDSUR_H_rrr1_LL
    3U,	// MADDSUR_H_rrr1_LU
    4U,	// MADDSUR_H_rrr1_UL
    5U,	// MADDSUR_H_rrr1_UU
    2U,	// MADDSUS_H_rrr1_LL
    3U,	// MADDSUS_H_rrr1_LU
    4U,	// MADDSUS_H_rrr1_UL
    5U,	// MADDSUS_H_rrr1_UU
    2U,	// MADDSU_H_rrr1_LL
    3U,	// MADDSU_H_rrr1_LU
    4U,	// MADDSU_H_rrr1_UL
    5U,	// MADDSU_H_rrr1_UU
    2U,	// MADDS_H_rrr1_LL
    3U,	// MADDS_H_rrr1_LU
    4U,	// MADDS_H_rrr1_UL
    5U,	// MADDS_H_rrr1_UU
    49U,	// MADDS_Q_rrr1
    7U,	// MADDS_Q_rrr1_L
    0U,	// MADDS_Q_rrr1_L_L
    8U,	// MADDS_Q_rrr1_U
    0U,	// MADDS_Q_rrr1_U_U
    49U,	// MADDS_Q_rrr1_e
    7U,	// MADDS_Q_rrr1_e_L
    0U,	// MADDS_Q_rrr1_e_L_L
    8U,	// MADDS_Q_rrr1_e_U
    0U,	// MADDS_Q_rrr1_e_U_U
    17U,	// MADDS_U_rcr
    17U,	// MADDS_U_rcr_e
    0U,	// MADDS_U_rrr2
    0U,	// MADDS_U_rrr2_e
    17U,	// MADDS_rcr
    17U,	// MADDS_rcr_e
    0U,	// MADDS_rrr2
    0U,	// MADDS_rrr2_e
    0U,	// MADD_F_rrr
    2U,	// MADD_H_rrr1_LL
    3U,	// MADD_H_rrr1_LU
    4U,	// MADD_H_rrr1_UL
    5U,	// MADD_H_rrr1_UU
    49U,	// MADD_Q_rrr1
    7U,	// MADD_Q_rrr1_L
    0U,	// MADD_Q_rrr1_L_L
    8U,	// MADD_Q_rrr1_U
    0U,	// MADD_Q_rrr1_U_U
    49U,	// MADD_Q_rrr1_e
    7U,	// MADD_Q_rrr1_e_L
    0U,	// MADD_Q_rrr1_e_L_L
    8U,	// MADD_Q_rrr1_e_U
    0U,	// MADD_Q_rrr1_e_U_U
    17U,	// MADD_U_rcr
    0U,	// MADD_U_rrr2
    17U,	// MADD_rcr
    17U,	// MADD_rcr_e
    0U,	// MADD_rrr2
    0U,	// MADD_rrr2_e
    0U,	// MAX_B
    0U,	// MAX_BU
    0U,	// MAX_H
    0U,	// MAX_HU
    0U,	// MAX_U_rc
    0U,	// MAX_U_rr
    0U,	// MAX_rc
    0U,	// MAX_rr
    0U,	// MFCR_rlc
    0U,	// MIN_B
    0U,	// MIN_BU
    0U,	// MIN_H
    0U,	// MIN_HU
    0U,	// MIN_U_rc
    0U,	// MIN_U_rr
    0U,	// MIN_rc
    0U,	// MIN_rr
    0U,	// MOVH_A_rlc
    0U,	// MOVH_rlc
    0U,	// MOV_AA_rr
    0U,	// MOV_AA_srr
    0U,	// MOV_A_rr
    0U,	// MOV_A_src
    0U,	// MOV_A_srr
    0U,	// MOV_D_rr
    0U,	// MOV_D_srr
    0U,	// MOV_U_rlc
    0U,	// MOV_rlcDc
    0U,	// MOV_rlcEc
    0U,	// MOV_rrDcDb
    0U,	// MOV_rrEcDaDb
    0U,	// MOV_rrEcDb
    0U,	// MOV_sc
    0U,	// MOV_srcDa
    0U,	// MOV_srcEa
    0U,	// MOV_srr
    2U,	// MSUBADMS_H_rrr1_LL
    3U,	// MSUBADMS_H_rrr1_LU
    4U,	// MSUBADMS_H_rrr1_UL
    5U,	// MSUBADMS_H_rrr1_UU
    2U,	// MSUBADM_H_rrr1_LL
    3U,	// MSUBADM_H_rrr1_LU
    4U,	// MSUBADM_H_rrr1_UL
    5U,	// MSUBADM_H_rrr1_UU
    2U,	// MSUBADRS_H_rrr1_LL
    3U,	// MSUBADRS_H_rrr1_LU
    4U,	// MSUBADRS_H_rrr1_UL
    5U,	// MSUBADRS_H_rrr1_UU
    2U,	// MSUBADR_H_rrr1_LL
    3U,	// MSUBADR_H_rrr1_LU
    4U,	// MSUBADR_H_rrr1_UL
    5U,	// MSUBADR_H_rrr1_UU
    2U,	// MSUBADS_H_rrr1_LL
    3U,	// MSUBADS_H_rrr1_LU
    4U,	// MSUBADS_H_rrr1_UL
    5U,	// MSUBADS_H_rrr1_UU
    2U,	// MSUBAD_H_rrr1_LL
    3U,	// MSUBAD_H_rrr1_LU
    4U,	// MSUBAD_H_rrr1_UL
    5U,	// MSUBAD_H_rrr1_UU
    2U,	// MSUBMS_H_rrr1_LL
    3U,	// MSUBMS_H_rrr1_LU
    4U,	// MSUBMS_H_rrr1_UL
    5U,	// MSUBMS_H_rrr1_UU
    2U,	// MSUBM_H_rrr1_LL
    3U,	// MSUBM_H_rrr1_LU
    4U,	// MSUBM_H_rrr1_UL
    5U,	// MSUBM_H_rrr1_UU
    6U,	// MSUBRS_H_rrr1_DcEdDaDbUL
    2U,	// MSUBRS_H_rrr1_LL
    3U,	// MSUBRS_H_rrr1_LU
    4U,	// MSUBRS_H_rrr1_UL
    5U,	// MSUBRS_H_rrr1_UU
    0U,	// MSUBRS_Q_rrr1_L_L
    0U,	// MSUBRS_Q_rrr1_U_U
    6U,	// MSUBR_H_rrr1_DcEdDaDbUL
    2U,	// MSUBR_H_rrr1_LL
    3U,	// MSUBR_H_rrr1_LU
    4U,	// MSUBR_H_rrr1_UL
    5U,	// MSUBR_H_rrr1_UU
    0U,	// MSUBR_Q_rrr1_L_L
    0U,	// MSUBR_Q_rrr1_U_U
    2U,	// MSUBS_H_rrr1_LL
    3U,	// MSUBS_H_rrr1_LU
    4U,	// MSUBS_H_rrr1_UL
    5U,	// MSUBS_H_rrr1_UU
    49U,	// MSUBS_Q_rrr1
    7U,	// MSUBS_Q_rrr1_L
    0U,	// MSUBS_Q_rrr1_L_L
    8U,	// MSUBS_Q_rrr1_U
    0U,	// MSUBS_Q_rrr1_U_U
    49U,	// MSUBS_Q_rrr1_e
    7U,	// MSUBS_Q_rrr1_e_L
    0U,	// MSUBS_Q_rrr1_e_L_L
    8U,	// MSUBS_Q_rrr1_e_U
    0U,	// MSUBS_Q_rrr1_e_U_U
    17U,	// MSUBS_U_rcr
    17U,	// MSUBS_U_rcr_e
    0U,	// MSUBS_U_rrr2
    0U,	// MSUBS_U_rrr2_e
    17U,	// MSUBS_rcr
    17U,	// MSUBS_rcr_e
    0U,	// MSUBS_rrr2
    0U,	// MSUBS_rrr2_e
    0U,	// MSUB_F_rrr
    2U,	// MSUB_H_rrr1_LL
    3U,	// MSUB_H_rrr1_LU
    4U,	// MSUB_H_rrr1_UL
    5U,	// MSUB_H_rrr1_UU
    49U,	// MSUB_Q_rrr1
    7U,	// MSUB_Q_rrr1_L
    0U,	// MSUB_Q_rrr1_L_L
    8U,	// MSUB_Q_rrr1_U
    0U,	// MSUB_Q_rrr1_U_U
    49U,	// MSUB_Q_rrr1_e
    7U,	// MSUB_Q_rrr1_e_L
    0U,	// MSUB_Q_rrr1_e_L_L
    8U,	// MSUB_Q_rrr1_e_U
    0U,	// MSUB_Q_rrr1_e_U_U
    17U,	// MSUB_U_rcr
    0U,	// MSUB_U_rrr2
    17U,	// MSUB_rcr
    17U,	// MSUB_rcr_e
    0U,	// MSUB_rrr2
    0U,	// MSUB_rrr2_e
    0U,	// MTCR_rlc
    9U,	// MULM_H_rr1_LL2e
    10U,	// MULM_H_rr1_LU2e
    11U,	// MULM_H_rr1_UL2e
    12U,	// MULM_H_rr1_UU2e
    9U,	// MULR_H_rr1_LL2e
    10U,	// MULR_H_rr1_LU2e
    11U,	// MULR_H_rr1_UL2e
    12U,	// MULR_H_rr1_UU2e
    0U,	// MULR_Q_rr1_2LL
    0U,	// MULR_Q_rr1_2UU
    0U,	// MULS_U_rc
    0U,	// MULS_U_rr2
    0U,	// MULS_rc
    0U,	// MULS_rr2
    0U,	// MUL_F_rrr
    9U,	// MUL_H_rr1_LL2e
    10U,	// MUL_H_rr1_LU2e
    11U,	// MUL_H_rr1_UL2e
    12U,	// MUL_H_rr1_UU2e
    0U,	// MUL_Q_rr1_2LL
    0U,	// MUL_Q_rr1_2UU
    13U,	// MUL_Q_rr1_2_L
    13U,	// MUL_Q_rr1_2_Le
    14U,	// MUL_Q_rr1_2_U
    14U,	// MUL_Q_rr1_2_Ue
    33U,	// MUL_Q_rr1_2__
    33U,	// MUL_Q_rr1_2__e
    0U,	// MUL_U_rc
    0U,	// MUL_U_rr2
    0U,	// MUL_rc
    0U,	// MUL_rc_e
    0U,	// MUL_rr2
    0U,	// MUL_rr2_e
    0U,	// MUL_srr
    0U,	// NAND_T
    0U,	// NAND_rc
    0U,	// NAND_rr
    0U,	// NEZ_A
    0U,	// NE_A
    0U,	// NE_rc
    0U,	// NE_rr
    0U,	// NOP_sr
    0U,	// NOP_sys
    0U,	// NOR_T
    0U,	// NOR_rc
    0U,	// NOR_rr
    0U,	// NOT_sr
    0U,	// ORN_T
    0U,	// ORN_rc
    0U,	// ORN_rr
    0U,	// OR_ANDN_T
    0U,	// OR_AND_T
    0U,	// OR_EQ_rc
    0U,	// OR_EQ_rr
    0U,	// OR_GE_U_rc
    0U,	// OR_GE_U_rr
    0U,	// OR_GE_rc
    0U,	// OR_GE_rr
    0U,	// OR_LT_U_rc
    0U,	// OR_LT_U_rr
    0U,	// OR_LT_rc
    0U,	// OR_LT_rr
    0U,	// OR_NE_rc
    0U,	// OR_NE_rr
    0U,	// OR_NOR_T
    0U,	// OR_OR_T
    0U,	// OR_T
    0U,	// OR_rc
    0U,	// OR_rr
    0U,	// OR_sc
    0U,	// OR_srr
    0U,	// PACK_rrr
    0U,	// PARITY_rr
    0U,	// POPCNT_W_rr
    0U,	// Q31TOF_rr
    0U,	// QSEED_F_rr
    0U,	// RESTORE_sys
    0U,	// RET_sr
    0U,	// RET_sys
    0U,	// RFE_sr
    0U,	// RFE_sys
    0U,	// RFM_sys
    0U,	// RSLCX_sys
    0U,	// RSTV_sys
    0U,	// RSUBS_U_rc
    0U,	// RSUBS_rc
    0U,	// RSUB_rc
    0U,	// RSUB_sr
    0U,	// SAT_BU_rr
    0U,	// SAT_BU_sr
    0U,	// SAT_B_rr
    0U,	// SAT_B_sr
    0U,	// SAT_HU_rr
    0U,	// SAT_HU_sr
    0U,	// SAT_H_rr
    0U,	// SAT_H_sr
    17U,	// SELN_rcr
    0U,	// SELN_rrr
    17U,	// SEL_rcr
    0U,	// SEL_rrr
    0U,	// SHAS_rc
    0U,	// SHAS_rr
    0U,	// SHA_H_rc
    0U,	// SHA_H_rr
    0U,	// SHA_rc
    0U,	// SHA_rr
    0U,	// SHA_src
    0U,	// SHUFFLE_rc
    0U,	// SH_ANDN_T
    0U,	// SH_AND_T
    0U,	// SH_EQ_rc
    0U,	// SH_EQ_rr
    0U,	// SH_GE_U_rc
    0U,	// SH_GE_U_rr
    0U,	// SH_GE_rc
    0U,	// SH_GE_rr
    0U,	// SH_H_rc
    0U,	// SH_H_rr
    0U,	// SH_LT_U_rc
    0U,	// SH_LT_U_rr
    0U,	// SH_LT_rc
    0U,	// SH_LT_rr
    0U,	// SH_NAND_T
    0U,	// SH_NE_rc
    0U,	// SH_NE_rr
    0U,	// SH_NOR_T
    0U,	// SH_ORN_T
    0U,	// SH_OR_T
    0U,	// SH_XNOR_T
    0U,	// SH_XOR_T
    0U,	// SH_rc
    0U,	// SH_rr
    0U,	// SH_src
    0U,	// STLCX_abs
    0U,	// STLCX_bo_bso
    0U,	// STUCX_abs
    0U,	// STUCX_bo_bso
    0U,	// ST_A_abs
    0U,	// ST_A_bo_bso
    0U,	// ST_A_bo_c
    0U,	// ST_A_bo_pos
    0U,	// ST_A_bo_pre
    0U,	// ST_A_bo_r
    0U,	// ST_A_bol
    0U,	// ST_A_sc
    0U,	// ST_A_sro
    0U,	// ST_A_ssr
    0U,	// ST_A_ssr_pos
    0U,	// ST_A_ssro
    0U,	// ST_B_abs
    0U,	// ST_B_bo_bso
    0U,	// ST_B_bo_c
    0U,	// ST_B_bo_pos
    0U,	// ST_B_bo_pre
    0U,	// ST_B_bo_r
    0U,	// ST_B_bol
    0U,	// ST_B_sro
    0U,	// ST_B_ssr
    0U,	// ST_B_ssr_pos
    0U,	// ST_B_ssro
    0U,	// ST_DA_abs
    0U,	// ST_DA_bo_bso
    0U,	// ST_DA_bo_c
    0U,	// ST_DA_bo_pos
    0U,	// ST_DA_bo_pre
    0U,	// ST_DA_bo_r
    0U,	// ST_D_abs
    0U,	// ST_D_bo_bso
    0U,	// ST_D_bo_c
    0U,	// ST_D_bo_pos
    0U,	// ST_D_bo_pre
    0U,	// ST_D_bo_r
    0U,	// ST_H_abs
    0U,	// ST_H_bo_bso
    0U,	// ST_H_bo_c
    0U,	// ST_H_bo_pos
    0U,	// ST_H_bo_pre
    0U,	// ST_H_bo_r
    0U,	// ST_H_bol
    0U,	// ST_H_sro
    0U,	// ST_H_ssr
    0U,	// ST_H_ssr_pos
    0U,	// ST_H_ssro
    0U,	// ST_Q_abs
    0U,	// ST_Q_bo_bso
    0U,	// ST_Q_bo_c
    0U,	// ST_Q_bo_pos
    0U,	// ST_Q_bo_pre
    0U,	// ST_Q_bo_r
    0U,	// ST_T
    0U,	// ST_W_abs
    0U,	// ST_W_bo_bso
    0U,	// ST_W_bo_c
    0U,	// ST_W_bo_pos
    0U,	// ST_W_bo_pre
    0U,	// ST_W_bo_r
    0U,	// ST_W_bol
    0U,	// ST_W_sro
    0U,	// ST_W_ssr
    0U,	// ST_W_ssr_pos
    0U,	// ST_W_ssro
    0U,	// SUBC_rr
    0U,	// SUBS_HU_rr
    0U,	// SUBS_H_rr
    0U,	// SUBS_U_rr
    0U,	// SUBS_rr
    0U,	// SUBS_srr
    0U,	// SUBX_rr
    0U,	// SUB_A_rr
    0U,	// SUB_A_sc
    0U,	// SUB_B_rr
    0U,	// SUB_F_rrr
    0U,	// SUB_H_rr
    0U,	// SUB_rr
    0U,	// SUB_srr
    0U,	// SUB_srr_15a
    0U,	// SUB_srr_a15
    0U,	// SVLCX_sys
    0U,	// SWAPMSK_W_bo_bso
    0U,	// SWAPMSK_W_bo_c
    0U,	// SWAPMSK_W_bo_pos
    0U,	// SWAPMSK_W_bo_pre
    0U,	// SWAPMSK_W_bo_r
    0U,	// SWAP_W_abs
    0U,	// SWAP_W_bo_bso
    0U,	// SWAP_W_bo_c
    0U,	// SWAP_W_bo_pos
    0U,	// SWAP_W_bo_pre
    0U,	// SWAP_W_bo_r
    0U,	// SYSCALL_rc
    0U,	// TRAPSV_sys
    0U,	// TRAPV_sys
    0U,	// UNPACK_rr
    0U,	// UPDFL_rr
    0U,	// UTOF_rr
    0U,	// WAIT_sys
    0U,	// XNOR_T
    0U,	// XNOR_rc
    0U,	// XNOR_rr
    0U,	// XOR_EQ_rc
    0U,	// XOR_EQ_rr
    0U,	// XOR_GE_U_rc
    0U,	// XOR_GE_U_rr
    0U,	// XOR_GE_rc
    0U,	// XOR_GE_rr
    0U,	// XOR_LT_U_rc
    0U,	// XOR_LT_U_rr
    0U,	// XOR_LT_rc
    0U,	// XOR_LT_rr
    0U,	// XOR_NE_rc
    0U,	// XOR_NE_rr
    0U,	// XOR_T
    0U,	// XOR_rc
    0U,	// XOR_rr
    0U,	// XOR_srr
  };

  // Emit the opcode for the instruction.
  uint64_t Bits = 0;
  Bits |= (uint64_t)OpInfo0[MCInst_getOpcode(MI)] << 0;
  Bits |= (uint64_t)OpInfo1[MCInst_getOpcode(MI)] << 32;
  MnemonicBitsInfo MBI = {AsmStrs+(Bits & 4095)-1, Bits};
  return MBI;

}
/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void printInstruction(MCInst *MI, uint64_t Address, SStream *O) {
  SStream_concat0(O, "");
  MnemonicBitsInfo MnemonicInfo = getMnemonic(MI, O);

  SStream_concat0(O, MnemonicInfo.first);

  uint64_t Bits = MnemonicInfo.second;
  assert(Bits != 0 && "Cannot print this instruction.");

  // Fragment 0 encoded into 4 bits for 13 unique commands.
  switch ((Bits >> 12) & 15) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // DBG_VALUE, DBG_VALUE_LIST, DBG_INSTR_REF, DBG_PHI, DBG_LABEL, BUNDLE, ...
    return;
    break;
  case 1:
    // ABSDIFS_B_rr_v110, ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ...
    printOperand(MI, 0, O);
    break;
  case 2:
    // AND_sc, AND_sc_v110, BISR_sc, BISR_sc_v110, LD_A_sc, LD_W_sc, MOV_sc, ...
    printZExtImm_8(MI, 0, O);
    break;
  case 3:
    // BISR_rc, BISR_rc_v161, SYSCALL_rc
    printSExtImm_9(MI, 0, O);
    return;
    break;
  case 4:
    // CALLA_b, CALL_b, FCALLA_b, FCALL_b, JA_b, JLA_b, JL_b, J_b
    printDisp24Imm(MI, 0, O);
    return;
    break;
  case 5:
    // CALL_sb, JNZ_sb, JNZ_sb_v110, JZ_sb, JZ_sb_v110, J_sb, J_sb_v110
    printDisp8Imm(MI, 0, O);
    return;
    break;
  case 6:
    // CMPSWAP_W_bo_bso, CMPSWAP_W_bo_c, CMPSWAP_W_bo_pos, CMPSWAP_W_bo_pre, ...
    printOperand(MI, 1, O);
    break;
  case 7:
    // JEQ_sbc1, JEQ_sbc2, JEQ_sbc_v110, JNE_sbc1, JNE_sbc2, JNE_sbc_v110
    printSExtImm_4(MI, 1, O);
    SStream_concat0(O, ", ");
    printDisp4Imm(MI, 0, O);
    return;
    break;
  case 8:
    // LDLCX_abs, LDUCX_abs, STLCX_abs, STUCX_abs, ST_T
    printOff18Imm(MI, 0, O);
    break;
  case 9:
    // LDMST_abs, ST_A_abs, ST_B_abs, ST_DA_abs, ST_D_abs, ST_H_abs, ST_Q_abs...
    printOff18Imm(MI, 1, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 0, O);
    return;
    break;
  case 10:
    // LOOPU_brr
    printDisp15Imm(MI, 0, O);
    return;
    break;
  case 11:
    // MTCR_rlc
    printSExtImm_16(MI, 0, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 1, O);
    return;
    break;
  case 12:
    // ST_A_ssro, ST_B_ssro, ST_H_ssro, ST_W_ssro
    printZExtImm_4(MI, 1, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 0, O);
    return;
    break;
  }


  // Fragment 1 encoded into 4 bits for 14 unique commands.
  switch ((Bits >> 16) & 15) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_B_rr_v110, ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ...
    SStream_concat0(O, ", ");
    break;
  case 1:
    // ADD_src_a15, ADD_srr_a15, CADDN_src, CADDN_srr_v110, CADD_src, CADD_sr...
    SStream_concat0(O, ", %d15, ");
    break;
  case 2:
    // AND_sc, AND_sc_v110, BISR_sc, BISR_sc_v110, CALLI_rr, CALLI_rr_v110, D...
    return;
    break;
  case 3:
    // CACHEA_I_bo_bso, CACHEA_I_bo_pre, CACHEA_WI_bo_bso, CACHEA_WI_bo_pre, ...
    SStream_concat1(O, ']');
    break;
  case 4:
    // CACHEA_I_bo_c, CACHEA_WI_bo_c, CACHEA_W_bo_c, CACHEI_W_bo_c
    SStream_concat0(O, "+c]");
    set_mem_access(MI, false);
    printSExtImm_10(MI, 1, O);
    return;
    break;
  case 5:
    // CACHEA_I_bo_pos, CACHEA_WI_bo_pos, CACHEA_W_bo_pos, CACHEI_I_bo_pos, C...
    SStream_concat0(O, "+]");
    set_mem_access(MI, false);
    break;
  case 6:
    // CACHEA_I_bo_r, CACHEA_WI_bo_r, CACHEA_W_bo_r, CACHEI_W_bo_r
    SStream_concat0(O, "+r]");
    set_mem_access(MI, false);
    return;
    break;
  case 7:
    // CADDN_A_rrr_v110, CADD_A_rrr_v110
    SStream_concat1(O, ' ');
    printOperand(MI, 3, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 1, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 2, O);
    return;
    break;
  case 8:
    // LD_A_bo_bso, LD_A_bo_c, LD_A_bo_pos, LD_A_bo_r, LD_A_bol, LD_A_slr, LD...
    SStream_concat0(O, ", [");
    set_mem_access(MI, true);
    break;
  case 9:
    // LD_A_bo_pre, LD_BU_bo_pre, LD_B_bo_pre, LD_DA_bo_pre, LD_D_bo_pre, LD_...
    SStream_concat0(O, ", [+");
    set_mem_access(MI, true);
    break;
  case 10:
    // LD_A_slro, LD_A_slro_v110, LD_BU_slro, LD_BU_slro_v110, LD_B_slro_v110...
    SStream_concat0(O, ", [%a15]");
    set_mem_access(MI, true);
    printZExtImm_4(MI, 1, O);
    return;
    break;
  case 11:
    // ST_A_sc
    SStream_concat0(O, ", %a15");
    return;
    break;
  case 12:
    // ST_A_ssr, ST_B_ssr, ST_H_ssr, ST_W_ssr
    SStream_concat0(O, "], ");
    set_mem_access(MI, false);
    printOperand(MI, 1, O);
    return;
    break;
  case 13:
    // ST_A_ssr_pos, ST_B_ssr_pos, ST_H_ssr_pos, ST_W_ssr_pos
    SStream_concat0(O, "+], ");
    set_mem_access(MI, false);
    printOperand(MI, 1, O);
    return;
    break;
  }


  // Fragment 2 encoded into 4 bits for 13 unique commands.
  switch ((Bits >> 20) & 15) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_B_rr_v110, ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ...
    printOperand(MI, 1, O);
    break;
  case 1:
    // ADDSC_A_rr, ADD_F_rrr, CADDN_A_rcr_v110, CADDN_rcr, CADD_A_rcr_v110, C...
    printOperand(MI, 2, O);
    break;
  case 2:
    // ADD_A_src, ADD_src, ADD_src_15a, ADD_src_a15, CADDN_src, CADD_src, CMO...
    printSExtImm_4(MI, 1, O);
    return;
    break;
  case 3:
    // CACHEA_I_bo_bso, CACHEA_I_bo_pos, CACHEA_I_bo_pre, CACHEA_WI_bo_bso, C...
    printSExtImm_10(MI, 1, O);
    return;
    break;
  case 4:
    // CADDN_rrr, CADD_rrr, CRCN_rrr, CSUBN_A_rrr_v110, CSUBN_rrr, CSUB_A_rrr...
    printOperand(MI, 3, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 1, O);
    break;
  case 5:
    // CMPSWAP_W_bo_bso, CMPSWAP_W_bo_c, CMPSWAP_W_bo_pos, CMPSWAP_W_bo_pre, ...
    printSExtImm_10(MI, 2, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 0, O);
    return;
    break;
  case 6:
    // CMPSWAP_W_bo_r, LDMST_bo_r, ST_A_bo_pos, ST_A_bo_pre, ST_B_bo_pos, ST_...
    printOperand(MI, 0, O);
    break;
  case 7:
    // JEQ_brc, JGE_U_brc, JGE_brc, JLT_U_brc, JLT_brc, JNED_brc, JNEI_brc, J...
    printZExtImm_4(MI, 1, O);
    break;
  case 8:
    // JEQ_sbr1, JEQ_sbr2, JEQ_sbr_v110, JGEZ_sbr, JGEZ_sbr_v110, JGTZ_sbr, J...
    printDisp4Imm(MI, 1, O);
    return;
    break;
  case 9:
    // LD_A_abs, LD_BU_abs, LD_B_abs, LD_DA_abs, LD_D_abs, LD_HU_abs, LD_H_ab...
    printOff18Imm(MI, 1, O);
    return;
    break;
  case 10:
    // LOOP_brr
    printDisp15Imm(MI, 1, O);
    return;
    break;
  case 11:
    // MFCR_rlc, MOVH_A_rlc, MOVH_rlc, MOV_U_rlc, MOV_rlcDc, MOV_rlcEc
    printZExtImm_16(MI, 1, O);
    return;
    break;
  case 12:
    // ST_A_bol, ST_B_bol, ST_H_bol, ST_W_bol
    printSExtImm_16(MI, 2, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 1, O);
    return;
    break;
  }


  // Fragment 3 encoded into 4 bits for 11 unique commands.
  switch ((Bits >> 24) & 15) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_B_rr_v110, ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ...
    SStream_concat0(O, ", ");
    break;
  case 1:
    // ABS_B_rr, ABS_H_rr, ABS_rr, ADDS_srr, ADD_A_srr, ADD_srr, ADD_srr_15a,...
    return;
    break;
  case 2:
    // ADDSC_A_srrs
    SStream_concat0(O, ", %d15, ");
    printZExtImm_2(MI, 2, O);
    return;
    break;
  case 3:
    // LD_A_bo_bso, LD_A_bo_pre, LD_A_bol, LD_A_slr, LD_A_slr_v110, LD_BU_bo_...
    SStream_concat1(O, ']');
    break;
  case 4:
    // LD_A_bo_c, LD_BU_bo_c, LD_B_bo_c, LD_DA_bo_c, LD_D_bo_c, LD_HU_bo_c, L...
    SStream_concat0(O, "+c]");
    set_mem_access(MI, false);
    printSExtImm_10(MI, 2, O);
    return;
    break;
  case 5:
    // LD_A_bo_pos, LD_A_slr_post, LD_A_slr_post_v110, LD_BU_bo_pos, LD_BU_sl...
    SStream_concat0(O, "+]");
    set_mem_access(MI, false);
    break;
  case 6:
    // LD_A_bo_r, LD_BU_bo_r, LD_B_bo_r, LD_DA_bo_r, LD_D_bo_r, LD_HU_bo_r, L...
    SStream_concat0(O, "+r]");
    set_mem_access(MI, false);
    return;
    break;
  case 7:
    // MADDRS_Q_rrr1_L_L, MADDR_Q_rrr1_L_L, MADDS_Q_rrr1_L_L, MADDS_Q_rrr1_e_...
    SStream_concat0(O, "L, ");
    printOperand(MI, 2, O);
    SStream_concat0(O, "L, ");
    break;
  case 8:
    // MADDRS_Q_rrr1_U_U, MADDR_Q_rrr1_U_U, MADDS_Q_rrr1_U_U, MADDS_Q_rrr1_e_...
    SStream_concat0(O, "U, ");
    printOperand(MI, 2, O);
    SStream_concat0(O, "U, ");
    break;
  case 9:
    // ST_A_sro
    SStream_concat0(O, ", %a15");
    return;
    break;
  case 10:
    // ST_B_sro, ST_H_sro, ST_W_sro
    SStream_concat0(O, ", %d15");
    return;
    break;
  }


  // Fragment 4 encoded into 4 bits for 11 unique commands.
  switch ((Bits >> 28) & 15) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_B_rr_v110, ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ...
    printOperand(MI, 2, O);
    break;
  case 1:
    // ABSDIF_rc, ADDC_rc, ADDS_U_rc, ADDS_rc, ADDX_rc, ADD_rc, ANDN_rc, AND_...
    printSExtImm_9(MI, 2, O);
    return;
    break;
  case 2:
    // ADDIH_A_rlc, ADDIH_rlc, ADDI_rlc
    printSExtImm_16(MI, 2, O);
    return;
    break;
  case 3:
    // ADDSC_A_rr, ADD_F_rrr, CADDN_A_rcr_v110, CADDN_rcr, CADD_A_rcr_v110, C...
    printOperand(MI, 1, O);
    break;
  case 4:
    // ADDSC_A_srrs_v110
    printZExtImm_2(MI, 2, O);
    return;
    break;
  case 5:
    // ANDN_T, AND_ANDN_T, AND_AND_T, AND_NOR_T, AND_OR_T, AND_T, INSN_T, INS...
    printZExtImm_4(MI, 3, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 2, O);
    SStream_concat0(O, ", ");
    printZExtImm_4(MI, 4, O);
    return;
    break;
  case 6:
    // JEQ_A_brr, JEQ_brc, JEQ_brr, JGE_U_brc, JGE_U_brr, JGE_brc, JGE_brr, J...
    printDisp15Imm(MI, 2, O);
    return;
    break;
  case 7:
    // LD_A_bo_bso, LD_A_bo_pos, LD_A_bo_pre, LD_BU_bo_bso, LD_BU_bo_pos, LD_...
    printSExtImm_10(MI, 2, O);
    return;
    break;
  case 8:
    // LD_A_slr, LD_A_slr_post, LD_A_slr_post_v110, LD_A_slr_v110, LD_BU_slr,...
    return;
    break;
  case 9:
    // MADDRS_Q_rrr1_L_L, MADDRS_Q_rrr1_U_U, MADDR_Q_rrr1_L_L, MADDR_Q_rrr1_U...
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 10:
    // MULR_Q_rr1_2LL, MULR_Q_rr1_2UU, MUL_Q_rr1_2LL, MUL_Q_rr1_2UU
    printZExtImm_2(MI, 3, O);
    return;
    break;
  }


  // Fragment 5 encoded into 4 bits for 15 unique commands.
  switch ((Bits >> 32) & 15) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_B_rr_v110, ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ...
    return;
    break;
  case 1:
    // ADDSC_A_rr, ADDSC_A_rr_v110, CADDN_A_rcr_v110, CADDN_rcr, CADD_A_rcr_v...
    SStream_concat0(O, ", ");
    break;
  case 2:
    // MADDMS_H_rrr1_LL, MADDM_H_rrr1_LL, MADDRS_H_rrr1_LL, MADDR_H_rrr1_LL, ...
    SStream_concat0(O, " LL, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 3:
    // MADDMS_H_rrr1_LU, MADDM_H_rrr1_LU, MADDRS_H_rrr1_LU, MADDR_H_rrr1_LU, ...
    SStream_concat0(O, " LU, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 4:
    // MADDMS_H_rrr1_UL, MADDM_H_rrr1_UL, MADDRS_H_rrr1_UL, MADDR_H_rrr1_UL, ...
    SStream_concat0(O, " UL, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 5:
    // MADDMS_H_rrr1_UU, MADDM_H_rrr1_UU, MADDRS_H_rrr1_UU, MADDR_H_rrr1_UU, ...
    SStream_concat0(O, " UU, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 6:
    // MADDRS_H_rrr1_DcEdDaDbUL, MADDR_H_rrr1_DcEdDaDbUL, MSUBRS_H_rrr1_DcEdD...
    SStream_concat0(O, ", UL, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 7:
    // MADDS_Q_rrr1_L, MADDS_Q_rrr1_e_L, MADD_Q_rrr1_L, MADD_Q_rrr1_e_L, MSUB...
    SStream_concat0(O, " L, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 8:
    // MADDS_Q_rrr1_U, MADDS_Q_rrr1_e_U, MADD_Q_rrr1_U, MADD_Q_rrr1_e_U, MSUB...
    SStream_concat0(O, " U, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 9:
    // MULM_H_rr1_LL2e, MULR_H_rr1_LL2e, MUL_H_rr1_LL2e
    SStream_concat0(O, "LL, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 10:
    // MULM_H_rr1_LU2e, MULR_H_rr1_LU2e, MUL_H_rr1_LU2e
    SStream_concat0(O, "LU, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 11:
    // MULM_H_rr1_UL2e, MULR_H_rr1_UL2e, MUL_H_rr1_UL2e
    SStream_concat0(O, "UL, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 12:
    // MULM_H_rr1_UU2e, MULR_H_rr1_UU2e, MUL_H_rr1_UU2e
    SStream_concat0(O, "UU, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 13:
    // MUL_Q_rr1_2_L, MUL_Q_rr1_2_Le
    SStream_concat0(O, "L, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 14:
    // MUL_Q_rr1_2_U, MUL_Q_rr1_2_Ue
    SStream_concat0(O, "U, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  }


  // Fragment 6 encoded into 2 bits for 4 unique commands.
  switch ((Bits >> 36) & 3) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ADDSC_A_rr, ADDSC_A_rr_v110, DEXTR_rrpw, DEXTR_rrrr, EXTR_U_rrpw, EXTR...
    printOperand(MI, 3, O);
    break;
  case 1:
    // CADDN_A_rcr_v110, CADDN_rcr, CADD_A_rcr_v110, CADD_rcr, MADDS_U_rcr, M...
    printSExtImm_9(MI, 3, O);
    return;
    break;
  case 2:
    // DIFSC_A_rr_v110, MUL_Q_rr1_2__, MUL_Q_rr1_2__e
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 3:
    // MADDS_Q_rrr1, MADDS_Q_rrr1_e, MADD_Q_rrr1, MADD_Q_rrr1_e, MSUBS_Q_rrr1...
    printZExtImm_2(MI, 4, O);
    return;
    break;
  }


  // Fragment 7 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 38) & 1) {
    // INSERT_rcpw, INSERT_rcrw, INSERT_rrpw, INSERT_rrrr, INSERT_rrrw
    SStream_concat0(O, ", ");
    printOperand(MI, 4, O);
    return;
  } else {
    // ADDSC_A_rr, ADDSC_A_rr_v110, DEXTR_rrpw, DEXTR_rrrr, EXTR_U_rrpw, EXTR...
    return;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 61 && "Invalid register number!");

  static const char AsmStrs[] = {
  /* 0 */ "d10\0"
  /* 4 */ "e10\0"
  /* 8 */ "p10\0"
  /* 12 */ "a0\0"
  /* 15 */ "d0\0"
  /* 18 */ "e0\0"
  /* 21 */ "p0\0"
  /* 24 */ "A10_A11\0"
  /* 32 */ "a11\0"
  /* 36 */ "d11\0"
  /* 40 */ "A0_A1\0"
  /* 46 */ "a1\0"
  /* 49 */ "d1\0"
  /* 52 */ "a12\0"
  /* 56 */ "d12\0"
  /* 60 */ "e12\0"
  /* 64 */ "p12\0"
  /* 68 */ "a2\0"
  /* 71 */ "d2\0"
  /* 74 */ "e2\0"
  /* 77 */ "p2\0"
  /* 80 */ "A12_A13\0"
  /* 88 */ "a13\0"
  /* 92 */ "d13\0"
  /* 96 */ "A2_A3\0"
  /* 102 */ "a3\0"
  /* 105 */ "d3\0"
  /* 108 */ "a14\0"
  /* 112 */ "d14\0"
  /* 116 */ "e14\0"
  /* 120 */ "p14\0"
  /* 124 */ "a4\0"
  /* 127 */ "d4\0"
  /* 130 */ "e4\0"
  /* 133 */ "p4\0"
  /* 136 */ "A14_A15\0"
  /* 144 */ "a15\0"
  /* 148 */ "d15\0"
  /* 152 */ "A4_A5\0"
  /* 158 */ "a5\0"
  /* 161 */ "d5\0"
  /* 164 */ "a6\0"
  /* 167 */ "d6\0"
  /* 170 */ "e6\0"
  /* 173 */ "p6\0"
  /* 176 */ "A6_A7\0"
  /* 182 */ "a7\0"
  /* 185 */ "d7\0"
  /* 188 */ "a8\0"
  /* 191 */ "d8\0"
  /* 194 */ "e8\0"
  /* 197 */ "p8\0"
  /* 200 */ "A8_A9\0"
  /* 206 */ "a9\0"
  /* 209 */ "d9\0"
  /* 212 */ "pc\0"
  /* 215 */ "pcxi\0"
  /* 220 */ "sp\0"
  /* 223 */ "psw\0"
  /* 227 */ "fcx\0"
};
  static const uint8_t RegAsmOffset[] = {
    227, 212, 215, 223, 12, 46, 68, 102, 124, 158, 164, 182, 188, 206, 
    220, 32, 52, 88, 108, 144, 15, 49, 71, 105, 127, 161, 167, 185, 
    191, 209, 0, 36, 56, 92, 112, 148, 18, 74, 130, 170, 194, 4, 
    60, 116, 21, 77, 133, 173, 197, 8, 64, 120, 40, 96, 152, 176, 
    200, 24, 80, 136, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}
#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

bool printAliasInstr(MCInst *MI, uint64_t Address, SStream *OS) {
  return false;
}

#endif // PRINT_ALIAS_INSTR
