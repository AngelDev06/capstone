/* Capstone Disassembly Engine, http://www.capstone-engine.org */
/* By Nguyen Anh Quynh <aquynh@gmail.com>, 2013-2022, */
/*    Rot127 <unisono@quyllur.org> 2022-2023 */
/* Automatically generated file by the LLVM TableGen Disassembler Backend. */
/* Do not edit. */

#include <capstone/platform.h>
#include <assert.h>

/// getMnemonic - This method is automatically generated by tablegen
/// from the instruction set description.
MnemonicBitsInfo getMnemonic(MCInst *MI, SStream *O) {
  static const char AsmStrs[] = {
  /* 0 */ "ld.a %a15, \0"
  /* 12 */ "st.a %a15, \0"
  /* 24 */ "st.b %a15, \0"
  /* 36 */ "ld.h %a15, \0"
  /* 48 */ "st.h %a15, \0"
  /* 60 */ "ld.bu %a15, \0"
  /* 73 */ "ld.w %a15, \0"
  /* 85 */ "st.w %a15, \0"
  /* 97 */ "sub %d15, \0"
  /* 108 */ "add %d15, \0"
  /* 119 */ "and %d15, \0"
  /* 130 */ "jne %d15, \0"
  /* 141 */ "jeq %d15, \0"
  /* 152 */ "or %d15, \0"
  /* 162 */ "jz.t %d15, \0"
  /* 174 */ "jnz.t %d15, \0"
  /* 187 */ "lt %d15, \0"
  /* 197 */ "mov %d15, \0"
  /* 208 */ "ld.a %a15, %sp, \0"
  /* 225 */ "ld.w %a15, %sp, \0"
  /* 242 */ "sub.a %sp, \0"
  /* 254 */ "st.a %sp, \0"
  /* 265 */ "ftoq31 \0"
  /* 273 */ "CMPSWAP.W \0"
  /* 284 */ "addsc.a \0"
  /* 293 */ "add.a \0"
  /* 300 */ "ld.a \0"
  /* 306 */ "ge.a \0"
  /* 312 */ "jne.a \0"
  /* 319 */ "addih.a \0"
  /* 328 */ "movh.a \0"
  /* 336 */ "jeq.a \0"
  /* 343 */ "lt.a \0"
  /* 349 */ "st.a \0"
  /* 355 */ "mov.a \0"
  /* 362 */ "nez.a \0"
  /* 369 */ "jz.a \0"
  /* 375 */ "jnz.a \0"
  /* 382 */ "eqz.a \0"
  /* 389 */ "mov.aa \0"
  /* 397 */ "ld.da \0"
  /* 404 */ "st.da \0"
  /* 411 */ "lea \0"
  /* 416 */ "lha \0"
  /* 421 */ "sha \0"
  /* 426 */ "ja \0"
  /* 430 */ "jla \0"
  /* 435 */ "fcalla \0"
  /* 443 */ "crc32.b \0"
  /* 452 */ "sub.b \0"
  /* 459 */ "add.b \0"
  /* 466 */ "ld.b \0"
  /* 472 */ "absdif.b \0"
  /* 482 */ "min.b \0"
  /* 489 */ "eq.b \0"
  /* 495 */ "abs.b \0"
  /* 502 */ "sat.b \0"
  /* 509 */ "dvinit.b \0"
  /* 519 */ "lt.b \0"
  /* 525 */ "st.b \0"
  /* 531 */ "max.b \0"
  /* 538 */ "eqany.b \0"
  /* 547 */ "csub \0"
  /* 553 */ "msub \0"
  /* 559 */ "rsub \0"
  /* 565 */ "subc \0"
  /* 571 */ "addc \0"
  /* 577 */ "ld.d \0"
  /* 583 */ "st.d \0"
  /* 589 */ "mov.d \0"
  /* 596 */ "cadd \0"
  /* 602 */ "madd \0"
  /* 608 */ "jned \0"
  /* 614 */ "nand \0"
  /* 620 */ "and.ge \0"
  /* 628 */ "sh.ge \0"
  /* 635 */ "xor.ge \0"
  /* 643 */ "jge \0"
  /* 648 */ "bmerge \0"
  /* 656 */ "disable \0"
  /* 665 */ "shuffle \0"
  /* 674 */ "and.ne \0"
  /* 682 */ "xor.ne \0"
  /* 690 */ "jne \0"
  /* 695 */ "msub.f \0"
  /* 703 */ "madd.f \0"
  /* 711 */ "qseed.f \0"
  /* 720 */ "mul.f \0"
  /* 727 */ "cmp.f \0"
  /* 734 */ "div.f \0"
  /* 741 */ "absdif \0"
  /* 749 */ "q31tof \0"
  /* 757 */ "itof \0"
  /* 763 */ "hptof \0"
  /* 770 */ "utof \0"
  /* 776 */ "sha.h \0"
  /* 783 */ "msub.h \0"
  /* 791 */ "msubad.h \0"
  /* 801 */ "madd.h \0"
  /* 809 */ "ld.h \0"
  /* 815 */ "absdif.h \0"
  /* 825 */ "sh.h \0"
  /* 831 */ "mul.h \0"
  /* 838 */ "msubm.h \0"
  /* 847 */ "msubadm.h \0"
  /* 858 */ "maddm.h \0"
  /* 867 */ "mulm.h \0"
  /* 875 */ "maddsum.h \0"
  /* 886 */ "min.h \0"
  /* 893 */ "clo.h \0"
  /* 900 */ "eq.h \0"
  /* 906 */ "msubr.h \0"
  /* 915 */ "msubadr.h \0"
  /* 926 */ "maddr.h \0"
  /* 935 */ "mulr.h \0"
  /* 943 */ "maddsur.h \0"
  /* 954 */ "abs.h \0"
  /* 961 */ "msubs.h \0"
  /* 970 */ "msubads.h \0"
  /* 981 */ "madds.h \0"
  /* 990 */ "absdifs.h \0"
  /* 1001 */ "cls.h \0"
  /* 1008 */ "msubms.h \0"
  /* 1018 */ "msubadms.h \0"
  /* 1030 */ "maddms.h \0"
  /* 1040 */ "maddsums.h \0"
  /* 1052 */ "msubrs.h \0"
  /* 1062 */ "msubadrs.h \0"
  /* 1074 */ "maddrs.h \0"
  /* 1084 */ "maddsurs.h \0"
  /* 1096 */ "abss.h \0"
  /* 1104 */ "maddsus.h \0"
  /* 1115 */ "sat.h \0"
  /* 1122 */ "dvinit.h \0"
  /* 1132 */ "lt.h \0"
  /* 1138 */ "st.h \0"
  /* 1144 */ "maddsu.h \0"
  /* 1154 */ "max.h \0"
  /* 1161 */ "eqany.h \0"
  /* 1170 */ "clz.h \0"
  /* 1177 */ "addih \0"
  /* 1184 */ "sh \0"
  /* 1188 */ "movh \0"
  /* 1194 */ "addi \0"
  /* 1200 */ "jnei \0"
  /* 1206 */ "ji \0"
  /* 1210 */ "jli \0"
  /* 1215 */ "fcalli \0"
  /* 1223 */ "ftoi \0"
  /* 1229 */ "dvadj \0"
  /* 1236 */ "unpack \0"
  /* 1244 */ "imask \0"
  /* 1251 */ "sel \0"
  /* 1256 */ "updfl \0"
  /* 1263 */ "jl \0"
  /* 1267 */ "fcall \0"
  /* 1274 */ "syscall \0"
  /* 1283 */ "mul \0"
  /* 1288 */ "crcn \0"
  /* 1294 */ "caddn \0"
  /* 1301 */ "andn \0"
  /* 1307 */ "ixmin \0"
  /* 1314 */ "seln \0"
  /* 1320 */ "orn \0"
  /* 1325 */ "cmovn \0"
  /* 1332 */ "clo \0"
  /* 1337 */ "dvstep \0"
  /* 1345 */ "ftohp \0"
  /* 1352 */ "loop \0"
  /* 1358 */ "msub.q \0"
  /* 1366 */ "madd.q \0"
  /* 1374 */ "ld.q \0"
  /* 1380 */ "mul.q \0"
  /* 1387 */ "msubr.q \0"
  /* 1396 */ "maddr.q \0"
  /* 1405 */ "mulr.q \0"
  /* 1413 */ "msubs.q \0"
  /* 1422 */ "madds.q \0"
  /* 1431 */ "msubrs.q \0"
  /* 1441 */ "maddrs.q \0"
  /* 1451 */ "st.q \0"
  /* 1457 */ "and.eq \0"
  /* 1465 */ "sh.eq \0"
  /* 1472 */ "xor.eq \0"
  /* 1480 */ "jeq \0"
  /* 1485 */ "mfcr \0"
  /* 1491 */ "mtcr \0"
  /* 1497 */ "xnor \0"
  /* 1503 */ "xor \0"
  /* 1508 */ "bisr \0"
  /* 1514 */ "dextr \0"
  /* 1521 */ "shas \0"
  /* 1527 */ "abs \0"
  /* 1532 */ "msubs \0"
  /* 1539 */ "rsubs \0"
  /* 1546 */ "madds \0"
  /* 1553 */ "absdifs \0"
  /* 1562 */ "cls \0"
  /* 1567 */ "muls \0"
  /* 1573 */ "abss \0"
  /* 1579 */ "and.and.t \0"
  /* 1590 */ "sh.and.t \0"
  /* 1600 */ "or.and.t \0"
  /* 1610 */ "sh.nand.t \0"
  /* 1621 */ "and.andn.t \0"
  /* 1633 */ "sh.andn.t \0"
  /* 1644 */ "or.andn.t \0"
  /* 1655 */ "sh.orn.t \0"
  /* 1665 */ "insn.t \0"
  /* 1673 */ "and.or.t \0"
  /* 1683 */ "sh.or.t \0"
  /* 1692 */ "or.or.t \0"
  /* 1701 */ "and.nor.t \0"
  /* 1712 */ "sh.nor.t \0"
  /* 1722 */ "or.nor.t \0"
  /* 1732 */ "sh.xnor.t \0"
  /* 1743 */ "sh.xor.t \0"
  /* 1753 */ "ins.t \0"
  /* 1760 */ "st.t \0"
  /* 1766 */ "jz.t \0"
  /* 1772 */ "jnz.t \0"
  /* 1779 */ "addsc.at \0"
  /* 1789 */ "bsplit \0"
  /* 1797 */ "dvinit \0"
  /* 1805 */ "and.lt \0"
  /* 1813 */ "sh.lt \0"
  /* 1820 */ "xor.lt \0"
  /* 1828 */ "jlt \0"
  /* 1833 */ "not \0"
  /* 1838 */ "insert \0"
  /* 1846 */ "ldmst \0"
  /* 1853 */ "madd.u \0"
  /* 1861 */ "and.ge.u \0"
  /* 1871 */ "sh.ge.u \0"
  /* 1880 */ "xor.ge.u \0"
  /* 1890 */ "jge.u \0"
  /* 1897 */ "mul.u \0"
  /* 1904 */ "ixmin.u \0"
  /* 1913 */ "dvstep.u \0"
  /* 1923 */ "extr.u \0"
  /* 1931 */ "rsubs.u \0"
  /* 1940 */ "madds.u \0"
  /* 1949 */ "muls.u \0"
  /* 1957 */ "dvinit.u \0"
  /* 1967 */ "and.lt.u \0"
  /* 1977 */ "sh.lt.u \0"
  /* 1986 */ "xor.lt.u \0"
  /* 1996 */ "jlt.u \0"
  /* 2003 */ "div.u \0"
  /* 2010 */ "mov.u \0"
  /* 2017 */ "ixmax.u \0"
  /* 2026 */ "ld.bu \0"
  /* 2033 */ "min.bu \0"
  /* 2041 */ "sat.bu \0"
  /* 2049 */ "dvinit.bu \0"
  /* 2060 */ "lt.bu \0"
  /* 2067 */ "max.bu \0"
  /* 2075 */ "ld.hu \0"
  /* 2082 */ "min.hu \0"
  /* 2090 */ "subs.hu \0"
  /* 2099 */ "adds.hu \0"
  /* 2108 */ "sat.hu \0"
  /* 2116 */ "dvinit.hu \0"
  /* 2127 */ "lt.hu \0"
  /* 2134 */ "max.hu \0"
  /* 2142 */ "ftou \0"
  /* 2148 */ "loopu \0"
  /* 2155 */ "lt.wu \0"
  /* 2162 */ "div \0"
  /* 2167 */ "cmov \0"
  /* 2173 */ "crc32b.w \0"
  /* 2183 */ "ld.w \0"
  /* 2189 */ "swapmsk.w \0"
  /* 2200 */ "crc32l.w \0"
  /* 2210 */ "swap.w \0"
  /* 2218 */ "eq.w \0"
  /* 2224 */ "lt.w \0"
  /* 2230 */ "popcnt.w \0"
  /* 2240 */ "st.w \0"
  /* 2246 */ "ixmax \0"
  /* 2253 */ "subx \0"
  /* 2259 */ "ldlcx \0"
  /* 2266 */ "stlcx \0"
  /* 2273 */ "lducx \0"
  /* 2280 */ "stucx \0"
  /* 2287 */ "addx \0"
  /* 2293 */ "parity \0"
  /* 2301 */ "ftoq31z \0"
  /* 2310 */ "jgez \0"
  /* 2316 */ "jlez \0"
  /* 2322 */ "ftoiz \0"
  /* 2329 */ "jz \0"
  /* 2333 */ "clz \0"
  /* 2338 */ "jnz \0"
  /* 2343 */ "jgtz \0"
  /* 2349 */ "jltz \0"
  /* 2355 */ "ftouz \0"
  /* 2362 */ "ld.a [+\0"
  /* 2370 */ "st.a [+\0"
  /* 2378 */ "st.b [+\0"
  /* 2386 */ "ld.h [+\0"
  /* 2394 */ "st.h [+\0"
  /* 2402 */ "cache.i [+\0"
  /* 2413 */ "cachei.i [+\0"
  /* 2425 */ "cache.wi [+\0"
  /* 2437 */ "cachei.wi [+\0"
  /* 2450 */ "ld.bu [+\0"
  /* 2459 */ "ld.w [+\0"
  /* 2467 */ "cache.w [+\0"
  /* 2478 */ "cachei.w [+\0"
  /* 2490 */ "st.w [+\0"
  /* 2498 */ "# XRay Function Patchable RET.\0"
  /* 2529 */ "# XRay Typed Event Log.\0"
  /* 2553 */ "# XRay Custom Event Log.\0"
  /* 2578 */ "# XRay Function Enter.\0"
  /* 2601 */ "# XRay Tail Call Exit.\0"
  /* 2624 */ "# XRay Function Exit.\0"
  /* 2646 */ "LIFETIME_END\0"
  /* 2659 */ "PSEUDO_PROBE\0"
  /* 2672 */ "BUNDLE\0"
  /* 2679 */ "DBG_VALUE\0"
  /* 2689 */ "DBG_INSTR_REF\0"
  /* 2703 */ "DBG_PHI\0"
  /* 2711 */ "DBG_LABEL\0"
  /* 2721 */ "LIFETIME_START\0"
  /* 2736 */ "DBG_VALUE_LIST\0"
  /* 2751 */ "st.a [\0"
  /* 2758 */ "st.da [\0"
  /* 2766 */ "st.b [\0"
  /* 2773 */ "st.d [\0"
  /* 2780 */ "st.h [\0"
  /* 2787 */ "cache.i [\0"
  /* 2797 */ "cachei.i [\0"
  /* 2808 */ "cache.wi [\0"
  /* 2819 */ "cachei.wi [\0"
  /* 2831 */ "st.q [\0"
  /* 2838 */ "cache.w [\0"
  /* 2848 */ "cachei.w [\0"
  /* 2859 */ "swapmsk.w [\0"
  /* 2871 */ "swap.w [\0"
  /* 2880 */ "st.w [\0"
  /* 2887 */ "ldlcx [\0"
  /* 2895 */ "stlcx [\0"
  /* 2903 */ "lducx [\0"
  /* 2911 */ "stucx [\0"
  /* 2919 */ "sub.a\0"
  /* 2925 */ "add.a\0"
  /* 2931 */ "mov.a\0"
  /* 2937 */ "dsync\0"
  /* 2943 */ "isync\0"
  /* 2949 */ "rfe\0"
  /* 2953 */ "enable\0"
  /* 2960 */ "disable\0"
  /* 2968 */ "restore\0"
  /* 2976 */ "debug\0"
  /* 2982 */ "relck\0"
  /* 2988 */ "# FEntry call\0"
  /* 3002 */ "rfm\0"
  /* 3006 */ "nop\0"
  /* 3010 */ "fret\0"
  /* 3015 */ "wait\0"
  /* 3020 */ "trapv\0"
  /* 3026 */ "trapsv\0"
  /* 3033 */ "svlcx\0"
};
  static const uint32_t OpInfo0[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// INLINEASM_BR
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    2680U,	// DBG_VALUE
    2737U,	// DBG_VALUE_LIST
    2690U,	// DBG_INSTR_REF
    2704U,	// DBG_PHI
    2712U,	// DBG_LABEL
    0U,	// REG_SEQUENCE
    0U,	// COPY
    2673U,	// BUNDLE
    2722U,	// LIFETIME_START
    2647U,	// LIFETIME_END
    2660U,	// PSEUDO_PROBE
    0U,	// ARITH_FENCE
    0U,	// STACKMAP
    2989U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// PREALLOCATED_SETUP
    0U,	// PREALLOCATED_ARG
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    2579U,	// PATCHABLE_FUNCTION_ENTER
    2499U,	// PATCHABLE_RET
    2625U,	// PATCHABLE_FUNCTION_EXIT
    2602U,	// PATCHABLE_TAIL_CALL
    2554U,	// PATCHABLE_EVENT_CALL
    2530U,	// PATCHABLE_TYPED_EVENT_CALL
    0U,	// ICALL_BRANCH_FUNNEL
    0U,	// G_ASSERT_SEXT
    0U,	// G_ASSERT_ZEXT
    0U,	// G_ASSERT_ALIGN
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_SDIVREM
    0U,	// G_UDIVREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_BUILD_VECTOR
    0U,	// G_BUILD_VECTOR_TRUNC
    0U,	// G_CONCAT_VECTORS
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_FREEZE
    0U,	// G_INTRINSIC_FPTRUNC_ROUND
    0U,	// G_INTRINSIC_TRUNC
    0U,	// G_INTRINSIC_ROUND
    0U,	// G_INTRINSIC_LRINT
    0U,	// G_INTRINSIC_ROUNDEVEN
    0U,	// G_READCYCLECOUNTER
    0U,	// G_LOAD
    0U,	// G_SEXTLOAD
    0U,	// G_ZEXTLOAD
    0U,	// G_INDEXED_LOAD
    0U,	// G_INDEXED_SEXTLOAD
    0U,	// G_INDEXED_ZEXTLOAD
    0U,	// G_STORE
    0U,	// G_INDEXED_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_ATOMICRMW_FADD
    0U,	// G_ATOMICRMW_FSUB
    0U,	// G_ATOMICRMW_FMAX
    0U,	// G_ATOMICRMW_FMIN
    0U,	// G_FENCE
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INVOKE_REGION_START
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_SEXT_INREG
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_FSHL
    0U,	// G_FSHR
    0U,	// G_ROTR
    0U,	// G_ROTL
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDO
    0U,	// G_UADDE
    0U,	// G_USUBO
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SADDE
    0U,	// G_SSUBO
    0U,	// G_SSUBE
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_UADDSAT
    0U,	// G_SADDSAT
    0U,	// G_USUBSAT
    0U,	// G_SSUBSAT
    0U,	// G_USHLSAT
    0U,	// G_SSHLSAT
    0U,	// G_SMULFIX
    0U,	// G_UMULFIX
    0U,	// G_SMULFIXSAT
    0U,	// G_UMULFIXSAT
    0U,	// G_SDIVFIX
    0U,	// G_UDIVFIX
    0U,	// G_SDIVFIXSAT
    0U,	// G_UDIVFIXSAT
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FMAD
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FPOWI
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FLOG10
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_FABS
    0U,	// G_FCOPYSIGN
    0U,	// G_IS_FPCLASS
    0U,	// G_FCANONICALIZE
    0U,	// G_FMINNUM
    0U,	// G_FMAXNUM
    0U,	// G_FMINNUM_IEEE
    0U,	// G_FMAXNUM_IEEE
    0U,	// G_FMINIMUM
    0U,	// G_FMAXIMUM
    0U,	// G_PTR_ADD
    0U,	// G_PTRMASK
    0U,	// G_SMIN
    0U,	// G_SMAX
    0U,	// G_UMIN
    0U,	// G_UMAX
    0U,	// G_ABS
    0U,	// G_LROUND
    0U,	// G_LLROUND
    0U,	// G_BR
    0U,	// G_BRJT
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_CTTZ
    0U,	// G_CTTZ_ZERO_UNDEF
    0U,	// G_CTLZ
    0U,	// G_CTLZ_ZERO_UNDEF
    0U,	// G_CTPOP
    0U,	// G_BSWAP
    0U,	// G_BITREVERSE
    0U,	// G_FCEIL
    0U,	// G_FCOS
    0U,	// G_FSIN
    0U,	// G_FSQRT
    0U,	// G_FFLOOR
    0U,	// G_FRINT
    0U,	// G_FNEARBYINT
    0U,	// G_ADDRSPACE_CAST
    0U,	// G_BLOCK_ADDR
    0U,	// G_JUMP_TABLE
    0U,	// G_DYN_STACKALLOC
    0U,	// G_STRICT_FADD
    0U,	// G_STRICT_FSUB
    0U,	// G_STRICT_FMUL
    0U,	// G_STRICT_FDIV
    0U,	// G_STRICT_FREM
    0U,	// G_STRICT_FMA
    0U,	// G_STRICT_FSQRT
    0U,	// G_READ_REGISTER
    0U,	// G_WRITE_REGISTER
    0U,	// G_MEMCPY
    0U,	// G_MEMCPY_INLINE
    0U,	// G_MEMMOVE
    0U,	// G_MEMSET
    0U,	// G_BZERO
    0U,	// G_VECREDUCE_SEQ_FADD
    0U,	// G_VECREDUCE_SEQ_FMUL
    0U,	// G_VECREDUCE_FADD
    0U,	// G_VECREDUCE_FMUL
    0U,	// G_VECREDUCE_FMAX
    0U,	// G_VECREDUCE_FMIN
    0U,	// G_VECREDUCE_ADD
    0U,	// G_VECREDUCE_MUL
    0U,	// G_VECREDUCE_AND
    0U,	// G_VECREDUCE_OR
    0U,	// G_VECREDUCE_XOR
    0U,	// G_VECREDUCE_SMAX
    0U,	// G_VECREDUCE_SMIN
    0U,	// G_VECREDUCE_UMAX
    0U,	// G_VECREDUCE_UMIN
    0U,	// G_SBFX
    0U,	// G_UBFX
    5087U,	// ABSDIFS_H_rr
    5650U,	// ABSDIFS_rc
    5650U,	// ABSDIFS_rr
    4569U,	// ABSDIF_B_rr
    4912U,	// ABSDIF_H_rr
    268440294U,	// ABSDIF_rc
    4838U,	// ABSDIF_rr
    5193U,	// ABSS_H_rr
    5670U,	// ABSS_rr
    16781808U,	// ABS_B_rr
    16782267U,	// ABS_H_rr
    16782840U,	// ABS_rr
    268440124U,	// ADDC_rc
    4668U,	// ADDC_rr
    536875328U,	// ADDIH_A_rlc
    536876186U,	// ADDIH_rlc
    536876203U,	// ADDI_rlc
    5876U,	// ADDSC_AT_rr
    2953842973U,	// ADDSC_A_rr
    33558813U,	// ADDSC_A_srrs
    5079U,	// ADDS_H
    6196U,	// ADDS_HU
    6038U,	// ADDS_U
    268441494U,	// ADDS_U_rc
    268441100U,	// ADDS_rc
    5644U,	// ADDS_rr
    16782860U,	// ADDS_srr
    268441840U,	// ADDX_rc
    6384U,	// ADDX_rr
    2926U,	// ADD_A_rr
    2101542U,	// ADD_A_src
    16781606U,	// ADD_A_srr
    4556U,	// ADD_B_rr
    806359745U,	// ADD_F_rrr
    4899U,	// ADD_H_rr
    268440150U,	// ADD_rc
    4694U,	// ADD_rr
    2101846U,	// ADD_src
    2101357U,	// ADD_src_15a
    2167382U,	// ADD_src_a15
    16781910U,	// ADD_srr
    16781421U,	// ADD_srr_15a
    16847446U,	// ADD_srr_a15
    1073747546U,	// ANDN_T
    268440854U,	// ANDN_rc
    5398U,	// ANDN_rr
    1073747542U,	// AND_ANDN_T
    1073747500U,	// AND_AND_T
    268441010U,	// AND_EQ_rc
    5554U,	// AND_EQ_rr
    268441414U,	// AND_GE_U_rc
    5958U,	// AND_GE_U_rr
    268440173U,	// AND_GE_rc
    4717U,	// AND_GE_rr
    268441520U,	// AND_LT_U_rc
    6064U,	// AND_LT_U_rr
    268441358U,	// AND_LT_rc
    5902U,	// AND_LT_rr
    268440227U,	// AND_NE_rc
    4771U,	// AND_NE_rr
    1073747622U,	// AND_NOR_T
    1073747594U,	// AND_OR_T
    1073747504U,	// AND_T
    268440168U,	// AND_rc
    4712U,	// AND_rr
    139384U,	// AND_src
    16781928U,	// AND_srr
    13797U,	// BISR_rc
    140773U,	// BISR_sc
    4745U,	// BMAERGE_rr
    16783102U,	// BSPLIT_rr
    3349230U,	// CACHEI_I_bo_bso
    269038U,	// CACHEI_I_bo_pos
    3348846U,	// CACHEI_I_bo_pre
    3349252U,	// CACHEI_WI_bo_bso
    269060U,	// CACHEI_WI_bo_pos
    3348870U,	// CACHEI_WI_bo_pre
    3349281U,	// CACHEI_W_bo_bso
    3480353U,	// CACHEI_W_bo_c
    269089U,	// CACHEI_W_bo_pos
    3348911U,	// CACHEI_W_bo_pre
    400161U,	// CACHEI_W_bo_r
    3349220U,	// CACHE_I_bo_bso
    3480292U,	// CACHE_I_bo_c
    269028U,	// CACHE_I_bo_pos
    3348835U,	// CACHE_I_bo_pre
    400100U,	// CACHE_I_bo_r
    3349241U,	// CACHE_WI_bo_bso
    3480313U,	// CACHE_WI_bo_c
    269049U,	// CACHE_WI_bo_pos
    3348858U,	// CACHE_WI_bo_pre
    400121U,	// CACHE_WI_bo_r
    3349271U,	// CACHE_W_bo_bso
    3480343U,	// CACHE_W_bo_c
    269079U,	// CACHE_W_bo_pos
    3348900U,	// CACHE_W_bo_pre
    400151U,	// CACHE_W_bo_r
    2953843983U,	// CADDN_rcr
    4199695U,	// CADDN_rrr
    2168079U,	// CADDN_src
    2953843285U,	// CADD_rcr
    4198997U,	// CADD_rrr
    2167381U,	// CADD_src
    16821U,	// CALLA_b
    152769U,	// CALLI_rr
    17653U,	// CALL_b
    16782206U,	// CLO_H_rr
    16782645U,	// CLO_rr
    16782314U,	// CLS_H_rr
    16782875U,	// CLS_rr
    16782483U,	// CLZ_H_rr
    16783646U,	// CLZ_rr
    2168110U,	// CMOVN_src
    16848174U,	// CMOVN_srr
    2168952U,	// CMOV_src
    16849016U,	// CMOV_srr
    3367186U,	// CMPSWAP_W_bo_bso
    5595410U,	// CMPSWAP_W_bo_c
    50794770U,	// CMPSWAP_W_bo_pos
    1409814802U,	// CMPSWAP_W_bo_pre
    418066U,	// CMPSWAP_W_bo_r
    4824U,	// CMP_F_rr
    806361214U,	// CRC32B_W_rr
    806361241U,	// CRC32L_W_rr
    806359484U,	// CRC32_B_rr
    4199689U,	// CRCN_rrr
    4198948U,	// CSUBN_rrr
    4198948U,	// CSUB_rrr
    2977U,	// DEBUG_sr
    2977U,	// DEBUG_sys
    2147489259U,	// DEXTR_rrpw
    2147489259U,	// DEXTR_rrrr
    2961U,	// DISABLE_sys
    135825U,	// DISABLE_sys_1
    4831U,	// DIV_F_rr
    6100U,	// DIV_U_rr
    6259U,	// DIV_rr
    2938U,	// DSYNC_sys
    806360270U,	// DVADJ_rrr
    6146U,	// DVINIT_BU_rr
    4606U,	// DVINIT_B_rr
    6213U,	// DVINIT_HU_rr
    5219U,	// DVINIT_H_rr
    6054U,	// DVINIT_U_rr
    5894U,	// DVINIT_rr
    806360954U,	// DVSTEP_U_rrr
    806360378U,	// DVSTEP_rrr
    2954U,	// ENABLE_sys
    268440091U,	// EQANY_B_rc
    4635U,	// EQANY_B_rr
    268440714U,	// EQANY_H_rc
    5258U,	// EQANY_H_rr
    16781695U,	// EQZ_A_rr
    4434U,	// EQ_A_rr
    4586U,	// EQ_B_rr
    4997U,	// EQ_H_rr
    6315U,	// EQ_W_rr
    268441014U,	// EQ_rc
    5558U,	// EQ_rr
    2101391U,	// EQ_src
    16781455U,	// EQ_srr
    2147489668U,	// EXTR_U_rrpw
    6020U,	// EXTR_U_rrrr
    2147489668U,	// EXTR_U_rrrw
    2147489260U,	// EXTR_rrpw
    5612U,	// EXTR_rrrr
    2147489260U,	// EXTR_rrrw
    16820U,	// FCALLA_b
    152768U,	// FCALLA_i
    17652U,	// FCALL_b
    3011U,	// FRET_sr
    3011U,	// FRET_sys
    16782658U,	// FTOHP_rr
    16783635U,	// FTOIZ_rr
    16782536U,	// FTOI_rr
    6398U,	// FTOQ31Z_rr
    4362U,	// FTOQ31_rr
    16783668U,	// FTOUZ_rr
    16783455U,	// FTOU_rr
    4403U,	// GE_A_rr
    268441418U,	// GE_U_rc
    5962U,	// GE_U_rr
    268440177U,	// GE_rc
    4721U,	// GE_rr
    16782076U,	// HPTOF_rr
    2147488989U,	// IMASK_rcpw
    2147488989U,	// IMASK_rcrw
    2147488989U,	// IMASK_rrpw
    2147488989U,	// IMASK_rrrw
    2147489583U,	// INSERT_rcpw
    2147489583U,	// INSERT_rcrr
    2147489583U,	// INSERT_rcrw
    2147489583U,	// INSERT_rrpw
    2147489583U,	// INSERT_rrrr
    2147489583U,	// INSERT_rrrw
    1073747586U,	// INSN_T
    1073747674U,	// INS_T
    2944U,	// ISYNC_sys
    16782070U,	// ITOF_rr
    806361058U,	// IXMAX_U_rrr
    806361287U,	// IXMAX_rrr
    806360945U,	// IXMIN_U_rrr
    806360348U,	// IXMIN_rrr
    16811U,	// JA_b
    4433U,	// JEQ_A_brr
    6313417U,	// JEQ_brc
    5577U,	// JEQ_brr
    28814U,	// JEQ_sbc1
    28814U,	// JEQ_sbc2
    7344270U,	// JEQ_sbr1
    7344270U,	// JEQ_sbr2
    7346439U,	// JGEZ_sbr
    6313827U,	// JGE_U_brc
    5987U,	// JGE_U_brr
    6312580U,	// JGE_brc
    4740U,	// JGE_brr
    7346472U,	// JGTZ_sbr
    152759U,	// JI_rr
    136375U,	// JI_sr
    16815U,	// JLA_b
    7346445U,	// JLEZ_sbr
    152763U,	// JLI_rr
    7346478U,	// JLTZ_sbr
    6313933U,	// JLT_U_brc
    6093U,	// JLT_U_brr
    6313765U,	// JLT_brc
    5925U,	// JLT_brr
    17648U,	// JL_b
    6312545U,	// JNED_brc
    4705U,	// JNED_brr
    6313137U,	// JNEI_brc
    5297U,	// JNEI_brr
    4409U,	// JNE_A_brr
    6312627U,	// JNE_brc
    4787U,	// JNE_brr
    28803U,	// JNE_sbc1
    28803U,	// JNE_sbc2
    7344259U,	// JNE_sbr1
    7344259U,	// JNE_sbr2
    4472U,	// JNZ_A_brr
    7344504U,	// JNZ_A_sbr
    5869U,	// JNZ_T_brn
    16781487U,	// JNZ_T_sbrn
    35107U,	// JNZ_sb
    7346467U,	// JNZ_sbr
    4466U,	// JZ_A_brr
    7344498U,	// JZ_A_sbr
    5863U,	// JZ_T_brn
    16781475U,	// JZ_T_sbrn
    35098U,	// JZ_sb
    7346458U,	// JZ_sbr
    17618U,	// J_b
    34002U,	// J_sb
    137428U,	// LDLCX_abs
    3349320U,	// LDLCX_bo_bso
    25188151U,	// LDMST_abs
    3368759U,	// LDMST_bo_bso
    5596983U,	// LDMST_bo_c
    50796343U,	// LDMST_bo_pos
    1409816375U,	// LDMST_bo_pre
    419639U,	// LDMST_bo_r
    137442U,	// LDUCX_abs
    3349336U,	// LDUCX_bo_bso
    16781613U,	// LD_A_abs
    1409749293U,	// LD_A_bo_bso
    84349229U,	// LD_A_bo_c
    50794797U,	// LD_A_bo_pos
    1409814829U,	// LD_A_bo_pre
    101126445U,	// LD_A_bo_r
    67572013U,	// LD_A_bol
    139473U,	// LD_A_sc
    16781613U,	// LD_A_slr
    16980283U,	// LD_A_slr_post
    594221U,	// LD_A_slro
    9441281U,	// LD_A_sro
    16783339U,	// LD_BU_abs
    1409751019U,	// LD_BU_bo_bso
    84350955U,	// LD_BU_bo_c
    50796523U,	// LD_BU_bo_pos
    1409816555U,	// LD_BU_bo_pre
    101128171U,	// LD_BU_bo_r
    67573739U,	// LD_BU_bol
    16783339U,	// LD_BU_slr
    16980371U,	// LD_BU_slr_post
    595947U,	// LD_BU_slro
    9441341U,	// LD_BU_sro
    16781779U,	// LD_B_abs
    1409749459U,	// LD_B_bo_bso
    84349395U,	// LD_B_bo_c
    50794963U,	// LD_B_bo_pos
    1409814995U,	// LD_B_bo_pre
    101126611U,	// LD_B_bo_r
    67572179U,	// LD_B_bol
    16781710U,	// LD_DA_abs
    1409749390U,	// LD_DA_bo_bso
    84349326U,	// LD_DA_bo_c
    50794894U,	// LD_DA_bo_pos
    1409814926U,	// LD_DA_bo_pre
    101126542U,	// LD_DA_bo_r
    16781890U,	// LD_D_abs
    1409749570U,	// LD_D_bo_bso
    84349506U,	// LD_D_bo_c
    50795074U,	// LD_D_bo_pos
    1409815106U,	// LD_D_bo_pre
    101126722U,	// LD_D_bo_r
    16783388U,	// LD_HU_abs
    1409751068U,	// LD_HU_bo_bso
    84351004U,	// LD_HU_bo_c
    50796572U,	// LD_HU_bo_pos
    1409816604U,	// LD_HU_bo_pre
    101128220U,	// LD_HU_bo_r
    67573788U,	// LD_HU_bol
    16782122U,	// LD_H_abs
    1409749802U,	// LD_H_bo_bso
    84349738U,	// LD_H_bo_c
    50795306U,	// LD_H_bo_pos
    1409815338U,	// LD_H_bo_pre
    101126954U,	// LD_H_bo_r
    67572522U,	// LD_H_bol
    16782122U,	// LD_H_slr
    16980307U,	// LD_H_slr_post
    594730U,	// LD_H_slro
    9441317U,	// LD_H_sro
    16782687U,	// LD_Q_abs
    1409750367U,	// LD_Q_bo_bso
    84350303U,	// LD_Q_bo_c
    50795871U,	// LD_Q_bo_pos
    1409815903U,	// LD_Q_bo_pre
    101127519U,	// LD_Q_bo_r
    16783496U,	// LD_W_abs
    1409751176U,	// LD_W_bo_bso
    84351112U,	// LD_W_bo_c
    50796680U,	// LD_W_bo_pos
    1409816712U,	// LD_W_bo_pre
    101128328U,	// LD_W_bo_r
    67573896U,	// LD_W_bol
    139490U,	// LD_W_sc
    16783496U,	// LD_W_slr
    16980380U,	// LD_W_slr_post
    596104U,	// LD_W_slro
    9441354U,	// LD_W_sro
    16781724U,	// LEA_abs
    1409749404U,	// LEA_bo_bso
    67572124U,	// LEA_bol
    16781729U,	// LHA_abs
    137317U,	// LOOPU_brr
    16782665U,	// LOOP_brr
    7345481U,	// LOOP_sbr
    4440U,	// LT_A_rr
    4616U,	// LT_B
    6157U,	// LT_BU
    5229U,	// LT_H
    6224U,	// LT_HU
    268441524U,	// LT_U_rc
    6068U,	// LT_U_rr
    6321U,	// LT_W
    6252U,	// LT_WU
    268441362U,	// LT_rc
    5906U,	// LT_rr
    2101436U,	// LT_src
    16781500U,	// LT_srr
    4199431U,	// MADDMS_H_rrr1_LL
    2151683079U,	// MADDMS_H_rrr1_LU
    4199431U,	// MADDMS_H_rrr1_UL
    2151683079U,	// MADDMS_H_rrr1_UU
    4199259U,	// MADDM_H_rrr1_LL
    2151682907U,	// MADDM_H_rrr1_LU
    4199259U,	// MADDM_H_rrr1_UL
    2151682907U,	// MADDM_H_rrr1_UU
    4199475U,	// MADDRS_H_rrr1_DcEdDaDbUL
    4199475U,	// MADDRS_H_rrr1_LL
    2151683123U,	// MADDRS_H_rrr1_LU
    4199475U,	// MADDRS_H_rrr1_UL
    2151683123U,	// MADDRS_H_rrr1_UU
    1732253090U,	// MADDRS_Q_rrr1_L_L
    1749030306U,	// MADDRS_Q_rrr1_U_U
    4199327U,	// MADDR_H_rrr1_DcEdDaDbUL
    4199327U,	// MADDR_H_rrr1_LL
    2151682975U,	// MADDR_H_rrr1_LU
    4199327U,	// MADDR_H_rrr1_UL
    2151682975U,	// MADDR_H_rrr1_UU
    1732253045U,	// MADDR_Q_rrr1_L_L
    1749030261U,	// MADDR_Q_rrr1_U_U
    4199441U,	// MADDSUMS_H_rrr1_LL
    2151683089U,	// MADDSUMS_H_rrr1_LU
    4199441U,	// MADDSUMS_H_rrr1_UL
    2151683089U,	// MADDSUMS_H_rrr1_UU
    4199276U,	// MADDSUM_H_rrr1_LL
    2151682924U,	// MADDSUM_H_rrr1_LU
    4199276U,	// MADDSUM_H_rrr1_UL
    2151682924U,	// MADDSUM_H_rrr1_UU
    4199485U,	// MADDSURS_H_rrr1_LL
    2151683133U,	// MADDSURS_H_rrr1_LU
    4199485U,	// MADDSURS_H_rrr1_UL
    2151683133U,	// MADDSURS_H_rrr1_UU
    4199344U,	// MADDSUR_H_rrr1_LL
    2151682992U,	// MADDSUR_H_rrr1_LU
    4199344U,	// MADDSUR_H_rrr1_UL
    2151682992U,	// MADDSUR_H_rrr1_UU
    4199505U,	// MADDSUS_H_rrr1_LL
    2151683153U,	// MADDSUS_H_rrr1_LU
    4199505U,	// MADDSUS_H_rrr1_UL
    2151683153U,	// MADDSUS_H_rrr1_UU
    4199545U,	// MADDSU_H_rrr1_LL
    2151683193U,	// MADDSU_H_rrr1_LU
    4199545U,	// MADDSU_H_rrr1_UL
    2151683193U,	// MADDSU_H_rrr1_UU
    4199382U,	// MADDS_H_rrr1_LL
    2151683030U,	// MADDS_H_rrr1_LU
    4199382U,	// MADDS_H_rrr1_UL
    2151683030U,	// MADDS_H_rrr1_UU
    2151683471U,	// MADDS_Q_rrr1
    2151683471U,	// MADDS_Q_rrr1_L
    1732253071U,	// MADDS_Q_rrr1_L_L
    4199823U,	// MADDS_Q_rrr1_U
    1749030287U,	// MADDS_Q_rrr1_U_U
    2151683471U,	// MADDS_Q_rrr1_e
    2151683471U,	// MADDS_Q_rrr1_e_L
    1732253071U,	// MADDS_Q_rrr1_e_L_L
    4199823U,	// MADDS_Q_rrr1_e_U
    1749030287U,	// MADDS_Q_rrr1_e_U_U
    2953844629U,	// MADDS_U_rcr
    2953844629U,	// MADDS_U_rcr_e
    4200341U,	// MADDS_U_rrr2
    4200341U,	// MADDS_U_rrr2_e
    2953844235U,	// MADDS_rcr
    2953844235U,	// MADDS_rcr_e
    4199947U,	// MADDS_rrr2
    4199947U,	// MADDS_rrr2_e
    4199104U,	// MADD_F_rrr
    4199202U,	// MADD_H_rrr1_LL
    2151682850U,	// MADD_H_rrr1_LU
    4199202U,	// MADD_H_rrr1_UL
    2151682850U,	// MADD_H_rrr1_UU
    2151683415U,	// MADD_Q_rrr1
    2151683415U,	// MADD_Q_rrr1_L
    1732253015U,	// MADD_Q_rrr1_L_L
    4199767U,	// MADD_Q_rrr1_U
    1749030231U,	// MADD_Q_rrr1_U_U
    2151683415U,	// MADD_Q_rrr1_e
    2151683415U,	// MADD_Q_rrr1_e_L
    1732253015U,	// MADD_Q_rrr1_e_L_L
    4199767U,	// MADD_Q_rrr1_e_U
    1749030231U,	// MADD_Q_rrr1_e_U_U
    2953844542U,	// MADD_U_rcr
    4200254U,	// MADD_U_rrr2
    2953843291U,	// MADD_rcr
    2953843291U,	// MADD_rcr_e
    4199003U,	// MADD_rrr2
    4199003U,	// MADD_rrr2_e
    4628U,	// MAX_B
    6164U,	// MAX_BU
    5251U,	// MAX_H
    6231U,	// MAX_HU
    268441572U,	// MAX_U_rc
    6116U,	// MAX_U_rr
    268441801U,	// MAX_rc
    6345U,	// MAX_rr
    10491342U,	// MFCR_rlc
    4579U,	// MIN_B
    6130U,	// MIN_BU
    4983U,	// MIN_H
    6179U,	// MIN_HU
    268441459U,	// MIN_U_rc
    6003U,	// MIN_U_rr
    268440862U,	// MIN_rc
    5406U,	// MIN_rr
    10490185U,	// MOVH_A_rlc
    10491045U,	// MOVH_rlc
    17830278U,	// MOV_AA_rr
    16781702U,	// MOV_AA_srr
    2932U,	// MOV_A_rr
    9441636U,	// MOV_A_src
    16781668U,	// MOV_A_srr
    17830478U,	// MOV_D_rr
    16781902U,	// MOV_D_srr
    10491867U,	// MOV_U_rlc
    10492025U,	// MOV_rlcDc
    10492025U,	// MOV_rlcEc
    17832057U,	// MOV_rrDcDb
    6265U,	// MOV_rrEcDaDb
    17832057U,	// MOV_rrEcDb
    139462U,	// MOV_sc
    2103417U,	// MOV_srcDa
    2103417U,	// MOV_srcEa
    16783481U,	// MOV_srr
    4199419U,	// MSUBADMS_H_rrr1_LL
    2151683067U,	// MSUBADMS_H_rrr1_LU
    4199419U,	// MSUBADMS_H_rrr1_UL
    2151683067U,	// MSUBADMS_H_rrr1_UU
    4199248U,	// MSUBADM_H_rrr1_LL
    2151682896U,	// MSUBADM_H_rrr1_LU
    4199248U,	// MSUBADM_H_rrr1_UL
    2151682896U,	// MSUBADM_H_rrr1_UU
    4199463U,	// MSUBADRS_H_rrr1_LL
    2151683111U,	// MSUBADRS_H_rrr1_LU
    4199463U,	// MSUBADRS_H_rrr1_UL
    2151683111U,	// MSUBADRS_H_rrr1_UU
    4199316U,	// MSUBADR_H_rrr1_LL
    2151682964U,	// MSUBADR_H_rrr1_LU
    4199316U,	// MSUBADR_H_rrr1_UL
    2151682964U,	// MSUBADR_H_rrr1_UU
    4199371U,	// MSUBADS_H_rrr1_LL
    2151683019U,	// MSUBADS_H_rrr1_LU
    4199371U,	// MSUBADS_H_rrr1_UL
    2151683019U,	// MSUBADS_H_rrr1_UU
    4199192U,	// MSUBAD_H_rrr1_LL
    2151682840U,	// MSUBAD_H_rrr1_LU
    4199192U,	// MSUBAD_H_rrr1_UL
    2151682840U,	// MSUBAD_H_rrr1_UU
    4199409U,	// MSUBMS_H_rrr1_LL
    2151683057U,	// MSUBMS_H_rrr1_LU
    4199409U,	// MSUBMS_H_rrr1_UL
    2151683057U,	// MSUBMS_H_rrr1_UU
    4199239U,	// MSUBM_H_rrr1_LL
    2151682887U,	// MSUBM_H_rrr1_LU
    4199239U,	// MSUBM_H_rrr1_UL
    2151682887U,	// MSUBM_H_rrr1_UU
    4199453U,	// MSUBRS_H_rrr1_DcEdDaDbUL
    4199453U,	// MSUBRS_H_rrr1_LL
    2151683101U,	// MSUBRS_H_rrr1_LU
    4199453U,	// MSUBRS_H_rrr1_UL
    2151683101U,	// MSUBRS_H_rrr1_UU
    1732253080U,	// MSUBRS_Q_rrr1_L_L
    1749030296U,	// MSUBRS_Q_rrr1_U_U
    4199307U,	// MSUBR_H_rrr1_DcEdDaDbUL
    4199307U,	// MSUBR_H_rrr1_LL
    2151682955U,	// MSUBR_H_rrr1_LU
    4199307U,	// MSUBR_H_rrr1_UL
    2151682955U,	// MSUBR_H_rrr1_UU
    1732253036U,	// MSUBR_Q_rrr1_L_L
    1749030252U,	// MSUBR_Q_rrr1_U_U
    4199362U,	// MSUBS_H_rrr1_LL
    2151683010U,	// MSUBS_H_rrr1_LU
    4199362U,	// MSUBS_H_rrr1_UL
    2151683010U,	// MSUBS_H_rrr1_UU
    2151683462U,	// MSUBS_Q_rrr1
    2151683462U,	// MSUBS_Q_rrr1_L
    1732253062U,	// MSUBS_Q_rrr1_L_L
    4199814U,	// MSUBS_Q_rrr1_U
    1749030278U,	// MSUBS_Q_rrr1_U_U
    2151683462U,	// MSUBS_Q_rrr1_e
    2151683462U,	// MSUBS_Q_rrr1_e_L
    1732253062U,	// MSUBS_Q_rrr1_e_L_L
    4199814U,	// MSUBS_Q_rrr1_e_U
    1749030278U,	// MSUBS_Q_rrr1_e_U_U
    2953844629U,	// MSUBS_U_rcr
    2953844629U,	// MSUBS_U_rcr_e
    4200341U,	// MSUBS_U_rrr2
    4200341U,	// MSUBS_U_rrr2_e
    2953844221U,	// MSUBS_rcr
    2953844221U,	// MSUBS_rcr_e
    4199933U,	// MSUBS_rrr2
    4199933U,	// MSUBS_rrr2_e
    4199096U,	// MSUB_F_rrr
    4199184U,	// MSUB_H_rrr1_LL
    2151682832U,	// MSUB_H_rrr1_LU
    4199184U,	// MSUB_H_rrr1_UL
    2151682832U,	// MSUB_H_rrr1_UU
    2151683407U,	// MSUB_Q_rrr1
    2151683407U,	// MSUB_Q_rrr1_L
    1732253007U,	// MSUB_Q_rrr1_L_L
    4199759U,	// MSUB_Q_rrr1_U
    1749030223U,	// MSUB_Q_rrr1_U_U
    2151683407U,	// MSUB_Q_rrr1_e
    2151683407U,	// MSUB_Q_rrr1_e_L
    1732253007U,	// MSUB_Q_rrr1_e_L_L
    4199759U,	// MSUB_Q_rrr1_e_U
    1749030223U,	// MSUB_Q_rrr1_e_U_U
    2953844542U,	// MSUB_U_rcr
    4200254U,	// MSUB_U_rrr2
    2953843242U,	// MSUB_rcr
    2953843242U,	// MSUB_rcr_e
    4198954U,	// MSUB_rrr2
    4198954U,	// MSUB_rrr2_e
    38356U,	// MTCR_rlc
    2147488612U,	// MULM_H_rr1_LL2e
    4964U,	// MULM_H_rr1_LU2e
    2147488612U,	// MULM_H_rr1_UL2e
    4964U,	// MULM_H_rr1_UU2e
    2147488680U,	// MULR_H_rr1_LL2e
    5032U,	// MULR_H_rr1_LU2e
    2147488680U,	// MULR_H_rr1_UL2e
    5032U,	// MULR_H_rr1_UU2e
    1996494206U,	// MULR_Q_rr1_2LL
    2013271422U,	// MULR_Q_rr1_2UU
    268441502U,	// MULS_U_rc
    6046U,	// MULS_U_rr2
    268441120U,	// MULS_rc
    5664U,	// MULS_rr2
    4817U,	// MUL_F_rrr
    2147488576U,	// MUL_H_rr1_LL2e
    4928U,	// MUL_H_rr1_LU2e
    2147488576U,	// MUL_H_rr1_UL2e
    4928U,	// MUL_H_rr1_UU2e
    1996494181U,	// MUL_Q_rr1_2LL
    2013271397U,	// MUL_Q_rr1_2UU
    2147489125U,	// MUL_Q_rr1_2_L
    2147489125U,	// MUL_Q_rr1_2_Le
    5477U,	// MUL_Q_rr1_2_U
    5477U,	// MUL_Q_rr1_2_Ue
    2147489125U,	// MUL_Q_rr1_2__
    2147489125U,	// MUL_Q_rr1_2__e
    268441450U,	// MUL_U_rc
    5994U,	// MUL_U_rr2
    268440836U,	// MUL_rc
    268440836U,	// MUL_rc_e
    5380U,	// MUL_rr2
    5380U,	// MUL_rr2_e
    16782596U,	// MUL_srr
    1073747534U,	// NAND_T
    268440167U,	// NAND_rc
    4711U,	// NAND_rr
    16781675U,	// NEZ_A
    4410U,	// NE_A
    268440231U,	// NE_rc
    4775U,	// NE_rr
    3007U,	// NOP_sr
    3007U,	// NOP_sys
    1073747626U,	// NOR_T
    268441051U,	// NOR_rc
    5595U,	// NOR_rr
    137002U,	// NOT_sr
    1073747579U,	// ORN_T
    268440873U,	// ORN_rc
    5417U,	// ORN_rr
    1073747565U,	// OR_ANDN_T
    1073747521U,	// OR_AND_T
    268441026U,	// OR_EQ_rc
    5570U,	// OR_EQ_rr
    268441434U,	// OR_GE_U_rc
    5978U,	// OR_GE_U_rr
    268440189U,	// OR_GE_rc
    4733U,	// OR_GE_rr
    268441540U,	// OR_LT_U_rc
    6084U,	// OR_LT_U_rr
    268441374U,	// OR_LT_rc
    5918U,	// OR_LT_rr
    268440236U,	// OR_NE_rc
    4780U,	// OR_NE_rr
    1073747643U,	// OR_NOR_T
    1073747613U,	// OR_OR_T
    1073747598U,	// OR_T
    268441052U,	// OR_rc
    5596U,	// OR_rr
    139417U,	// OR_sc
    16782812U,	// OR_srr
    806360279U,	// PACK_rrr
    16783606U,	// PARITY_rr
    16783543U,	// POPCNT_W_rr
    4846U,	// Q31TOF_rr
    16782024U,	// QSEED_F_rr
    2969U,	// RESTORE_sys
    3012U,	// RET_sr
    3012U,	// RET_sys
    2950U,	// RFE_sr
    2950U,	// RFE_sys
    3003U,	// RFM_sys
    2983U,	// RSLCX_sys
    2969U,	// RSTV_sys
    268441484U,	// RSUBS_U_rc
    268441092U,	// RSUBS_rc
    268440112U,	// RSUB_rc
    135728U,	// RSUB_sr
    16783354U,	// SAT_BU_rr
    137210U,	// SAT_BU_sr
    16781815U,	// SAT_B_rr
    135671U,	// SAT_B_sr
    16783421U,	// SAT_HU_rr
    137277U,	// SAT_HU_sr
    16782428U,	// SAT_H_rr
    136284U,	// SAT_H_sr
    2953844003U,	// SELN_rcr
    4199715U,	// SELN_rrr
    2953843940U,	// SEL_rcr
    4199652U,	// SEL_rrr
    268441074U,	// SHAS_rc
    5618U,	// SHAS_rr
    268440329U,	// SHA_H_rc
    4873U,	// SHA_H_rr
    268439974U,	// SHA_rc
    4518U,	// SHA_rr
    2101670U,	// SHA_src
    268440218U,	// SHUFFLE_rc
    1073747554U,	// SH_ANDN_T
    1073747511U,	// SH_AND_T
    268441018U,	// SH_EQ_rc
    5562U,	// SH_EQ_rr
    268441424U,	// SH_GE_U_rc
    5968U,	// SH_GE_U_rr
    268440181U,	// SH_GE_rc
    4725U,	// SH_GE_rr
    268440378U,	// SH_H_rc
    4922U,	// SH_H_rr
    268441530U,	// SH_LT_U_rc
    6074U,	// SH_LT_U_rr
    268441366U,	// SH_LT_rc
    5910U,	// SH_LT_rr
    1073747531U,	// SH_NAND_T
    268441366U,	// SH_NE_rc
    5910U,	// SH_NE_rr
    1073747633U,	// SH_NOR_T
    1073747576U,	// SH_ORN_T
    1073747604U,	// SH_OR_T
    1073747653U,	// SH_XNOR_T
    1073747664U,	// SH_XOR_T
    268440737U,	// SH_rc
    5281U,	// SH_rr
    2102433U,	// SH_src
    137435U,	// STLCX_abs
    3349328U,	// STLCX_bo_bso
    137449U,	// STUCX_abs
    3349344U,	// STUCX_bo_bso
    25186654U,	// ST_A_abs
    11754176U,	// ST_A_bo_bso
    84349278U,	// ST_A_bo_c
    59199838U,	// ST_A_bo_pos
    1418219870U,	// ST_A_bo_pre
    101126494U,	// ST_A_bo_r
    806558400U,	// ST_A_bol
    663807U,	// ST_A_sc
    9441293U,	// ST_A_sro
    16781662U,	// ST_A_ssr
    16980291U,	// ST_A_ssr_pos
    40973U,	// ST_A_ssro
    25186830U,	// ST_B_abs
    11754191U,	// ST_B_bo_bso
    84349454U,	// ST_B_bo_c
    59200014U,	// ST_B_bo_pos
    1418220046U,	// ST_B_bo_pre
    101126670U,	// ST_B_bo_r
    806558415U,	// ST_B_bol
    9441305U,	// ST_B_sro
    16781838U,	// ST_B_ssr
    16980299U,	// ST_B_ssr_pos
    40985U,	// ST_B_ssro
    25186709U,	// ST_DA_abs
    11754183U,	// ST_DA_bo_bso
    84349333U,	// ST_DA_bo_c
    59199893U,	// ST_DA_bo_pos
    1418219925U,	// ST_DA_bo_pre
    101126549U,	// ST_DA_bo_r
    25186888U,	// ST_D_abs
    11754198U,	// ST_D_bo_bso
    84349512U,	// ST_D_bo_c
    59200072U,	// ST_D_bo_pos
    1418220104U,	// ST_D_bo_pre
    101126728U,	// ST_D_bo_r
    25187443U,	// ST_H_abs
    11754205U,	// ST_H_bo_bso
    84350067U,	// ST_H_bo_c
    59200627U,	// ST_H_bo_pos
    1418220659U,	// ST_H_bo_pre
    101127283U,	// ST_H_bo_r
    806558429U,	// ST_H_bol
    9441329U,	// ST_H_sro
    16782451U,	// ST_H_ssr
    16980315U,	// ST_H_ssr_pos
    41009U,	// ST_H_ssro
    25187756U,	// ST_Q_abs
    11754256U,	// ST_Q_bo_bso
    84350380U,	// ST_Q_bo_c
    59200940U,	// ST_Q_bo_pos
    1418220972U,	// ST_Q_bo_pre
    101127596U,	// ST_Q_bo_r
    5857U,	// ST_T
    25188545U,	// ST_W_abs
    11754305U,	// ST_W_bo_bso
    84351169U,	// ST_W_bo_c
    59201729U,	// ST_W_bo_pos
    1418221761U,	// ST_W_bo_pre
    101128385U,	// ST_W_bo_r
    806558529U,	// ST_W_bol
    9441366U,	// ST_W_sro
    16783553U,	// ST_W_ssr
    16980411U,	// ST_W_ssr_pos
    41046U,	// ST_W_ssro
    4662U,	// SUBC_rr
    6187U,	// SUBS_HU_rr
    5059U,	// SUBS_H_rr
    6029U,	// SUBS_U_rr
    5630U,	// SUBS_rr
    16782846U,	// SUBS_srr
    6350U,	// SUBX_rr
    2920U,	// SUB_A_rr
    139507U,	// SUB_A_sc
    4549U,	// SUB_B_rr
    806359737U,	// SUB_F_rrr
    4881U,	// SUB_H_rr
    4645U,	// SUB_rr
    16781861U,	// SUB_srr
    16781410U,	// SUB_srr_15a
    16847397U,	// SUB_srr_a15
    3034U,	// SVLCX_sys
    11754284U,	// SWAPMSK_W_bo_bso
    84351118U,	// SWAPMSK_W_bo_c
    59201678U,	// SWAPMSK_W_bo_pos
    1418221710U,	// SWAPMSK_W_bo_pre
    101128334U,	// SWAPMSK_W_bo_r
    25188515U,	// SWAP_W_abs
    11754296U,	// SWAP_W_bo_bso
    84351139U,	// SWAP_W_bo_c
    59201699U,	// SWAP_W_bo_pos
    1418221731U,	// SWAP_W_bo_pre
    101128355U,	// SWAP_W_bo_r
    13563U,	// SYSCALL_rc
    3027U,	// TRAPSV_sys
    3021U,	// TRAPV_sys
    16782549U,	// UNPACK_rr
    152809U,	// UPDFL_rr
    16782083U,	// UTOF_rr
    3016U,	// WAIT_sys
    1073747656U,	// XNOR_T
    268441050U,	// XNOR_rc
    5594U,	// XNOR_rr
    268441025U,	// XOR_EQ_rc
    5569U,	// XOR_EQ_rr
    268441433U,	// XOR_GE_U_rc
    5977U,	// XOR_GE_U_rr
    268440188U,	// XOR_GE_rc
    4732U,	// XOR_GE_rr
    268441539U,	// XOR_LT_U_rc
    6083U,	// XOR_LT_U_rr
    268441373U,	// XOR_LT_rc
    5917U,	// XOR_LT_rr
    268440235U,	// XOR_NE_rc
    4779U,	// XOR_NE_rr
    1073747667U,	// XOR_T
    268441056U,	// XOR_rc
    5600U,	// XOR_rr
    16782816U,	// XOR_srr
  };

  static const uint8_t OpInfo1[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// INLINEASM_BR
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// DBG_VALUE_LIST
    0U,	// DBG_INSTR_REF
    0U,	// DBG_PHI
    0U,	// DBG_LABEL
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// PSEUDO_PROBE
    0U,	// ARITH_FENCE
    0U,	// STACKMAP
    0U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// PREALLOCATED_SETUP
    0U,	// PREALLOCATED_ARG
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    0U,	// PATCHABLE_FUNCTION_ENTER
    0U,	// PATCHABLE_RET
    0U,	// PATCHABLE_FUNCTION_EXIT
    0U,	// PATCHABLE_TAIL_CALL
    0U,	// PATCHABLE_EVENT_CALL
    0U,	// PATCHABLE_TYPED_EVENT_CALL
    0U,	// ICALL_BRANCH_FUNNEL
    0U,	// G_ASSERT_SEXT
    0U,	// G_ASSERT_ZEXT
    0U,	// G_ASSERT_ALIGN
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_SDIVREM
    0U,	// G_UDIVREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_BUILD_VECTOR
    0U,	// G_BUILD_VECTOR_TRUNC
    0U,	// G_CONCAT_VECTORS
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_FREEZE
    0U,	// G_INTRINSIC_FPTRUNC_ROUND
    0U,	// G_INTRINSIC_TRUNC
    0U,	// G_INTRINSIC_ROUND
    0U,	// G_INTRINSIC_LRINT
    0U,	// G_INTRINSIC_ROUNDEVEN
    0U,	// G_READCYCLECOUNTER
    0U,	// G_LOAD
    0U,	// G_SEXTLOAD
    0U,	// G_ZEXTLOAD
    0U,	// G_INDEXED_LOAD
    0U,	// G_INDEXED_SEXTLOAD
    0U,	// G_INDEXED_ZEXTLOAD
    0U,	// G_STORE
    0U,	// G_INDEXED_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_ATOMICRMW_FADD
    0U,	// G_ATOMICRMW_FSUB
    0U,	// G_ATOMICRMW_FMAX
    0U,	// G_ATOMICRMW_FMIN
    0U,	// G_FENCE
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INVOKE_REGION_START
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_SEXT_INREG
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_FSHL
    0U,	// G_FSHR
    0U,	// G_ROTR
    0U,	// G_ROTL
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDO
    0U,	// G_UADDE
    0U,	// G_USUBO
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SADDE
    0U,	// G_SSUBO
    0U,	// G_SSUBE
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_UADDSAT
    0U,	// G_SADDSAT
    0U,	// G_USUBSAT
    0U,	// G_SSUBSAT
    0U,	// G_USHLSAT
    0U,	// G_SSHLSAT
    0U,	// G_SMULFIX
    0U,	// G_UMULFIX
    0U,	// G_SMULFIXSAT
    0U,	// G_UMULFIXSAT
    0U,	// G_SDIVFIX
    0U,	// G_UDIVFIX
    0U,	// G_SDIVFIXSAT
    0U,	// G_UDIVFIXSAT
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FMAD
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FPOWI
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FLOG10
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_FABS
    0U,	// G_FCOPYSIGN
    0U,	// G_IS_FPCLASS
    0U,	// G_FCANONICALIZE
    0U,	// G_FMINNUM
    0U,	// G_FMAXNUM
    0U,	// G_FMINNUM_IEEE
    0U,	// G_FMAXNUM_IEEE
    0U,	// G_FMINIMUM
    0U,	// G_FMAXIMUM
    0U,	// G_PTR_ADD
    0U,	// G_PTRMASK
    0U,	// G_SMIN
    0U,	// G_SMAX
    0U,	// G_UMIN
    0U,	// G_UMAX
    0U,	// G_ABS
    0U,	// G_LROUND
    0U,	// G_LLROUND
    0U,	// G_BR
    0U,	// G_BRJT
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_CTTZ
    0U,	// G_CTTZ_ZERO_UNDEF
    0U,	// G_CTLZ
    0U,	// G_CTLZ_ZERO_UNDEF
    0U,	// G_CTPOP
    0U,	// G_BSWAP
    0U,	// G_BITREVERSE
    0U,	// G_FCEIL
    0U,	// G_FCOS
    0U,	// G_FSIN
    0U,	// G_FSQRT
    0U,	// G_FFLOOR
    0U,	// G_FRINT
    0U,	// G_FNEARBYINT
    0U,	// G_ADDRSPACE_CAST
    0U,	// G_BLOCK_ADDR
    0U,	// G_JUMP_TABLE
    0U,	// G_DYN_STACKALLOC
    0U,	// G_STRICT_FADD
    0U,	// G_STRICT_FSUB
    0U,	// G_STRICT_FMUL
    0U,	// G_STRICT_FDIV
    0U,	// G_STRICT_FREM
    0U,	// G_STRICT_FMA
    0U,	// G_STRICT_FSQRT
    0U,	// G_READ_REGISTER
    0U,	// G_WRITE_REGISTER
    0U,	// G_MEMCPY
    0U,	// G_MEMCPY_INLINE
    0U,	// G_MEMMOVE
    0U,	// G_MEMSET
    0U,	// G_BZERO
    0U,	// G_VECREDUCE_SEQ_FADD
    0U,	// G_VECREDUCE_SEQ_FMUL
    0U,	// G_VECREDUCE_FADD
    0U,	// G_VECREDUCE_FMUL
    0U,	// G_VECREDUCE_FMAX
    0U,	// G_VECREDUCE_FMIN
    0U,	// G_VECREDUCE_ADD
    0U,	// G_VECREDUCE_MUL
    0U,	// G_VECREDUCE_AND
    0U,	// G_VECREDUCE_OR
    0U,	// G_VECREDUCE_XOR
    0U,	// G_VECREDUCE_SMAX
    0U,	// G_VECREDUCE_SMIN
    0U,	// G_VECREDUCE_UMAX
    0U,	// G_VECREDUCE_UMIN
    0U,	// G_SBFX
    0U,	// G_UBFX
    0U,	// ABSDIFS_H_rr
    0U,	// ABSDIFS_rc
    0U,	// ABSDIFS_rr
    0U,	// ABSDIF_B_rr
    0U,	// ABSDIF_H_rr
    0U,	// ABSDIF_rc
    0U,	// ABSDIF_rr
    0U,	// ABSS_H_rr
    0U,	// ABSS_rr
    0U,	// ABS_B_rr
    0U,	// ABS_H_rr
    0U,	// ABS_rr
    0U,	// ADDC_rc
    0U,	// ADDC_rr
    0U,	// ADDIH_A_rlc
    0U,	// ADDIH_rlc
    0U,	// ADDI_rlc
    0U,	// ADDSC_AT_rr
    0U,	// ADDSC_A_rr
    0U,	// ADDSC_A_srrs
    0U,	// ADDS_H
    0U,	// ADDS_HU
    0U,	// ADDS_U
    0U,	// ADDS_U_rc
    0U,	// ADDS_rc
    0U,	// ADDS_rr
    0U,	// ADDS_srr
    0U,	// ADDX_rc
    0U,	// ADDX_rr
    0U,	// ADD_A_rr
    0U,	// ADD_A_src
    0U,	// ADD_A_srr
    0U,	// ADD_B_rr
    0U,	// ADD_F_rrr
    0U,	// ADD_H_rr
    0U,	// ADD_rc
    0U,	// ADD_rr
    0U,	// ADD_src
    0U,	// ADD_src_15a
    0U,	// ADD_src_a15
    0U,	// ADD_srr
    0U,	// ADD_srr_15a
    0U,	// ADD_srr_a15
    0U,	// ANDN_T
    0U,	// ANDN_rc
    0U,	// ANDN_rr
    0U,	// AND_ANDN_T
    0U,	// AND_AND_T
    0U,	// AND_EQ_rc
    0U,	// AND_EQ_rr
    0U,	// AND_GE_U_rc
    0U,	// AND_GE_U_rr
    0U,	// AND_GE_rc
    0U,	// AND_GE_rr
    0U,	// AND_LT_U_rc
    0U,	// AND_LT_U_rr
    0U,	// AND_LT_rc
    0U,	// AND_LT_rr
    0U,	// AND_NE_rc
    0U,	// AND_NE_rr
    0U,	// AND_NOR_T
    0U,	// AND_OR_T
    0U,	// AND_T
    0U,	// AND_rc
    0U,	// AND_rr
    0U,	// AND_src
    0U,	// AND_srr
    0U,	// BISR_rc
    0U,	// BISR_sc
    0U,	// BMAERGE_rr
    0U,	// BSPLIT_rr
    0U,	// CACHEI_I_bo_bso
    0U,	// CACHEI_I_bo_pos
    0U,	// CACHEI_I_bo_pre
    0U,	// CACHEI_WI_bo_bso
    0U,	// CACHEI_WI_bo_pos
    0U,	// CACHEI_WI_bo_pre
    0U,	// CACHEI_W_bo_bso
    0U,	// CACHEI_W_bo_c
    0U,	// CACHEI_W_bo_pos
    0U,	// CACHEI_W_bo_pre
    0U,	// CACHEI_W_bo_r
    0U,	// CACHE_I_bo_bso
    0U,	// CACHE_I_bo_c
    0U,	// CACHE_I_bo_pos
    0U,	// CACHE_I_bo_pre
    0U,	// CACHE_I_bo_r
    0U,	// CACHE_WI_bo_bso
    0U,	// CACHE_WI_bo_c
    0U,	// CACHE_WI_bo_pos
    0U,	// CACHE_WI_bo_pre
    0U,	// CACHE_WI_bo_r
    0U,	// CACHE_W_bo_bso
    0U,	// CACHE_W_bo_c
    0U,	// CACHE_W_bo_pos
    0U,	// CACHE_W_bo_pre
    0U,	// CACHE_W_bo_r
    8U,	// CADDN_rcr
    0U,	// CADDN_rrr
    0U,	// CADDN_src
    8U,	// CADD_rcr
    0U,	// CADD_rrr
    0U,	// CADD_src
    0U,	// CALLA_b
    0U,	// CALLI_rr
    0U,	// CALL_b
    0U,	// CLO_H_rr
    0U,	// CLO_rr
    0U,	// CLS_H_rr
    0U,	// CLS_rr
    0U,	// CLZ_H_rr
    0U,	// CLZ_rr
    0U,	// CMOVN_src
    0U,	// CMOVN_srr
    0U,	// CMOV_src
    0U,	// CMOV_srr
    0U,	// CMPSWAP_W_bo_bso
    0U,	// CMPSWAP_W_bo_c
    0U,	// CMPSWAP_W_bo_pos
    0U,	// CMPSWAP_W_bo_pre
    0U,	// CMPSWAP_W_bo_r
    0U,	// CMP_F_rr
    0U,	// CRC32B_W_rr
    0U,	// CRC32L_W_rr
    0U,	// CRC32_B_rr
    0U,	// CRCN_rrr
    0U,	// CSUBN_rrr
    0U,	// CSUB_rrr
    0U,	// DEBUG_sr
    0U,	// DEBUG_sys
    0U,	// DEXTR_rrpw
    0U,	// DEXTR_rrrr
    0U,	// DISABLE_sys
    0U,	// DISABLE_sys_1
    0U,	// DIV_F_rr
    0U,	// DIV_U_rr
    0U,	// DIV_rr
    0U,	// DSYNC_sys
    0U,	// DVADJ_rrr
    0U,	// DVINIT_BU_rr
    0U,	// DVINIT_B_rr
    0U,	// DVINIT_HU_rr
    0U,	// DVINIT_H_rr
    0U,	// DVINIT_U_rr
    0U,	// DVINIT_rr
    0U,	// DVSTEP_U_rrr
    0U,	// DVSTEP_rrr
    0U,	// ENABLE_sys
    0U,	// EQANY_B_rc
    0U,	// EQANY_B_rr
    0U,	// EQANY_H_rc
    0U,	// EQANY_H_rr
    0U,	// EQZ_A_rr
    0U,	// EQ_A_rr
    0U,	// EQ_B_rr
    0U,	// EQ_H_rr
    0U,	// EQ_W_rr
    0U,	// EQ_rc
    0U,	// EQ_rr
    0U,	// EQ_src
    0U,	// EQ_srr
    0U,	// EXTR_U_rrpw
    0U,	// EXTR_U_rrrr
    0U,	// EXTR_U_rrrw
    0U,	// EXTR_rrpw
    0U,	// EXTR_rrrr
    0U,	// EXTR_rrrw
    0U,	// FCALLA_b
    0U,	// FCALLA_i
    0U,	// FCALL_b
    0U,	// FRET_sr
    0U,	// FRET_sys
    0U,	// FTOHP_rr
    0U,	// FTOIZ_rr
    0U,	// FTOI_rr
    0U,	// FTOQ31Z_rr
    0U,	// FTOQ31_rr
    0U,	// FTOUZ_rr
    0U,	// FTOU_rr
    0U,	// GE_A_rr
    0U,	// GE_U_rc
    0U,	// GE_U_rr
    0U,	// GE_rc
    0U,	// GE_rr
    0U,	// HPTOF_rr
    0U,	// IMASK_rcpw
    0U,	// IMASK_rcrw
    0U,	// IMASK_rrpw
    0U,	// IMASK_rrrw
    32U,	// INSERT_rcpw
    0U,	// INSERT_rcrr
    32U,	// INSERT_rcrw
    32U,	// INSERT_rrpw
    32U,	// INSERT_rrrr
    32U,	// INSERT_rrrw
    0U,	// INSN_T
    0U,	// INS_T
    0U,	// ISYNC_sys
    0U,	// ITOF_rr
    0U,	// IXMAX_U_rrr
    0U,	// IXMAX_rrr
    0U,	// IXMIN_U_rrr
    0U,	// IXMIN_rrr
    0U,	// JA_b
    0U,	// JEQ_A_brr
    0U,	// JEQ_brc
    0U,	// JEQ_brr
    0U,	// JEQ_sbc1
    0U,	// JEQ_sbc2
    0U,	// JEQ_sbr1
    0U,	// JEQ_sbr2
    0U,	// JGEZ_sbr
    0U,	// JGE_U_brc
    0U,	// JGE_U_brr
    0U,	// JGE_brc
    0U,	// JGE_brr
    0U,	// JGTZ_sbr
    0U,	// JI_rr
    0U,	// JI_sr
    0U,	// JLA_b
    0U,	// JLEZ_sbr
    0U,	// JLI_rr
    0U,	// JLTZ_sbr
    0U,	// JLT_U_brc
    0U,	// JLT_U_brr
    0U,	// JLT_brc
    0U,	// JLT_brr
    0U,	// JL_b
    0U,	// JNED_brc
    0U,	// JNED_brr
    0U,	// JNEI_brc
    0U,	// JNEI_brr
    0U,	// JNE_A_brr
    0U,	// JNE_brc
    0U,	// JNE_brr
    0U,	// JNE_sbc1
    0U,	// JNE_sbc2
    0U,	// JNE_sbr1
    0U,	// JNE_sbr2
    0U,	// JNZ_A_brr
    0U,	// JNZ_A_sbr
    0U,	// JNZ_T_brn
    0U,	// JNZ_T_sbrn
    0U,	// JNZ_sb
    0U,	// JNZ_sbr
    0U,	// JZ_A_brr
    0U,	// JZ_A_sbr
    0U,	// JZ_T_brn
    0U,	// JZ_T_sbrn
    0U,	// JZ_sb
    0U,	// JZ_sbr
    0U,	// J_b
    0U,	// J_sb
    0U,	// LDLCX_abs
    0U,	// LDLCX_bo_bso
    0U,	// LDMST_abs
    0U,	// LDMST_bo_bso
    0U,	// LDMST_bo_c
    0U,	// LDMST_bo_pos
    0U,	// LDMST_bo_pre
    0U,	// LDMST_bo_r
    0U,	// LDUCX_abs
    0U,	// LDUCX_bo_bso
    0U,	// LD_A_abs
    0U,	// LD_A_bo_bso
    0U,	// LD_A_bo_c
    0U,	// LD_A_bo_pos
    0U,	// LD_A_bo_pre
    0U,	// LD_A_bo_r
    0U,	// LD_A_bol
    0U,	// LD_A_sc
    0U,	// LD_A_slr
    0U,	// LD_A_slr_post
    0U,	// LD_A_slro
    0U,	// LD_A_sro
    0U,	// LD_BU_abs
    0U,	// LD_BU_bo_bso
    0U,	// LD_BU_bo_c
    0U,	// LD_BU_bo_pos
    0U,	// LD_BU_bo_pre
    0U,	// LD_BU_bo_r
    0U,	// LD_BU_bol
    0U,	// LD_BU_slr
    0U,	// LD_BU_slr_post
    0U,	// LD_BU_slro
    0U,	// LD_BU_sro
    0U,	// LD_B_abs
    0U,	// LD_B_bo_bso
    0U,	// LD_B_bo_c
    0U,	// LD_B_bo_pos
    0U,	// LD_B_bo_pre
    0U,	// LD_B_bo_r
    0U,	// LD_B_bol
    0U,	// LD_DA_abs
    0U,	// LD_DA_bo_bso
    0U,	// LD_DA_bo_c
    0U,	// LD_DA_bo_pos
    0U,	// LD_DA_bo_pre
    0U,	// LD_DA_bo_r
    0U,	// LD_D_abs
    0U,	// LD_D_bo_bso
    0U,	// LD_D_bo_c
    0U,	// LD_D_bo_pos
    0U,	// LD_D_bo_pre
    0U,	// LD_D_bo_r
    0U,	// LD_HU_abs
    0U,	// LD_HU_bo_bso
    0U,	// LD_HU_bo_c
    0U,	// LD_HU_bo_pos
    0U,	// LD_HU_bo_pre
    0U,	// LD_HU_bo_r
    0U,	// LD_HU_bol
    0U,	// LD_H_abs
    0U,	// LD_H_bo_bso
    0U,	// LD_H_bo_c
    0U,	// LD_H_bo_pos
    0U,	// LD_H_bo_pre
    0U,	// LD_H_bo_r
    0U,	// LD_H_bol
    0U,	// LD_H_slr
    0U,	// LD_H_slr_post
    0U,	// LD_H_slro
    0U,	// LD_H_sro
    0U,	// LD_Q_abs
    0U,	// LD_Q_bo_bso
    0U,	// LD_Q_bo_c
    0U,	// LD_Q_bo_pos
    0U,	// LD_Q_bo_pre
    0U,	// LD_Q_bo_r
    0U,	// LD_W_abs
    0U,	// LD_W_bo_bso
    0U,	// LD_W_bo_c
    0U,	// LD_W_bo_pos
    0U,	// LD_W_bo_pre
    0U,	// LD_W_bo_r
    0U,	// LD_W_bol
    0U,	// LD_W_sc
    0U,	// LD_W_slr
    0U,	// LD_W_slr_post
    0U,	// LD_W_slro
    0U,	// LD_W_sro
    0U,	// LEA_abs
    0U,	// LEA_bo_bso
    0U,	// LEA_bol
    0U,	// LHA_abs
    0U,	// LOOPU_brr
    0U,	// LOOP_brr
    0U,	// LOOP_sbr
    0U,	// LT_A_rr
    0U,	// LT_B
    0U,	// LT_BU
    0U,	// LT_H
    0U,	// LT_HU
    0U,	// LT_U_rc
    0U,	// LT_U_rr
    0U,	// LT_W
    0U,	// LT_WU
    0U,	// LT_rc
    0U,	// LT_rr
    0U,	// LT_src
    0U,	// LT_srr
    1U,	// MADDMS_H_rrr1_LL
    1U,	// MADDMS_H_rrr1_LU
    2U,	// MADDMS_H_rrr1_UL
    2U,	// MADDMS_H_rrr1_UU
    1U,	// MADDM_H_rrr1_LL
    1U,	// MADDM_H_rrr1_LU
    2U,	// MADDM_H_rrr1_UL
    2U,	// MADDM_H_rrr1_UU
    3U,	// MADDRS_H_rrr1_DcEdDaDbUL
    1U,	// MADDRS_H_rrr1_LL
    1U,	// MADDRS_H_rrr1_LU
    2U,	// MADDRS_H_rrr1_UL
    2U,	// MADDRS_H_rrr1_UU
    0U,	// MADDRS_Q_rrr1_L_L
    0U,	// MADDRS_Q_rrr1_U_U
    3U,	// MADDR_H_rrr1_DcEdDaDbUL
    1U,	// MADDR_H_rrr1_LL
    1U,	// MADDR_H_rrr1_LU
    2U,	// MADDR_H_rrr1_UL
    2U,	// MADDR_H_rrr1_UU
    0U,	// MADDR_Q_rrr1_L_L
    0U,	// MADDR_Q_rrr1_U_U
    1U,	// MADDSUMS_H_rrr1_LL
    1U,	// MADDSUMS_H_rrr1_LU
    2U,	// MADDSUMS_H_rrr1_UL
    2U,	// MADDSUMS_H_rrr1_UU
    1U,	// MADDSUM_H_rrr1_LL
    1U,	// MADDSUM_H_rrr1_LU
    2U,	// MADDSUM_H_rrr1_UL
    2U,	// MADDSUM_H_rrr1_UU
    1U,	// MADDSURS_H_rrr1_LL
    1U,	// MADDSURS_H_rrr1_LU
    2U,	// MADDSURS_H_rrr1_UL
    2U,	// MADDSURS_H_rrr1_UU
    1U,	// MADDSUR_H_rrr1_LL
    1U,	// MADDSUR_H_rrr1_LU
    2U,	// MADDSUR_H_rrr1_UL
    2U,	// MADDSUR_H_rrr1_UU
    1U,	// MADDSUS_H_rrr1_LL
    1U,	// MADDSUS_H_rrr1_LU
    2U,	// MADDSUS_H_rrr1_UL
    2U,	// MADDSUS_H_rrr1_UU
    1U,	// MADDSU_H_rrr1_LL
    1U,	// MADDSU_H_rrr1_LU
    2U,	// MADDSU_H_rrr1_UL
    2U,	// MADDSU_H_rrr1_UU
    1U,	// MADDS_H_rrr1_LL
    1U,	// MADDS_H_rrr1_LU
    2U,	// MADDS_H_rrr1_UL
    2U,	// MADDS_H_rrr1_UU
    16U,	// MADDS_Q_rrr1
    3U,	// MADDS_Q_rrr1_L
    0U,	// MADDS_Q_rrr1_L_L
    4U,	// MADDS_Q_rrr1_U
    0U,	// MADDS_Q_rrr1_U_U
    16U,	// MADDS_Q_rrr1_e
    3U,	// MADDS_Q_rrr1_e_L
    0U,	// MADDS_Q_rrr1_e_L_L
    4U,	// MADDS_Q_rrr1_e_U
    0U,	// MADDS_Q_rrr1_e_U_U
    8U,	// MADDS_U_rcr
    8U,	// MADDS_U_rcr_e
    0U,	// MADDS_U_rrr2
    0U,	// MADDS_U_rrr2_e
    8U,	// MADDS_rcr
    8U,	// MADDS_rcr_e
    0U,	// MADDS_rrr2
    0U,	// MADDS_rrr2_e
    0U,	// MADD_F_rrr
    1U,	// MADD_H_rrr1_LL
    1U,	// MADD_H_rrr1_LU
    2U,	// MADD_H_rrr1_UL
    2U,	// MADD_H_rrr1_UU
    16U,	// MADD_Q_rrr1
    3U,	// MADD_Q_rrr1_L
    0U,	// MADD_Q_rrr1_L_L
    4U,	// MADD_Q_rrr1_U
    0U,	// MADD_Q_rrr1_U_U
    16U,	// MADD_Q_rrr1_e
    3U,	// MADD_Q_rrr1_e_L
    0U,	// MADD_Q_rrr1_e_L_L
    4U,	// MADD_Q_rrr1_e_U
    0U,	// MADD_Q_rrr1_e_U_U
    8U,	// MADD_U_rcr
    0U,	// MADD_U_rrr2
    8U,	// MADD_rcr
    8U,	// MADD_rcr_e
    0U,	// MADD_rrr2
    0U,	// MADD_rrr2_e
    0U,	// MAX_B
    0U,	// MAX_BU
    0U,	// MAX_H
    0U,	// MAX_HU
    0U,	// MAX_U_rc
    0U,	// MAX_U_rr
    0U,	// MAX_rc
    0U,	// MAX_rr
    0U,	// MFCR_rlc
    0U,	// MIN_B
    0U,	// MIN_BU
    0U,	// MIN_H
    0U,	// MIN_HU
    0U,	// MIN_U_rc
    0U,	// MIN_U_rr
    0U,	// MIN_rc
    0U,	// MIN_rr
    0U,	// MOVH_A_rlc
    0U,	// MOVH_rlc
    0U,	// MOV_AA_rr
    0U,	// MOV_AA_srr
    0U,	// MOV_A_rr
    0U,	// MOV_A_src
    0U,	// MOV_A_srr
    0U,	// MOV_D_rr
    0U,	// MOV_D_srr
    0U,	// MOV_U_rlc
    0U,	// MOV_rlcDc
    0U,	// MOV_rlcEc
    0U,	// MOV_rrDcDb
    0U,	// MOV_rrEcDaDb
    0U,	// MOV_rrEcDb
    0U,	// MOV_sc
    0U,	// MOV_srcDa
    0U,	// MOV_srcEa
    0U,	// MOV_srr
    1U,	// MSUBADMS_H_rrr1_LL
    1U,	// MSUBADMS_H_rrr1_LU
    2U,	// MSUBADMS_H_rrr1_UL
    2U,	// MSUBADMS_H_rrr1_UU
    1U,	// MSUBADM_H_rrr1_LL
    1U,	// MSUBADM_H_rrr1_LU
    2U,	// MSUBADM_H_rrr1_UL
    2U,	// MSUBADM_H_rrr1_UU
    1U,	// MSUBADRS_H_rrr1_LL
    1U,	// MSUBADRS_H_rrr1_LU
    2U,	// MSUBADRS_H_rrr1_UL
    2U,	// MSUBADRS_H_rrr1_UU
    1U,	// MSUBADR_H_rrr1_LL
    1U,	// MSUBADR_H_rrr1_LU
    2U,	// MSUBADR_H_rrr1_UL
    2U,	// MSUBADR_H_rrr1_UU
    1U,	// MSUBADS_H_rrr1_LL
    1U,	// MSUBADS_H_rrr1_LU
    2U,	// MSUBADS_H_rrr1_UL
    2U,	// MSUBADS_H_rrr1_UU
    1U,	// MSUBAD_H_rrr1_LL
    1U,	// MSUBAD_H_rrr1_LU
    2U,	// MSUBAD_H_rrr1_UL
    2U,	// MSUBAD_H_rrr1_UU
    1U,	// MSUBMS_H_rrr1_LL
    1U,	// MSUBMS_H_rrr1_LU
    2U,	// MSUBMS_H_rrr1_UL
    2U,	// MSUBMS_H_rrr1_UU
    1U,	// MSUBM_H_rrr1_LL
    1U,	// MSUBM_H_rrr1_LU
    2U,	// MSUBM_H_rrr1_UL
    2U,	// MSUBM_H_rrr1_UU
    3U,	// MSUBRS_H_rrr1_DcEdDaDbUL
    1U,	// MSUBRS_H_rrr1_LL
    1U,	// MSUBRS_H_rrr1_LU
    2U,	// MSUBRS_H_rrr1_UL
    2U,	// MSUBRS_H_rrr1_UU
    0U,	// MSUBRS_Q_rrr1_L_L
    0U,	// MSUBRS_Q_rrr1_U_U
    3U,	// MSUBR_H_rrr1_DcEdDaDbUL
    1U,	// MSUBR_H_rrr1_LL
    1U,	// MSUBR_H_rrr1_LU
    2U,	// MSUBR_H_rrr1_UL
    2U,	// MSUBR_H_rrr1_UU
    0U,	// MSUBR_Q_rrr1_L_L
    0U,	// MSUBR_Q_rrr1_U_U
    1U,	// MSUBS_H_rrr1_LL
    1U,	// MSUBS_H_rrr1_LU
    2U,	// MSUBS_H_rrr1_UL
    2U,	// MSUBS_H_rrr1_UU
    16U,	// MSUBS_Q_rrr1
    3U,	// MSUBS_Q_rrr1_L
    0U,	// MSUBS_Q_rrr1_L_L
    4U,	// MSUBS_Q_rrr1_U
    0U,	// MSUBS_Q_rrr1_U_U
    16U,	// MSUBS_Q_rrr1_e
    3U,	// MSUBS_Q_rrr1_e_L
    0U,	// MSUBS_Q_rrr1_e_L_L
    4U,	// MSUBS_Q_rrr1_e_U
    0U,	// MSUBS_Q_rrr1_e_U_U
    8U,	// MSUBS_U_rcr
    8U,	// MSUBS_U_rcr_e
    0U,	// MSUBS_U_rrr2
    0U,	// MSUBS_U_rrr2_e
    8U,	// MSUBS_rcr
    8U,	// MSUBS_rcr_e
    0U,	// MSUBS_rrr2
    0U,	// MSUBS_rrr2_e
    0U,	// MSUB_F_rrr
    1U,	// MSUB_H_rrr1_LL
    1U,	// MSUB_H_rrr1_LU
    2U,	// MSUB_H_rrr1_UL
    2U,	// MSUB_H_rrr1_UU
    16U,	// MSUB_Q_rrr1
    3U,	// MSUB_Q_rrr1_L
    0U,	// MSUB_Q_rrr1_L_L
    4U,	// MSUB_Q_rrr1_U
    0U,	// MSUB_Q_rrr1_U_U
    16U,	// MSUB_Q_rrr1_e
    3U,	// MSUB_Q_rrr1_e_L
    0U,	// MSUB_Q_rrr1_e_L_L
    4U,	// MSUB_Q_rrr1_e_U
    0U,	// MSUB_Q_rrr1_e_U_U
    8U,	// MSUB_U_rcr
    0U,	// MSUB_U_rrr2
    8U,	// MSUB_rcr
    8U,	// MSUB_rcr_e
    0U,	// MSUB_rrr2
    0U,	// MSUB_rrr2_e
    0U,	// MTCR_rlc
    4U,	// MULM_H_rr1_LL2e
    5U,	// MULM_H_rr1_LU2e
    5U,	// MULM_H_rr1_UL2e
    6U,	// MULM_H_rr1_UU2e
    4U,	// MULR_H_rr1_LL2e
    5U,	// MULR_H_rr1_LU2e
    5U,	// MULR_H_rr1_UL2e
    6U,	// MULR_H_rr1_UU2e
    0U,	// MULR_Q_rr1_2LL
    0U,	// MULR_Q_rr1_2UU
    0U,	// MULS_U_rc
    0U,	// MULS_U_rr2
    0U,	// MULS_rc
    0U,	// MULS_rr2
    0U,	// MUL_F_rrr
    4U,	// MUL_H_rr1_LL2e
    5U,	// MUL_H_rr1_LU2e
    5U,	// MUL_H_rr1_UL2e
    6U,	// MUL_H_rr1_UU2e
    0U,	// MUL_Q_rr1_2LL
    0U,	// MUL_Q_rr1_2UU
    6U,	// MUL_Q_rr1_2_L
    6U,	// MUL_Q_rr1_2_Le
    7U,	// MUL_Q_rr1_2_U
    7U,	// MUL_Q_rr1_2_Ue
    24U,	// MUL_Q_rr1_2__
    24U,	// MUL_Q_rr1_2__e
    0U,	// MUL_U_rc
    0U,	// MUL_U_rr2
    0U,	// MUL_rc
    0U,	// MUL_rc_e
    0U,	// MUL_rr2
    0U,	// MUL_rr2_e
    0U,	// MUL_srr
    0U,	// NAND_T
    0U,	// NAND_rc
    0U,	// NAND_rr
    0U,	// NEZ_A
    0U,	// NE_A
    0U,	// NE_rc
    0U,	// NE_rr
    0U,	// NOP_sr
    0U,	// NOP_sys
    0U,	// NOR_T
    0U,	// NOR_rc
    0U,	// NOR_rr
    0U,	// NOT_sr
    0U,	// ORN_T
    0U,	// ORN_rc
    0U,	// ORN_rr
    0U,	// OR_ANDN_T
    0U,	// OR_AND_T
    0U,	// OR_EQ_rc
    0U,	// OR_EQ_rr
    0U,	// OR_GE_U_rc
    0U,	// OR_GE_U_rr
    0U,	// OR_GE_rc
    0U,	// OR_GE_rr
    0U,	// OR_LT_U_rc
    0U,	// OR_LT_U_rr
    0U,	// OR_LT_rc
    0U,	// OR_LT_rr
    0U,	// OR_NE_rc
    0U,	// OR_NE_rr
    0U,	// OR_NOR_T
    0U,	// OR_OR_T
    0U,	// OR_T
    0U,	// OR_rc
    0U,	// OR_rr
    0U,	// OR_sc
    0U,	// OR_srr
    0U,	// PACK_rrr
    0U,	// PARITY_rr
    0U,	// POPCNT_W_rr
    0U,	// Q31TOF_rr
    0U,	// QSEED_F_rr
    0U,	// RESTORE_sys
    0U,	// RET_sr
    0U,	// RET_sys
    0U,	// RFE_sr
    0U,	// RFE_sys
    0U,	// RFM_sys
    0U,	// RSLCX_sys
    0U,	// RSTV_sys
    0U,	// RSUBS_U_rc
    0U,	// RSUBS_rc
    0U,	// RSUB_rc
    0U,	// RSUB_sr
    0U,	// SAT_BU_rr
    0U,	// SAT_BU_sr
    0U,	// SAT_B_rr
    0U,	// SAT_B_sr
    0U,	// SAT_HU_rr
    0U,	// SAT_HU_sr
    0U,	// SAT_H_rr
    0U,	// SAT_H_sr
    8U,	// SELN_rcr
    0U,	// SELN_rrr
    8U,	// SEL_rcr
    0U,	// SEL_rrr
    0U,	// SHAS_rc
    0U,	// SHAS_rr
    0U,	// SHA_H_rc
    0U,	// SHA_H_rr
    0U,	// SHA_rc
    0U,	// SHA_rr
    0U,	// SHA_src
    0U,	// SHUFFLE_rc
    0U,	// SH_ANDN_T
    0U,	// SH_AND_T
    0U,	// SH_EQ_rc
    0U,	// SH_EQ_rr
    0U,	// SH_GE_U_rc
    0U,	// SH_GE_U_rr
    0U,	// SH_GE_rc
    0U,	// SH_GE_rr
    0U,	// SH_H_rc
    0U,	// SH_H_rr
    0U,	// SH_LT_U_rc
    0U,	// SH_LT_U_rr
    0U,	// SH_LT_rc
    0U,	// SH_LT_rr
    0U,	// SH_NAND_T
    0U,	// SH_NE_rc
    0U,	// SH_NE_rr
    0U,	// SH_NOR_T
    0U,	// SH_ORN_T
    0U,	// SH_OR_T
    0U,	// SH_XNOR_T
    0U,	// SH_XOR_T
    0U,	// SH_rc
    0U,	// SH_rr
    0U,	// SH_src
    0U,	// STLCX_abs
    0U,	// STLCX_bo_bso
    0U,	// STUCX_abs
    0U,	// STUCX_bo_bso
    0U,	// ST_A_abs
    0U,	// ST_A_bo_bso
    0U,	// ST_A_bo_c
    0U,	// ST_A_bo_pos
    0U,	// ST_A_bo_pre
    0U,	// ST_A_bo_r
    0U,	// ST_A_bol
    0U,	// ST_A_sc
    0U,	// ST_A_sro
    0U,	// ST_A_ssr
    0U,	// ST_A_ssr_pos
    0U,	// ST_A_ssro
    0U,	// ST_B_abs
    0U,	// ST_B_bo_bso
    0U,	// ST_B_bo_c
    0U,	// ST_B_bo_pos
    0U,	// ST_B_bo_pre
    0U,	// ST_B_bo_r
    0U,	// ST_B_bol
    0U,	// ST_B_sro
    0U,	// ST_B_ssr
    0U,	// ST_B_ssr_pos
    0U,	// ST_B_ssro
    0U,	// ST_DA_abs
    0U,	// ST_DA_bo_bso
    0U,	// ST_DA_bo_c
    0U,	// ST_DA_bo_pos
    0U,	// ST_DA_bo_pre
    0U,	// ST_DA_bo_r
    0U,	// ST_D_abs
    0U,	// ST_D_bo_bso
    0U,	// ST_D_bo_c
    0U,	// ST_D_bo_pos
    0U,	// ST_D_bo_pre
    0U,	// ST_D_bo_r
    0U,	// ST_H_abs
    0U,	// ST_H_bo_bso
    0U,	// ST_H_bo_c
    0U,	// ST_H_bo_pos
    0U,	// ST_H_bo_pre
    0U,	// ST_H_bo_r
    0U,	// ST_H_bol
    0U,	// ST_H_sro
    0U,	// ST_H_ssr
    0U,	// ST_H_ssr_pos
    0U,	// ST_H_ssro
    0U,	// ST_Q_abs
    0U,	// ST_Q_bo_bso
    0U,	// ST_Q_bo_c
    0U,	// ST_Q_bo_pos
    0U,	// ST_Q_bo_pre
    0U,	// ST_Q_bo_r
    0U,	// ST_T
    0U,	// ST_W_abs
    0U,	// ST_W_bo_bso
    0U,	// ST_W_bo_c
    0U,	// ST_W_bo_pos
    0U,	// ST_W_bo_pre
    0U,	// ST_W_bo_r
    0U,	// ST_W_bol
    0U,	// ST_W_sro
    0U,	// ST_W_ssr
    0U,	// ST_W_ssr_pos
    0U,	// ST_W_ssro
    0U,	// SUBC_rr
    0U,	// SUBS_HU_rr
    0U,	// SUBS_H_rr
    0U,	// SUBS_U_rr
    0U,	// SUBS_rr
    0U,	// SUBS_srr
    0U,	// SUBX_rr
    0U,	// SUB_A_rr
    0U,	// SUB_A_sc
    0U,	// SUB_B_rr
    0U,	// SUB_F_rrr
    0U,	// SUB_H_rr
    0U,	// SUB_rr
    0U,	// SUB_srr
    0U,	// SUB_srr_15a
    0U,	// SUB_srr_a15
    0U,	// SVLCX_sys
    0U,	// SWAPMSK_W_bo_bso
    0U,	// SWAPMSK_W_bo_c
    0U,	// SWAPMSK_W_bo_pos
    0U,	// SWAPMSK_W_bo_pre
    0U,	// SWAPMSK_W_bo_r
    0U,	// SWAP_W_abs
    0U,	// SWAP_W_bo_bso
    0U,	// SWAP_W_bo_c
    0U,	// SWAP_W_bo_pos
    0U,	// SWAP_W_bo_pre
    0U,	// SWAP_W_bo_r
    0U,	// SYSCALL_rc
    0U,	// TRAPSV_sys
    0U,	// TRAPV_sys
    0U,	// UNPACK_rr
    0U,	// UPDFL_rr
    0U,	// UTOF_rr
    0U,	// WAIT_sys
    0U,	// XNOR_T
    0U,	// XNOR_rc
    0U,	// XNOR_rr
    0U,	// XOR_EQ_rc
    0U,	// XOR_EQ_rr
    0U,	// XOR_GE_U_rc
    0U,	// XOR_GE_U_rr
    0U,	// XOR_GE_rc
    0U,	// XOR_GE_rr
    0U,	// XOR_LT_U_rc
    0U,	// XOR_LT_U_rr
    0U,	// XOR_LT_rc
    0U,	// XOR_LT_rr
    0U,	// XOR_NE_rc
    0U,	// XOR_NE_rr
    0U,	// XOR_T
    0U,	// XOR_rc
    0U,	// XOR_rr
    0U,	// XOR_srr
  };

  // Emit the opcode for the instruction.
  uint64_t Bits = 0;
  Bits |= (uint64_t)OpInfo0[MCInst_getOpcode(MI)] << 0;
  Bits |= (uint64_t)OpInfo1[MCInst_getOpcode(MI)] << 32;
  MnemonicBitsInfo MBI = {AsmStrs+(Bits & 4095)-1, Bits};
  return MBI;

}
/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void printInstruction(MCInst *MI, uint64_t Address, SStream *O) {
  SStream_concat0(O, "");
  MnemonicBitsInfo MnemonicInfo = getMnemonic(MI, O);

  SStream_concat0(O, MnemonicInfo.first);

  uint64_t Bits = MnemonicInfo.second;
  assert(Bits != 0 && "Cannot print this instruction.");

  // Fragment 0 encoded into 4 bits for 11 unique commands.
  switch ((Bits >> 12) & 15) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // DBG_VALUE, DBG_VALUE_LIST, DBG_INSTR_REF, DBG_PHI, DBG_LABEL, BUNDLE, ...
    return;
    break;
  case 1:
    // ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ABSDIF_H_rr, ABSDIF...
    printOperand(MI, 0, O);
    break;
  case 2:
    // AND_src, BISR_sc, LD_A_sc, LD_W_sc, MOV_sc, OR_sc, ST_A_sc, SUB_A_sc
    printZExtImm_8(MI, 0, O);
    break;
  case 3:
    // BISR_rc, SYSCALL_rc
    printSExtImm_9(MI, 0, O);
    return;
    break;
  case 4:
    // CALLA_b, CALL_b, FCALLA_b, FCALL_b, JA_b, JLA_b, JL_b, J_b
    printSExtImm_24(MI, 0, O);
    return;
    break;
  case 5:
    // CALLI_rr, FCALLA_i, JEQ_brc, JGE_U_brc, JGE_brc, JI_rr, JLI_rr, JLT_U_...
    printOperand(MI, 1, O);
    break;
  case 6:
    // CMPSWAP_W_bo_bso, CMPSWAP_W_bo_c, CMPSWAP_W_bo_r, LDMST_bo_bso, LDMST_...
    printOperand(MI, 2, O);
    SStream_concat0(O, ", [");
    set_mem_access(MI, true);
    printOperand(MI, 0, O);
    break;
  case 7:
    // JEQ_sbc1, JEQ_sbc2, JNE_sbc1, JNE_sbc2
    printSExtImm_4(MI, 0, O);
    SStream_concat0(O, ", ");
    printPCRelImmOperand(MI, 1, O);
    return;
    break;
  case 8:
    // JNZ_sb, JZ_sb, J_sb
    printSExtImm_8(MI, 0, O);
    return;
    break;
  case 9:
    // MTCR_rlc
    printSExtImm_16(MI, 0, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 1, O);
    return;
    break;
  case 10:
    // ST_A_ssro, ST_B_ssro, ST_H_ssro, ST_W_ssro
    printSExtImm_4(MI, 1, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 0, O);
    return;
    break;
  }


  // Fragment 1 encoded into 4 bits for 11 unique commands.
  switch ((Bits >> 16) & 15) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ABSDIF_H_rr, ABSDIF...
    SStream_concat0(O, ", ");
    break;
  case 1:
    // ADD_src_a15, ADD_srr_a15, CADDN_src, CADD_src, CMOVN_src, CMOVN_srr, C...
    SStream_concat0(O, ", %d15, ");
    break;
  case 2:
    // AND_src, BISR_sc, CALLI_rr, DISABLE_sys_1, FCALLA_i, JI_rr, JI_sr, JLI...
    return;
    break;
  case 3:
    // CACHEI_I_bo_bso, CACHEI_I_bo_pre, CACHEI_WI_bo_bso, CACHEI_WI_bo_pre, ...
    SStream_concat1(O, ']');
    break;
  case 4:
    // CACHEI_I_bo_pos, CACHEI_WI_bo_pos, CACHEI_W_bo_pos, CACHE_I_bo_pos, CA...
    SStream_concat0(O, "+]");
    set_mem_access(MI, false);
    printSExtImm_10(MI, 1, O);
    return;
    break;
  case 5:
    // CACHEI_W_bo_c, CACHE_I_bo_c, CACHE_WI_bo_c, CACHE_W_bo_c, CMPSWAP_W_bo...
    SStream_concat0(O, "+c]");
    set_mem_access(MI, false);
    break;
  case 6:
    // CACHEI_W_bo_r, CACHE_I_bo_r, CACHE_WI_bo_r, CACHE_W_bo_r, CMPSWAP_W_bo...
    SStream_concat0(O, "+r]");
    set_mem_access(MI, false);
    return;
    break;
  case 7:
    // CMPSWAP_W_bo_pos, LDMST_bo_pos, LD_A_bo_bso, LD_A_bo_c, LD_A_bo_pos, L...
    SStream_concat0(O, ", [");
    set_mem_access(MI, true);
    break;
  case 8:
    // CMPSWAP_W_bo_pre, LDMST_bo_pre, LD_A_bo_pre, LD_BU_bo_pre, LD_B_bo_pre...
    SStream_concat0(O, ", [+");
    set_mem_access(MI, true);
    break;
  case 9:
    // LD_A_slro, LD_BU_slro, LD_H_slro, LD_W_slro
    SStream_concat0(O, ", %a15, ");
    printZExtImm_4(MI, 1, O);
    return;
    break;
  case 10:
    // ST_A_sc
    SStream_concat0(O, ", %a15");
    return;
    break;
  }


  // Fragment 2 encoded into 4 bits for 12 unique commands.
  switch ((Bits >> 20) & 15) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ABSDIF_H_rr, ABSDIF...
    printOperand(MI, 1, O);
    break;
  case 1:
    // ADDSC_A_rr, ADD_F_rrr, CADDN_rcr, CADD_rcr, CRC32B_W_rr, CRC32L_W_rr, ...
    printOperand(MI, 2, O);
    break;
  case 2:
    // ADD_A_src, ADD_src, ADD_src_15a, ADD_src_a15, CADDN_src, CADD_src, CMO...
    printSExtImm_4(MI, 1, O);
    return;
    break;
  case 3:
    // CACHEI_I_bo_bso, CACHEI_I_bo_pre, CACHEI_WI_bo_bso, CACHEI_WI_bo_pre, ...
    printSExtImm_10(MI, 1, O);
    return;
    break;
  case 4:
    // CADDN_rrr, CADD_rrr, CRCN_rrr, CSUBN_rrr, CSUB_rrr, MADDMS_H_rrr1_LL, ...
    printOperand(MI, 3, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 1, O);
    break;
  case 5:
    // CMPSWAP_W_bo_c, LDMST_bo_c
    return;
    break;
  case 6:
    // JEQ_brc, JGE_U_brc, JGE_brc, JLT_U_brc, JLT_brc, JNED_brc, JNEI_brc, J...
    printSExtImm_4(MI, 2, O);
    SStream_concat0(O, ", ");
    printPCRelImmOperand(MI, 0, O);
    return;
    break;
  case 7:
    // JEQ_sbr1, JEQ_sbr2, JGEZ_sbr, JGTZ_sbr, JLEZ_sbr, JLTZ_sbr, JNE_sbr1, ...
    printPCRelImmOperand(MI, 1, O);
    return;
    break;
  case 8:
    // LDMST_abs, ST_A_abs, ST_A_bo_pos, ST_A_bo_pre, ST_B_abs, ST_B_bo_pos, ...
    printOperand(MI, 0, O);
    break;
  case 9:
    // LD_A_sro, LD_BU_sro, LD_H_sro, LD_W_sro, MOV_A_src, ST_A_sro, ST_B_sro...
    printZExtImm_4(MI, 1, O);
    return;
    break;
  case 10:
    // MFCR_rlc, MOVH_A_rlc, MOVH_rlc, MOV_U_rlc, MOV_rlcDc, MOV_rlcEc
    printZExtImm_16(MI, 1, O);
    return;
    break;
  case 11:
    // ST_A_bo_bso, ST_B_bo_bso, ST_DA_bo_bso, ST_D_bo_bso, ST_H_bo_bso, ST_Q...
    printSExtImm_10(MI, 2, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 0, O);
    return;
    break;
  }


  // Fragment 3 encoded into 4 bits for 9 unique commands.
  switch ((Bits >> 24) & 15) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ABSDIF_H_rr, ABSDIF...
    SStream_concat0(O, ", ");
    break;
  case 1:
    // ABS_B_rr, ABS_H_rr, ABS_rr, ADDS_srr, ADD_A_srr, ADD_srr, ADD_srr_15a,...
    return;
    break;
  case 2:
    // ADDSC_A_srrs
    SStream_concat0(O, ", %d15, ");
    printZExtImm_2(MI, 2, O);
    return;
    break;
  case 3:
    // CMPSWAP_W_bo_pos, LDMST_bo_pos, LD_A_bo_pos, LD_BU_bo_pos, LD_B_bo_pos...
    SStream_concat0(O, "+]");
    set_mem_access(MI, false);
    printSExtImm_10(MI, 2, O);
    return;
    break;
  case 4:
    // CMPSWAP_W_bo_pre, LDMST_bo_pre, LD_A_bo_bso, LD_A_bo_pre, LD_A_bol, LD...
    SStream_concat1(O, ']');
    break;
  case 5:
    // LD_A_bo_c, LD_BU_bo_c, LD_B_bo_c, LD_DA_bo_c, LD_D_bo_c, LD_HU_bo_c, L...
    SStream_concat0(O, "+c]");
    set_mem_access(MI, false);
    printSExtImm_10(MI, 2, O);
    return;
    break;
  case 6:
    // LD_A_bo_r, LD_BU_bo_r, LD_B_bo_r, LD_DA_bo_r, LD_D_bo_r, LD_HU_bo_r, L...
    SStream_concat0(O, "+r]");
    set_mem_access(MI, false);
    return;
    break;
  case 7:
    // MADDRS_Q_rrr1_L_L, MADDR_Q_rrr1_L_L, MADDS_Q_rrr1_L_L, MADDS_Q_rrr1_e_...
    SStream_concat0(O, "L, ");
    printOperand(MI, 2, O);
    SStream_concat0(O, "L, ");
    break;
  case 8:
    // MADDRS_Q_rrr1_U_U, MADDR_Q_rrr1_U_U, MADDS_Q_rrr1_U_U, MADDS_Q_rrr1_e_...
    SStream_concat0(O, "U, ");
    printOperand(MI, 2, O);
    SStream_concat0(O, "U, ");
    break;
  }


  // Fragment 4 encoded into 3 bits for 8 unique commands.
  switch ((Bits >> 28) & 7) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ABSDIF_H_rr, ABSDIF...
    printOperand(MI, 2, O);
    break;
  case 1:
    // ABSDIF_rc, ADDC_rc, ADDS_U_rc, ADDS_rc, ADDX_rc, ADD_rc, ANDN_rc, AND_...
    printSExtImm_9(MI, 2, O);
    return;
    break;
  case 2:
    // ADDIH_A_rlc, ADDIH_rlc, ADDI_rlc
    printSExtImm_16(MI, 2, O);
    return;
    break;
  case 3:
    // ADDSC_A_rr, ADD_F_rrr, CADDN_rcr, CADD_rcr, CRC32B_W_rr, CRC32L_W_rr, ...
    printOperand(MI, 1, O);
    break;
  case 4:
    // ANDN_T, AND_ANDN_T, AND_AND_T, AND_NOR_T, AND_OR_T, AND_T, INSN_T, INS...
    printZExtImm_4(MI, 3, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 2, O);
    SStream_concat0(O, ", ");
    printZExtImm_4(MI, 4, O);
    return;
    break;
  case 5:
    // CMPSWAP_W_bo_pre, LDMST_bo_pre, LD_A_bo_bso, LD_A_bo_pre, LD_BU_bo_bso...
    printSExtImm_10(MI, 2, O);
    return;
    break;
  case 6:
    // MADDRS_Q_rrr1_L_L, MADDRS_Q_rrr1_U_U, MADDR_Q_rrr1_L_L, MADDR_Q_rrr1_U...
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 7:
    // MULR_Q_rr1_2LL, MULR_Q_rr1_2UU, MUL_Q_rr1_2LL, MUL_Q_rr1_2UU
    printZExtImm_2(MI, 3, O);
    return;
    break;
  }


  // Fragment 5 encoded into 4 bits for 15 unique commands.
  switch ((Bits >> 31) & 15) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ABSDIF_H_rr, ABSDIF...
    return;
    break;
  case 1:
    // ADDSC_A_rr, CADDN_rcr, CADD_rcr, DEXTR_rrpw, DEXTR_rrrr, EXTR_U_rrpw, ...
    SStream_concat0(O, ", ");
    break;
  case 2:
    // MADDMS_H_rrr1_LL, MADDM_H_rrr1_LL, MADDRS_H_rrr1_LL, MADDR_H_rrr1_LL, ...
    SStream_concat0(O, " LL, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 3:
    // MADDMS_H_rrr1_LU, MADDM_H_rrr1_LU, MADDRS_H_rrr1_LU, MADDR_H_rrr1_LU, ...
    SStream_concat0(O, " LU, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 4:
    // MADDMS_H_rrr1_UL, MADDM_H_rrr1_UL, MADDRS_H_rrr1_UL, MADDR_H_rrr1_UL, ...
    SStream_concat0(O, " UL, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 5:
    // MADDMS_H_rrr1_UU, MADDM_H_rrr1_UU, MADDRS_H_rrr1_UU, MADDR_H_rrr1_UU, ...
    SStream_concat0(O, " UU, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 6:
    // MADDRS_H_rrr1_DcEdDaDbUL, MADDR_H_rrr1_DcEdDaDbUL, MSUBRS_H_rrr1_DcEdD...
    SStream_concat0(O, ", UL, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 7:
    // MADDS_Q_rrr1_L, MADDS_Q_rrr1_e_L, MADD_Q_rrr1_L, MADD_Q_rrr1_e_L, MSUB...
    SStream_concat0(O, " L, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 8:
    // MADDS_Q_rrr1_U, MADDS_Q_rrr1_e_U, MADD_Q_rrr1_U, MADD_Q_rrr1_e_U, MSUB...
    SStream_concat0(O, " U, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 9:
    // MULM_H_rr1_LL2e, MULR_H_rr1_LL2e, MUL_H_rr1_LL2e
    SStream_concat0(O, "LL, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 10:
    // MULM_H_rr1_LU2e, MULR_H_rr1_LU2e, MUL_H_rr1_LU2e
    SStream_concat0(O, "LU, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 11:
    // MULM_H_rr1_UL2e, MULR_H_rr1_UL2e, MUL_H_rr1_UL2e
    SStream_concat0(O, "UL, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 12:
    // MULM_H_rr1_UU2e, MULR_H_rr1_UU2e, MUL_H_rr1_UU2e
    SStream_concat0(O, "UU, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 13:
    // MUL_Q_rr1_2_L, MUL_Q_rr1_2_Le
    SStream_concat0(O, "L, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 14:
    // MUL_Q_rr1_2_U, MUL_Q_rr1_2_Ue
    SStream_concat0(O, "U, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  }


  // Fragment 6 encoded into 2 bits for 4 unique commands.
  switch ((Bits >> 35) & 3) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ADDSC_A_rr, DEXTR_rrpw, DEXTR_rrrr, EXTR_U_rrpw, EXTR_U_rrrw, EXTR_rrp...
    printOperand(MI, 3, O);
    break;
  case 1:
    // CADDN_rcr, CADD_rcr, MADDS_U_rcr, MADDS_U_rcr_e, MADDS_rcr, MADDS_rcr_...
    printSExtImm_9(MI, 3, O);
    return;
    break;
  case 2:
    // MADDS_Q_rrr1, MADDS_Q_rrr1_e, MADD_Q_rrr1, MADD_Q_rrr1_e, MSUBS_Q_rrr1...
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 3:
    // MUL_Q_rr1_2__, MUL_Q_rr1_2__e
    printZExtImm_2(MI, 3, O);
    return;
    break;
  }


  // Fragment 7 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 37) & 1) {
    // INSERT_rcpw, INSERT_rcrw, INSERT_rrpw, INSERT_rrrr, INSERT_rrrw
    SStream_concat0(O, ", ");
    printOperand(MI, 4, O);
    return;
  } else {
    // ADDSC_A_rr, DEXTR_rrpw, DEXTR_rrrr, EXTR_U_rrpw, EXTR_U_rrrw, EXTR_rrp...
    return;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 61 && "Invalid register number!");

  static const char AsmStrs[] = {
  /* 0 */ "d10\0"
  /* 4 */ "e10\0"
  /* 8 */ "p10\0"
  /* 12 */ "a0\0"
  /* 15 */ "d0\0"
  /* 18 */ "e0\0"
  /* 21 */ "p0\0"
  /* 24 */ "A10_A11\0"
  /* 32 */ "a11\0"
  /* 36 */ "d11\0"
  /* 40 */ "A0_A1\0"
  /* 46 */ "a1\0"
  /* 49 */ "d1\0"
  /* 52 */ "a12\0"
  /* 56 */ "d12\0"
  /* 60 */ "e12\0"
  /* 64 */ "p12\0"
  /* 68 */ "a2\0"
  /* 71 */ "d2\0"
  /* 74 */ "e2\0"
  /* 77 */ "p2\0"
  /* 80 */ "A12_A13\0"
  /* 88 */ "a13\0"
  /* 92 */ "d13\0"
  /* 96 */ "A2_A3\0"
  /* 102 */ "a3\0"
  /* 105 */ "d3\0"
  /* 108 */ "a14\0"
  /* 112 */ "d14\0"
  /* 116 */ "e14\0"
  /* 120 */ "p14\0"
  /* 124 */ "a4\0"
  /* 127 */ "d4\0"
  /* 130 */ "e4\0"
  /* 133 */ "p4\0"
  /* 136 */ "A14_A15\0"
  /* 144 */ "a15\0"
  /* 148 */ "d15\0"
  /* 152 */ "A4_A5\0"
  /* 158 */ "a5\0"
  /* 161 */ "d5\0"
  /* 164 */ "a6\0"
  /* 167 */ "d6\0"
  /* 170 */ "e6\0"
  /* 173 */ "p6\0"
  /* 176 */ "A6_A7\0"
  /* 182 */ "a7\0"
  /* 185 */ "d7\0"
  /* 188 */ "a8\0"
  /* 191 */ "d8\0"
  /* 194 */ "e8\0"
  /* 197 */ "p8\0"
  /* 200 */ "A8_A9\0"
  /* 206 */ "a9\0"
  /* 209 */ "d9\0"
  /* 212 */ "pc\0"
  /* 215 */ "pcxi\0"
  /* 220 */ "sp\0"
  /* 223 */ "psw\0"
  /* 227 */ "fcx\0"
};
  static const uint8_t RegAsmOffset[] = {
    227, 212, 215, 223, 12, 46, 68, 102, 124, 158, 164, 182, 188, 206, 
    220, 32, 52, 88, 108, 144, 15, 49, 71, 105, 127, 161, 167, 185, 
    191, 209, 0, 36, 56, 92, 112, 148, 18, 74, 130, 170, 194, 4, 
    60, 116, 21, 77, 133, 173, 197, 8, 64, 120, 40, 96, 152, 176, 
    200, 24, 80, 136, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}
#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

bool printAliasInstr(MCInst *MI, uint64_t Address, SStream *OS) {
  return false;
}

#endif // PRINT_ALIAS_INSTR
