/* Capstone Disassembly Engine, http://www.capstone-engine.org */
/* By Nguyen Anh Quynh <aquynh@gmail.com>, 2013-2022, */
/*    Rot127 <unisono@quyllur.org> 2022-2023 */
/* Automatically generated file by the LLVM TableGen Disassembler Backend. */
/* Do not edit. */

#include <capstone/platform.h>
#include <assert.h>

/// getMnemonic - This method is automatically generated by tablegen
/// from the instruction set description.
MnemonicBitsInfo getMnemonic(MCInst *MI, SStream *O) {
  static const char AsmStrs[] = {
  /* 0 */ "sub %d15, \0"
  /* 11 */ "add %d15, \0"
  /* 22 */ "and %d15, \0"
  /* 33 */ "jne %d15, \0"
  /* 44 */ "jeq %d15, \0"
  /* 55 */ "or %d15, \0"
  /* 65 */ "jz.t %d15, \0"
  /* 77 */ "jnz.t %d15, \0"
  /* 90 */ "lt %d15, \0"
  /* 100 */ "mov %d15, \0"
  /* 111 */ "ld.a %a15, %sp, \0"
  /* 128 */ "ld.w %a15, %sp, \0"
  /* 145 */ "sub.a %sp, \0"
  /* 157 */ "st.a %sp, \0"
  /* 168 */ "ftoq31 \0"
  /* 176 */ "CMPSWAP.W \0"
  /* 187 */ "addsc.a \0"
  /* 196 */ "add.a \0"
  /* 203 */ "ld.a \0"
  /* 209 */ "ge.a \0"
  /* 215 */ "jne.a \0"
  /* 222 */ "addih.a \0"
  /* 231 */ "movh.a \0"
  /* 239 */ "jeq.a \0"
  /* 246 */ "lt.a \0"
  /* 252 */ "st.a \0"
  /* 258 */ "mov.a \0"
  /* 265 */ "nez.a \0"
  /* 272 */ "jz.a \0"
  /* 278 */ "jnz.a \0"
  /* 285 */ "eqz.a \0"
  /* 292 */ "mov.aa \0"
  /* 300 */ "ld.da \0"
  /* 307 */ "st.da \0"
  /* 314 */ "lea \0"
  /* 319 */ "lha \0"
  /* 324 */ "sha \0"
  /* 329 */ "ja \0"
  /* 333 */ "jla \0"
  /* 338 */ "fcalla \0"
  /* 346 */ "crc32.b \0"
  /* 355 */ "sub.b \0"
  /* 362 */ "add.b \0"
  /* 369 */ "ld.b \0"
  /* 375 */ "absdif.b \0"
  /* 385 */ "min.b \0"
  /* 392 */ "eq.b \0"
  /* 398 */ "abs.b \0"
  /* 405 */ "sat.b \0"
  /* 412 */ "dvinit.b \0"
  /* 422 */ "lt.b \0"
  /* 428 */ "st.b \0"
  /* 434 */ "max.b \0"
  /* 441 */ "eqany.b \0"
  /* 450 */ "csub \0"
  /* 456 */ "msub \0"
  /* 462 */ "rsub \0"
  /* 468 */ "subc \0"
  /* 474 */ "addc \0"
  /* 480 */ "ld.d \0"
  /* 486 */ "st.d \0"
  /* 492 */ "mov.d \0"
  /* 499 */ "cadd \0"
  /* 505 */ "madd \0"
  /* 511 */ "jned \0"
  /* 517 */ "nand \0"
  /* 523 */ "and.ge \0"
  /* 531 */ "sh.ge \0"
  /* 538 */ "xor.ge \0"
  /* 546 */ "jge \0"
  /* 551 */ "bmerge \0"
  /* 559 */ "disable \0"
  /* 568 */ "shuffle \0"
  /* 577 */ "and.ne \0"
  /* 585 */ "xor.ne \0"
  /* 593 */ "jne \0"
  /* 598 */ "msub.f \0"
  /* 606 */ "madd.f \0"
  /* 614 */ "qseed.f \0"
  /* 623 */ "mul.f \0"
  /* 630 */ "cmp.f \0"
  /* 637 */ "div.f \0"
  /* 644 */ "absdif \0"
  /* 652 */ "q31tof \0"
  /* 660 */ "itof \0"
  /* 666 */ "hptof \0"
  /* 673 */ "utof \0"
  /* 679 */ "sha.h \0"
  /* 686 */ "msub.h \0"
  /* 694 */ "msubad.h \0"
  /* 704 */ "madd.h \0"
  /* 712 */ "ld.h \0"
  /* 718 */ "absdif.h \0"
  /* 728 */ "sh.h \0"
  /* 734 */ "mul.h \0"
  /* 741 */ "msubm.h \0"
  /* 750 */ "msubadm.h \0"
  /* 761 */ "maddm.h \0"
  /* 770 */ "mulm.h \0"
  /* 778 */ "maddsum.h \0"
  /* 789 */ "min.h \0"
  /* 796 */ "clo.h \0"
  /* 803 */ "eq.h \0"
  /* 809 */ "msubr.h \0"
  /* 818 */ "msubadr.h \0"
  /* 829 */ "maddr.h \0"
  /* 838 */ "mulr.h \0"
  /* 846 */ "maddsur.h \0"
  /* 857 */ "abs.h \0"
  /* 864 */ "msubs.h \0"
  /* 873 */ "msubads.h \0"
  /* 884 */ "madds.h \0"
  /* 893 */ "absdifs.h \0"
  /* 904 */ "cls.h \0"
  /* 911 */ "msubms.h \0"
  /* 921 */ "msubadms.h \0"
  /* 933 */ "maddms.h \0"
  /* 943 */ "maddsums.h \0"
  /* 955 */ "msubrs.h \0"
  /* 965 */ "msubadrs.h \0"
  /* 977 */ "maddrs.h \0"
  /* 987 */ "maddsurs.h \0"
  /* 999 */ "abss.h \0"
  /* 1007 */ "maddsus.h \0"
  /* 1018 */ "sat.h \0"
  /* 1025 */ "dvinit.h \0"
  /* 1035 */ "lt.h \0"
  /* 1041 */ "st.h \0"
  /* 1047 */ "maddsu.h \0"
  /* 1057 */ "max.h \0"
  /* 1064 */ "eqany.h \0"
  /* 1073 */ "clz.h \0"
  /* 1080 */ "addih \0"
  /* 1087 */ "sh \0"
  /* 1091 */ "movh \0"
  /* 1097 */ "addi \0"
  /* 1103 */ "jnei \0"
  /* 1109 */ "ji \0"
  /* 1113 */ "jli \0"
  /* 1118 */ "fcalli \0"
  /* 1126 */ "ftoi \0"
  /* 1132 */ "dvadj \0"
  /* 1139 */ "unpack \0"
  /* 1147 */ "imask \0"
  /* 1154 */ "sel \0"
  /* 1159 */ "updfl \0"
  /* 1166 */ "jl \0"
  /* 1170 */ "fcall \0"
  /* 1177 */ "syscall \0"
  /* 1186 */ "mul \0"
  /* 1191 */ "crcn \0"
  /* 1197 */ "caddn \0"
  /* 1204 */ "andn \0"
  /* 1210 */ "ixmin \0"
  /* 1217 */ "seln \0"
  /* 1223 */ "orn \0"
  /* 1228 */ "cmovn \0"
  /* 1235 */ "clo \0"
  /* 1240 */ "dvstep \0"
  /* 1248 */ "ftohp \0"
  /* 1255 */ "loop \0"
  /* 1261 */ "msub.q \0"
  /* 1269 */ "madd.q \0"
  /* 1277 */ "ld.q \0"
  /* 1283 */ "mul.q \0"
  /* 1290 */ "msubr.q \0"
  /* 1299 */ "maddr.q \0"
  /* 1308 */ "mulr.q \0"
  /* 1316 */ "msubs.q \0"
  /* 1325 */ "madds.q \0"
  /* 1334 */ "msubrs.q \0"
  /* 1344 */ "maddrs.q \0"
  /* 1354 */ "st.q \0"
  /* 1360 */ "and.eq \0"
  /* 1368 */ "sh.eq \0"
  /* 1375 */ "xor.eq \0"
  /* 1383 */ "jeq \0"
  /* 1388 */ "mfcr \0"
  /* 1394 */ "mtcr \0"
  /* 1400 */ "xnor \0"
  /* 1406 */ "xor \0"
  /* 1411 */ "bisr \0"
  /* 1417 */ "dextr \0"
  /* 1424 */ "shas \0"
  /* 1430 */ "abs \0"
  /* 1435 */ "msubs \0"
  /* 1442 */ "rsubs \0"
  /* 1449 */ "madds \0"
  /* 1456 */ "absdifs \0"
  /* 1465 */ "cls \0"
  /* 1470 */ "muls \0"
  /* 1476 */ "abss \0"
  /* 1482 */ "and.and.t \0"
  /* 1493 */ "sh.and.t \0"
  /* 1503 */ "or.and.t \0"
  /* 1513 */ "sh.nand.t \0"
  /* 1524 */ "and.andn.t \0"
  /* 1536 */ "sh.andn.t \0"
  /* 1547 */ "or.andn.t \0"
  /* 1558 */ "sh.orn.t \0"
  /* 1568 */ "insn.t \0"
  /* 1576 */ "and.or.t \0"
  /* 1586 */ "sh.or.t \0"
  /* 1595 */ "or.or.t \0"
  /* 1604 */ "and.nor.t \0"
  /* 1615 */ "sh.nor.t \0"
  /* 1625 */ "or.nor.t \0"
  /* 1635 */ "sh.xnor.t \0"
  /* 1646 */ "sh.xor.t \0"
  /* 1656 */ "ins.t \0"
  /* 1663 */ "st.t \0"
  /* 1669 */ "jz.t \0"
  /* 1675 */ "jnz.t \0"
  /* 1682 */ "addsc.at \0"
  /* 1692 */ "bsplit \0"
  /* 1700 */ "dvinit \0"
  /* 1708 */ "and.lt \0"
  /* 1716 */ "sh.lt \0"
  /* 1723 */ "xor.lt \0"
  /* 1731 */ "jlt \0"
  /* 1736 */ "not \0"
  /* 1741 */ "insert \0"
  /* 1749 */ "ldmst \0"
  /* 1756 */ "madd.u \0"
  /* 1764 */ "and.ge.u \0"
  /* 1774 */ "sh.ge.u \0"
  /* 1783 */ "xor.ge.u \0"
  /* 1793 */ "jge.u \0"
  /* 1800 */ "mul.u \0"
  /* 1807 */ "ixmin.u \0"
  /* 1816 */ "dvstep.u \0"
  /* 1826 */ "extr.u \0"
  /* 1834 */ "rsubs.u \0"
  /* 1843 */ "madds.u \0"
  /* 1852 */ "muls.u \0"
  /* 1860 */ "dvinit.u \0"
  /* 1870 */ "and.lt.u \0"
  /* 1880 */ "sh.lt.u \0"
  /* 1889 */ "xor.lt.u \0"
  /* 1899 */ "jlt.u \0"
  /* 1906 */ "div.u \0"
  /* 1913 */ "mov.u \0"
  /* 1920 */ "ixmax.u \0"
  /* 1929 */ "ld.bu \0"
  /* 1936 */ "min.bu \0"
  /* 1944 */ "sat.bu \0"
  /* 1952 */ "dvinit.bu \0"
  /* 1963 */ "lt.bu \0"
  /* 1970 */ "max.bu \0"
  /* 1978 */ "ld.hu \0"
  /* 1985 */ "min.hu \0"
  /* 1993 */ "subs.hu \0"
  /* 2002 */ "adds.hu \0"
  /* 2011 */ "sat.hu \0"
  /* 2019 */ "dvinit.hu \0"
  /* 2030 */ "lt.hu \0"
  /* 2037 */ "max.hu \0"
  /* 2045 */ "ftou \0"
  /* 2051 */ "loopu \0"
  /* 2058 */ "lt.wu \0"
  /* 2065 */ "div \0"
  /* 2070 */ "cmov \0"
  /* 2076 */ "crc32b.w \0"
  /* 2086 */ "ld.w \0"
  /* 2092 */ "swapmsk.w \0"
  /* 2103 */ "crc32l.w \0"
  /* 2113 */ "swap.w \0"
  /* 2121 */ "eq.w \0"
  /* 2127 */ "lt.w \0"
  /* 2133 */ "popcnt.w \0"
  /* 2143 */ "st.w \0"
  /* 2149 */ "ixmax \0"
  /* 2156 */ "subx \0"
  /* 2162 */ "ldlcx \0"
  /* 2169 */ "stlcx \0"
  /* 2176 */ "lducx \0"
  /* 2183 */ "stucx \0"
  /* 2190 */ "addx \0"
  /* 2196 */ "parity \0"
  /* 2204 */ "ftoq31z \0"
  /* 2213 */ "jgez \0"
  /* 2219 */ "jlez \0"
  /* 2225 */ "ftoiz \0"
  /* 2232 */ "jz \0"
  /* 2236 */ "clz \0"
  /* 2241 */ "jnz \0"
  /* 2246 */ "jgtz \0"
  /* 2252 */ "jltz \0"
  /* 2258 */ "ftouz \0"
  /* 2265 */ "CMPSWAP.W [+\0"
  /* 2278 */ "cache.i [+\0"
  /* 2289 */ "cachei.i [+\0"
  /* 2301 */ "cache.wi [+\0"
  /* 2313 */ "cachei.wi [+\0"
  /* 2326 */ "ldmst [+\0"
  /* 2335 */ "cache.w [+\0"
  /* 2346 */ "cachei.w [+\0"
  /* 2358 */ "# XRay Function Patchable RET.\0"
  /* 2389 */ "# XRay Typed Event Log.\0"
  /* 2413 */ "# XRay Custom Event Log.\0"
  /* 2438 */ "# XRay Function Enter.\0"
  /* 2461 */ "# XRay Tail Call Exit.\0"
  /* 2484 */ "# XRay Function Exit.\0"
  /* 2506 */ "LIFETIME_END\0"
  /* 2519 */ "PSEUDO_PROBE\0"
  /* 2532 */ "BUNDLE\0"
  /* 2539 */ "DBG_VALUE\0"
  /* 2549 */ "DBG_INSTR_REF\0"
  /* 2563 */ "DBG_PHI\0"
  /* 2571 */ "DBG_LABEL\0"
  /* 2581 */ "LIFETIME_START\0"
  /* 2596 */ "DBG_VALUE_LIST\0"
  /* 2611 */ "ld.a %a15, [\0"
  /* 2624 */ "ld.h %d15, [\0"
  /* 2637 */ "ld.bu %d15, [\0"
  /* 2651 */ "ld.w %d15, [\0"
  /* 2664 */ "CMPSWAP.W [\0"
  /* 2676 */ "st.a [\0"
  /* 2683 */ "st.da [\0"
  /* 2691 */ "st.b [\0"
  /* 2698 */ "st.d [\0"
  /* 2705 */ "st.h [\0"
  /* 2712 */ "cache.i [\0"
  /* 2722 */ "cachei.i [\0"
  /* 2733 */ "cache.wi [\0"
  /* 2744 */ "cachei.wi [\0"
  /* 2756 */ "st.q [\0"
  /* 2763 */ "ldmst [\0"
  /* 2771 */ "cache.w [\0"
  /* 2781 */ "cachei.w [\0"
  /* 2792 */ "swapmsk.w [\0"
  /* 2804 */ "swap.w [\0"
  /* 2813 */ "st.w [\0"
  /* 2820 */ "ldlcx [\0"
  /* 2828 */ "stlcx [\0"
  /* 2836 */ "lducx [\0"
  /* 2844 */ "stucx [\0"
  /* 2852 */ "st.a [%a15]\0"
  /* 2864 */ "st.b [%a15]\0"
  /* 2876 */ "st.h [%a15]\0"
  /* 2888 */ "st.w [%a15]\0"
  /* 2900 */ "sub.a\0"
  /* 2906 */ "add.a\0"
  /* 2912 */ "mov.a\0"
  /* 2918 */ "dsync\0"
  /* 2924 */ "isync\0"
  /* 2930 */ "rfe\0"
  /* 2934 */ "enable\0"
  /* 2941 */ "disable\0"
  /* 2949 */ "restore\0"
  /* 2957 */ "debug\0"
  /* 2963 */ "relck\0"
  /* 2969 */ "# FEntry call\0"
  /* 2983 */ "rfm\0"
  /* 2987 */ "nop\0"
  /* 2991 */ "fret\0"
  /* 2996 */ "wait\0"
  /* 3001 */ "trapv\0"
  /* 3007 */ "trapsv\0"
  /* 3014 */ "svlcx\0"
};
  static const uint32_t OpInfo0[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// INLINEASM_BR
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    2540U,	// DBG_VALUE
    2597U,	// DBG_VALUE_LIST
    2550U,	// DBG_INSTR_REF
    2564U,	// DBG_PHI
    2572U,	// DBG_LABEL
    0U,	// REG_SEQUENCE
    0U,	// COPY
    2533U,	// BUNDLE
    2582U,	// LIFETIME_START
    2507U,	// LIFETIME_END
    2520U,	// PSEUDO_PROBE
    0U,	// ARITH_FENCE
    0U,	// STACKMAP
    2970U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// PREALLOCATED_SETUP
    0U,	// PREALLOCATED_ARG
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    2439U,	// PATCHABLE_FUNCTION_ENTER
    2359U,	// PATCHABLE_RET
    2485U,	// PATCHABLE_FUNCTION_EXIT
    2462U,	// PATCHABLE_TAIL_CALL
    2414U,	// PATCHABLE_EVENT_CALL
    2390U,	// PATCHABLE_TYPED_EVENT_CALL
    0U,	// ICALL_BRANCH_FUNNEL
    0U,	// G_ASSERT_SEXT
    0U,	// G_ASSERT_ZEXT
    0U,	// G_ASSERT_ALIGN
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_SDIVREM
    0U,	// G_UDIVREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_BUILD_VECTOR
    0U,	// G_BUILD_VECTOR_TRUNC
    0U,	// G_CONCAT_VECTORS
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_FREEZE
    0U,	// G_INTRINSIC_FPTRUNC_ROUND
    0U,	// G_INTRINSIC_TRUNC
    0U,	// G_INTRINSIC_ROUND
    0U,	// G_INTRINSIC_LRINT
    0U,	// G_INTRINSIC_ROUNDEVEN
    0U,	// G_READCYCLECOUNTER
    0U,	// G_LOAD
    0U,	// G_SEXTLOAD
    0U,	// G_ZEXTLOAD
    0U,	// G_INDEXED_LOAD
    0U,	// G_INDEXED_SEXTLOAD
    0U,	// G_INDEXED_ZEXTLOAD
    0U,	// G_STORE
    0U,	// G_INDEXED_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_ATOMICRMW_FADD
    0U,	// G_ATOMICRMW_FSUB
    0U,	// G_ATOMICRMW_FMAX
    0U,	// G_ATOMICRMW_FMIN
    0U,	// G_FENCE
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INVOKE_REGION_START
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_SEXT_INREG
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_FSHL
    0U,	// G_FSHR
    0U,	// G_ROTR
    0U,	// G_ROTL
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDO
    0U,	// G_UADDE
    0U,	// G_USUBO
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SADDE
    0U,	// G_SSUBO
    0U,	// G_SSUBE
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_UADDSAT
    0U,	// G_SADDSAT
    0U,	// G_USUBSAT
    0U,	// G_SSUBSAT
    0U,	// G_USHLSAT
    0U,	// G_SSHLSAT
    0U,	// G_SMULFIX
    0U,	// G_UMULFIX
    0U,	// G_SMULFIXSAT
    0U,	// G_UMULFIXSAT
    0U,	// G_SDIVFIX
    0U,	// G_UDIVFIX
    0U,	// G_SDIVFIXSAT
    0U,	// G_UDIVFIXSAT
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FMAD
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FPOWI
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FLOG10
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_FABS
    0U,	// G_FCOPYSIGN
    0U,	// G_IS_FPCLASS
    0U,	// G_FCANONICALIZE
    0U,	// G_FMINNUM
    0U,	// G_FMAXNUM
    0U,	// G_FMINNUM_IEEE
    0U,	// G_FMAXNUM_IEEE
    0U,	// G_FMINIMUM
    0U,	// G_FMAXIMUM
    0U,	// G_PTR_ADD
    0U,	// G_PTRMASK
    0U,	// G_SMIN
    0U,	// G_SMAX
    0U,	// G_UMIN
    0U,	// G_UMAX
    0U,	// G_ABS
    0U,	// G_LROUND
    0U,	// G_LLROUND
    0U,	// G_BR
    0U,	// G_BRJT
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_CTTZ
    0U,	// G_CTTZ_ZERO_UNDEF
    0U,	// G_CTLZ
    0U,	// G_CTLZ_ZERO_UNDEF
    0U,	// G_CTPOP
    0U,	// G_BSWAP
    0U,	// G_BITREVERSE
    0U,	// G_FCEIL
    0U,	// G_FCOS
    0U,	// G_FSIN
    0U,	// G_FSQRT
    0U,	// G_FFLOOR
    0U,	// G_FRINT
    0U,	// G_FNEARBYINT
    0U,	// G_ADDRSPACE_CAST
    0U,	// G_BLOCK_ADDR
    0U,	// G_JUMP_TABLE
    0U,	// G_DYN_STACKALLOC
    0U,	// G_STRICT_FADD
    0U,	// G_STRICT_FSUB
    0U,	// G_STRICT_FMUL
    0U,	// G_STRICT_FDIV
    0U,	// G_STRICT_FREM
    0U,	// G_STRICT_FMA
    0U,	// G_STRICT_FSQRT
    0U,	// G_READ_REGISTER
    0U,	// G_WRITE_REGISTER
    0U,	// G_MEMCPY
    0U,	// G_MEMCPY_INLINE
    0U,	// G_MEMMOVE
    0U,	// G_MEMSET
    0U,	// G_BZERO
    0U,	// G_VECREDUCE_SEQ_FADD
    0U,	// G_VECREDUCE_SEQ_FMUL
    0U,	// G_VECREDUCE_FADD
    0U,	// G_VECREDUCE_FMUL
    0U,	// G_VECREDUCE_FMAX
    0U,	// G_VECREDUCE_FMIN
    0U,	// G_VECREDUCE_ADD
    0U,	// G_VECREDUCE_MUL
    0U,	// G_VECREDUCE_AND
    0U,	// G_VECREDUCE_OR
    0U,	// G_VECREDUCE_XOR
    0U,	// G_VECREDUCE_SMAX
    0U,	// G_VECREDUCE_SMIN
    0U,	// G_VECREDUCE_UMAX
    0U,	// G_VECREDUCE_UMIN
    0U,	// G_SBFX
    0U,	// G_UBFX
    4990U,	// ABSDIFS_H_rr
    5553U,	// ABSDIFS_rc
    5553U,	// ABSDIFS_rr
    4472U,	// ABSDIF_B_rr
    4815U,	// ABSDIF_H_rr
    268440197U,	// ABSDIF_rc
    4741U,	// ABSDIF_rr
    5096U,	// ABSS_H_rr
    5573U,	// ABSS_rr
    16781711U,	// ABS_B_rr
    16782170U,	// ABS_H_rr
    16782743U,	// ABS_rr
    268440027U,	// ADDC_rc
    4571U,	// ADDC_rr
    536875231U,	// ADDIH_A_rlc
    536876089U,	// ADDIH_rlc
    536876106U,	// ADDI_rlc
    5779U,	// ADDSC_AT_rr
    806359228U,	// ADDSC_A_rr
    33558716U,	// ADDSC_A_srrs
    4982U,	// ADDS_H
    6099U,	// ADDS_HU
    5941U,	// ADDS_U
    268441397U,	// ADDS_U_rc
    268441003U,	// ADDS_rc
    5547U,	// ADDS_rr
    16782763U,	// ADDS_srr
    268441743U,	// ADDX_rc
    6287U,	// ADDX_rr
    2907U,	// ADD_A_rr
    2101445U,	// ADD_A_src
    16781509U,	// ADD_A_srr
    4459U,	// ADD_B_rr
    806359648U,	// ADD_F_rrr
    4802U,	// ADD_H_rr
    268440053U,	// ADD_rc
    4597U,	// ADD_rr
    2101749U,	// ADD_src
    2101260U,	// ADD_src_15a
    2167285U,	// ADD_src_a15
    16781813U,	// ADD_srr
    16781324U,	// ADD_srr_15a
    16847349U,	// ADD_srr_a15
    1073747449U,	// ANDN_T
    268440757U,	// ANDN_rc
    5301U,	// ANDN_rr
    1073747445U,	// AND_ANDN_T
    1073747403U,	// AND_AND_T
    268440913U,	// AND_EQ_rc
    5457U,	// AND_EQ_rr
    268441317U,	// AND_GE_U_rc
    5861U,	// AND_GE_U_rr
    268440076U,	// AND_GE_rc
    4620U,	// AND_GE_rr
    268441423U,	// AND_LT_U_rc
    5967U,	// AND_LT_U_rr
    268441261U,	// AND_LT_rc
    5805U,	// AND_LT_rr
    268440130U,	// AND_NE_rc
    4674U,	// AND_NE_rr
    1073747525U,	// AND_NOR_T
    1073747497U,	// AND_OR_T
    1073747407U,	// AND_T
    268440071U,	// AND_rc
    4615U,	// AND_rr
    139287U,	// AND_src
    16781831U,	// AND_srr
    13700U,	// BISR_rc
    140676U,	// BISR_sc
    4648U,	// BMAERGE_rr
    16783005U,	// BSPLIT_rr
    3349155U,	// CACHEI_I_bo_bso
    3414691U,	// CACHEI_I_bo_pos
    3348722U,	// CACHEI_I_bo_pre
    3349177U,	// CACHEI_WI_bo_bso
    3414713U,	// CACHEI_WI_bo_pos
    3348746U,	// CACHEI_WI_bo_pre
    3349214U,	// CACHEI_W_bo_bso
    334558U,	// CACHEI_W_bo_c
    3414750U,	// CACHEI_W_bo_pos
    3348779U,	// CACHEI_W_bo_pre
    400094U,	// CACHEI_W_bo_r
    3349145U,	// CACHE_I_bo_bso
    334489U,	// CACHE_I_bo_c
    3414681U,	// CACHE_I_bo_pos
    3348711U,	// CACHE_I_bo_pre
    400025U,	// CACHE_I_bo_r
    3349166U,	// CACHE_WI_bo_bso
    334510U,	// CACHE_WI_bo_c
    3414702U,	// CACHE_WI_bo_pos
    3348734U,	// CACHE_WI_bo_pre
    400046U,	// CACHE_WI_bo_r
    3349204U,	// CACHE_W_bo_bso
    334548U,	// CACHE_W_bo_c
    3414740U,	// CACHE_W_bo_pos
    3348768U,	// CACHE_W_bo_pre
    400084U,	// CACHE_W_bo_r
    806360238U,	// CADDN_rcr
    4199598U,	// CADDN_rrr
    2167982U,	// CADDN_src
    806359540U,	// CADD_rcr
    4198900U,	// CADD_rrr
    2167284U,	// CADD_src
    16724U,	// CALLA_b
    152672U,	// CALLI_rr
    17556U,	// CALL_b
    16782109U,	// CLO_H_rr
    16782548U,	// CLO_rr
    16782217U,	// CLS_H_rr
    16782778U,	// CLS_rr
    16782386U,	// CLZ_H_rr
    16783549U,	// CLZ_rr
    2168013U,	// CMOVN_src
    16848077U,	// CMOVN_srr
    2168855U,	// CMOV_src
    16848919U,	// CMOV_srr
    5462633U,	// CMPSWAP_W_bo_bso
    5462633U,	// CMPSWAP_W_bo_c
    5528169U,	// CMPSWAP_W_bo_pos
    5462234U,	// CMPSWAP_W_bo_pre
    23089329U,	// CMPSWAP_W_bo_r
    4727U,	// CMP_F_rr
    806361117U,	// CRC32B_W_rr
    806361144U,	// CRC32L_W_rr
    806359387U,	// CRC32_B_rr
    4199592U,	// CRCN_rrr
    4198851U,	// CSUBN_rrr
    4198851U,	// CSUB_rrr
    2958U,	// DEBUG_sr
    2958U,	// DEBUG_sys
    5514U,	// DEXTR_rrpw
    5514U,	// DEXTR_rrrr
    2942U,	// DISABLE_sys
    135728U,	// DISABLE_sys_1
    4734U,	// DIV_F_rr
    6003U,	// DIV_U_rr
    6162U,	// DIV_rr
    2919U,	// DSYNC_sys
    806360173U,	// DVADJ_rrr
    6049U,	// DVINIT_BU_rr
    4509U,	// DVINIT_B_rr
    6116U,	// DVINIT_HU_rr
    5122U,	// DVINIT_H_rr
    5957U,	// DVINIT_U_rr
    5797U,	// DVINIT_rr
    806360857U,	// DVSTEP_U_rrr
    806360281U,	// DVSTEP_rrr
    2935U,	// ENABLE_sys
    268439994U,	// EQANY_B_rc
    4538U,	// EQANY_B_rr
    268440617U,	// EQANY_H_rc
    5161U,	// EQANY_H_rr
    16781598U,	// EQZ_A_rr
    4337U,	// EQ_A_rr
    4489U,	// EQ_B_rr
    4900U,	// EQ_H_rr
    6218U,	// EQ_W_rr
    268440917U,	// EQ_rc
    5461U,	// EQ_rr
    2101294U,	// EQ_src
    16781358U,	// EQ_srr
    5923U,	// EXTR_U_rrpw
    5923U,	// EXTR_U_rrrr
    5923U,	// EXTR_U_rrrw
    5515U,	// EXTR_rrpw
    5515U,	// EXTR_rrrr
    5515U,	// EXTR_rrrw
    16723U,	// FCALLA_b
    152671U,	// FCALLA_i
    17555U,	// FCALL_b
    2992U,	// FRET_sr
    2992U,	// FRET_sys
    16782561U,	// FTOHP_rr
    16783538U,	// FTOIZ_rr
    16782439U,	// FTOI_rr
    6301U,	// FTOQ31Z_rr
    4265U,	// FTOQ31_rr
    16783571U,	// FTOUZ_rr
    16783358U,	// FTOU_rr
    4306U,	// GE_A_rr
    268441321U,	// GE_U_rc
    5865U,	// GE_U_rr
    268440080U,	// GE_rc
    4624U,	// GE_rr
    16781979U,	// HPTOF_rr
    5244U,	// IMASK_rcpw
    5244U,	// IMASK_rcrw
    5244U,	// IMASK_rrpw
    5244U,	// IMASK_rrrw
    5838U,	// INSERT_rcpw
    5838U,	// INSERT_rcrr
    5838U,	// INSERT_rcrw
    5838U,	// INSERT_rrpw
    5838U,	// INSERT_rrrr
    5838U,	// INSERT_rrrw
    1073747489U,	// INSN_T
    1073747577U,	// INS_T
    2925U,	// ISYNC_sys
    16781973U,	// ITOF_rr
    806360961U,	// IXMAX_U_rrr
    806361190U,	// IXMAX_rrr
    806360848U,	// IXMIN_U_rrr
    806360251U,	// IXMIN_rrr
    16714U,	// JA_b
    1342181616U,	// JEQ_A_brr
    7361896U,	// JEQ_brc
    1342182760U,	// JEQ_brr
    24621U,	// JEQ_sbc1
    24621U,	// JEQ_sbc2
    8392749U,	// JEQ_sbr1
    8392749U,	// JEQ_sbr2
    8394918U,	// JGEZ_sbr
    7362306U,	// JGE_U_brc
    1342183170U,	// JGE_U_brr
    7361059U,	// JGE_brc
    1342181923U,	// JGE_brr
    8394951U,	// JGTZ_sbr
    152662U,	// JI_rr
    136278U,	// JI_sr
    16718U,	// JLA_b
    8394924U,	// JLEZ_sbr
    152666U,	// JLI_rr
    8394957U,	// JLTZ_sbr
    7362412U,	// JLT_U_brc
    1342183276U,	// JLT_U_brr
    7362244U,	// JLT_brc
    1342183108U,	// JLT_brr
    17551U,	// JL_b
    7361024U,	// JNED_brc
    1342181888U,	// JNED_brr
    7361616U,	// JNEI_brc
    1342182480U,	// JNEI_brr
    1342181592U,	// JNE_A_brr
    7361106U,	// JNE_brc
    1342181970U,	// JNE_brr
    24610U,	// JNE_sbc1
    24610U,	// JNE_sbc2
    8392738U,	// JNE_sbr1
    8392738U,	// JNE_sbr2
    1342181655U,	// JNZ_A_brr
    8392983U,	// JNZ_A_sbr
    1342183052U,	// JNZ_T_brn
    8392782U,	// JNZ_T_sbrn
    30914U,	// JNZ_sb
    8394946U,	// JNZ_sbr
    1342181649U,	// JZ_A_brr
    8392977U,	// JZ_A_sbr
    1342183046U,	// JZ_T_brn
    8392770U,	// JZ_T_sbrn
    30905U,	// JZ_sb
    8394937U,	// JZ_sbr
    17521U,	// J_b
    29809U,	// J_sb
    166003U,	// LDLCX_abs
    3349253U,	// LDLCX_bo_bso
    38614U,	// LDMST_abs
    5462732U,	// LDMST_bo_bso
    5462732U,	// LDMST_bo_c
    5528268U,	// LDMST_bo_pos
    5462295U,	// LDMST_bo_pre
    23090902U,	// LDMST_bo_r
    166017U,	// LDUCX_abs
    3349269U,	// LDUCX_bo_bso
    9441484U,	// LD_A_abs
    1661407436U,	// LD_A_bo_bso
    67571916U,	// LD_A_bo_c
    1694961868U,	// LD_A_bo_pos
    1661472972U,	// LD_A_bo_pre
    101126348U,	// LD_A_bo_r
    50794700U,	// LD_A_bol
    139376U,	// LD_A_sc
    1929842892U,	// LD_A_slr
    1963397324U,	// LD_A_slr_post
    594124U,	// LD_A_slro
    27466292U,	// LD_A_sro
    9443210U,	// LD_BU_abs
    1661409162U,	// LD_BU_bo_bso
    67573642U,	// LD_BU_bo_c
    1694963594U,	// LD_BU_bo_pos
    1661474698U,	// LD_BU_bo_pre
    101128074U,	// LD_BU_bo_r
    50796426U,	// LD_BU_bol
    1929844618U,	// LD_BU_slr
    1963399050U,	// LD_BU_slr_post
    595850U,	// LD_BU_slro
    27466318U,	// LD_BU_sro
    9441650U,	// LD_B_abs
    1661407602U,	// LD_B_bo_bso
    67572082U,	// LD_B_bo_c
    1694962034U,	// LD_B_bo_pos
    1661473138U,	// LD_B_bo_pre
    101126514U,	// LD_B_bo_r
    50794866U,	// LD_B_bol
    9441581U,	// LD_DA_abs
    1661407533U,	// LD_DA_bo_bso
    67572013U,	// LD_DA_bo_c
    1694961965U,	// LD_DA_bo_pos
    1661473069U,	// LD_DA_bo_pre
    101126445U,	// LD_DA_bo_r
    9441761U,	// LD_D_abs
    1661407713U,	// LD_D_bo_bso
    67572193U,	// LD_D_bo_c
    1694962145U,	// LD_D_bo_pos
    1661473249U,	// LD_D_bo_pre
    101126625U,	// LD_D_bo_r
    9443259U,	// LD_HU_abs
    1661409211U,	// LD_HU_bo_bso
    67573691U,	// LD_HU_bo_c
    1694963643U,	// LD_HU_bo_pos
    1661474747U,	// LD_HU_bo_pre
    101128123U,	// LD_HU_bo_r
    50796475U,	// LD_HU_bol
    9441993U,	// LD_H_abs
    1661407945U,	// LD_H_bo_bso
    67572425U,	// LD_H_bo_c
    1694962377U,	// LD_H_bo_pos
    1661473481U,	// LD_H_bo_pre
    101126857U,	// LD_H_bo_r
    50795209U,	// LD_H_bol
    1929843401U,	// LD_H_slr
    1963397833U,	// LD_H_slr_post
    594633U,	// LD_H_slro
    27466305U,	// LD_H_sro
    9442558U,	// LD_Q_abs
    1661408510U,	// LD_Q_bo_bso
    67572990U,	// LD_Q_bo_c
    1694962942U,	// LD_Q_bo_pos
    1661474046U,	// LD_Q_bo_pre
    101127422U,	// LD_Q_bo_r
    9443367U,	// LD_W_abs
    1661409319U,	// LD_W_bo_bso
    67573799U,	// LD_W_bo_c
    1694963751U,	// LD_W_bo_pos
    1661474855U,	// LD_W_bo_pre
    101128231U,	// LD_W_bo_r
    50796583U,	// LD_W_bol
    139393U,	// LD_W_sc
    1929844775U,	// LD_W_slr
    1963399207U,	// LD_W_slr_post
    596007U,	// LD_W_slro
    27466332U,	// LD_W_sro
    9441595U,	// LEA_abs
    1661407547U,	// LEA_bo_bso
    50794811U,	// LEA_bol
    9441600U,	// LHA_abs
    43012U,	// LOOPU_brr
    11539688U,	// LOOP_brr
    8393960U,	// LOOP_sbr
    4343U,	// LT_A_rr
    4519U,	// LT_B
    6060U,	// LT_BU
    5132U,	// LT_H
    6127U,	// LT_HU
    268441427U,	// LT_U_rc
    5971U,	// LT_U_rr
    6224U,	// LT_W
    6155U,	// LT_WU
    268441265U,	// LT_rc
    5809U,	// LT_rr
    2101339U,	// LT_src
    16781403U,	// LT_srr
    4199334U,	// MADDMS_H_rrr1_LL
    4199334U,	// MADDMS_H_rrr1_LU
    4199334U,	// MADDMS_H_rrr1_UL
    4199334U,	// MADDMS_H_rrr1_UU
    4199162U,	// MADDM_H_rrr1_LL
    4199162U,	// MADDM_H_rrr1_LU
    4199162U,	// MADDM_H_rrr1_UL
    4199162U,	// MADDM_H_rrr1_UU
    4199378U,	// MADDRS_H_rrr1_DcEdDaDbUL
    4199378U,	// MADDRS_H_rrr1_LL
    4199378U,	// MADDRS_H_rrr1_LU
    4199378U,	// MADDRS_H_rrr1_UL
    4199378U,	// MADDRS_H_rrr1_UU
    2269123905U,	// MADDRS_Q_rrr1_L_L
    2285901121U,	// MADDRS_Q_rrr1_U_U
    4199230U,	// MADDR_H_rrr1_DcEdDaDbUL
    4199230U,	// MADDR_H_rrr1_LL
    4199230U,	// MADDR_H_rrr1_LU
    4199230U,	// MADDR_H_rrr1_UL
    4199230U,	// MADDR_H_rrr1_UU
    2269123860U,	// MADDR_Q_rrr1_L_L
    2285901076U,	// MADDR_Q_rrr1_U_U
    4199344U,	// MADDSUMS_H_rrr1_LL
    4199344U,	// MADDSUMS_H_rrr1_LU
    4199344U,	// MADDSUMS_H_rrr1_UL
    4199344U,	// MADDSUMS_H_rrr1_UU
    4199179U,	// MADDSUM_H_rrr1_LL
    4199179U,	// MADDSUM_H_rrr1_LU
    4199179U,	// MADDSUM_H_rrr1_UL
    4199179U,	// MADDSUM_H_rrr1_UU
    4199388U,	// MADDSURS_H_rrr1_LL
    4199388U,	// MADDSURS_H_rrr1_LU
    4199388U,	// MADDSURS_H_rrr1_UL
    4199388U,	// MADDSURS_H_rrr1_UU
    4199247U,	// MADDSUR_H_rrr1_LL
    4199247U,	// MADDSUR_H_rrr1_LU
    4199247U,	// MADDSUR_H_rrr1_UL
    4199247U,	// MADDSUR_H_rrr1_UU
    4199408U,	// MADDSUS_H_rrr1_LL
    4199408U,	// MADDSUS_H_rrr1_LU
    4199408U,	// MADDSUS_H_rrr1_UL
    4199408U,	// MADDSUS_H_rrr1_UU
    4199448U,	// MADDSU_H_rrr1_LL
    4199448U,	// MADDSU_H_rrr1_LU
    4199448U,	// MADDSU_H_rrr1_UL
    4199448U,	// MADDSU_H_rrr1_UU
    4199285U,	// MADDS_H_rrr1_LL
    4199285U,	// MADDS_H_rrr1_LU
    4199285U,	// MADDS_H_rrr1_UL
    4199285U,	// MADDS_H_rrr1_UU
    4199726U,	// MADDS_Q_rrr1
    4199726U,	// MADDS_Q_rrr1_L
    2269123886U,	// MADDS_Q_rrr1_L_L
    4199726U,	// MADDS_Q_rrr1_U
    2285901102U,	// MADDS_Q_rrr1_U_U
    4199726U,	// MADDS_Q_rrr1_e
    4199726U,	// MADDS_Q_rrr1_e_L
    2269123886U,	// MADDS_Q_rrr1_e_L_L
    4199726U,	// MADDS_Q_rrr1_e_U
    2285901102U,	// MADDS_Q_rrr1_e_U_U
    806360884U,	// MADDS_U_rcr
    806360884U,	// MADDS_U_rcr_e
    4200244U,	// MADDS_U_rrr2
    4200244U,	// MADDS_U_rrr2_e
    806360490U,	// MADDS_rcr
    806360490U,	// MADDS_rcr_e
    4199850U,	// MADDS_rrr2
    4199850U,	// MADDS_rrr2_e
    4199007U,	// MADD_F_rrr
    4199105U,	// MADD_H_rrr1_LL
    4199105U,	// MADD_H_rrr1_LU
    4199105U,	// MADD_H_rrr1_UL
    4199105U,	// MADD_H_rrr1_UU
    4199670U,	// MADD_Q_rrr1
    4199670U,	// MADD_Q_rrr1_L
    2269123830U,	// MADD_Q_rrr1_L_L
    4199670U,	// MADD_Q_rrr1_U
    2285901046U,	// MADD_Q_rrr1_U_U
    4199670U,	// MADD_Q_rrr1_e
    4199670U,	// MADD_Q_rrr1_e_L
    2269123830U,	// MADD_Q_rrr1_e_L_L
    4199670U,	// MADD_Q_rrr1_e_U
    2285901046U,	// MADD_Q_rrr1_e_U_U
    806360797U,	// MADD_U_rcr
    4200157U,	// MADD_U_rrr2
    806359546U,	// MADD_rcr
    806359546U,	// MADD_rcr_e
    4198906U,	// MADD_rrr2
    4198906U,	// MADD_rrr2_e
    4531U,	// MAX_B
    6067U,	// MAX_BU
    5154U,	// MAX_H
    6134U,	// MAX_HU
    268441475U,	// MAX_U_rc
    6019U,	// MAX_U_rr
    268441704U,	// MAX_rc
    6248U,	// MAX_rr
    12588397U,	// MFCR_rlc
    4482U,	// MIN_B
    6033U,	// MIN_BU
    4886U,	// MIN_H
    6082U,	// MIN_HU
    268441362U,	// MIN_U_rc
    5906U,	// MIN_U_rr
    268440765U,	// MIN_rc
    5309U,	// MIN_rr
    12587240U,	// MOVH_A_rlc
    12588100U,	// MOVH_rlc
    17830181U,	// MOV_AA_rr
    16781605U,	// MOV_AA_srr
    2913U,	// MOV_A_rr
    27267331U,	// MOV_A_src
    16781571U,	// MOV_A_srr
    17830381U,	// MOV_D_rr
    16781805U,	// MOV_D_srr
    12588922U,	// MOV_U_rlc
    12589080U,	// MOV_rlcDc
    12589080U,	// MOV_rlcEc
    17831960U,	// MOV_rrDcDb
    6168U,	// MOV_rrEcDaDb
    17831960U,	// MOV_rrEcDb
    139365U,	// MOV_sc
    2103320U,	// MOV_srcDa
    2103320U,	// MOV_srcEa
    16783384U,	// MOV_srr
    4199322U,	// MSUBADMS_H_rrr1_LL
    4199322U,	// MSUBADMS_H_rrr1_LU
    4199322U,	// MSUBADMS_H_rrr1_UL
    4199322U,	// MSUBADMS_H_rrr1_UU
    4199151U,	// MSUBADM_H_rrr1_LL
    4199151U,	// MSUBADM_H_rrr1_LU
    4199151U,	// MSUBADM_H_rrr1_UL
    4199151U,	// MSUBADM_H_rrr1_UU
    4199366U,	// MSUBADRS_H_rrr1_LL
    4199366U,	// MSUBADRS_H_rrr1_LU
    4199366U,	// MSUBADRS_H_rrr1_UL
    4199366U,	// MSUBADRS_H_rrr1_UU
    4199219U,	// MSUBADR_H_rrr1_LL
    4199219U,	// MSUBADR_H_rrr1_LU
    4199219U,	// MSUBADR_H_rrr1_UL
    4199219U,	// MSUBADR_H_rrr1_UU
    4199274U,	// MSUBADS_H_rrr1_LL
    4199274U,	// MSUBADS_H_rrr1_LU
    4199274U,	// MSUBADS_H_rrr1_UL
    4199274U,	// MSUBADS_H_rrr1_UU
    4199095U,	// MSUBAD_H_rrr1_LL
    4199095U,	// MSUBAD_H_rrr1_LU
    4199095U,	// MSUBAD_H_rrr1_UL
    4199095U,	// MSUBAD_H_rrr1_UU
    4199312U,	// MSUBMS_H_rrr1_LL
    4199312U,	// MSUBMS_H_rrr1_LU
    4199312U,	// MSUBMS_H_rrr1_UL
    4199312U,	// MSUBMS_H_rrr1_UU
    4199142U,	// MSUBM_H_rrr1_LL
    4199142U,	// MSUBM_H_rrr1_LU
    4199142U,	// MSUBM_H_rrr1_UL
    4199142U,	// MSUBM_H_rrr1_UU
    4199356U,	// MSUBRS_H_rrr1_DcEdDaDbUL
    4199356U,	// MSUBRS_H_rrr1_LL
    4199356U,	// MSUBRS_H_rrr1_LU
    4199356U,	// MSUBRS_H_rrr1_UL
    4199356U,	// MSUBRS_H_rrr1_UU
    2269123895U,	// MSUBRS_Q_rrr1_L_L
    2285901111U,	// MSUBRS_Q_rrr1_U_U
    4199210U,	// MSUBR_H_rrr1_DcEdDaDbUL
    4199210U,	// MSUBR_H_rrr1_LL
    4199210U,	// MSUBR_H_rrr1_LU
    4199210U,	// MSUBR_H_rrr1_UL
    4199210U,	// MSUBR_H_rrr1_UU
    2269123851U,	// MSUBR_Q_rrr1_L_L
    2285901067U,	// MSUBR_Q_rrr1_U_U
    4199265U,	// MSUBS_H_rrr1_LL
    4199265U,	// MSUBS_H_rrr1_LU
    4199265U,	// MSUBS_H_rrr1_UL
    4199265U,	// MSUBS_H_rrr1_UU
    4199717U,	// MSUBS_Q_rrr1
    4199717U,	// MSUBS_Q_rrr1_L
    2269123877U,	// MSUBS_Q_rrr1_L_L
    4199717U,	// MSUBS_Q_rrr1_U
    2285901093U,	// MSUBS_Q_rrr1_U_U
    4199717U,	// MSUBS_Q_rrr1_e
    4199717U,	// MSUBS_Q_rrr1_e_L
    2269123877U,	// MSUBS_Q_rrr1_e_L_L
    4199717U,	// MSUBS_Q_rrr1_e_U
    2285901093U,	// MSUBS_Q_rrr1_e_U_U
    806360884U,	// MSUBS_U_rcr
    806360884U,	// MSUBS_U_rcr_e
    4200244U,	// MSUBS_U_rrr2
    4200244U,	// MSUBS_U_rrr2_e
    806360476U,	// MSUBS_rcr
    806360476U,	// MSUBS_rcr_e
    4199836U,	// MSUBS_rrr2
    4199836U,	// MSUBS_rrr2_e
    4198999U,	// MSUB_F_rrr
    4199087U,	// MSUB_H_rrr1_LL
    4199087U,	// MSUB_H_rrr1_LU
    4199087U,	// MSUB_H_rrr1_UL
    4199087U,	// MSUB_H_rrr1_UU
    4199662U,	// MSUB_Q_rrr1
    4199662U,	// MSUB_Q_rrr1_L
    2269123822U,	// MSUB_Q_rrr1_L_L
    4199662U,	// MSUB_Q_rrr1_U
    2285901038U,	// MSUB_Q_rrr1_U_U
    4199662U,	// MSUB_Q_rrr1_e
    4199662U,	// MSUB_Q_rrr1_e_L
    2269123822U,	// MSUB_Q_rrr1_e_L_L
    4199662U,	// MSUB_Q_rrr1_e_U
    2285901038U,	// MSUB_Q_rrr1_e_U_U
    806360797U,	// MSUB_U_rcr
    4200157U,	// MSUB_U_rrr2
    806359497U,	// MSUB_rcr
    806359497U,	// MSUB_rcr_e
    4198857U,	// MSUB_rrr2
    4198857U,	// MSUB_rrr2_e
    46451U,	// MTCR_rlc
    4867U,	// MULM_H_rr1_LL2e
    4867U,	// MULM_H_rr1_LU2e
    4867U,	// MULM_H_rr1_UL2e
    4867U,	// MULM_H_rr1_UU2e
    4935U,	// MULR_H_rr1_LL2e
    4935U,	// MULR_H_rr1_LU2e
    4935U,	// MULR_H_rr1_UL2e
    4935U,	// MULR_H_rr1_UU2e
    2533365021U,	// MULR_Q_rr1_2LL
    2550142237U,	// MULR_Q_rr1_2UU
    268441405U,	// MULS_U_rc
    5949U,	// MULS_U_rr2
    268441023U,	// MULS_rc
    5567U,	// MULS_rr2
    4720U,	// MUL_F_rrr
    4831U,	// MUL_H_rr1_LL2e
    4831U,	// MUL_H_rr1_LU2e
    4831U,	// MUL_H_rr1_UL2e
    4831U,	// MUL_H_rr1_UU2e
    2533364996U,	// MUL_Q_rr1_2LL
    2550142212U,	// MUL_Q_rr1_2UU
    5380U,	// MUL_Q_rr1_2_L
    5380U,	// MUL_Q_rr1_2_Le
    5380U,	// MUL_Q_rr1_2_U
    5380U,	// MUL_Q_rr1_2_Ue
    5380U,	// MUL_Q_rr1_2__
    5380U,	// MUL_Q_rr1_2__e
    268441353U,	// MUL_U_rc
    5897U,	// MUL_U_rr2
    268440739U,	// MUL_rc
    268440739U,	// MUL_rc_e
    5283U,	// MUL_rr2
    5283U,	// MUL_rr2_e
    16782499U,	// MUL_srr
    1073747437U,	// NAND_T
    268440070U,	// NAND_rc
    4614U,	// NAND_rr
    16781578U,	// NEZ_A
    4313U,	// NE_A
    268440134U,	// NE_rc
    4678U,	// NE_rr
    2988U,	// NOP_sr
    2988U,	// NOP_sys
    1073747529U,	// NOR_T
    268440954U,	// NOR_rc
    5498U,	// NOR_rr
    136905U,	// NOT_sr
    1073747482U,	// ORN_T
    268440776U,	// ORN_rc
    5320U,	// ORN_rr
    1073747468U,	// OR_ANDN_T
    1073747424U,	// OR_AND_T
    268440929U,	// OR_EQ_rc
    5473U,	// OR_EQ_rr
    268441337U,	// OR_GE_U_rc
    5881U,	// OR_GE_U_rr
    268440092U,	// OR_GE_rc
    4636U,	// OR_GE_rr
    268441443U,	// OR_LT_U_rc
    5987U,	// OR_LT_U_rr
    268441277U,	// OR_LT_rc
    5821U,	// OR_LT_rr
    268440139U,	// OR_NE_rc
    4683U,	// OR_NE_rr
    1073747546U,	// OR_NOR_T
    1073747516U,	// OR_OR_T
    1073747501U,	// OR_T
    268440955U,	// OR_rc
    5499U,	// OR_rr
    139320U,	// OR_sc
    16782715U,	// OR_srr
    806360182U,	// PACK_rrr
    16783509U,	// PARITY_rr
    16783446U,	// POPCNT_W_rr
    4749U,	// Q31TOF_rr
    16781927U,	// QSEED_F_rr
    2950U,	// RESTORE_sys
    2993U,	// RET_sr
    2993U,	// RET_sys
    2931U,	// RFE_sr
    2931U,	// RFE_sys
    2984U,	// RFM_sys
    2964U,	// RSLCX_sys
    2950U,	// RSTV_sys
    268441387U,	// RSUBS_U_rc
    268440995U,	// RSUBS_rc
    268440015U,	// RSUB_rc
    135631U,	// RSUB_sr
    16783257U,	// SAT_BU_rr
    137113U,	// SAT_BU_sr
    16781718U,	// SAT_B_rr
    135574U,	// SAT_B_sr
    16783324U,	// SAT_HU_rr
    137180U,	// SAT_HU_sr
    16782331U,	// SAT_H_rr
    136187U,	// SAT_H_sr
    806360258U,	// SELN_rcr
    4199618U,	// SELN_rrr
    806360195U,	// SEL_rcr
    4199555U,	// SEL_rrr
    268440977U,	// SHAS_rc
    5521U,	// SHAS_rr
    268440232U,	// SHA_H_rc
    4776U,	// SHA_H_rr
    268439877U,	// SHA_rc
    4421U,	// SHA_rr
    2101573U,	// SHA_src
    268440121U,	// SHUFFLE_rc
    1073747457U,	// SH_ANDN_T
    1073747414U,	// SH_AND_T
    268440921U,	// SH_EQ_rc
    5465U,	// SH_EQ_rr
    268441327U,	// SH_GE_U_rc
    5871U,	// SH_GE_U_rr
    268440084U,	// SH_GE_rc
    4628U,	// SH_GE_rr
    268440281U,	// SH_H_rc
    4825U,	// SH_H_rr
    268441433U,	// SH_LT_U_rc
    5977U,	// SH_LT_U_rr
    268441269U,	// SH_LT_rc
    5813U,	// SH_LT_rr
    1073747434U,	// SH_NAND_T
    268441269U,	// SH_NE_rc
    5813U,	// SH_NE_rr
    1073747536U,	// SH_NOR_T
    1073747479U,	// SH_ORN_T
    1073747507U,	// SH_OR_T
    1073747556U,	// SH_XNOR_T
    1073747567U,	// SH_XOR_T
    268440640U,	// SH_rc
    5184U,	// SH_rr
    2102336U,	// SH_src
    166010U,	// STLCX_abs
    3349261U,	// STLCX_bo_bso
    166024U,	// STUCX_abs
    3349277U,	// STUCX_bo_bso
    37117U,	// ST_A_abs
    5462645U,	// ST_A_bo_bso
    67571965U,	// ST_A_bo_c
    1701269757U,	// ST_A_bo_pos
    1667780861U,	// ST_A_bo_pre
    101126397U,	// ST_A_bo_r
    13834869U,	// ST_A_bol
    663710U,	// ST_A_sc
    161684085U,	// ST_A_sro
    727669U,	// ST_A_ssr
    793205U,	// ST_A_ssr_pos
    52005U,	// ST_A_ssro
    37293U,	// ST_B_abs
    5462660U,	// ST_B_bo_bso
    67572141U,	// ST_B_bo_c
    1701269933U,	// ST_B_bo_pos
    1667781037U,	// ST_B_bo_pre
    101126573U,	// ST_B_bo_r
    13834884U,	// ST_B_bol
    178461316U,	// ST_B_sro
    727684U,	// ST_B_ssr
    793220U,	// ST_B_ssr_pos
    52017U,	// ST_B_ssro
    37172U,	// ST_DA_abs
    5462652U,	// ST_DA_bo_bso
    67572020U,	// ST_DA_bo_c
    1701269812U,	// ST_DA_bo_pos
    1667780916U,	// ST_DA_bo_pre
    101126452U,	// ST_DA_bo_r
    37351U,	// ST_D_abs
    5462667U,	// ST_D_bo_bso
    67572199U,	// ST_D_bo_c
    1701269991U,	// ST_D_bo_pos
    1667781095U,	// ST_D_bo_pre
    101126631U,	// ST_D_bo_r
    37906U,	// ST_H_abs
    5462674U,	// ST_H_bo_bso
    67572754U,	// ST_H_bo_c
    1701270546U,	// ST_H_bo_pos
    1667781650U,	// ST_H_bo_pre
    101127186U,	// ST_H_bo_r
    13834898U,	// ST_H_bol
    178461330U,	// ST_H_sro
    727698U,	// ST_H_ssr
    793234U,	// ST_H_ssr_pos
    52029U,	// ST_H_ssro
    38219U,	// ST_Q_abs
    5462725U,	// ST_Q_bo_bso
    67573067U,	// ST_Q_bo_c
    1701270859U,	// ST_Q_bo_pos
    1667781963U,	// ST_Q_bo_pre
    101127499U,	// ST_Q_bo_r
    34432U,	// ST_T
    39008U,	// ST_W_abs
    5462782U,	// ST_W_bo_bso
    67573856U,	// ST_W_bo_c
    1701271648U,	// ST_W_bo_pos
    1667782752U,	// ST_W_bo_pre
    101128288U,	// ST_W_bo_r
    13835006U,	// ST_W_bol
    178461438U,	// ST_W_sro
    727806U,	// ST_W_ssr
    793342U,	// ST_W_ssr_pos
    52041U,	// ST_W_ssro
    4565U,	// SUBC_rr
    6090U,	// SUBS_HU_rr
    4962U,	// SUBS_H_rr
    5932U,	// SUBS_U_rr
    5533U,	// SUBS_rr
    16782749U,	// SUBS_srr
    6253U,	// SUBX_rr
    2901U,	// SUB_A_rr
    139410U,	// SUB_A_sc
    4452U,	// SUB_B_rr
    806359640U,	// SUB_F_rrr
    4784U,	// SUB_H_rr
    4548U,	// SUB_rr
    16781764U,	// SUB_srr
    16781313U,	// SUB_srr_15a
    16847300U,	// SUB_srr_a15
    3015U,	// SVLCX_sys
    5462761U,	// SWAPMSK_W_bo_bso
    67573805U,	// SWAPMSK_W_bo_c
    1701271597U,	// SWAPMSK_W_bo_pos
    1667782701U,	// SWAPMSK_W_bo_pre
    101128237U,	// SWAPMSK_W_bo_r
    38978U,	// SWAP_W_abs
    5462773U,	// SWAP_W_bo_bso
    67573826U,	// SWAP_W_bo_c
    1701271618U,	// SWAP_W_bo_pos
    1667782722U,	// SWAP_W_bo_pre
    101128258U,	// SWAP_W_bo_r
    13466U,	// SYSCALL_rc
    3008U,	// TRAPSV_sys
    3002U,	// TRAPV_sys
    16782452U,	// UNPACK_rr
    152712U,	// UPDFL_rr
    16781986U,	// UTOF_rr
    2997U,	// WAIT_sys
    1073747559U,	// XNOR_T
    268440953U,	// XNOR_rc
    5497U,	// XNOR_rr
    268440928U,	// XOR_EQ_rc
    5472U,	// XOR_EQ_rr
    268441336U,	// XOR_GE_U_rc
    5880U,	// XOR_GE_U_rr
    268440091U,	// XOR_GE_rc
    4635U,	// XOR_GE_rr
    268441442U,	// XOR_LT_U_rc
    5986U,	// XOR_LT_U_rr
    268441276U,	// XOR_LT_rc
    5820U,	// XOR_LT_rr
    268440138U,	// XOR_NE_rc
    4682U,	// XOR_NE_rr
    1073747570U,	// XOR_T
    268440959U,	// XOR_rc
    5503U,	// XOR_rr
    16782719U,	// XOR_srr
  };

  static const uint8_t OpInfo1[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// INLINEASM_BR
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// DBG_VALUE_LIST
    0U,	// DBG_INSTR_REF
    0U,	// DBG_PHI
    0U,	// DBG_LABEL
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// PSEUDO_PROBE
    0U,	// ARITH_FENCE
    0U,	// STACKMAP
    0U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// PREALLOCATED_SETUP
    0U,	// PREALLOCATED_ARG
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    0U,	// PATCHABLE_FUNCTION_ENTER
    0U,	// PATCHABLE_RET
    0U,	// PATCHABLE_FUNCTION_EXIT
    0U,	// PATCHABLE_TAIL_CALL
    0U,	// PATCHABLE_EVENT_CALL
    0U,	// PATCHABLE_TYPED_EVENT_CALL
    0U,	// ICALL_BRANCH_FUNNEL
    0U,	// G_ASSERT_SEXT
    0U,	// G_ASSERT_ZEXT
    0U,	// G_ASSERT_ALIGN
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_SDIVREM
    0U,	// G_UDIVREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_BUILD_VECTOR
    0U,	// G_BUILD_VECTOR_TRUNC
    0U,	// G_CONCAT_VECTORS
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_FREEZE
    0U,	// G_INTRINSIC_FPTRUNC_ROUND
    0U,	// G_INTRINSIC_TRUNC
    0U,	// G_INTRINSIC_ROUND
    0U,	// G_INTRINSIC_LRINT
    0U,	// G_INTRINSIC_ROUNDEVEN
    0U,	// G_READCYCLECOUNTER
    0U,	// G_LOAD
    0U,	// G_SEXTLOAD
    0U,	// G_ZEXTLOAD
    0U,	// G_INDEXED_LOAD
    0U,	// G_INDEXED_SEXTLOAD
    0U,	// G_INDEXED_ZEXTLOAD
    0U,	// G_STORE
    0U,	// G_INDEXED_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_ATOMICRMW_FADD
    0U,	// G_ATOMICRMW_FSUB
    0U,	// G_ATOMICRMW_FMAX
    0U,	// G_ATOMICRMW_FMIN
    0U,	// G_FENCE
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INVOKE_REGION_START
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_SEXT_INREG
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_FSHL
    0U,	// G_FSHR
    0U,	// G_ROTR
    0U,	// G_ROTL
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDO
    0U,	// G_UADDE
    0U,	// G_USUBO
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SADDE
    0U,	// G_SSUBO
    0U,	// G_SSUBE
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_UADDSAT
    0U,	// G_SADDSAT
    0U,	// G_USUBSAT
    0U,	// G_SSUBSAT
    0U,	// G_USHLSAT
    0U,	// G_SSHLSAT
    0U,	// G_SMULFIX
    0U,	// G_UMULFIX
    0U,	// G_SMULFIXSAT
    0U,	// G_UMULFIXSAT
    0U,	// G_SDIVFIX
    0U,	// G_UDIVFIX
    0U,	// G_SDIVFIXSAT
    0U,	// G_UDIVFIXSAT
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FMAD
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FPOWI
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FLOG10
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_FABS
    0U,	// G_FCOPYSIGN
    0U,	// G_IS_FPCLASS
    0U,	// G_FCANONICALIZE
    0U,	// G_FMINNUM
    0U,	// G_FMAXNUM
    0U,	// G_FMINNUM_IEEE
    0U,	// G_FMAXNUM_IEEE
    0U,	// G_FMINIMUM
    0U,	// G_FMAXIMUM
    0U,	// G_PTR_ADD
    0U,	// G_PTRMASK
    0U,	// G_SMIN
    0U,	// G_SMAX
    0U,	// G_UMIN
    0U,	// G_UMAX
    0U,	// G_ABS
    0U,	// G_LROUND
    0U,	// G_LLROUND
    0U,	// G_BR
    0U,	// G_BRJT
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_CTTZ
    0U,	// G_CTTZ_ZERO_UNDEF
    0U,	// G_CTLZ
    0U,	// G_CTLZ_ZERO_UNDEF
    0U,	// G_CTPOP
    0U,	// G_BSWAP
    0U,	// G_BITREVERSE
    0U,	// G_FCEIL
    0U,	// G_FCOS
    0U,	// G_FSIN
    0U,	// G_FSQRT
    0U,	// G_FFLOOR
    0U,	// G_FRINT
    0U,	// G_FNEARBYINT
    0U,	// G_ADDRSPACE_CAST
    0U,	// G_BLOCK_ADDR
    0U,	// G_JUMP_TABLE
    0U,	// G_DYN_STACKALLOC
    0U,	// G_STRICT_FADD
    0U,	// G_STRICT_FSUB
    0U,	// G_STRICT_FMUL
    0U,	// G_STRICT_FDIV
    0U,	// G_STRICT_FREM
    0U,	// G_STRICT_FMA
    0U,	// G_STRICT_FSQRT
    0U,	// G_READ_REGISTER
    0U,	// G_WRITE_REGISTER
    0U,	// G_MEMCPY
    0U,	// G_MEMCPY_INLINE
    0U,	// G_MEMMOVE
    0U,	// G_MEMSET
    0U,	// G_BZERO
    0U,	// G_VECREDUCE_SEQ_FADD
    0U,	// G_VECREDUCE_SEQ_FMUL
    0U,	// G_VECREDUCE_FADD
    0U,	// G_VECREDUCE_FMUL
    0U,	// G_VECREDUCE_FMAX
    0U,	// G_VECREDUCE_FMIN
    0U,	// G_VECREDUCE_ADD
    0U,	// G_VECREDUCE_MUL
    0U,	// G_VECREDUCE_AND
    0U,	// G_VECREDUCE_OR
    0U,	// G_VECREDUCE_XOR
    0U,	// G_VECREDUCE_SMAX
    0U,	// G_VECREDUCE_SMIN
    0U,	// G_VECREDUCE_UMAX
    0U,	// G_VECREDUCE_UMIN
    0U,	// G_SBFX
    0U,	// G_UBFX
    0U,	// ABSDIFS_H_rr
    0U,	// ABSDIFS_rc
    0U,	// ABSDIFS_rr
    0U,	// ABSDIF_B_rr
    0U,	// ABSDIF_H_rr
    0U,	// ABSDIF_rc
    0U,	// ABSDIF_rr
    0U,	// ABSS_H_rr
    0U,	// ABSS_rr
    0U,	// ABS_B_rr
    0U,	// ABS_H_rr
    0U,	// ABS_rr
    0U,	// ADDC_rc
    0U,	// ADDC_rr
    0U,	// ADDIH_A_rlc
    0U,	// ADDIH_rlc
    0U,	// ADDI_rlc
    0U,	// ADDSC_AT_rr
    1U,	// ADDSC_A_rr
    0U,	// ADDSC_A_srrs
    0U,	// ADDS_H
    0U,	// ADDS_HU
    0U,	// ADDS_U
    0U,	// ADDS_U_rc
    0U,	// ADDS_rc
    0U,	// ADDS_rr
    0U,	// ADDS_srr
    0U,	// ADDX_rc
    0U,	// ADDX_rr
    0U,	// ADD_A_rr
    0U,	// ADD_A_src
    0U,	// ADD_A_srr
    0U,	// ADD_B_rr
    0U,	// ADD_F_rrr
    0U,	// ADD_H_rr
    0U,	// ADD_rc
    0U,	// ADD_rr
    0U,	// ADD_src
    0U,	// ADD_src_15a
    0U,	// ADD_src_a15
    0U,	// ADD_srr
    0U,	// ADD_srr_15a
    0U,	// ADD_srr_a15
    0U,	// ANDN_T
    0U,	// ANDN_rc
    0U,	// ANDN_rr
    0U,	// AND_ANDN_T
    0U,	// AND_AND_T
    0U,	// AND_EQ_rc
    0U,	// AND_EQ_rr
    0U,	// AND_GE_U_rc
    0U,	// AND_GE_U_rr
    0U,	// AND_GE_rc
    0U,	// AND_GE_rr
    0U,	// AND_LT_U_rc
    0U,	// AND_LT_U_rr
    0U,	// AND_LT_rc
    0U,	// AND_LT_rr
    0U,	// AND_NE_rc
    0U,	// AND_NE_rr
    0U,	// AND_NOR_T
    0U,	// AND_OR_T
    0U,	// AND_T
    0U,	// AND_rc
    0U,	// AND_rr
    0U,	// AND_src
    0U,	// AND_srr
    0U,	// BISR_rc
    0U,	// BISR_sc
    0U,	// BMAERGE_rr
    0U,	// BSPLIT_rr
    0U,	// CACHEI_I_bo_bso
    0U,	// CACHEI_I_bo_pos
    0U,	// CACHEI_I_bo_pre
    0U,	// CACHEI_WI_bo_bso
    0U,	// CACHEI_WI_bo_pos
    0U,	// CACHEI_WI_bo_pre
    0U,	// CACHEI_W_bo_bso
    0U,	// CACHEI_W_bo_c
    0U,	// CACHEI_W_bo_pos
    0U,	// CACHEI_W_bo_pre
    0U,	// CACHEI_W_bo_r
    0U,	// CACHE_I_bo_bso
    0U,	// CACHE_I_bo_c
    0U,	// CACHE_I_bo_pos
    0U,	// CACHE_I_bo_pre
    0U,	// CACHE_I_bo_r
    0U,	// CACHE_WI_bo_bso
    0U,	// CACHE_WI_bo_c
    0U,	// CACHE_WI_bo_pos
    0U,	// CACHE_WI_bo_pre
    0U,	// CACHE_WI_bo_r
    0U,	// CACHE_W_bo_bso
    0U,	// CACHE_W_bo_c
    0U,	// CACHE_W_bo_pos
    0U,	// CACHE_W_bo_pre
    0U,	// CACHE_W_bo_r
    17U,	// CADDN_rcr
    0U,	// CADDN_rrr
    0U,	// CADDN_src
    17U,	// CADD_rcr
    0U,	// CADD_rrr
    0U,	// CADD_src
    0U,	// CALLA_b
    0U,	// CALLI_rr
    0U,	// CALL_b
    0U,	// CLO_H_rr
    0U,	// CLO_rr
    0U,	// CLS_H_rr
    0U,	// CLS_rr
    0U,	// CLZ_H_rr
    0U,	// CLZ_rr
    0U,	// CMOVN_src
    0U,	// CMOVN_srr
    0U,	// CMOV_src
    0U,	// CMOV_srr
    0U,	// CMPSWAP_W_bo_bso
    0U,	// CMPSWAP_W_bo_c
    0U,	// CMPSWAP_W_bo_pos
    0U,	// CMPSWAP_W_bo_pre
    0U,	// CMPSWAP_W_bo_r
    0U,	// CMP_F_rr
    0U,	// CRC32B_W_rr
    0U,	// CRC32L_W_rr
    0U,	// CRC32_B_rr
    0U,	// CRCN_rrr
    0U,	// CSUBN_rrr
    0U,	// CSUB_rrr
    0U,	// DEBUG_sr
    0U,	// DEBUG_sys
    1U,	// DEXTR_rrpw
    1U,	// DEXTR_rrrr
    0U,	// DISABLE_sys
    0U,	// DISABLE_sys_1
    0U,	// DIV_F_rr
    0U,	// DIV_U_rr
    0U,	// DIV_rr
    0U,	// DSYNC_sys
    0U,	// DVADJ_rrr
    0U,	// DVINIT_BU_rr
    0U,	// DVINIT_B_rr
    0U,	// DVINIT_HU_rr
    0U,	// DVINIT_H_rr
    0U,	// DVINIT_U_rr
    0U,	// DVINIT_rr
    0U,	// DVSTEP_U_rrr
    0U,	// DVSTEP_rrr
    0U,	// ENABLE_sys
    0U,	// EQANY_B_rc
    0U,	// EQANY_B_rr
    0U,	// EQANY_H_rc
    0U,	// EQANY_H_rr
    0U,	// EQZ_A_rr
    0U,	// EQ_A_rr
    0U,	// EQ_B_rr
    0U,	// EQ_H_rr
    0U,	// EQ_W_rr
    0U,	// EQ_rc
    0U,	// EQ_rr
    0U,	// EQ_src
    0U,	// EQ_srr
    1U,	// EXTR_U_rrpw
    0U,	// EXTR_U_rrrr
    1U,	// EXTR_U_rrrw
    1U,	// EXTR_rrpw
    0U,	// EXTR_rrrr
    1U,	// EXTR_rrrw
    0U,	// FCALLA_b
    0U,	// FCALLA_i
    0U,	// FCALL_b
    0U,	// FRET_sr
    0U,	// FRET_sys
    0U,	// FTOHP_rr
    0U,	// FTOIZ_rr
    0U,	// FTOI_rr
    0U,	// FTOQ31Z_rr
    0U,	// FTOQ31_rr
    0U,	// FTOUZ_rr
    0U,	// FTOU_rr
    0U,	// GE_A_rr
    0U,	// GE_U_rc
    0U,	// GE_U_rr
    0U,	// GE_rc
    0U,	// GE_rr
    0U,	// HPTOF_rr
    1U,	// IMASK_rcpw
    1U,	// IMASK_rcrw
    1U,	// IMASK_rrpw
    1U,	// IMASK_rrrw
    65U,	// INSERT_rcpw
    1U,	// INSERT_rcrr
    65U,	// INSERT_rcrw
    65U,	// INSERT_rrpw
    65U,	// INSERT_rrrr
    65U,	// INSERT_rrrw
    0U,	// INSN_T
    0U,	// INS_T
    0U,	// ISYNC_sys
    0U,	// ITOF_rr
    0U,	// IXMAX_U_rrr
    0U,	// IXMAX_rrr
    0U,	// IXMIN_U_rrr
    0U,	// IXMIN_rrr
    0U,	// JA_b
    0U,	// JEQ_A_brr
    0U,	// JEQ_brc
    0U,	// JEQ_brr
    0U,	// JEQ_sbc1
    0U,	// JEQ_sbc2
    0U,	// JEQ_sbr1
    0U,	// JEQ_sbr2
    0U,	// JGEZ_sbr
    0U,	// JGE_U_brc
    0U,	// JGE_U_brr
    0U,	// JGE_brc
    0U,	// JGE_brr
    0U,	// JGTZ_sbr
    0U,	// JI_rr
    0U,	// JI_sr
    0U,	// JLA_b
    0U,	// JLEZ_sbr
    0U,	// JLI_rr
    0U,	// JLTZ_sbr
    0U,	// JLT_U_brc
    0U,	// JLT_U_brr
    0U,	// JLT_brc
    0U,	// JLT_brr
    0U,	// JL_b
    0U,	// JNED_brc
    0U,	// JNED_brr
    0U,	// JNEI_brc
    0U,	// JNEI_brr
    0U,	// JNE_A_brr
    0U,	// JNE_brc
    0U,	// JNE_brr
    0U,	// JNE_sbc1
    0U,	// JNE_sbc2
    0U,	// JNE_sbr1
    0U,	// JNE_sbr2
    0U,	// JNZ_A_brr
    0U,	// JNZ_A_sbr
    0U,	// JNZ_T_brn
    0U,	// JNZ_T_sbrn
    0U,	// JNZ_sb
    0U,	// JNZ_sbr
    0U,	// JZ_A_brr
    0U,	// JZ_A_sbr
    0U,	// JZ_T_brn
    0U,	// JZ_T_sbrn
    0U,	// JZ_sb
    0U,	// JZ_sbr
    0U,	// J_b
    0U,	// J_sb
    0U,	// LDLCX_abs
    0U,	// LDLCX_bo_bso
    0U,	// LDMST_abs
    0U,	// LDMST_bo_bso
    0U,	// LDMST_bo_c
    0U,	// LDMST_bo_pos
    0U,	// LDMST_bo_pre
    0U,	// LDMST_bo_r
    0U,	// LDUCX_abs
    0U,	// LDUCX_bo_bso
    0U,	// LD_A_abs
    0U,	// LD_A_bo_bso
    0U,	// LD_A_bo_c
    0U,	// LD_A_bo_pos
    0U,	// LD_A_bo_pre
    0U,	// LD_A_bo_r
    0U,	// LD_A_bol
    0U,	// LD_A_sc
    0U,	// LD_A_slr
    0U,	// LD_A_slr_post
    0U,	// LD_A_slro
    0U,	// LD_A_sro
    0U,	// LD_BU_abs
    0U,	// LD_BU_bo_bso
    0U,	// LD_BU_bo_c
    0U,	// LD_BU_bo_pos
    0U,	// LD_BU_bo_pre
    0U,	// LD_BU_bo_r
    0U,	// LD_BU_bol
    0U,	// LD_BU_slr
    0U,	// LD_BU_slr_post
    0U,	// LD_BU_slro
    0U,	// LD_BU_sro
    0U,	// LD_B_abs
    0U,	// LD_B_bo_bso
    0U,	// LD_B_bo_c
    0U,	// LD_B_bo_pos
    0U,	// LD_B_bo_pre
    0U,	// LD_B_bo_r
    0U,	// LD_B_bol
    0U,	// LD_DA_abs
    0U,	// LD_DA_bo_bso
    0U,	// LD_DA_bo_c
    0U,	// LD_DA_bo_pos
    0U,	// LD_DA_bo_pre
    0U,	// LD_DA_bo_r
    0U,	// LD_D_abs
    0U,	// LD_D_bo_bso
    0U,	// LD_D_bo_c
    0U,	// LD_D_bo_pos
    0U,	// LD_D_bo_pre
    0U,	// LD_D_bo_r
    0U,	// LD_HU_abs
    0U,	// LD_HU_bo_bso
    0U,	// LD_HU_bo_c
    0U,	// LD_HU_bo_pos
    0U,	// LD_HU_bo_pre
    0U,	// LD_HU_bo_r
    0U,	// LD_HU_bol
    0U,	// LD_H_abs
    0U,	// LD_H_bo_bso
    0U,	// LD_H_bo_c
    0U,	// LD_H_bo_pos
    0U,	// LD_H_bo_pre
    0U,	// LD_H_bo_r
    0U,	// LD_H_bol
    0U,	// LD_H_slr
    0U,	// LD_H_slr_post
    0U,	// LD_H_slro
    0U,	// LD_H_sro
    0U,	// LD_Q_abs
    0U,	// LD_Q_bo_bso
    0U,	// LD_Q_bo_c
    0U,	// LD_Q_bo_pos
    0U,	// LD_Q_bo_pre
    0U,	// LD_Q_bo_r
    0U,	// LD_W_abs
    0U,	// LD_W_bo_bso
    0U,	// LD_W_bo_c
    0U,	// LD_W_bo_pos
    0U,	// LD_W_bo_pre
    0U,	// LD_W_bo_r
    0U,	// LD_W_bol
    0U,	// LD_W_sc
    0U,	// LD_W_slr
    0U,	// LD_W_slr_post
    0U,	// LD_W_slro
    0U,	// LD_W_sro
    0U,	// LEA_abs
    0U,	// LEA_bo_bso
    0U,	// LEA_bol
    0U,	// LHA_abs
    0U,	// LOOPU_brr
    0U,	// LOOP_brr
    0U,	// LOOP_sbr
    0U,	// LT_A_rr
    0U,	// LT_B
    0U,	// LT_BU
    0U,	// LT_H
    0U,	// LT_HU
    0U,	// LT_U_rc
    0U,	// LT_U_rr
    0U,	// LT_W
    0U,	// LT_WU
    0U,	// LT_rc
    0U,	// LT_rr
    0U,	// LT_src
    0U,	// LT_srr
    2U,	// MADDMS_H_rrr1_LL
    3U,	// MADDMS_H_rrr1_LU
    4U,	// MADDMS_H_rrr1_UL
    5U,	// MADDMS_H_rrr1_UU
    2U,	// MADDM_H_rrr1_LL
    3U,	// MADDM_H_rrr1_LU
    4U,	// MADDM_H_rrr1_UL
    5U,	// MADDM_H_rrr1_UU
    6U,	// MADDRS_H_rrr1_DcEdDaDbUL
    2U,	// MADDRS_H_rrr1_LL
    3U,	// MADDRS_H_rrr1_LU
    4U,	// MADDRS_H_rrr1_UL
    5U,	// MADDRS_H_rrr1_UU
    0U,	// MADDRS_Q_rrr1_L_L
    0U,	// MADDRS_Q_rrr1_U_U
    6U,	// MADDR_H_rrr1_DcEdDaDbUL
    2U,	// MADDR_H_rrr1_LL
    3U,	// MADDR_H_rrr1_LU
    4U,	// MADDR_H_rrr1_UL
    5U,	// MADDR_H_rrr1_UU
    0U,	// MADDR_Q_rrr1_L_L
    0U,	// MADDR_Q_rrr1_U_U
    2U,	// MADDSUMS_H_rrr1_LL
    3U,	// MADDSUMS_H_rrr1_LU
    4U,	// MADDSUMS_H_rrr1_UL
    5U,	// MADDSUMS_H_rrr1_UU
    2U,	// MADDSUM_H_rrr1_LL
    3U,	// MADDSUM_H_rrr1_LU
    4U,	// MADDSUM_H_rrr1_UL
    5U,	// MADDSUM_H_rrr1_UU
    2U,	// MADDSURS_H_rrr1_LL
    3U,	// MADDSURS_H_rrr1_LU
    4U,	// MADDSURS_H_rrr1_UL
    5U,	// MADDSURS_H_rrr1_UU
    2U,	// MADDSUR_H_rrr1_LL
    3U,	// MADDSUR_H_rrr1_LU
    4U,	// MADDSUR_H_rrr1_UL
    5U,	// MADDSUR_H_rrr1_UU
    2U,	// MADDSUS_H_rrr1_LL
    3U,	// MADDSUS_H_rrr1_LU
    4U,	// MADDSUS_H_rrr1_UL
    5U,	// MADDSUS_H_rrr1_UU
    2U,	// MADDSU_H_rrr1_LL
    3U,	// MADDSU_H_rrr1_LU
    4U,	// MADDSU_H_rrr1_UL
    5U,	// MADDSU_H_rrr1_UU
    2U,	// MADDS_H_rrr1_LL
    3U,	// MADDS_H_rrr1_LU
    4U,	// MADDS_H_rrr1_UL
    5U,	// MADDS_H_rrr1_UU
    33U,	// MADDS_Q_rrr1
    7U,	// MADDS_Q_rrr1_L
    0U,	// MADDS_Q_rrr1_L_L
    8U,	// MADDS_Q_rrr1_U
    0U,	// MADDS_Q_rrr1_U_U
    33U,	// MADDS_Q_rrr1_e
    7U,	// MADDS_Q_rrr1_e_L
    0U,	// MADDS_Q_rrr1_e_L_L
    8U,	// MADDS_Q_rrr1_e_U
    0U,	// MADDS_Q_rrr1_e_U_U
    17U,	// MADDS_U_rcr
    17U,	// MADDS_U_rcr_e
    0U,	// MADDS_U_rrr2
    0U,	// MADDS_U_rrr2_e
    17U,	// MADDS_rcr
    17U,	// MADDS_rcr_e
    0U,	// MADDS_rrr2
    0U,	// MADDS_rrr2_e
    0U,	// MADD_F_rrr
    2U,	// MADD_H_rrr1_LL
    3U,	// MADD_H_rrr1_LU
    4U,	// MADD_H_rrr1_UL
    5U,	// MADD_H_rrr1_UU
    33U,	// MADD_Q_rrr1
    7U,	// MADD_Q_rrr1_L
    0U,	// MADD_Q_rrr1_L_L
    8U,	// MADD_Q_rrr1_U
    0U,	// MADD_Q_rrr1_U_U
    33U,	// MADD_Q_rrr1_e
    7U,	// MADD_Q_rrr1_e_L
    0U,	// MADD_Q_rrr1_e_L_L
    8U,	// MADD_Q_rrr1_e_U
    0U,	// MADD_Q_rrr1_e_U_U
    17U,	// MADD_U_rcr
    0U,	// MADD_U_rrr2
    17U,	// MADD_rcr
    17U,	// MADD_rcr_e
    0U,	// MADD_rrr2
    0U,	// MADD_rrr2_e
    0U,	// MAX_B
    0U,	// MAX_BU
    0U,	// MAX_H
    0U,	// MAX_HU
    0U,	// MAX_U_rc
    0U,	// MAX_U_rr
    0U,	// MAX_rc
    0U,	// MAX_rr
    0U,	// MFCR_rlc
    0U,	// MIN_B
    0U,	// MIN_BU
    0U,	// MIN_H
    0U,	// MIN_HU
    0U,	// MIN_U_rc
    0U,	// MIN_U_rr
    0U,	// MIN_rc
    0U,	// MIN_rr
    0U,	// MOVH_A_rlc
    0U,	// MOVH_rlc
    0U,	// MOV_AA_rr
    0U,	// MOV_AA_srr
    0U,	// MOV_A_rr
    0U,	// MOV_A_src
    0U,	// MOV_A_srr
    0U,	// MOV_D_rr
    0U,	// MOV_D_srr
    0U,	// MOV_U_rlc
    0U,	// MOV_rlcDc
    0U,	// MOV_rlcEc
    0U,	// MOV_rrDcDb
    0U,	// MOV_rrEcDaDb
    0U,	// MOV_rrEcDb
    0U,	// MOV_sc
    0U,	// MOV_srcDa
    0U,	// MOV_srcEa
    0U,	// MOV_srr
    2U,	// MSUBADMS_H_rrr1_LL
    3U,	// MSUBADMS_H_rrr1_LU
    4U,	// MSUBADMS_H_rrr1_UL
    5U,	// MSUBADMS_H_rrr1_UU
    2U,	// MSUBADM_H_rrr1_LL
    3U,	// MSUBADM_H_rrr1_LU
    4U,	// MSUBADM_H_rrr1_UL
    5U,	// MSUBADM_H_rrr1_UU
    2U,	// MSUBADRS_H_rrr1_LL
    3U,	// MSUBADRS_H_rrr1_LU
    4U,	// MSUBADRS_H_rrr1_UL
    5U,	// MSUBADRS_H_rrr1_UU
    2U,	// MSUBADR_H_rrr1_LL
    3U,	// MSUBADR_H_rrr1_LU
    4U,	// MSUBADR_H_rrr1_UL
    5U,	// MSUBADR_H_rrr1_UU
    2U,	// MSUBADS_H_rrr1_LL
    3U,	// MSUBADS_H_rrr1_LU
    4U,	// MSUBADS_H_rrr1_UL
    5U,	// MSUBADS_H_rrr1_UU
    2U,	// MSUBAD_H_rrr1_LL
    3U,	// MSUBAD_H_rrr1_LU
    4U,	// MSUBAD_H_rrr1_UL
    5U,	// MSUBAD_H_rrr1_UU
    2U,	// MSUBMS_H_rrr1_LL
    3U,	// MSUBMS_H_rrr1_LU
    4U,	// MSUBMS_H_rrr1_UL
    5U,	// MSUBMS_H_rrr1_UU
    2U,	// MSUBM_H_rrr1_LL
    3U,	// MSUBM_H_rrr1_LU
    4U,	// MSUBM_H_rrr1_UL
    5U,	// MSUBM_H_rrr1_UU
    6U,	// MSUBRS_H_rrr1_DcEdDaDbUL
    2U,	// MSUBRS_H_rrr1_LL
    3U,	// MSUBRS_H_rrr1_LU
    4U,	// MSUBRS_H_rrr1_UL
    5U,	// MSUBRS_H_rrr1_UU
    0U,	// MSUBRS_Q_rrr1_L_L
    0U,	// MSUBRS_Q_rrr1_U_U
    6U,	// MSUBR_H_rrr1_DcEdDaDbUL
    2U,	// MSUBR_H_rrr1_LL
    3U,	// MSUBR_H_rrr1_LU
    4U,	// MSUBR_H_rrr1_UL
    5U,	// MSUBR_H_rrr1_UU
    0U,	// MSUBR_Q_rrr1_L_L
    0U,	// MSUBR_Q_rrr1_U_U
    2U,	// MSUBS_H_rrr1_LL
    3U,	// MSUBS_H_rrr1_LU
    4U,	// MSUBS_H_rrr1_UL
    5U,	// MSUBS_H_rrr1_UU
    33U,	// MSUBS_Q_rrr1
    7U,	// MSUBS_Q_rrr1_L
    0U,	// MSUBS_Q_rrr1_L_L
    8U,	// MSUBS_Q_rrr1_U
    0U,	// MSUBS_Q_rrr1_U_U
    33U,	// MSUBS_Q_rrr1_e
    7U,	// MSUBS_Q_rrr1_e_L
    0U,	// MSUBS_Q_rrr1_e_L_L
    8U,	// MSUBS_Q_rrr1_e_U
    0U,	// MSUBS_Q_rrr1_e_U_U
    17U,	// MSUBS_U_rcr
    17U,	// MSUBS_U_rcr_e
    0U,	// MSUBS_U_rrr2
    0U,	// MSUBS_U_rrr2_e
    17U,	// MSUBS_rcr
    17U,	// MSUBS_rcr_e
    0U,	// MSUBS_rrr2
    0U,	// MSUBS_rrr2_e
    0U,	// MSUB_F_rrr
    2U,	// MSUB_H_rrr1_LL
    3U,	// MSUB_H_rrr1_LU
    4U,	// MSUB_H_rrr1_UL
    5U,	// MSUB_H_rrr1_UU
    33U,	// MSUB_Q_rrr1
    7U,	// MSUB_Q_rrr1_L
    0U,	// MSUB_Q_rrr1_L_L
    8U,	// MSUB_Q_rrr1_U
    0U,	// MSUB_Q_rrr1_U_U
    33U,	// MSUB_Q_rrr1_e
    7U,	// MSUB_Q_rrr1_e_L
    0U,	// MSUB_Q_rrr1_e_L_L
    8U,	// MSUB_Q_rrr1_e_U
    0U,	// MSUB_Q_rrr1_e_U_U
    17U,	// MSUB_U_rcr
    0U,	// MSUB_U_rrr2
    17U,	// MSUB_rcr
    17U,	// MSUB_rcr_e
    0U,	// MSUB_rrr2
    0U,	// MSUB_rrr2_e
    0U,	// MTCR_rlc
    9U,	// MULM_H_rr1_LL2e
    10U,	// MULM_H_rr1_LU2e
    11U,	// MULM_H_rr1_UL2e
    12U,	// MULM_H_rr1_UU2e
    9U,	// MULR_H_rr1_LL2e
    10U,	// MULR_H_rr1_LU2e
    11U,	// MULR_H_rr1_UL2e
    12U,	// MULR_H_rr1_UU2e
    0U,	// MULR_Q_rr1_2LL
    0U,	// MULR_Q_rr1_2UU
    0U,	// MULS_U_rc
    0U,	// MULS_U_rr2
    0U,	// MULS_rc
    0U,	// MULS_rr2
    0U,	// MUL_F_rrr
    9U,	// MUL_H_rr1_LL2e
    10U,	// MUL_H_rr1_LU2e
    11U,	// MUL_H_rr1_UL2e
    12U,	// MUL_H_rr1_UU2e
    0U,	// MUL_Q_rr1_2LL
    0U,	// MUL_Q_rr1_2UU
    13U,	// MUL_Q_rr1_2_L
    13U,	// MUL_Q_rr1_2_Le
    14U,	// MUL_Q_rr1_2_U
    14U,	// MUL_Q_rr1_2_Ue
    49U,	// MUL_Q_rr1_2__
    49U,	// MUL_Q_rr1_2__e
    0U,	// MUL_U_rc
    0U,	// MUL_U_rr2
    0U,	// MUL_rc
    0U,	// MUL_rc_e
    0U,	// MUL_rr2
    0U,	// MUL_rr2_e
    0U,	// MUL_srr
    0U,	// NAND_T
    0U,	// NAND_rc
    0U,	// NAND_rr
    0U,	// NEZ_A
    0U,	// NE_A
    0U,	// NE_rc
    0U,	// NE_rr
    0U,	// NOP_sr
    0U,	// NOP_sys
    0U,	// NOR_T
    0U,	// NOR_rc
    0U,	// NOR_rr
    0U,	// NOT_sr
    0U,	// ORN_T
    0U,	// ORN_rc
    0U,	// ORN_rr
    0U,	// OR_ANDN_T
    0U,	// OR_AND_T
    0U,	// OR_EQ_rc
    0U,	// OR_EQ_rr
    0U,	// OR_GE_U_rc
    0U,	// OR_GE_U_rr
    0U,	// OR_GE_rc
    0U,	// OR_GE_rr
    0U,	// OR_LT_U_rc
    0U,	// OR_LT_U_rr
    0U,	// OR_LT_rc
    0U,	// OR_LT_rr
    0U,	// OR_NE_rc
    0U,	// OR_NE_rr
    0U,	// OR_NOR_T
    0U,	// OR_OR_T
    0U,	// OR_T
    0U,	// OR_rc
    0U,	// OR_rr
    0U,	// OR_sc
    0U,	// OR_srr
    0U,	// PACK_rrr
    0U,	// PARITY_rr
    0U,	// POPCNT_W_rr
    0U,	// Q31TOF_rr
    0U,	// QSEED_F_rr
    0U,	// RESTORE_sys
    0U,	// RET_sr
    0U,	// RET_sys
    0U,	// RFE_sr
    0U,	// RFE_sys
    0U,	// RFM_sys
    0U,	// RSLCX_sys
    0U,	// RSTV_sys
    0U,	// RSUBS_U_rc
    0U,	// RSUBS_rc
    0U,	// RSUB_rc
    0U,	// RSUB_sr
    0U,	// SAT_BU_rr
    0U,	// SAT_BU_sr
    0U,	// SAT_B_rr
    0U,	// SAT_B_sr
    0U,	// SAT_HU_rr
    0U,	// SAT_HU_sr
    0U,	// SAT_H_rr
    0U,	// SAT_H_sr
    17U,	// SELN_rcr
    0U,	// SELN_rrr
    17U,	// SEL_rcr
    0U,	// SEL_rrr
    0U,	// SHAS_rc
    0U,	// SHAS_rr
    0U,	// SHA_H_rc
    0U,	// SHA_H_rr
    0U,	// SHA_rc
    0U,	// SHA_rr
    0U,	// SHA_src
    0U,	// SHUFFLE_rc
    0U,	// SH_ANDN_T
    0U,	// SH_AND_T
    0U,	// SH_EQ_rc
    0U,	// SH_EQ_rr
    0U,	// SH_GE_U_rc
    0U,	// SH_GE_U_rr
    0U,	// SH_GE_rc
    0U,	// SH_GE_rr
    0U,	// SH_H_rc
    0U,	// SH_H_rr
    0U,	// SH_LT_U_rc
    0U,	// SH_LT_U_rr
    0U,	// SH_LT_rc
    0U,	// SH_LT_rr
    0U,	// SH_NAND_T
    0U,	// SH_NE_rc
    0U,	// SH_NE_rr
    0U,	// SH_NOR_T
    0U,	// SH_ORN_T
    0U,	// SH_OR_T
    0U,	// SH_XNOR_T
    0U,	// SH_XOR_T
    0U,	// SH_rc
    0U,	// SH_rr
    0U,	// SH_src
    0U,	// STLCX_abs
    0U,	// STLCX_bo_bso
    0U,	// STUCX_abs
    0U,	// STUCX_bo_bso
    0U,	// ST_A_abs
    0U,	// ST_A_bo_bso
    0U,	// ST_A_bo_c
    0U,	// ST_A_bo_pos
    0U,	// ST_A_bo_pre
    0U,	// ST_A_bo_r
    0U,	// ST_A_bol
    0U,	// ST_A_sc
    0U,	// ST_A_sro
    0U,	// ST_A_ssr
    0U,	// ST_A_ssr_pos
    0U,	// ST_A_ssro
    0U,	// ST_B_abs
    0U,	// ST_B_bo_bso
    0U,	// ST_B_bo_c
    0U,	// ST_B_bo_pos
    0U,	// ST_B_bo_pre
    0U,	// ST_B_bo_r
    0U,	// ST_B_bol
    0U,	// ST_B_sro
    0U,	// ST_B_ssr
    0U,	// ST_B_ssr_pos
    0U,	// ST_B_ssro
    0U,	// ST_DA_abs
    0U,	// ST_DA_bo_bso
    0U,	// ST_DA_bo_c
    0U,	// ST_DA_bo_pos
    0U,	// ST_DA_bo_pre
    0U,	// ST_DA_bo_r
    0U,	// ST_D_abs
    0U,	// ST_D_bo_bso
    0U,	// ST_D_bo_c
    0U,	// ST_D_bo_pos
    0U,	// ST_D_bo_pre
    0U,	// ST_D_bo_r
    0U,	// ST_H_abs
    0U,	// ST_H_bo_bso
    0U,	// ST_H_bo_c
    0U,	// ST_H_bo_pos
    0U,	// ST_H_bo_pre
    0U,	// ST_H_bo_r
    0U,	// ST_H_bol
    0U,	// ST_H_sro
    0U,	// ST_H_ssr
    0U,	// ST_H_ssr_pos
    0U,	// ST_H_ssro
    0U,	// ST_Q_abs
    0U,	// ST_Q_bo_bso
    0U,	// ST_Q_bo_c
    0U,	// ST_Q_bo_pos
    0U,	// ST_Q_bo_pre
    0U,	// ST_Q_bo_r
    0U,	// ST_T
    0U,	// ST_W_abs
    0U,	// ST_W_bo_bso
    0U,	// ST_W_bo_c
    0U,	// ST_W_bo_pos
    0U,	// ST_W_bo_pre
    0U,	// ST_W_bo_r
    0U,	// ST_W_bol
    0U,	// ST_W_sro
    0U,	// ST_W_ssr
    0U,	// ST_W_ssr_pos
    0U,	// ST_W_ssro
    0U,	// SUBC_rr
    0U,	// SUBS_HU_rr
    0U,	// SUBS_H_rr
    0U,	// SUBS_U_rr
    0U,	// SUBS_rr
    0U,	// SUBS_srr
    0U,	// SUBX_rr
    0U,	// SUB_A_rr
    0U,	// SUB_A_sc
    0U,	// SUB_B_rr
    0U,	// SUB_F_rrr
    0U,	// SUB_H_rr
    0U,	// SUB_rr
    0U,	// SUB_srr
    0U,	// SUB_srr_15a
    0U,	// SUB_srr_a15
    0U,	// SVLCX_sys
    0U,	// SWAPMSK_W_bo_bso
    0U,	// SWAPMSK_W_bo_c
    0U,	// SWAPMSK_W_bo_pos
    0U,	// SWAPMSK_W_bo_pre
    0U,	// SWAPMSK_W_bo_r
    0U,	// SWAP_W_abs
    0U,	// SWAP_W_bo_bso
    0U,	// SWAP_W_bo_c
    0U,	// SWAP_W_bo_pos
    0U,	// SWAP_W_bo_pre
    0U,	// SWAP_W_bo_r
    0U,	// SYSCALL_rc
    0U,	// TRAPSV_sys
    0U,	// TRAPV_sys
    0U,	// UNPACK_rr
    0U,	// UPDFL_rr
    0U,	// UTOF_rr
    0U,	// WAIT_sys
    0U,	// XNOR_T
    0U,	// XNOR_rc
    0U,	// XNOR_rr
    0U,	// XOR_EQ_rc
    0U,	// XOR_EQ_rr
    0U,	// XOR_GE_U_rc
    0U,	// XOR_GE_U_rr
    0U,	// XOR_GE_rc
    0U,	// XOR_GE_rr
    0U,	// XOR_LT_U_rc
    0U,	// XOR_LT_U_rr
    0U,	// XOR_LT_rc
    0U,	// XOR_LT_rr
    0U,	// XOR_NE_rc
    0U,	// XOR_NE_rr
    0U,	// XOR_T
    0U,	// XOR_rc
    0U,	// XOR_rr
    0U,	// XOR_srr
  };

  // Emit the opcode for the instruction.
  uint64_t Bits = 0;
  Bits |= (uint64_t)OpInfo0[MCInst_getOpcode(MI)] << 0;
  Bits |= (uint64_t)OpInfo1[MCInst_getOpcode(MI)] << 32;
  MnemonicBitsInfo MBI = {AsmStrs+(Bits & 4095)-1, Bits};
  return MBI;

}
/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void printInstruction(MCInst *MI, uint64_t Address, SStream *O) {
  SStream_concat0(O, "");
  MnemonicBitsInfo MnemonicInfo = getMnemonic(MI, O);

  SStream_concat0(O, MnemonicInfo.first);

  uint64_t Bits = MnemonicInfo.second;
  assert(Bits != 0 && "Cannot print this instruction.");

  // Fragment 0 encoded into 4 bits for 13 unique commands.
  switch ((Bits >> 12) & 15) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // DBG_VALUE, DBG_VALUE_LIST, DBG_INSTR_REF, DBG_PHI, DBG_LABEL, BUNDLE, ...
    return;
    break;
  case 1:
    // ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ABSDIF_H_rr, ABSDIF...
    printOperand(MI, 0, O);
    break;
  case 2:
    // AND_src, BISR_sc, LD_A_sc, LD_W_sc, MOV_sc, OR_sc, ST_A_sc, SUB_A_sc
    printZExtImm_8(MI, 0, O);
    break;
  case 3:
    // BISR_rc, SYSCALL_rc
    printSExtImm_9(MI, 0, O);
    return;
    break;
  case 4:
    // CALLA_b, CALL_b, FCALLA_b, FCALL_b, JA_b, JLA_b, JL_b, J_b
    printDisp24Imm(MI, 0, O);
    return;
    break;
  case 5:
    // CALLI_rr, CMPSWAP_W_bo_bso, CMPSWAP_W_bo_c, CMPSWAP_W_bo_pos, CMPSWAP_...
    printOperand(MI, 1, O);
    break;
  case 6:
    // JEQ_sbc1, JEQ_sbc2, JNE_sbc1, JNE_sbc2
    printSExtImm_4(MI, 0, O);
    SStream_concat0(O, ", ");
    printDisp4Imm(MI, 1, O);
    return;
    break;
  case 7:
    // JNZ_sb, JZ_sb, J_sb
    printDisp8Imm(MI, 0, O);
    return;
    break;
  case 8:
    // LDLCX_abs, LDUCX_abs, STLCX_abs, STUCX_abs, ST_T
    printOff18Imm(MI, 0, O);
    break;
  case 9:
    // LDMST_abs, ST_A_abs, ST_B_abs, ST_DA_abs, ST_D_abs, ST_H_abs, ST_Q_abs...
    printOff18Imm(MI, 1, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 0, O);
    return;
    break;
  case 10:
    // LOOPU_brr
    printDisp15Imm(MI, 0, O);
    return;
    break;
  case 11:
    // MTCR_rlc
    printSExtImm_16(MI, 0, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 1, O);
    return;
    break;
  case 12:
    // ST_A_ssro, ST_B_ssro, ST_H_ssro, ST_W_ssro
    printZExtImm_4(MI, 1, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 0, O);
    return;
    break;
  }


  // Fragment 1 encoded into 4 bits for 13 unique commands.
  switch ((Bits >> 16) & 15) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ABSDIF_H_rr, ABSDIF...
    SStream_concat0(O, ", ");
    break;
  case 1:
    // ADD_src_a15, ADD_srr_a15, CADDN_src, CADD_src, CMOVN_src, CMOVN_srr, C...
    SStream_concat0(O, ", %d15, ");
    break;
  case 2:
    // AND_src, BISR_sc, CALLI_rr, DISABLE_sys_1, FCALLA_i, JI_rr, JI_sr, JLI...
    return;
    break;
  case 3:
    // CACHEI_I_bo_bso, CACHEI_I_bo_pre, CACHEI_WI_bo_bso, CACHEI_WI_bo_pre, ...
    SStream_concat1(O, ']');
    break;
  case 4:
    // CACHEI_I_bo_pos, CACHEI_WI_bo_pos, CACHEI_W_bo_pos, CACHE_I_bo_pos, CA...
    SStream_concat0(O, "+]");
    set_mem_access(MI, false);
    break;
  case 5:
    // CACHEI_W_bo_c, CACHE_I_bo_c, CACHE_WI_bo_c, CACHE_W_bo_c
    SStream_concat0(O, "+c]");
    set_mem_access(MI, false);
    printSExtImm_10(MI, 1, O);
    return;
    break;
  case 6:
    // CACHEI_W_bo_r, CACHE_I_bo_r, CACHE_WI_bo_r, CACHE_W_bo_r
    SStream_concat0(O, "+r]");
    set_mem_access(MI, false);
    return;
    break;
  case 7:
    // LD_A_bo_bso, LD_A_bo_c, LD_A_bo_pos, LD_A_bo_r, LD_A_bol, LD_A_slr, LD...
    SStream_concat0(O, ", [");
    set_mem_access(MI, true);
    break;
  case 8:
    // LD_A_bo_pre, LD_BU_bo_pre, LD_B_bo_pre, LD_DA_bo_pre, LD_D_bo_pre, LD_...
    SStream_concat0(O, ", [+");
    set_mem_access(MI, true);
    break;
  case 9:
    // LD_A_slro, LD_BU_slro, LD_H_slro, LD_W_slro
    SStream_concat0(O, ", [%a15]");
    set_mem_access(MI, true);
    printZExtImm_4(MI, 1, O);
    return;
    break;
  case 10:
    // ST_A_sc
    SStream_concat0(O, ", %a15");
    return;
    break;
  case 11:
    // ST_A_ssr, ST_B_ssr, ST_H_ssr, ST_W_ssr
    SStream_concat0(O, "], ");
    set_mem_access(MI, false);
    printOperand(MI, 1, O);
    return;
    break;
  case 12:
    // ST_A_ssr_pos, ST_B_ssr_pos, ST_H_ssr_pos, ST_W_ssr_pos
    SStream_concat0(O, "+], ");
    set_mem_access(MI, false);
    printOperand(MI, 1, O);
    return;
    break;
  }


  // Fragment 2 encoded into 4 bits for 14 unique commands.
  switch ((Bits >> 20) & 15) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ABSDIF_H_rr, ABSDIF...
    printOperand(MI, 1, O);
    break;
  case 1:
    // ADDSC_A_rr, ADD_F_rrr, CADDN_rcr, CADD_rcr, CRC32B_W_rr, CRC32L_W_rr, ...
    printOperand(MI, 2, O);
    break;
  case 2:
    // ADD_A_src, ADD_src, ADD_src_15a, ADD_src_a15, CADDN_src, CADD_src, CMO...
    printSExtImm_4(MI, 1, O);
    return;
    break;
  case 3:
    // CACHEI_I_bo_bso, CACHEI_I_bo_pos, CACHEI_I_bo_pre, CACHEI_WI_bo_bso, C...
    printSExtImm_10(MI, 1, O);
    return;
    break;
  case 4:
    // CADDN_rrr, CADD_rrr, CRCN_rrr, CSUBN_rrr, CSUB_rrr, MADDMS_H_rrr1_LL, ...
    printOperand(MI, 3, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 1, O);
    break;
  case 5:
    // CMPSWAP_W_bo_bso, CMPSWAP_W_bo_c, CMPSWAP_W_bo_pos, CMPSWAP_W_bo_pre, ...
    printSExtImm_10(MI, 2, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 0, O);
    return;
    break;
  case 6:
    // CMPSWAP_W_bo_r, LDMST_bo_r, ST_A_bo_pos, ST_A_bo_pre, ST_B_bo_pos, ST_...
    printOperand(MI, 0, O);
    break;
  case 7:
    // JEQ_brc, JGE_U_brc, JGE_brc, JLT_U_brc, JLT_brc, JNED_brc, JNEI_brc, J...
    printSExtImm_4(MI, 2, O);
    SStream_concat0(O, ", ");
    printDisp15Imm(MI, 0, O);
    return;
    break;
  case 8:
    // JEQ_sbr1, JEQ_sbr2, JGEZ_sbr, JGTZ_sbr, JLEZ_sbr, JLTZ_sbr, JNE_sbr1, ...
    printDisp4Imm(MI, 1, O);
    return;
    break;
  case 9:
    // LD_A_abs, LD_BU_abs, LD_B_abs, LD_DA_abs, LD_D_abs, LD_HU_abs, LD_H_ab...
    printOff18Imm(MI, 1, O);
    return;
    break;
  case 10:
    // LD_A_sro, LD_BU_sro, LD_H_sro, LD_W_sro, MOV_A_src, ST_A_sro, ST_B_sro...
    printZExtImm_4(MI, 1, O);
    break;
  case 11:
    // LOOP_brr
    printDisp15Imm(MI, 1, O);
    return;
    break;
  case 12:
    // MFCR_rlc, MOVH_A_rlc, MOVH_rlc, MOV_U_rlc, MOV_rlcDc, MOV_rlcEc
    printZExtImm_16(MI, 1, O);
    return;
    break;
  case 13:
    // ST_A_bol, ST_B_bol, ST_H_bol, ST_W_bol
    printSExtImm_16(MI, 2, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 1, O);
    return;
    break;
  }


  // Fragment 3 encoded into 4 bits for 11 unique commands.
  switch ((Bits >> 24) & 15) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ABSDIF_H_rr, ABSDIF...
    SStream_concat0(O, ", ");
    break;
  case 1:
    // ABS_B_rr, ABS_H_rr, ABS_rr, ADDS_srr, ADD_A_srr, ADD_srr, ADD_srr_15a,...
    return;
    break;
  case 2:
    // ADDSC_A_srrs
    SStream_concat0(O, ", %d15, ");
    printZExtImm_2(MI, 2, O);
    return;
    break;
  case 3:
    // LD_A_bo_bso, LD_A_bo_pre, LD_A_bol, LD_A_slr, LD_BU_bo_bso, LD_BU_bo_p...
    SStream_concat1(O, ']');
    break;
  case 4:
    // LD_A_bo_c, LD_BU_bo_c, LD_B_bo_c, LD_DA_bo_c, LD_D_bo_c, LD_HU_bo_c, L...
    SStream_concat0(O, "+c]");
    set_mem_access(MI, false);
    printSExtImm_10(MI, 2, O);
    return;
    break;
  case 5:
    // LD_A_bo_pos, LD_A_slr_post, LD_BU_bo_pos, LD_BU_slr_post, LD_B_bo_pos,...
    SStream_concat0(O, "+]");
    set_mem_access(MI, false);
    break;
  case 6:
    // LD_A_bo_r, LD_BU_bo_r, LD_B_bo_r, LD_DA_bo_r, LD_D_bo_r, LD_HU_bo_r, L...
    SStream_concat0(O, "+r]");
    set_mem_access(MI, false);
    return;
    break;
  case 7:
    // MADDRS_Q_rrr1_L_L, MADDR_Q_rrr1_L_L, MADDS_Q_rrr1_L_L, MADDS_Q_rrr1_e_...
    SStream_concat0(O, "L, ");
    printOperand(MI, 2, O);
    SStream_concat0(O, "L, ");
    break;
  case 8:
    // MADDRS_Q_rrr1_U_U, MADDR_Q_rrr1_U_U, MADDS_Q_rrr1_U_U, MADDS_Q_rrr1_e_...
    SStream_concat0(O, "U, ");
    printOperand(MI, 2, O);
    SStream_concat0(O, "U, ");
    break;
  case 9:
    // ST_A_sro
    SStream_concat0(O, ", %a15");
    return;
    break;
  case 10:
    // ST_B_sro, ST_H_sro, ST_W_sro
    SStream_concat0(O, ", %d15");
    return;
    break;
  }


  // Fragment 4 encoded into 4 bits for 10 unique commands.
  switch ((Bits >> 28) & 15) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ABSDIF_H_rr, ABSDIF...
    printOperand(MI, 2, O);
    break;
  case 1:
    // ABSDIF_rc, ADDC_rc, ADDS_U_rc, ADDS_rc, ADDX_rc, ADD_rc, ANDN_rc, AND_...
    printSExtImm_9(MI, 2, O);
    return;
    break;
  case 2:
    // ADDIH_A_rlc, ADDIH_rlc, ADDI_rlc
    printSExtImm_16(MI, 2, O);
    return;
    break;
  case 3:
    // ADDSC_A_rr, ADD_F_rrr, CADDN_rcr, CADD_rcr, CRC32B_W_rr, CRC32L_W_rr, ...
    printOperand(MI, 1, O);
    break;
  case 4:
    // ANDN_T, AND_ANDN_T, AND_AND_T, AND_NOR_T, AND_OR_T, AND_T, INSN_T, INS...
    printZExtImm_4(MI, 3, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 2, O);
    SStream_concat0(O, ", ");
    printZExtImm_4(MI, 4, O);
    return;
    break;
  case 5:
    // JEQ_A_brr, JEQ_brr, JGE_U_brr, JGE_brr, JLT_U_brr, JLT_brr, JNED_brr, ...
    printDisp15Imm(MI, 2, O);
    return;
    break;
  case 6:
    // LD_A_bo_bso, LD_A_bo_pos, LD_A_bo_pre, LD_BU_bo_bso, LD_BU_bo_pos, LD_...
    printSExtImm_10(MI, 2, O);
    return;
    break;
  case 7:
    // LD_A_slr, LD_A_slr_post, LD_BU_slr, LD_BU_slr_post, LD_H_slr, LD_H_slr...
    return;
    break;
  case 8:
    // MADDRS_Q_rrr1_L_L, MADDRS_Q_rrr1_U_U, MADDR_Q_rrr1_L_L, MADDR_Q_rrr1_U...
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 9:
    // MULR_Q_rr1_2LL, MULR_Q_rr1_2UU, MUL_Q_rr1_2LL, MUL_Q_rr1_2UU
    printZExtImm_2(MI, 3, O);
    return;
    break;
  }


  // Fragment 5 encoded into 4 bits for 15 unique commands.
  switch ((Bits >> 32) & 15) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ABSDIF_H_rr, ABSDIF...
    return;
    break;
  case 1:
    // ADDSC_A_rr, CADDN_rcr, CADD_rcr, DEXTR_rrpw, DEXTR_rrrr, EXTR_U_rrpw, ...
    SStream_concat0(O, ", ");
    break;
  case 2:
    // MADDMS_H_rrr1_LL, MADDM_H_rrr1_LL, MADDRS_H_rrr1_LL, MADDR_H_rrr1_LL, ...
    SStream_concat0(O, " LL, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 3:
    // MADDMS_H_rrr1_LU, MADDM_H_rrr1_LU, MADDRS_H_rrr1_LU, MADDR_H_rrr1_LU, ...
    SStream_concat0(O, " LU, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 4:
    // MADDMS_H_rrr1_UL, MADDM_H_rrr1_UL, MADDRS_H_rrr1_UL, MADDR_H_rrr1_UL, ...
    SStream_concat0(O, " UL, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 5:
    // MADDMS_H_rrr1_UU, MADDM_H_rrr1_UU, MADDRS_H_rrr1_UU, MADDR_H_rrr1_UU, ...
    SStream_concat0(O, " UU, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 6:
    // MADDRS_H_rrr1_DcEdDaDbUL, MADDR_H_rrr1_DcEdDaDbUL, MSUBRS_H_rrr1_DcEdD...
    SStream_concat0(O, ", UL, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 7:
    // MADDS_Q_rrr1_L, MADDS_Q_rrr1_e_L, MADD_Q_rrr1_L, MADD_Q_rrr1_e_L, MSUB...
    SStream_concat0(O, " L, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 8:
    // MADDS_Q_rrr1_U, MADDS_Q_rrr1_e_U, MADD_Q_rrr1_U, MADD_Q_rrr1_e_U, MSUB...
    SStream_concat0(O, " U, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 9:
    // MULM_H_rr1_LL2e, MULR_H_rr1_LL2e, MUL_H_rr1_LL2e
    SStream_concat0(O, "LL, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 10:
    // MULM_H_rr1_LU2e, MULR_H_rr1_LU2e, MUL_H_rr1_LU2e
    SStream_concat0(O, "LU, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 11:
    // MULM_H_rr1_UL2e, MULR_H_rr1_UL2e, MUL_H_rr1_UL2e
    SStream_concat0(O, "UL, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 12:
    // MULM_H_rr1_UU2e, MULR_H_rr1_UU2e, MUL_H_rr1_UU2e
    SStream_concat0(O, "UU, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 13:
    // MUL_Q_rr1_2_L, MUL_Q_rr1_2_Le
    SStream_concat0(O, "L, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 14:
    // MUL_Q_rr1_2_U, MUL_Q_rr1_2_Ue
    SStream_concat0(O, "U, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  }


  // Fragment 6 encoded into 2 bits for 4 unique commands.
  switch ((Bits >> 36) & 3) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ADDSC_A_rr, DEXTR_rrpw, DEXTR_rrrr, EXTR_U_rrpw, EXTR_U_rrrw, EXTR_rrp...
    printOperand(MI, 3, O);
    break;
  case 1:
    // CADDN_rcr, CADD_rcr, MADDS_U_rcr, MADDS_U_rcr_e, MADDS_rcr, MADDS_rcr_...
    printSExtImm_9(MI, 3, O);
    return;
    break;
  case 2:
    // MADDS_Q_rrr1, MADDS_Q_rrr1_e, MADD_Q_rrr1, MADD_Q_rrr1_e, MSUBS_Q_rrr1...
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 3:
    // MUL_Q_rr1_2__, MUL_Q_rr1_2__e
    printZExtImm_2(MI, 3, O);
    return;
    break;
  }


  // Fragment 7 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 38) & 1) {
    // INSERT_rcpw, INSERT_rcrw, INSERT_rrpw, INSERT_rrrr, INSERT_rrrw
    SStream_concat0(O, ", ");
    printOperand(MI, 4, O);
    return;
  } else {
    // ADDSC_A_rr, DEXTR_rrpw, DEXTR_rrrr, EXTR_U_rrpw, EXTR_U_rrrw, EXTR_rrp...
    return;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 61 && "Invalid register number!");

  static const char AsmStrs[] = {
  /* 0 */ "d10\0"
  /* 4 */ "e10\0"
  /* 8 */ "p10\0"
  /* 12 */ "a0\0"
  /* 15 */ "d0\0"
  /* 18 */ "e0\0"
  /* 21 */ "p0\0"
  /* 24 */ "A10_A11\0"
  /* 32 */ "a11\0"
  /* 36 */ "d11\0"
  /* 40 */ "A0_A1\0"
  /* 46 */ "a1\0"
  /* 49 */ "d1\0"
  /* 52 */ "a12\0"
  /* 56 */ "d12\0"
  /* 60 */ "e12\0"
  /* 64 */ "p12\0"
  /* 68 */ "a2\0"
  /* 71 */ "d2\0"
  /* 74 */ "e2\0"
  /* 77 */ "p2\0"
  /* 80 */ "A12_A13\0"
  /* 88 */ "a13\0"
  /* 92 */ "d13\0"
  /* 96 */ "A2_A3\0"
  /* 102 */ "a3\0"
  /* 105 */ "d3\0"
  /* 108 */ "a14\0"
  /* 112 */ "d14\0"
  /* 116 */ "e14\0"
  /* 120 */ "p14\0"
  /* 124 */ "a4\0"
  /* 127 */ "d4\0"
  /* 130 */ "e4\0"
  /* 133 */ "p4\0"
  /* 136 */ "A14_A15\0"
  /* 144 */ "a15\0"
  /* 148 */ "d15\0"
  /* 152 */ "A4_A5\0"
  /* 158 */ "a5\0"
  /* 161 */ "d5\0"
  /* 164 */ "a6\0"
  /* 167 */ "d6\0"
  /* 170 */ "e6\0"
  /* 173 */ "p6\0"
  /* 176 */ "A6_A7\0"
  /* 182 */ "a7\0"
  /* 185 */ "d7\0"
  /* 188 */ "a8\0"
  /* 191 */ "d8\0"
  /* 194 */ "e8\0"
  /* 197 */ "p8\0"
  /* 200 */ "A8_A9\0"
  /* 206 */ "a9\0"
  /* 209 */ "d9\0"
  /* 212 */ "pc\0"
  /* 215 */ "pcxi\0"
  /* 220 */ "sp\0"
  /* 223 */ "psw\0"
  /* 227 */ "fcx\0"
};
  static const uint8_t RegAsmOffset[] = {
    227, 212, 215, 223, 12, 46, 68, 102, 124, 158, 164, 182, 188, 206, 
    220, 32, 52, 88, 108, 144, 15, 49, 71, 105, 127, 161, 167, 185, 
    191, 209, 0, 36, 56, 92, 112, 148, 18, 74, 130, 170, 194, 4, 
    60, 116, 21, 77, 133, 173, 197, 8, 64, 120, 40, 96, 152, 176, 
    200, 24, 80, 136, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}
#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

bool printAliasInstr(MCInst *MI, uint64_t Address, SStream *OS) {
  return false;
}

#endif // PRINT_ALIAS_INSTR
