/* Capstone Disassembly Engine, http://www.capstone-engine.org */
/* By Nguyen Anh Quynh <aquynh@gmail.com>, 2013-2022, */
/*    Rot127 <unisono@quyllur.org> 2022-2023 */
/* Automatically generated file by the LLVM TableGen Disassembler Backend. */
/* Do not edit. */

#include <capstone/platform.h>
#include <assert.h>

/// getMnemonic - This method is automatically generated by tablegen
/// from the instruction set description.
MnemonicBitsInfo getMnemonic(MCInst *MI, SStream *O) {
  static const char AsmStrs[] = {
  /* 0 */ "sub %d15, \0"
  /* 11 */ "add %d15, \0"
  /* 22 */ "and %d15, \0"
  /* 33 */ "jne %d15, \0"
  /* 44 */ "jeq %d15, \0"
  /* 55 */ "or %d15, \0"
  /* 65 */ "jz.t %d15, \0"
  /* 77 */ "jnz.t %d15, \0"
  /* 90 */ "lt %d15, \0"
  /* 100 */ "lt.u %d15, \0"
  /* 112 */ "mov %d15, \0"
  /* 123 */ "jz %d15, \0"
  /* 133 */ "jnz %d15, \0"
  /* 144 */ "sub.a %sp, \0"
  /* 156 */ "ftoq31 \0"
  /* 164 */ "csub.a \0"
  /* 172 */ "subsc.a \0"
  /* 181 */ "addsc.a \0"
  /* 190 */ "difsc.a \0"
  /* 199 */ "cadd.a \0"
  /* 207 */ "ld.a \0"
  /* 213 */ "tlbprobe.a \0"
  /* 225 */ "ge.a \0"
  /* 231 */ "jne.a \0"
  /* 238 */ "addih.a \0"
  /* 247 */ "movh.a \0"
  /* 255 */ "sel.a \0"
  /* 262 */ "csubn.a \0"
  /* 271 */ "caddn.a \0"
  /* 280 */ "seln.a \0"
  /* 288 */ "swap.a \0"
  /* 296 */ "jeq.a \0"
  /* 303 */ "lt.a \0"
  /* 309 */ "st.a \0"
  /* 315 */ "mov.a \0"
  /* 322 */ "nez.a \0"
  /* 329 */ "jz.a \0"
  /* 335 */ "jnz.a \0"
  /* 342 */ "eqz.a \0"
  /* 349 */ "movz.a \0"
  /* 357 */ "mov.aa \0"
  /* 365 */ "ld.da \0"
  /* 372 */ "st.da \0"
  /* 379 */ "lea \0"
  /* 384 */ "lha \0"
  /* 389 */ "sha \0"
  /* 394 */ "ja \0"
  /* 398 */ "jla \0"
  /* 403 */ "fcalla \0"
  /* 411 */ "crc32.b \0"
  /* 420 */ "sha.b \0"
  /* 427 */ "sub.b \0"
  /* 434 */ "add.b \0"
  /* 441 */ "ld.b \0"
  /* 447 */ "absdif.b \0"
  /* 457 */ "sh.b \0"
  /* 463 */ "min.b \0"
  /* 470 */ "clo.b \0"
  /* 477 */ "eq.b \0"
  /* 483 */ "abs.b \0"
  /* 490 */ "subs.b \0"
  /* 498 */ "adds.b \0"
  /* 506 */ "absdifs.b \0"
  /* 517 */ "cls.b \0"
  /* 524 */ "abss.b \0"
  /* 532 */ "sat.b \0"
  /* 539 */ "dvinit.b \0"
  /* 549 */ "lt.b \0"
  /* 555 */ "st.b \0"
  /* 561 */ "max.b \0"
  /* 568 */ "eqany.b \0"
  /* 577 */ "clz.b \0"
  /* 584 */ "csub \0"
  /* 590 */ "msub \0"
  /* 596 */ "rsub \0"
  /* 602 */ "subc \0"
  /* 608 */ "addc \0"
  /* 614 */ "ld.d \0"
  /* 620 */ "st.d \0"
  /* 626 */ "mov.d \0"
  /* 633 */ "cadd \0"
  /* 639 */ "madd \0"
  /* 645 */ "jned \0"
  /* 651 */ "nand \0"
  /* 657 */ "and.ge \0"
  /* 665 */ "sh.ge \0"
  /* 672 */ "xor.ge \0"
  /* 680 */ "jge \0"
  /* 685 */ "bmerge \0"
  /* 693 */ "disable \0"
  /* 702 */ "shuffle \0"
  /* 711 */ "and.ne \0"
  /* 719 */ "xor.ne \0"
  /* 727 */ "jne \0"
  /* 732 */ "restore \0"
  /* 741 */ "msub.f \0"
  /* 749 */ "madd.f \0"
  /* 757 */ "qseed.f \0"
  /* 766 */ "mul.f \0"
  /* 773 */ "cmp.f \0"
  /* 780 */ "div.f \0"
  /* 787 */ "absdif \0"
  /* 795 */ "q31tof \0"
  /* 803 */ "itof \0"
  /* 809 */ "hptof \0"
  /* 816 */ "utof \0"
  /* 822 */ "sha.h \0"
  /* 829 */ "msub.h \0"
  /* 837 */ "msubad.h \0"
  /* 847 */ "madd.h \0"
  /* 855 */ "ld.h \0"
  /* 861 */ "absdif.h \0"
  /* 871 */ "sh.h \0"
  /* 877 */ "mul.h \0"
  /* 884 */ "msubm.h \0"
  /* 893 */ "msubadm.h \0"
  /* 904 */ "maddm.h \0"
  /* 913 */ "mulm.h \0"
  /* 921 */ "maddsum.h \0"
  /* 932 */ "min.h \0"
  /* 939 */ "clo.h \0"
  /* 946 */ "eq.h \0"
  /* 952 */ "msubr.h \0"
  /* 961 */ "msubadr.h \0"
  /* 972 */ "maddr.h \0"
  /* 981 */ "mulr.h \0"
  /* 989 */ "maddsur.h \0"
  /* 1000 */ "abs.h \0"
  /* 1007 */ "msubs.h \0"
  /* 1016 */ "msubads.h \0"
  /* 1027 */ "madds.h \0"
  /* 1036 */ "absdifs.h \0"
  /* 1047 */ "cls.h \0"
  /* 1054 */ "msubms.h \0"
  /* 1064 */ "msubadms.h \0"
  /* 1076 */ "maddms.h \0"
  /* 1086 */ "mulms.h \0"
  /* 1095 */ "maddsums.h \0"
  /* 1107 */ "msubrs.h \0"
  /* 1117 */ "msubadrs.h \0"
  /* 1129 */ "maddrs.h \0"
  /* 1139 */ "maddsurs.h \0"
  /* 1151 */ "abss.h \0"
  /* 1159 */ "maddsus.h \0"
  /* 1170 */ "sat.h \0"
  /* 1177 */ "dvinit.h \0"
  /* 1187 */ "lt.h \0"
  /* 1193 */ "st.h \0"
  /* 1199 */ "maddsu.h \0"
  /* 1209 */ "max.h \0"
  /* 1216 */ "eqany.h \0"
  /* 1225 */ "clz.h \0"
  /* 1232 */ "addih \0"
  /* 1239 */ "sh \0"
  /* 1243 */ "movh \0"
  /* 1249 */ "tlbprobe.i \0"
  /* 1261 */ "addi \0"
  /* 1267 */ "jnei \0"
  /* 1273 */ "ji \0"
  /* 1277 */ "jli \0"
  /* 1282 */ "fcalli \0"
  /* 1290 */ "ftoi \0"
  /* 1296 */ "dvadj \0"
  /* 1303 */ "unpack \0"
  /* 1311 */ "imask \0"
  /* 1318 */ "sel \0"
  /* 1323 */ "updfl \0"
  /* 1330 */ "jl \0"
  /* 1334 */ "fcall \0"
  /* 1341 */ "syscall \0"
  /* 1350 */ "mul \0"
  /* 1355 */ "msubm \0"
  /* 1362 */ "maddm \0"
  /* 1369 */ "mulm \0"
  /* 1375 */ "crcn \0"
  /* 1381 */ "caddn \0"
  /* 1388 */ "andn \0"
  /* 1394 */ "ixmin \0"
  /* 1401 */ "seln \0"
  /* 1407 */ "orn \0"
  /* 1412 */ "cmovn \0"
  /* 1419 */ "clo \0"
  /* 1424 */ "tlbmap \0"
  /* 1432 */ "tlbdemap \0"
  /* 1442 */ "dvstep \0"
  /* 1450 */ "ftohp \0"
  /* 1457 */ "loop \0"
  /* 1463 */ "msub.q \0"
  /* 1471 */ "madd.q \0"
  /* 1479 */ "ld.q \0"
  /* 1485 */ "mul.q \0"
  /* 1492 */ "msubm.q \0"
  /* 1501 */ "maddm.q \0"
  /* 1510 */ "msubr.q \0"
  /* 1519 */ "maddr.q \0"
  /* 1528 */ "mulr.q \0"
  /* 1536 */ "msubs.q \0"
  /* 1545 */ "madds.q \0"
  /* 1554 */ "msubrs.q \0"
  /* 1564 */ "maddrs.q \0"
  /* 1574 */ "st.q \0"
  /* 1580 */ "and.eq \0"
  /* 1588 */ "sh.eq \0"
  /* 1595 */ "xor.eq \0"
  /* 1603 */ "jeq \0"
  /* 1608 */ "mfcr \0"
  /* 1614 */ "mtcr \0"
  /* 1620 */ "xnor \0"
  /* 1626 */ "xor \0"
  /* 1631 */ "bisr \0"
  /* 1637 */ "dextr \0"
  /* 1644 */ "shas \0"
  /* 1650 */ "abs \0"
  /* 1655 */ "msubs \0"
  /* 1662 */ "rsubs \0"
  /* 1669 */ "madds \0"
  /* 1676 */ "absdifs \0"
  /* 1685 */ "cls \0"
  /* 1690 */ "muls \0"
  /* 1696 */ "msubms \0"
  /* 1704 */ "maddms \0"
  /* 1712 */ "abss \0"
  /* 1718 */ "and.and.t \0"
  /* 1729 */ "sh.and.t \0"
  /* 1739 */ "or.and.t \0"
  /* 1749 */ "sh.nand.t \0"
  /* 1760 */ "and.andn.t \0"
  /* 1772 */ "sh.andn.t \0"
  /* 1783 */ "or.andn.t \0"
  /* 1794 */ "sh.orn.t \0"
  /* 1804 */ "insn.t \0"
  /* 1812 */ "and.or.t \0"
  /* 1822 */ "sh.or.t \0"
  /* 1831 */ "or.or.t \0"
  /* 1840 */ "and.nor.t \0"
  /* 1851 */ "sh.nor.t \0"
  /* 1861 */ "or.nor.t \0"
  /* 1871 */ "sh.xnor.t \0"
  /* 1882 */ "sh.xor.t \0"
  /* 1892 */ "ins.t \0"
  /* 1899 */ "st.t \0"
  /* 1905 */ "jz.t \0"
  /* 1911 */ "jnz.t \0"
  /* 1918 */ "addsc.at \0"
  /* 1928 */ "bsplit \0"
  /* 1936 */ "dvinit \0"
  /* 1944 */ "and.lt \0"
  /* 1952 */ "sh.lt \0"
  /* 1959 */ "xor.lt \0"
  /* 1967 */ "jlt \0"
  /* 1972 */ "not \0"
  /* 1977 */ "insert \0"
  /* 1985 */ "ldmst \0"
  /* 1992 */ "msub.u \0"
  /* 2000 */ "madd.u \0"
  /* 2008 */ "and.ge.u \0"
  /* 2018 */ "sh.ge.u \0"
  /* 2027 */ "xor.ge.u \0"
  /* 2037 */ "jge.u \0"
  /* 2044 */ "mul.u \0"
  /* 2051 */ "msubm.u \0"
  /* 2060 */ "maddm.u \0"
  /* 2069 */ "mulm.u \0"
  /* 2077 */ "ixmin.u \0"
  /* 2086 */ "dvstep.u \0"
  /* 2096 */ "extr.u \0"
  /* 2104 */ "msubs.u \0"
  /* 2113 */ "rsubs.u \0"
  /* 2122 */ "madds.u \0"
  /* 2131 */ "muls.u \0"
  /* 2139 */ "msubms.u \0"
  /* 2149 */ "maddms.u \0"
  /* 2159 */ "dvinit.u \0"
  /* 2169 */ "and.lt.u \0"
  /* 2179 */ "sh.lt.u \0"
  /* 2188 */ "xor.lt.u \0"
  /* 2198 */ "jlt.u \0"
  /* 2205 */ "div.u \0"
  /* 2212 */ "mov.u \0"
  /* 2219 */ "ixmax.u \0"
  /* 2228 */ "ld.bu \0"
  /* 2235 */ "min.bu \0"
  /* 2243 */ "subs.bu \0"
  /* 2252 */ "adds.bu \0"
  /* 2261 */ "sat.bu \0"
  /* 2269 */ "dvinit.bu \0"
  /* 2280 */ "lt.bu \0"
  /* 2287 */ "max.bu \0"
  /* 2295 */ "ld.hu \0"
  /* 2302 */ "min.hu \0"
  /* 2310 */ "subs.hu \0"
  /* 2319 */ "adds.hu \0"
  /* 2328 */ "sat.hu \0"
  /* 2336 */ "dvinit.hu \0"
  /* 2347 */ "lt.hu \0"
  /* 2354 */ "max.hu \0"
  /* 2362 */ "ftou \0"
  /* 2368 */ "loopu \0"
  /* 2375 */ "lt.wu \0"
  /* 2382 */ "div \0"
  /* 2387 */ "cmov \0"
  /* 2393 */ "crc32b.w \0"
  /* 2403 */ "ld.w \0"
  /* 2409 */ "crc32l.w \0"
  /* 2419 */ "swap.w \0"
  /* 2427 */ "eq.w \0"
  /* 2433 */ "lt.w \0"
  /* 2439 */ "popcnt.w \0"
  /* 2449 */ "st.w \0"
  /* 2455 */ "ixmax \0"
  /* 2462 */ "subx \0"
  /* 2468 */ "ldlcx \0"
  /* 2475 */ "stlcx \0"
  /* 2482 */ "lducx \0"
  /* 2489 */ "stucx \0"
  /* 2496 */ "addx \0"
  /* 2502 */ "parity \0"
  /* 2510 */ "ftoq31z \0"
  /* 2519 */ "jgez \0"
  /* 2525 */ "jlez \0"
  /* 2531 */ "ftoiz \0"
  /* 2538 */ "jz \0"
  /* 2542 */ "clz \0"
  /* 2547 */ "jnz \0"
  /* 2552 */ "jgtz \0"
  /* 2558 */ "jltz \0"
  /* 2564 */ "ftouz \0"
  /* 2571 */ "swap.a [+\0"
  /* 2581 */ "cachea.i [+\0"
  /* 2593 */ "cachei.i [+\0"
  /* 2605 */ "cachea.wi [+\0"
  /* 2618 */ "cachei.wi [+\0"
  /* 2631 */ "ldmst [+\0"
  /* 2640 */ "cachea.w [+\0"
  /* 2652 */ "cachei.w [+\0"
  /* 2664 */ "swapmsk.w [+\0"
  /* 2677 */ "cmpswap.w [+\0"
  /* 2690 */ "# XRay Function Patchable RET.\0"
  /* 2721 */ "# XRay Typed Event Log.\0"
  /* 2745 */ "# XRay Custom Event Log.\0"
  /* 2770 */ "# XRay Function Enter.\0"
  /* 2793 */ "# XRay Tail Call Exit.\0"
  /* 2816 */ "# XRay Function Exit.\0"
  /* 2838 */ "LIFETIME_END\0"
  /* 2851 */ "PSEUDO_PROBE\0"
  /* 2864 */ "BUNDLE\0"
  /* 2871 */ "DBG_VALUE\0"
  /* 2881 */ "DBG_INSTR_REF\0"
  /* 2895 */ "DBG_PHI\0"
  /* 2903 */ "DBG_LABEL\0"
  /* 2913 */ "LIFETIME_START\0"
  /* 2928 */ "DBG_VALUE_LIST\0"
  /* 2943 */ "ld.a %a15, [\0"
  /* 2956 */ "ld.b %d15, [\0"
  /* 2969 */ "ld.h %d15, [\0"
  /* 2982 */ "ld.bu %d15, [\0"
  /* 2996 */ "ld.w %d15, [\0"
  /* 3009 */ "swap.a [\0"
  /* 3018 */ "st.a [\0"
  /* 3025 */ "st.da [\0"
  /* 3033 */ "st.b [\0"
  /* 3040 */ "st.d [\0"
  /* 3047 */ "st.h [\0"
  /* 3054 */ "cachea.i [\0"
  /* 3065 */ "cachei.i [\0"
  /* 3076 */ "cachea.wi [\0"
  /* 3088 */ "cachei.wi [\0"
  /* 3100 */ "st.q [\0"
  /* 3107 */ "ldmst [\0"
  /* 3115 */ "cachea.w [\0"
  /* 3126 */ "cachei.w [\0"
  /* 3137 */ "swapmsk.w [\0"
  /* 3149 */ "cmpswap.w [\0"
  /* 3161 */ "st.w [\0"
  /* 3168 */ "ldlcx [\0"
  /* 3176 */ "stlcx [\0"
  /* 3184 */ "lducx [\0"
  /* 3192 */ "stucx [\0"
  /* 3200 */ "st.a [%a15]\0"
  /* 3212 */ "st.b [%a15]\0"
  /* 3224 */ "st.h [%a15]\0"
  /* 3236 */ "st.w [%a15]\0"
  /* 3248 */ "ld.a %a15, [%sp]\0"
  /* 3265 */ "ld.w %d15, [%sp]\0"
  /* 3282 */ "st.a [%sp]\0"
  /* 3293 */ "st.w [%sp]\0"
  /* 3304 */ "tlbflush.a\0"
  /* 3315 */ "tlbflush.b\0"
  /* 3326 */ "dsync\0"
  /* 3332 */ "isync\0"
  /* 3338 */ "rfe\0"
  /* 3342 */ "enable\0"
  /* 3349 */ "disable\0"
  /* 3357 */ "debug\0"
  /* 3363 */ "relck\0"
  /* 3369 */ "# FEntry call\0"
  /* 3383 */ "rfm\0"
  /* 3387 */ "nop\0"
  /* 3391 */ "fret\0"
  /* 3396 */ "wait\0"
  /* 3401 */ "trapv\0"
  /* 3407 */ "trapsv\0"
  /* 3414 */ "rstv\0"
  /* 3419 */ "svlcx\0"
};
  static const uint32_t OpInfo0[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// INLINEASM_BR
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    2872U,	// DBG_VALUE
    2929U,	// DBG_VALUE_LIST
    2882U,	// DBG_INSTR_REF
    2896U,	// DBG_PHI
    2904U,	// DBG_LABEL
    0U,	// REG_SEQUENCE
    0U,	// COPY
    2865U,	// BUNDLE
    2914U,	// LIFETIME_START
    2839U,	// LIFETIME_END
    2852U,	// PSEUDO_PROBE
    0U,	// ARITH_FENCE
    0U,	// STACKMAP
    3370U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// PREALLOCATED_SETUP
    0U,	// PREALLOCATED_ARG
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    2771U,	// PATCHABLE_FUNCTION_ENTER
    2691U,	// PATCHABLE_RET
    2817U,	// PATCHABLE_FUNCTION_EXIT
    2794U,	// PATCHABLE_TAIL_CALL
    2746U,	// PATCHABLE_EVENT_CALL
    2722U,	// PATCHABLE_TYPED_EVENT_CALL
    0U,	// ICALL_BRANCH_FUNNEL
    0U,	// G_ASSERT_SEXT
    0U,	// G_ASSERT_ZEXT
    0U,	// G_ASSERT_ALIGN
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_SDIVREM
    0U,	// G_UDIVREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_BUILD_VECTOR
    0U,	// G_BUILD_VECTOR_TRUNC
    0U,	// G_CONCAT_VECTORS
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_FREEZE
    0U,	// G_INTRINSIC_FPTRUNC_ROUND
    0U,	// G_INTRINSIC_TRUNC
    0U,	// G_INTRINSIC_ROUND
    0U,	// G_INTRINSIC_LRINT
    0U,	// G_INTRINSIC_ROUNDEVEN
    0U,	// G_READCYCLECOUNTER
    0U,	// G_LOAD
    0U,	// G_SEXTLOAD
    0U,	// G_ZEXTLOAD
    0U,	// G_INDEXED_LOAD
    0U,	// G_INDEXED_SEXTLOAD
    0U,	// G_INDEXED_ZEXTLOAD
    0U,	// G_STORE
    0U,	// G_INDEXED_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_ATOMICRMW_FADD
    0U,	// G_ATOMICRMW_FSUB
    0U,	// G_ATOMICRMW_FMAX
    0U,	// G_ATOMICRMW_FMIN
    0U,	// G_FENCE
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INVOKE_REGION_START
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_SEXT_INREG
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_FSHL
    0U,	// G_FSHR
    0U,	// G_ROTR
    0U,	// G_ROTL
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDO
    0U,	// G_UADDE
    0U,	// G_USUBO
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SADDE
    0U,	// G_SSUBO
    0U,	// G_SSUBE
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_UADDSAT
    0U,	// G_SADDSAT
    0U,	// G_USUBSAT
    0U,	// G_SSUBSAT
    0U,	// G_USHLSAT
    0U,	// G_SSHLSAT
    0U,	// G_SMULFIX
    0U,	// G_UMULFIX
    0U,	// G_SMULFIXSAT
    0U,	// G_UMULFIXSAT
    0U,	// G_SDIVFIX
    0U,	// G_UDIVFIX
    0U,	// G_SDIVFIXSAT
    0U,	// G_UDIVFIXSAT
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FMAD
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FPOWI
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FLOG10
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_FABS
    0U,	// G_FCOPYSIGN
    0U,	// G_IS_FPCLASS
    0U,	// G_FCANONICALIZE
    0U,	// G_FMINNUM
    0U,	// G_FMAXNUM
    0U,	// G_FMINNUM_IEEE
    0U,	// G_FMAXNUM_IEEE
    0U,	// G_FMINIMUM
    0U,	// G_FMAXIMUM
    0U,	// G_PTR_ADD
    0U,	// G_PTRMASK
    0U,	// G_SMIN
    0U,	// G_SMAX
    0U,	// G_UMIN
    0U,	// G_UMAX
    0U,	// G_ABS
    0U,	// G_LROUND
    0U,	// G_LLROUND
    0U,	// G_BR
    0U,	// G_BRJT
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_CTTZ
    0U,	// G_CTTZ_ZERO_UNDEF
    0U,	// G_CTLZ
    0U,	// G_CTLZ_ZERO_UNDEF
    0U,	// G_CTPOP
    0U,	// G_BSWAP
    0U,	// G_BITREVERSE
    0U,	// G_FCEIL
    0U,	// G_FCOS
    0U,	// G_FSIN
    0U,	// G_FSQRT
    0U,	// G_FFLOOR
    0U,	// G_FRINT
    0U,	// G_FNEARBYINT
    0U,	// G_ADDRSPACE_CAST
    0U,	// G_BLOCK_ADDR
    0U,	// G_JUMP_TABLE
    0U,	// G_DYN_STACKALLOC
    0U,	// G_STRICT_FADD
    0U,	// G_STRICT_FSUB
    0U,	// G_STRICT_FMUL
    0U,	// G_STRICT_FDIV
    0U,	// G_STRICT_FREM
    0U,	// G_STRICT_FMA
    0U,	// G_STRICT_FSQRT
    0U,	// G_READ_REGISTER
    0U,	// G_WRITE_REGISTER
    0U,	// G_MEMCPY
    0U,	// G_MEMCPY_INLINE
    0U,	// G_MEMMOVE
    0U,	// G_MEMSET
    0U,	// G_BZERO
    0U,	// G_VECREDUCE_SEQ_FADD
    0U,	// G_VECREDUCE_SEQ_FMUL
    0U,	// G_VECREDUCE_FADD
    0U,	// G_VECREDUCE_FMUL
    0U,	// G_VECREDUCE_FMAX
    0U,	// G_VECREDUCE_FMIN
    0U,	// G_VECREDUCE_ADD
    0U,	// G_VECREDUCE_MUL
    0U,	// G_VECREDUCE_AND
    0U,	// G_VECREDUCE_OR
    0U,	// G_VECREDUCE_XOR
    0U,	// G_VECREDUCE_SMAX
    0U,	// G_VECREDUCE_SMIN
    0U,	// G_VECREDUCE_UMAX
    0U,	// G_VECREDUCE_UMIN
    0U,	// G_SBFX
    0U,	// G_UBFX
    4603U,	// ABSDIFS_B_rr_v110
    5133U,	// ABSDIFS_H_rr
    5773U,	// ABSDIFS_rc
    5773U,	// ABSDIFS_rr
    4544U,	// ABSDIF_B_rr
    4958U,	// ABSDIF_H_rr
    268440340U,	// ABSDIF_rc
    4884U,	// ABSDIF_rr
    17830413U,	// ABSS_B_rr_v110
    5248U,	// ABSS_H_rr
    17831601U,	// ABSS_rr
    16781796U,	// ABS_B_rr
    16782313U,	// ABS_H_rr
    16782963U,	// ABS_rr
    268440161U,	// ADDC_rc
    4705U,	// ADDC_rr
    536875247U,	// ADDIH_A_rlc
    536876241U,	// ADDIH_rlc
    805311726U,	// ADDI_rlc
    1074796415U,	// ADDSC_AT_rr
    6015U,	// ADDSC_AT_rr_v110
    1074794678U,	// ADDSC_A_rr
    4278U,	// ADDSC_A_rr_v110
    33558710U,	// ADDSC_A_srrs
    1342181558U,	// ADDSC_A_srrs_v110
    6349U,	// ADDS_BU_rr_v110
    4595U,	// ADDS_B_rr
    5125U,	// ADDS_H
    6416U,	// ADDS_HU
    6220U,	// ADDS_U
    268441676U,	// ADDS_U_rc
    268441223U,	// ADDS_rc
    5767U,	// ADDS_rr
    16782983U,	// ADDS_srr
    268442049U,	// ADDX_rc
    6593U,	// ADDX_rr
    4297U,	// ADD_A_rr
    18878665U,	// ADD_A_src
    16781513U,	// ADD_A_srr
    4531U,	// ADD_B_rr
    1664094959U,	// ADD_F_rrr
    4945U,	// ADD_H_rr
    268440187U,	// ADD_rc
    4731U,	// ADD_rr
    18879099U,	// ADD_src
    18878476U,	// ADD_src_15a
    18944635U,	// ADD_src_a15
    16781947U,	// ADD_srr
    16781324U,	// ADD_srr_15a
    16847483U,	// ADD_srr_a15
    1879054053U,	// ANDN_T
    268440941U,	// ANDN_rc
    5485U,	// ANDN_rr
    1879054049U,	// AND_ANDN_T
    1879054007U,	// AND_AND_T
    268441133U,	// AND_EQ_rc
    5677U,	// AND_EQ_rr
    268441561U,	// AND_GE_U_rc
    6105U,	// AND_GE_U_rr
    268440210U,	// AND_GE_rc
    4754U,	// AND_GE_rr
    268441722U,	// AND_LT_U_rc
    6266U,	// AND_LT_U_rr
    268441497U,	// AND_LT_rc
    6041U,	// AND_LT_rr
    268440264U,	// AND_NE_rc
    4808U,	// AND_NE_rr
    1879054129U,	// AND_NOR_T
    1879054101U,	// AND_OR_T
    1879054011U,	// AND_T
    268440205U,	// AND_rc
    4749U,	// AND_rr
    139287U,	// AND_sc
    139287U,	// AND_sc_v110
    16781965U,	// AND_srr
    16781965U,	// AND_srr_v110
    13920U,	// BISR_rc
    13920U,	// BISR_rc_v161
    140896U,	// BISR_sc
    140896U,	// BISR_sc_v110
    4782U,	// BMERGAE_rr_v110
    4782U,	// BMERGE_rr
    16783241U,	// BSPLIT_rr
    16783241U,	// BSPLIT_rr_v110
    4398063U,	// CACHEA_I_bo_bso
    4463599U,	// CACHEA_I_bo_c
    4529135U,	// CACHEA_I_bo_pos
    4397590U,	// CACHEA_I_bo_pre
    400367U,	// CACHEA_I_bo_r
    4398085U,	// CACHEA_WI_bo_bso
    4463621U,	// CACHEA_WI_bo_c
    4529157U,	// CACHEA_WI_bo_pos
    4397614U,	// CACHEA_WI_bo_pre
    400389U,	// CACHEA_WI_bo_r
    4398124U,	// CACHEA_W_bo_bso
    4463660U,	// CACHEA_W_bo_c
    4529196U,	// CACHEA_W_bo_pos
    4397649U,	// CACHEA_W_bo_pre
    400428U,	// CACHEA_W_bo_r
    4398074U,	// CACHEI_I_bo_bso
    4529146U,	// CACHEI_I_bo_pos
    4397602U,	// CACHEI_I_bo_pre
    4398097U,	// CACHEI_WI_bo_bso
    4529169U,	// CACHEI_WI_bo_pos
    4397627U,	// CACHEI_WI_bo_pre
    4398135U,	// CACHEI_W_bo_bso
    4529207U,	// CACHEI_W_bo_pos
    4397661U,	// CACHEI_W_bo_pre
    1074794768U,	// CADDN_A_rcr_v110
    2200965392U,	// CADDN_A_rrr_v110
    1074795878U,	// CADDN_rcr
    2200966502U,	// CADDN_rrr
    18945382U,	// CADDN_src
    16848230U,	// CADDN_srr_v110
    1074794696U,	// CADD_A_rcr_v110
    2200965320U,	// CADD_A_rrr_v110
    1074795130U,	// CADD_rcr
    2200965754U,	// CADD_rrr
    18944634U,	// CADD_src
    16847482U,	// CADD_srr_v110
    16789U,	// CALLA_b
    136452U,	// CALLI_rr
    136452U,	// CALLI_rr_v110
    17720U,	// CALL_b
    21816U,	// CALL_sb
    16781783U,	// CLO_B_rr_v110
    16782252U,	// CLO_H_rr
    16782732U,	// CLO_rr
    16781830U,	// CLS_B_rr_v110
    16782360U,	// CLS_H_rr
    16782998U,	// CLS_rr
    16781890U,	// CLZ_B_rr_v110
    16782538U,	// CLZ_H_rr
    16783855U,	// CLZ_rr
    18945413U,	// CMOVN_src
    16848261U,	// CMOVN_srr
    18946388U,	// CMOV_src
    16849236U,	// CMOV_srr
    72576078U,	// CMPSWAP_W_bo_bso
    72641614U,	// CMPSWAP_W_bo_c
    72707150U,	// CMPSWAP_W_bo_pos
    72575606U,	// CMPSWAP_W_bo_pre
    23555150U,	// CMPSWAP_W_bo_r
    4870U,	// CMP_F_rr
    1074796890U,	// CRC32B_W_rr
    1074796906U,	// CRC32L_W_rr
    1074794908U,	// CRC32_B_rr
    2200966496U,	// CRCN_rrr
    2200965383U,	// CSUBN_A__rrr_v110
    2200965705U,	// CSUBN_rrr
    2200965285U,	// CSUB_A__rrr_v110
    2200965705U,	// CSUB_rrr
    3358U,	// DEBUG_sr
    3358U,	// DEBUG_sys
    5734U,	// DEXTR_rrpw
    5734U,	// DEXTR_rrrr
    4287U,	// DIFSC_A_rr_v110
    3350U,	// DISABLE_sys
    135862U,	// DISABLE_sys_1
    4877U,	// DIV_F_rr
    6302U,	// DIV_U_rr
    6479U,	// DIV_rr
    3327U,	// DSYNC_sys
    87037201U,	// DVADJ_rrr
    87037201U,	// DVADJ_rrr_v110
    16782609U,	// DVADJ_srr_v110
    6366U,	// DVINIT_BU_rr
    6366U,	// DVINIT_BU_rr_v110
    4636U,	// DVINIT_B_rr
    4636U,	// DVINIT_B_rr_v110
    6433U,	// DVINIT_HU_rr
    6433U,	// DVINIT_HU_rr_v110
    5274U,	// DVINIT_H_rr
    5274U,	// DVINIT_H_rr_v110
    6256U,	// DVINIT_U_rr
    6256U,	// DVINIT_U_rr_v110
    6033U,	// DVINIT_rr
    6033U,	// DVINIT_rr_v110
    87037991U,	// DVSTEP_U_rrr
    87037991U,	// DVSTEP_U_rrrv110
    16783399U,	// DVSTEP_Uv110
    87037347U,	// DVSTEP_rrr
    87037347U,	// DVSTEP_rrrv110
    16782755U,	// DVSTEPv110
    3343U,	// ENABLE_sys
    268440121U,	// EQANY_B_rc
    4665U,	// EQANY_B_rr
    268440769U,	// EQANY_H_rc
    5313U,	// EQANY_H_rr
    16781655U,	// EQZ_A_rr
    4394U,	// EQ_A_rr
    4574U,	// EQ_B_rr
    5043U,	// EQ_H_rr
    6524U,	// EQ_W_rr
    268441137U,	// EQ_rc
    5681U,	// EQ_rr
    18878510U,	// EQ_src
    16781358U,	// EQ_srr
    6193U,	// EXTR_U_rrpw
    6193U,	// EXTR_U_rrrr
    2415925297U,	// EXTR_U_rrrw
    5735U,	// EXTR_rrpw
    5735U,	// EXTR_rrrr
    2415924839U,	// EXTR_rrrw
    16788U,	// FCALLA_b
    136451U,	// FCALLA_i
    17719U,	// FCALL_b
    3392U,	// FRET_sr
    3392U,	// FRET_sys
    16782763U,	// FTOHP_rr
    16783844U,	// FTOIZ_rr
    16782603U,	// FTOI_rr
    6607U,	// FTOQ31Z_rr
    4253U,	// FTOQ31_rr
    16783877U,	// FTOUZ_rr
    16783675U,	// FTOU_rr
    4322U,	// GE_A_rr
    268441565U,	// GE_U_rc
    6109U,	// GE_U_rr
    268440214U,	// GE_rc
    4758U,	// GE_rr
    16782122U,	// HPTOF_rr
    5408U,	// IMASK_rcpw
    1074795808U,	// IMASK_rcrw
    5408U,	// IMASK_rrpw
    2416973088U,	// IMASK_rrrw
    6074U,	// INSERT_rcpw
    6074U,	// INSERT_rcrr
    2415925178U,	// INSERT_rcrw
    6074U,	// INSERT_rrpw
    6074U,	// INSERT_rrrr
    6074U,	// INSERT_rrrw
    1879054093U,	// INSN_T
    1879054181U,	// INS_T
    3333U,	// ISYNC_sys
    16782116U,	// ITOF_rr
    87038124U,	// IXMAX_U_rrr
    87038360U,	// IXMAX_rrr
    87037982U,	// IXMIN_U_rrr
    87037299U,	// IXMIN_rrr
    16779U,	// JA_b
    2684358953U,	// JEQ_A_brr
    2686457412U,	// JEQ_brc
    2684360260U,	// JEQ_brr
    28717U,	// JEQ_sbc1
    28717U,	// JEQ_sbc2
    28717U,	// JEQ_sbc_v110
    7344173U,	// JEQ_sbr1
    7344173U,	// JEQ_sbr2
    7344173U,	// JEQ_sbr_v110
    7346648U,	// JGEZ_sbr
    7346648U,	// JGEZ_sbr_v110
    2692749302U,	// JGE_U_brc
    2684360694U,	// JGE_U_brr
    2686456489U,	// JGE_brc
    2684359337U,	// JGE_brr
    7346681U,	// JGTZ_sbr
    7346681U,	// JGTZ_sbr_v110
    136442U,	// JI_rr
    136442U,	// JI_rr_v110
    136442U,	// JI_sbr_v110
    136442U,	// JI_sr
    16783U,	// JLA_b
    7346654U,	// JLEZ_sbr
    7346654U,	// JLEZ_sbr_v110
    136446U,	// JLI_rr
    136446U,	// JLI_rr_v110
    7346687U,	// JLTZ_sbr
    7346687U,	// JLTZ_sbr_v110
    2692749463U,	// JLT_U_brc
    2684360855U,	// JLT_U_brr
    2692749232U,	// JLT_brc
    2684360624U,	// JLT_brr
    17715U,	// JL_b
    2692747910U,	// JNED_brc
    2684359302U,	// JNED_brr
    2692748532U,	// JNEI_brc
    2684359924U,	// JNEI_brr
    2684358888U,	// JNE_A_brr
    2686456536U,	// JNE_brc
    2684359384U,	// JNE_brr
    28706U,	// JNE_sbc1
    28706U,	// JNE_sbc2
    28706U,	// JNE_sbc_v110
    7344162U,	// JNE_sbr1
    7344162U,	// JNE_sbr2
    7344162U,	// JNE_sbr_v110
    9441616U,	// JNZ_A_brr
    7344464U,	// JNZ_A_sbr
    2684360568U,	// JNZ_T_brn
    7344206U,	// JNZ_T_sbrn
    7344206U,	// JNZ_T_sbrn_v110
    20614U,	// JNZ_sb
    20614U,	// JNZ_sb_v110
    7346676U,	// JNZ_sbr
    7346676U,	// JNZ_sbr_v110
    9441610U,	// JZ_A_brr
    7344458U,	// JZ_A_sbr
    2684360562U,	// JZ_T_brn
    7344194U,	// JZ_T_sbrn
    7344194U,	// JZ_T_sbrn_v110
    20604U,	// JZ_sb
    20604U,	// JZ_sb_v110
    7346667U,	// JZ_sbr
    7346667U,	// JZ_sbr_v110
    17685U,	// J_b
    21781U,	// J_sb
    21781U,	// J_sb_v110
    166309U,	// LDLCX_abs
    4398177U,	// LDLCX_bo_bso
    38850U,	// LDMST_abs
    72576036U,	// LDMST_bo_bso
    72641572U,	// LDMST_bo_c
    72707108U,	// LDMST_bo_pos
    72575560U,	// LDMST_bo_pre
    23555108U,	// LDMST_bo_r
    166323U,	// LDUCX_abs
    4398193U,	// LDUCX_bo_bso
    10490064U,	// LD_A_abs
    3053981904U,	// LD_A_bo_bso
    117969104U,	// LD_A_bo_c
    3087536336U,	// LD_A_bo_pos
    3054047440U,	// LD_A_bo_pre
    151523536U,	// LD_A_bo_r
    906498256U,	// LD_A_bol
    142513U,	// LD_A_sc
    1711804624U,	// LD_A_slr
    1745359056U,	// LD_A_slr_post
    1745359056U,	// LD_A_slr_post_v110
    1711804624U,	// LD_A_slr_v110
    659664U,	// LD_A_slro
    659664U,	// LD_A_slro_v110
    25369472U,	// LD_A_sro
    25369472U,	// LD_A_sro_v110
    10492085U,	// LD_BU_abs
    3053983925U,	// LD_BU_bo_bso
    117971125U,	// LD_BU_bo_c
    3087538357U,	// LD_BU_bo_pos
    3054049461U,	// LD_BU_bo_pre
    151525557U,	// LD_BU_bo_r
    906500277U,	// LD_BU_bol
    1711806645U,	// LD_BU_slr
    1745361077U,	// LD_BU_slr_post
    1745361077U,	// LD_BU_slr_post_v110
    1711806645U,	// LD_BU_slr_v110
    661685U,	// LD_BU_slro
    661685U,	// LD_BU_slro_v110
    25369511U,	// LD_BU_sro
    25369511U,	// LD_BU_sro_v110
    10490298U,	// LD_B_abs
    3053982138U,	// LD_B_bo_bso
    117969338U,	// LD_B_bo_c
    3087536570U,	// LD_B_bo_pos
    3054047674U,	// LD_B_bo_pre
    151523770U,	// LD_B_bo_r
    906498490U,	// LD_B_bol
    1745359290U,	// LD_B_slr_post_v110
    1711804858U,	// LD_B_slr_v110
    659898U,	// LD_B_slro_v110
    25369485U,	// LD_B_sro_v110
    10490222U,	// LD_DA_abs
    3053982062U,	// LD_DA_bo_bso
    117969262U,	// LD_DA_bo_c
    3087536494U,	// LD_DA_bo_pos
    3054047598U,	// LD_DA_bo_pre
    151523694U,	// LD_DA_bo_r
    10490471U,	// LD_D_abs
    3053982311U,	// LD_D_bo_bso
    117969511U,	// LD_D_bo_c
    3087536743U,	// LD_D_bo_pos
    3054047847U,	// LD_D_bo_pre
    151523943U,	// LD_D_bo_r
    10492152U,	// LD_HU_abs
    3053983992U,	// LD_HU_bo_bso
    117971192U,	// LD_HU_bo_c
    3087538424U,	// LD_HU_bo_pos
    3054049528U,	// LD_HU_bo_pre
    151525624U,	// LD_HU_bo_r
    906500344U,	// LD_HU_bol
    10490712U,	// LD_H_abs
    3053982552U,	// LD_H_bo_bso
    117969752U,	// LD_H_bo_c
    3087536984U,	// LD_H_bo_pos
    3054048088U,	// LD_H_bo_pre
    151524184U,	// LD_H_bo_r
    906498904U,	// LD_H_bol
    1711805272U,	// LD_H_slr
    1745359704U,	// LD_H_slr_post
    1745359704U,	// LD_H_slr_post_v110
    1711805272U,	// LD_H_slr_v110
    660312U,	// LD_H_slro
    660312U,	// LD_H_slro_v110
    25369498U,	// LD_H_sro
    25369498U,	// LD_H_sro_v110
    10491336U,	// LD_Q_abs
    3053983176U,	// LD_Q_bo_bso
    117970376U,	// LD_Q_bo_c
    3087537608U,	// LD_Q_bo_pos
    3054048712U,	// LD_Q_bo_pre
    151524808U,	// LD_Q_bo_r
    10492260U,	// LD_W_abs
    3053984100U,	// LD_W_bo_bso
    117971300U,	// LD_W_bo_c
    3087538532U,	// LD_W_bo_pos
    3054049636U,	// LD_W_bo_pre
    151525732U,	// LD_W_bo_r
    906500452U,	// LD_W_bol
    142530U,	// LD_W_sc
    1711806820U,	// LD_W_slr
    1745361252U,	// LD_W_slr_post
    1745361252U,	// LD_W_slr_post_v110
    1711806820U,	// LD_W_slr_v110
    661860U,	// LD_W_slro
    661860U,	// LD_W_slro_v110
    25369525U,	// LD_W_sro
    25369525U,	// LD_W_sro_v110
    10490236U,	// LEA_abs
    3053982076U,	// LEA_bo_bso
    906498428U,	// LEA_bol
    10490241U,	// LHA_abs
    43329U,	// LOOPU_brr
    9442738U,	// LOOP_brr
    7345586U,	// LOOP_sbr
    4400U,	// LT_A_rr
    4646U,	// LT_B
    6377U,	// LT_BU
    5284U,	// LT_H
    6444U,	// LT_HU
    268441726U,	// LT_U_rc
    6270U,	// LT_U_rr
    25170021U,	// LT_U_srcv110
    16781413U,	// LT_U_srrv110
    6530U,	// LT_W
    6472U,	// LT_WU
    268441501U,	// LT_rc
    6045U,	// LT_rr
    18878555U,	// LT_src
    16781403U,	// LT_srr
    2200966197U,	// MADDMS_H_rrr1_LL
    2200966197U,	// MADDMS_H_rrr1_LU
    2200966197U,	// MADDMS_H_rrr1_UL
    2200966197U,	// MADDMS_H_rrr1_UU
    1074796646U,	// MADDMS_U_rcr_v110
    2200967270U,	// MADDMS_U_rrr2_v110
    1074796201U,	// MADDMS_rcr_v110
    2200966825U,	// MADDMS_rrr2_v110
    2200966025U,	// MADDM_H_rrr1_LL
    2200966025U,	// MADDM_H_rrr1_LU
    2200966025U,	// MADDM_H_rrr1_UL
    2200966025U,	// MADDM_H_rrr1_UU
    2200966025U,	// MADDM_H_rrr1_v110
    2200966622U,	// MADDM_Q_rrr1_v110
    1074796557U,	// MADDM_U_rcr_v110
    2200967181U,	// MADDM_U_rrr2_v110
    1074795859U,	// MADDM_rcr_v110
    2200966483U,	// MADDM_rrr2_v110
    2200966250U,	// MADDRS_H_rrr1_LL
    2200966250U,	// MADDRS_H_rrr1_LU
    2200966250U,	// MADDRS_H_rrr1_UL
    2200966250U,	// MADDRS_H_rrr1_UL_2
    2200966250U,	// MADDRS_H_rrr1_UU
    2200966250U,	// MADDRS_H_rrr1_v110
    3274708509U,	// MADDRS_Q_rrr1_L_L
    3543143965U,	// MADDRS_Q_rrr1_U_U
    2200966685U,	// MADDRS_Q_rrr1_v110
    2200966093U,	// MADDR_H_rrr1_LL
    2200966093U,	// MADDR_H_rrr1_LU
    2200966093U,	// MADDR_H_rrr1_UL
    2200966093U,	// MADDR_H_rrr1_UL_2
    2200966093U,	// MADDR_H_rrr1_UU
    2200966093U,	// MADDR_H_rrr1_v110
    3274708464U,	// MADDR_Q_rrr1_L_L
    3543143920U,	// MADDR_Q_rrr1_U_U
    2200966640U,	// MADDR_Q_rrr1_v110
    2200966216U,	// MADDSUMS_H_rrr1_LL
    2200966216U,	// MADDSUMS_H_rrr1_LU
    2200966216U,	// MADDSUMS_H_rrr1_UL
    2200966216U,	// MADDSUMS_H_rrr1_UU
    2200966042U,	// MADDSUM_H_rrr1_LL
    2200966042U,	// MADDSUM_H_rrr1_LU
    2200966042U,	// MADDSUM_H_rrr1_UL
    2200966042U,	// MADDSUM_H_rrr1_UU
    2200966260U,	// MADDSURS_H_rrr1_LL
    2200966260U,	// MADDSURS_H_rrr1_LU
    2200966260U,	// MADDSURS_H_rrr1_UL
    2200966260U,	// MADDSURS_H_rrr1_UU
    2200966110U,	// MADDSUR_H_rrr1_LL
    2200966110U,	// MADDSUR_H_rrr1_LU
    2200966110U,	// MADDSUR_H_rrr1_UL
    2200966110U,	// MADDSUR_H_rrr1_UU
    2200966280U,	// MADDSUS_H_rrr1_LL
    2200966280U,	// MADDSUS_H_rrr1_LU
    2200966280U,	// MADDSUS_H_rrr1_UL
    2200966280U,	// MADDSUS_H_rrr1_UU
    2200966320U,	// MADDSU_H_rrr1_LL
    2200966320U,	// MADDSU_H_rrr1_LU
    2200966320U,	// MADDSU_H_rrr1_UL
    2200966320U,	// MADDSU_H_rrr1_UU
    2200966148U,	// MADDS_H_rrr1_LL
    2200966148U,	// MADDS_H_rrr1_LU
    2200966148U,	// MADDS_H_rrr1_UL
    2200966148U,	// MADDS_H_rrr1_UU
    2200966148U,	// MADDS_H_rrr1_v110
    2200966666U,	// MADDS_Q_rrr1
    2200966666U,	// MADDS_Q_rrr1_L
    3274708490U,	// MADDS_Q_rrr1_L_L
    2200966666U,	// MADDS_Q_rrr1_U
    2200966666U,	// MADDS_Q_rrr1_UU2_v110
    3543143946U,	// MADDS_Q_rrr1_U_U
    2200966666U,	// MADDS_Q_rrr1_e
    2200966666U,	// MADDS_Q_rrr1_e_L
    3274708490U,	// MADDS_Q_rrr1_e_L_L
    2200966666U,	// MADDS_Q_rrr1_e_U
    3543143946U,	// MADDS_Q_rrr1_e_U_U
    1074796619U,	// MADDS_U_rcr
    1074796619U,	// MADDS_U_rcr_e
    2200967243U,	// MADDS_U_rrr2
    2200967243U,	// MADDS_U_rrr2_e
    1074796166U,	// MADDS_rcr
    1074796166U,	// MADDS_rcr_e
    2200966790U,	// MADDS_rrr2
    2200966790U,	// MADDS_rrr2_e
    2200965870U,	// MADD_F_rrr
    2200965968U,	// MADD_H_rrr1_LL
    2200965968U,	// MADD_H_rrr1_LU
    2200965968U,	// MADD_H_rrr1_UL
    2200965968U,	// MADD_H_rrr1_UU
    2200965968U,	// MADD_H_rrr1_v110
    2200966592U,	// MADD_Q_rrr1
    2200966592U,	// MADD_Q_rrr1_L
    3274708416U,	// MADD_Q_rrr1_L_L
    2200966592U,	// MADD_Q_rrr1_U
    2200966592U,	// MADD_Q_rrr1_UU2_v110
    3543143872U,	// MADD_Q_rrr1_U_U
    2200966592U,	// MADD_Q_rrr1_e
    2200966592U,	// MADD_Q_rrr1_e_L
    3274708416U,	// MADD_Q_rrr1_e_L_L
    2200966592U,	// MADD_Q_rrr1_e_U
    3543143872U,	// MADD_Q_rrr1_e_U_U
    1074796497U,	// MADD_U_rcr
    2200967121U,	// MADD_U_rrr2
    1074795136U,	// MADD_rcr
    1074795136U,	// MADD_rcr_e
    2200965760U,	// MADD_rrr2
    2200965760U,	// MADD_rrr2_e
    4658U,	// MAX_B
    6384U,	// MAX_BU
    5306U,	// MAX_H
    6451U,	// MAX_HU
    268441774U,	// MAX_U_rc
    6318U,	// MAX_U_rr
    268442010U,	// MAX_rc
    6554U,	// MAX_rr
    11540041U,	// MFCR_rlc
    4560U,	// MIN_B
    6332U,	// MIN_BU
    5029U,	// MIN_H
    6399U,	// MIN_HU
    268441632U,	// MIN_U_rc
    6176U,	// MIN_U_rr
    268440949U,	// MIN_rc
    5493U,	// MIN_rr
    11538680U,	// MOVH_A_rlc
    11539676U,	// MOVH_rlc
    135518U,	// MOVZ_A_sr
    17830246U,	// MOV_AA_rr
    16781670U,	// MOV_AA_srr_srr
    16781670U,	// MOV_AA_srr_srr_v110
    4412U,	// MOV_A_rr
    25170236U,	// MOV_A_src
    16781628U,	// MOV_A_srr
    16781628U,	// MOV_A_srr_v110
    17830515U,	// MOV_D_rr
    16781939U,	// MOV_D_srr_srr
    16781939U,	// MOV_D_srr_srr_v110
    11540645U,	// MOV_U_rlc
    12589397U,	// MOV_rlc
    11540821U,	// MOV_rlc_e
    17832277U,	// MOV_rr
    17832277U,	// MOV_rr_e
    6485U,	// MOV_rr_eab
    139377U,	// MOV_sc
    139377U,	// MOV_sc_v110
    18880853U,	// MOV_src
    18880853U,	// MOV_src_e
    16783701U,	// MOV_srr
    2200966185U,	// MSUBADMS_H_rrr1_LL
    2200966185U,	// MSUBADMS_H_rrr1_LU
    2200966185U,	// MSUBADMS_H_rrr1_UL
    2200966185U,	// MSUBADMS_H_rrr1_UU
    2200966014U,	// MSUBADM_H_rrr1_LL
    2200966014U,	// MSUBADM_H_rrr1_LU
    2200966014U,	// MSUBADM_H_rrr1_UL
    2200966014U,	// MSUBADM_H_rrr1_UU
    2200966238U,	// MSUBADRS_H_rrr1_LL
    2200966238U,	// MSUBADRS_H_rrr1_LU
    2200966238U,	// MSUBADRS_H_rrr1_UL
    2200966238U,	// MSUBADRS_H_rrr1_UU
    2200966238U,	// MSUBADRS_H_rrr1_v110
    2200966082U,	// MSUBADR_H_rrr1_LL
    2200966082U,	// MSUBADR_H_rrr1_LU
    2200966082U,	// MSUBADR_H_rrr1_UL
    2200966082U,	// MSUBADR_H_rrr1_UU
    2200966082U,	// MSUBADR_H_rrr1_v110
    2200966137U,	// MSUBADS_H_rrr1_LL
    2200966137U,	// MSUBADS_H_rrr1_LU
    2200966137U,	// MSUBADS_H_rrr1_UL
    2200966137U,	// MSUBADS_H_rrr1_UU
    2200965958U,	// MSUBAD_H_rrr1_LL
    2200965958U,	// MSUBAD_H_rrr1_LU
    2200965958U,	// MSUBAD_H_rrr1_UL
    2200965958U,	// MSUBAD_H_rrr1_UU
    2200966175U,	// MSUBMS_H_rrr1_LL
    2200966175U,	// MSUBMS_H_rrr1_LU
    2200966175U,	// MSUBMS_H_rrr1_UL
    2200966175U,	// MSUBMS_H_rrr1_UU
    1074796636U,	// MSUBMS_U_rcrv110
    2200967260U,	// MSUBMS_U_rrr2v110
    1074796193U,	// MSUBMS_rcrv110
    2200966817U,	// MSUBMS_rrr2v110
    2200966005U,	// MSUBM_H_rrr1_LL
    2200966005U,	// MSUBM_H_rrr1_LU
    2200966005U,	// MSUBM_H_rrr1_UL
    2200966005U,	// MSUBM_H_rrr1_UU
    2200966005U,	// MSUBM_H_rrr1_v110
    2200966613U,	// MSUBM_Q_rrr1_v110
    1074796548U,	// MSUBM_U_rcrv110
    2200967172U,	// MSUBM_U_rrr2v110
    1074795852U,	// MSUBM_rcrv110
    2200966476U,	// MSUBM_rrr2v110
    2200966228U,	// MSUBRS_H_rrr1_LL
    2200966228U,	// MSUBRS_H_rrr1_LU
    2200966228U,	// MSUBRS_H_rrr1_UL
    2200966228U,	// MSUBRS_H_rrr1_UL_2
    2200966228U,	// MSUBRS_H_rrr1_UU
    2200966228U,	// MSUBRS_H_rrr1_v110
    3274708499U,	// MSUBRS_Q_rrr1_L_L
    3543143955U,	// MSUBRS_Q_rrr1_U_U
    2200966675U,	// MSUBRS_Q_rrr1_v110
    2200966073U,	// MSUBR_H_rrr1_LL
    2200966073U,	// MSUBR_H_rrr1_LU
    2200966073U,	// MSUBR_H_rrr1_UL
    2200966073U,	// MSUBR_H_rrr1_UL_2
    2200966073U,	// MSUBR_H_rrr1_UU
    2200966073U,	// MSUBR_H_rrr1_v110
    3274708455U,	// MSUBR_Q_rrr1_L_L
    3543143911U,	// MSUBR_Q_rrr1_U_U
    2200966631U,	// MSUBR_Q_rrr1_v110
    2200966128U,	// MSUBS_H_rrr1_LL
    2200966128U,	// MSUBS_H_rrr1_LU
    2200966128U,	// MSUBS_H_rrr1_UL
    2200966128U,	// MSUBS_H_rrr1_UU
    2200966128U,	// MSUBS_H_rrr1_v110
    2200966657U,	// MSUBS_Q_rrr1
    2200966657U,	// MSUBS_Q_rrr1_L
    3274708481U,	// MSUBS_Q_rrr1_L_L
    2200966657U,	// MSUBS_Q_rrr1_U
    2200966657U,	// MSUBS_Q_rrr1_UU2_v110
    3543143937U,	// MSUBS_Q_rrr1_U_U
    2200966657U,	// MSUBS_Q_rrr1_e
    2200966657U,	// MSUBS_Q_rrr1_e_L
    3274708481U,	// MSUBS_Q_rrr1_e_L_L
    2200966657U,	// MSUBS_Q_rrr1_e_U
    3543143937U,	// MSUBS_Q_rrr1_e_U_U
    1074796601U,	// MSUBS_U_rcr
    1074796601U,	// MSUBS_U_rcr_e
    2200967225U,	// MSUBS_U_rrr2
    2200967225U,	// MSUBS_U_rrr2_e
    1074796152U,	// MSUBS_rcr
    1074796152U,	// MSUBS_rcr_e
    2200966776U,	// MSUBS_rrr2
    2200966776U,	// MSUBS_rrr2_e
    2200965862U,	// MSUB_F_rrr
    2200965950U,	// MSUB_H_rrr1_LL
    2200965950U,	// MSUB_H_rrr1_LU
    2200965950U,	// MSUB_H_rrr1_UL
    2200965950U,	// MSUB_H_rrr1_UU
    2200965950U,	// MSUB_H_rrr1_v110
    2200966584U,	// MSUB_Q_rrr1
    2200966584U,	// MSUB_Q_rrr1_L
    3274708408U,	// MSUB_Q_rrr1_L_L
    2200966584U,	// MSUB_Q_rrr1_U
    2200966584U,	// MSUB_Q_rrr1_UU2_v110
    3543143864U,	// MSUB_Q_rrr1_U_U
    2200966584U,	// MSUB_Q_rrr1_e
    2200966584U,	// MSUB_Q_rrr1_e_L
    3274708408U,	// MSUB_Q_rrr1_e_L_L
    2200966584U,	// MSUB_Q_rrr1_e_U
    3543143864U,	// MSUB_Q_rrr1_e_U_U
    1074796489U,	// MSUB_U_rcr
    2200967113U,	// MSUB_U_rrr2
    1074795087U,	// MSUB_rcr
    1074795087U,	// MSUB_rcr_e
    2200965711U,	// MSUB_rrr2
    2200965711U,	// MSUB_rrr2_e
    46671U,	// MTCR_rlc
    5183U,	// MULMS_H_rr1_LL2e
    5183U,	// MULMS_H_rr1_LU2e
    5183U,	// MULMS_H_rr1_UL2e
    5183U,	// MULMS_H_rr1_UU2e
    5010U,	// MULM_H_rr1_LL2e
    5010U,	// MULM_H_rr1_LU2e
    5010U,	// MULM_H_rr1_UL2e
    5010U,	// MULM_H_rr1_UU2e
    268441622U,	// MULM_U_rc
    6166U,	// MULM_U_rr
    268440922U,	// MULM_rc
    5466U,	// MULM_rr
    5078U,	// MULR_H_rr1_LL2e
    5078U,	// MULR_H_rr1_LU2e
    5078U,	// MULR_H_rr1_UL2e
    5078U,	// MULR_H_rr1_UU2e
    5078U,	// MULR_H_rr_v110
    167777785U,	// MULR_Q_rr1_2LL
    184555001U,	// MULR_Q_rr1_2UU
    5625U,	// MULR_Q_rr_v110
    268441684U,	// MULS_U_rc
    6228U,	// MULS_U_rr2
    6228U,	// MULS_U_rr_v110
    268441243U,	// MULS_rc
    5787U,	// MULS_rr2
    5787U,	// MULS_rr_v110
    4863U,	// MUL_F_rrr
    4974U,	// MUL_H_rr1_LL2e
    4974U,	// MUL_H_rr1_LU2e
    4974U,	// MUL_H_rr1_UL2e
    4974U,	// MUL_H_rr1_UU2e
    4974U,	// MUL_H_rr_v110
    5582U,	// MUL_Q_rr1_2
    167777742U,	// MUL_Q_rr1_2LL
    184554958U,	// MUL_Q_rr1_2UU
    5582U,	// MUL_Q_rr1_2_L
    5582U,	// MUL_Q_rr1_2_Le
    5582U,	// MUL_Q_rr1_2_U
    5582U,	// MUL_Q_rr1_2_Ue
    5582U,	// MUL_Q_rr1_2__e
    5582U,	// MUL_Q_rr_v110
    268441597U,	// MUL_U_rc
    6141U,	// MUL_U_rr2
    268440903U,	// MUL_rc
    268440903U,	// MUL_rc_e
    5447U,	// MUL_rr2
    5447U,	// MUL_rr2_e
    5447U,	// MUL_rr_v110
    16782663U,	// MUL_srr
    1879054041U,	// NAND_T
    268440204U,	// NAND_rc
    4748U,	// NAND_rr
    16781635U,	// NEZ_A
    4329U,	// NE_A
    268440268U,	// NE_rc
    4812U,	// NE_rr
    3388U,	// NOP_sr
    3388U,	// NOP_sys
    1879054133U,	// NOR_T
    268441174U,	// NOR_rc
    5718U,	// NOR_rr
    136790U,	// NOR_sr
    136790U,	// NOR_sr_v110
    137141U,	// NOT_sr_v162
    1879054086U,	// ORN_T
    268440960U,	// ORN_rc
    5504U,	// ORN_rr
    1879054072U,	// OR_ANDN_T
    1879054028U,	// OR_AND_T
    268441149U,	// OR_EQ_rc
    5693U,	// OR_EQ_rr
    268441581U,	// OR_GE_U_rc
    6125U,	// OR_GE_U_rr
    268440226U,	// OR_GE_rc
    4770U,	// OR_GE_rr
    268441742U,	// OR_LT_U_rc
    6286U,	// OR_LT_U_rr
    268441513U,	// OR_LT_rc
    6057U,	// OR_LT_rr
    268440273U,	// OR_NE_rc
    4817U,	// OR_NE_rr
    1879054150U,	// OR_NOR_T
    1879054120U,	// OR_OR_T
    1879054105U,	// OR_T
    3758102103U,	// OR_rc
    5719U,	// OR_rr
    139320U,	// OR_sc
    139320U,	// OR_sc_v110
    16782935U,	// OR_srr
    16782935U,	// OR_srr_v110
    1664095514U,	// PACK_rrr
    16783815U,	// PARITY_rr
    16783815U,	// PARITY_rr_v110
    16783752U,	// POPCNT_W_rr
    4892U,	// Q31TOF_rr
    16782070U,	// QSEED_F_rr
    135901U,	// RESTORE_sys
    3393U,	// RET_sr
    3393U,	// RET_sys
    3393U,	// RET_sys_v110
    3339U,	// RFE_sr
    3339U,	// RFE_sys_sys
    3339U,	// RFE_sys_sys_v110
    3384U,	// RFM_sys
    3364U,	// RSLCX_sys
    3415U,	// RSTV_sys
    268441666U,	// RSUBS_U_rc
    268441215U,	// RSUBS_rc
    268440149U,	// RSUB_rc
    135765U,	// RSUB_sr_sr
    135765U,	// RSUB_sr_sr_v110
    16783574U,	// SAT_BU_rr
    137430U,	// SAT_BU_sr
    137430U,	// SAT_BU_sr_v110
    16781845U,	// SAT_B_rr
    135701U,	// SAT_B_sr
    135701U,	// SAT_B_sr_v110
    16783641U,	// SAT_HU_rr
    137497U,	// SAT_HU_sr
    137497U,	// SAT_HU_sr_v110
    16782483U,	// SAT_H_rr
    136339U,	// SAT_H_sr
    136339U,	// SAT_H_sr_v110
    1074794777U,	// SELN_A_rcr_v110
    2200965401U,	// SELN_A_rrr_v110
    1074795898U,	// SELN_rcr
    2200966522U,	// SELN_rrr
    1074794752U,	// SEL_A_rcr_v110
    2200965376U,	// SEL_A_rrr_v110
    1074795815U,	// SEL_rcr
    2200966439U,	// SEL_rrr
    268441197U,	// SHAS_rc
    5741U,	// SHAS_rr
    268439973U,	// SHA_B_rc
    4517U,	// SHA_B_rr
    268440375U,	// SHA_H_rc
    4919U,	// SHA_H_rr
    268439942U,	// SHA_rc
    4486U,	// SHA_rr
    18878854U,	// SHA_src
    18878854U,	// SHA_src_v110
    268440255U,	// SHUFFLE_rc
    1879054061U,	// SH_ANDN_T
    1879054018U,	// SH_AND_T
    268440010U,	// SH_B_rc
    4554U,	// SH_B_rr
    268441141U,	// SH_EQ_rc
    5685U,	// SH_EQ_rr
    268441571U,	// SH_GE_U_rc
    6115U,	// SH_GE_U_rr
    268440218U,	// SH_GE_rc
    4762U,	// SH_GE_rr
    268440424U,	// SH_H_rc
    4968U,	// SH_H_rr
    268441732U,	// SH_LT_U_rc
    6276U,	// SH_LT_U_rr
    268441505U,	// SH_LT_rc
    6049U,	// SH_LT_rr
    1879054038U,	// SH_NAND_T
    268441505U,	// SH_NE_rc
    6049U,	// SH_NE_rr
    1879054140U,	// SH_NOR_T
    1879054083U,	// SH_ORN_T
    1879054111U,	// SH_OR_T
    1879054160U,	// SH_XNOR_T
    1879054171U,	// SH_XOR_T
    268440792U,	// SH_rc
    5336U,	// SH_rr
    18879704U,	// SH_src
    18879704U,	// SH_src_v110
    166316U,	// STLCX_abs
    4398185U,	// STLCX_bo_bso
    166330U,	// STUCX_abs
    4398201U,	// STUCX_bo_bso
    37174U,	// ST_A_abs
    72575947U,	// ST_A_bo_bso
    117969206U,	// ST_A_bo_c
    3093848374U,	// ST_A_bo_pos
    3060359478U,	// ST_A_bo_pre
    151523638U,	// ST_A_bo_r
    13835211U,	// ST_A_bol
    732371U,	// ST_A_sc
    209918923U,	// ST_A_sro
    209918923U,	// ST_A_sro_v110
    793547U,	// ST_A_ssr
    859083U,	// ST_A_ssr_pos
    859083U,	// ST_A_ssr_pos_v110
    793547U,	// ST_A_ssr_v110
    52353U,	// ST_A_ssro
    52353U,	// ST_A_ssro_v110
    37420U,	// ST_B_abs
    72575962U,	// ST_B_bo_bso
    117969452U,	// ST_B_bo_c
    3093848620U,	// ST_B_bo_pos
    3060359724U,	// ST_B_bo_pre
    151523884U,	// ST_B_bo_r
    13835226U,	// ST_B_bol
    226696154U,	// ST_B_sro
    226696154U,	// ST_B_sro_v110
    793562U,	// ST_B_ssr
    859098U,	// ST_B_ssr_pos
    859098U,	// ST_B_ssr_pos_v110
    793562U,	// ST_B_ssr_v110
    52365U,	// ST_B_ssro
    52365U,	// ST_B_ssro_v110
    37237U,	// ST_DA_abs
    72575954U,	// ST_DA_bo_bso
    117969269U,	// ST_DA_bo_c
    3093848437U,	// ST_DA_bo_pos
    3060359541U,	// ST_DA_bo_pre
    151523701U,	// ST_DA_bo_r
    37485U,	// ST_D_abs
    72575969U,	// ST_D_bo_bso
    117969517U,	// ST_D_bo_c
    3093848685U,	// ST_D_bo_pos
    3060359789U,	// ST_D_bo_pre
    151523949U,	// ST_D_bo_r
    38058U,	// ST_H_abs
    72575976U,	// ST_H_bo_bso
    117970090U,	// ST_H_bo_c
    3093849258U,	// ST_H_bo_pos
    3060360362U,	// ST_H_bo_pre
    151524522U,	// ST_H_bo_r
    13835240U,	// ST_H_bol
    226696168U,	// ST_H_sro
    226696168U,	// ST_H_sro_v110
    793576U,	// ST_H_ssr
    859112U,	// ST_H_ssr_pos
    859112U,	// ST_H_ssr_pos_v110
    793576U,	// ST_H_ssr_v110
    52377U,	// ST_H_ssro
    52377U,	// ST_H_ssro_v110
    38439U,	// ST_Q_abs
    72576029U,	// ST_Q_bo_bso
    117970471U,	// ST_Q_bo_c
    3093849639U,	// ST_Q_bo_pos
    3060360743U,	// ST_Q_bo_pre
    151524903U,	// ST_Q_bo_r
    34668U,	// ST_T
    39314U,	// ST_W_abs
    72576090U,	// ST_W_bo_bso
    117971346U,	// ST_W_bo_c
    3093850514U,	// ST_W_bo_pos
    3060361618U,	// ST_W_bo_pre
    151525778U,	// ST_W_bo_r
    13835354U,	// ST_W_bol
    928990U,	// ST_W_sc
    226696282U,	// ST_W_sro
    226696282U,	// ST_W_sro_v110
    793690U,	// ST_W_ssr
    859226U,	// ST_W_ssr_pos
    859226U,	// ST_W_ssr_pos_v110
    793690U,	// ST_W_ssr_v110
    52389U,	// ST_W_ssro
    52389U,	// ST_W_ssro_v110
    4699U,	// SUBC_rr
    4269U,	// SUBSC_A_rr
    6340U,	// SUBS_BU_rr
    4587U,	// SUBS_B_rr
    6407U,	// SUBS_HU_rr
    5105U,	// SUBS_H_rr
    6202U,	// SUBS_U_rr
    5753U,	// SUBS_rr
    16782969U,	// SUBS_srr
    6559U,	// SUBX_rr
    4262U,	// SUB_A_rr
    139409U,	// SUB_A_sc
    139409U,	// SUB_A_sc_v110
    4524U,	// SUB_B_rr
    1664094951U,	// SUB_F_rrr
    4927U,	// SUB_H_rr
    4682U,	// SUB_rr
    16781898U,	// SUB_srr
    16781313U,	// SUB_srr_15a
    16847434U,	// SUB_srr_a15
    3420U,	// SVLCX_sys
    72576066U,	// SWAPMSK_W_bo_bso
    1666456642U,	// SWAPMSK_W_bo_c
    72707138U,	// SWAPMSK_W_bo_pos
    72575593U,	// SWAPMSK_W_bo_pre
    17243202U,	// SWAPMSK_W_bo_r
    37153U,	// SWAP_A_abs
    72575938U,	// SWAP_A_bo_bso
    1666456514U,	// SWAP_A_bo_c
    72707010U,	// SWAP_A_bo_pos
    72575500U,	// SWAP_A_bo_pre
    17243074U,	// SWAP_A_bo_r
    39284U,	// SWAP_W_abs
    72576081U,	// SWAP_W_bo_bso
    1666456657U,	// SWAP_W_bo_c
    1010769U,	// SWAP_W_bo_indexed
    72707153U,	// SWAP_W_bo_pos
    72575609U,	// SWAP_W_bo_pre
    17243217U,	// SWAP_W_bo_r
    13630U,	// SYSCALL_rc
    136601U,	// TLBDEMAP_rr
    3305U,	// TLBFLUSH_A_rr
    3316U,	// TLBFLUSH_B_rr
    136593U,	// TLBMAP_rr
    135382U,	// TLBPROBE_A_rr
    136418U,	// TLBPROBE_I_rr
    3408U,	// TRAPSV_sys
    3402U,	// TRAPV_sys
    16782616U,	// UNPACK_rr_rr
    16782616U,	// UNPACK_rr_rr_v110
    136492U,	// UPDFL_rr
    16782129U,	// UTOF_rr
    3397U,	// WAIT_sys
    1879054163U,	// XNOR_T
    268441173U,	// XNOR_rc
    5717U,	// XNOR_rr
    268441148U,	// XOR_EQ_rc
    5692U,	// XOR_EQ_rr
    268441580U,	// XOR_GE_U_rc
    6124U,	// XOR_GE_U_rr
    268440225U,	// XOR_GE_rc
    4769U,	// XOR_GE_rr
    268441741U,	// XOR_LT_U_rc
    6285U,	// XOR_LT_U_rr
    268441512U,	// XOR_LT_rc
    6056U,	// XOR_LT_rr
    268440272U,	// XOR_NE_rc
    4816U,	// XOR_NE_rr
    1879054174U,	// XOR_T
    268441179U,	// XOR_rc
    5723U,	// XOR_rr
    16782939U,	// XOR_srr
  };

  static const uint8_t OpInfo1[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// INLINEASM_BR
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// DBG_VALUE_LIST
    0U,	// DBG_INSTR_REF
    0U,	// DBG_PHI
    0U,	// DBG_LABEL
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// PSEUDO_PROBE
    0U,	// ARITH_FENCE
    0U,	// STACKMAP
    0U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// PREALLOCATED_SETUP
    0U,	// PREALLOCATED_ARG
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    0U,	// PATCHABLE_FUNCTION_ENTER
    0U,	// PATCHABLE_RET
    0U,	// PATCHABLE_FUNCTION_EXIT
    0U,	// PATCHABLE_TAIL_CALL
    0U,	// PATCHABLE_EVENT_CALL
    0U,	// PATCHABLE_TYPED_EVENT_CALL
    0U,	// ICALL_BRANCH_FUNNEL
    0U,	// G_ASSERT_SEXT
    0U,	// G_ASSERT_ZEXT
    0U,	// G_ASSERT_ALIGN
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_SDIVREM
    0U,	// G_UDIVREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_BUILD_VECTOR
    0U,	// G_BUILD_VECTOR_TRUNC
    0U,	// G_CONCAT_VECTORS
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_FREEZE
    0U,	// G_INTRINSIC_FPTRUNC_ROUND
    0U,	// G_INTRINSIC_TRUNC
    0U,	// G_INTRINSIC_ROUND
    0U,	// G_INTRINSIC_LRINT
    0U,	// G_INTRINSIC_ROUNDEVEN
    0U,	// G_READCYCLECOUNTER
    0U,	// G_LOAD
    0U,	// G_SEXTLOAD
    0U,	// G_ZEXTLOAD
    0U,	// G_INDEXED_LOAD
    0U,	// G_INDEXED_SEXTLOAD
    0U,	// G_INDEXED_ZEXTLOAD
    0U,	// G_STORE
    0U,	// G_INDEXED_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_ATOMICRMW_FADD
    0U,	// G_ATOMICRMW_FSUB
    0U,	// G_ATOMICRMW_FMAX
    0U,	// G_ATOMICRMW_FMIN
    0U,	// G_FENCE
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INVOKE_REGION_START
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_SEXT_INREG
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_FSHL
    0U,	// G_FSHR
    0U,	// G_ROTR
    0U,	// G_ROTL
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDO
    0U,	// G_UADDE
    0U,	// G_USUBO
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SADDE
    0U,	// G_SSUBO
    0U,	// G_SSUBE
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_UADDSAT
    0U,	// G_SADDSAT
    0U,	// G_USUBSAT
    0U,	// G_SSUBSAT
    0U,	// G_USHLSAT
    0U,	// G_SSHLSAT
    0U,	// G_SMULFIX
    0U,	// G_UMULFIX
    0U,	// G_SMULFIXSAT
    0U,	// G_UMULFIXSAT
    0U,	// G_SDIVFIX
    0U,	// G_UDIVFIX
    0U,	// G_SDIVFIXSAT
    0U,	// G_UDIVFIXSAT
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FMAD
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FPOWI
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FLOG10
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_FABS
    0U,	// G_FCOPYSIGN
    0U,	// G_IS_FPCLASS
    0U,	// G_FCANONICALIZE
    0U,	// G_FMINNUM
    0U,	// G_FMAXNUM
    0U,	// G_FMINNUM_IEEE
    0U,	// G_FMAXNUM_IEEE
    0U,	// G_FMINIMUM
    0U,	// G_FMAXIMUM
    0U,	// G_PTR_ADD
    0U,	// G_PTRMASK
    0U,	// G_SMIN
    0U,	// G_SMAX
    0U,	// G_UMIN
    0U,	// G_UMAX
    0U,	// G_ABS
    0U,	// G_LROUND
    0U,	// G_LLROUND
    0U,	// G_BR
    0U,	// G_BRJT
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_CTTZ
    0U,	// G_CTTZ_ZERO_UNDEF
    0U,	// G_CTLZ
    0U,	// G_CTLZ_ZERO_UNDEF
    0U,	// G_CTPOP
    0U,	// G_BSWAP
    0U,	// G_BITREVERSE
    0U,	// G_FCEIL
    0U,	// G_FCOS
    0U,	// G_FSIN
    0U,	// G_FSQRT
    0U,	// G_FFLOOR
    0U,	// G_FRINT
    0U,	// G_FNEARBYINT
    0U,	// G_ADDRSPACE_CAST
    0U,	// G_BLOCK_ADDR
    0U,	// G_JUMP_TABLE
    0U,	// G_DYN_STACKALLOC
    0U,	// G_STRICT_FADD
    0U,	// G_STRICT_FSUB
    0U,	// G_STRICT_FMUL
    0U,	// G_STRICT_FDIV
    0U,	// G_STRICT_FREM
    0U,	// G_STRICT_FMA
    0U,	// G_STRICT_FSQRT
    0U,	// G_READ_REGISTER
    0U,	// G_WRITE_REGISTER
    0U,	// G_MEMCPY
    0U,	// G_MEMCPY_INLINE
    0U,	// G_MEMMOVE
    0U,	// G_MEMSET
    0U,	// G_BZERO
    0U,	// G_VECREDUCE_SEQ_FADD
    0U,	// G_VECREDUCE_SEQ_FMUL
    0U,	// G_VECREDUCE_FADD
    0U,	// G_VECREDUCE_FMUL
    0U,	// G_VECREDUCE_FMAX
    0U,	// G_VECREDUCE_FMIN
    0U,	// G_VECREDUCE_ADD
    0U,	// G_VECREDUCE_MUL
    0U,	// G_VECREDUCE_AND
    0U,	// G_VECREDUCE_OR
    0U,	// G_VECREDUCE_XOR
    0U,	// G_VECREDUCE_SMAX
    0U,	// G_VECREDUCE_SMIN
    0U,	// G_VECREDUCE_UMAX
    0U,	// G_VECREDUCE_UMIN
    0U,	// G_SBFX
    0U,	// G_UBFX
    0U,	// ABSDIFS_B_rr_v110
    0U,	// ABSDIFS_H_rr
    0U,	// ABSDIFS_rc
    0U,	// ABSDIFS_rr
    0U,	// ABSDIF_B_rr
    0U,	// ABSDIF_H_rr
    0U,	// ABSDIF_rc
    0U,	// ABSDIF_rr
    0U,	// ABSS_B_rr_v110
    0U,	// ABSS_H_rr
    0U,	// ABSS_rr
    0U,	// ABS_B_rr
    0U,	// ABS_H_rr
    0U,	// ABS_rr
    0U,	// ADDC_rc
    0U,	// ADDC_rr
    0U,	// ADDIH_A_rlc
    0U,	// ADDIH_rlc
    0U,	// ADDI_rlc
    0U,	// ADDSC_AT_rr
    0U,	// ADDSC_AT_rr_v110
    1U,	// ADDSC_A_rr
    1U,	// ADDSC_A_rr_v110
    0U,	// ADDSC_A_srrs
    0U,	// ADDSC_A_srrs_v110
    0U,	// ADDS_BU_rr_v110
    0U,	// ADDS_B_rr
    0U,	// ADDS_H
    0U,	// ADDS_HU
    0U,	// ADDS_U
    0U,	// ADDS_U_rc
    0U,	// ADDS_rc
    0U,	// ADDS_rr
    0U,	// ADDS_srr
    0U,	// ADDX_rc
    0U,	// ADDX_rr
    0U,	// ADD_A_rr
    0U,	// ADD_A_src
    0U,	// ADD_A_srr
    0U,	// ADD_B_rr
    0U,	// ADD_F_rrr
    0U,	// ADD_H_rr
    0U,	// ADD_rc
    0U,	// ADD_rr
    0U,	// ADD_src
    0U,	// ADD_src_15a
    0U,	// ADD_src_a15
    0U,	// ADD_srr
    0U,	// ADD_srr_15a
    0U,	// ADD_srr_a15
    0U,	// ANDN_T
    0U,	// ANDN_rc
    0U,	// ANDN_rr
    0U,	// AND_ANDN_T
    0U,	// AND_AND_T
    0U,	// AND_EQ_rc
    0U,	// AND_EQ_rr
    0U,	// AND_GE_U_rc
    0U,	// AND_GE_U_rr
    0U,	// AND_GE_rc
    0U,	// AND_GE_rr
    0U,	// AND_LT_U_rc
    0U,	// AND_LT_U_rr
    0U,	// AND_LT_rc
    0U,	// AND_LT_rr
    0U,	// AND_NE_rc
    0U,	// AND_NE_rr
    0U,	// AND_NOR_T
    0U,	// AND_OR_T
    0U,	// AND_T
    0U,	// AND_rc
    0U,	// AND_rr
    0U,	// AND_sc
    0U,	// AND_sc_v110
    0U,	// AND_srr
    0U,	// AND_srr_v110
    0U,	// BISR_rc
    0U,	// BISR_rc_v161
    0U,	// BISR_sc
    0U,	// BISR_sc_v110
    0U,	// BMERGAE_rr_v110
    0U,	// BMERGE_rr
    0U,	// BSPLIT_rr
    0U,	// BSPLIT_rr_v110
    0U,	// CACHEA_I_bo_bso
    0U,	// CACHEA_I_bo_c
    0U,	// CACHEA_I_bo_pos
    0U,	// CACHEA_I_bo_pre
    0U,	// CACHEA_I_bo_r
    0U,	// CACHEA_WI_bo_bso
    0U,	// CACHEA_WI_bo_c
    0U,	// CACHEA_WI_bo_pos
    0U,	// CACHEA_WI_bo_pre
    0U,	// CACHEA_WI_bo_r
    0U,	// CACHEA_W_bo_bso
    0U,	// CACHEA_W_bo_c
    0U,	// CACHEA_W_bo_pos
    0U,	// CACHEA_W_bo_pre
    0U,	// CACHEA_W_bo_r
    0U,	// CACHEI_I_bo_bso
    0U,	// CACHEI_I_bo_pos
    0U,	// CACHEI_I_bo_pre
    0U,	// CACHEI_WI_bo_bso
    0U,	// CACHEI_WI_bo_pos
    0U,	// CACHEI_WI_bo_pre
    0U,	// CACHEI_W_bo_bso
    0U,	// CACHEI_W_bo_pos
    0U,	// CACHEI_W_bo_pre
    17U,	// CADDN_A_rcr_v110
    0U,	// CADDN_A_rrr_v110
    17U,	// CADDN_rcr
    0U,	// CADDN_rrr
    0U,	// CADDN_src
    0U,	// CADDN_srr_v110
    17U,	// CADD_A_rcr_v110
    0U,	// CADD_A_rrr_v110
    17U,	// CADD_rcr
    0U,	// CADD_rrr
    0U,	// CADD_src
    0U,	// CADD_srr_v110
    0U,	// CALLA_b
    0U,	// CALLI_rr
    0U,	// CALLI_rr_v110
    0U,	// CALL_b
    0U,	// CALL_sb
    0U,	// CLO_B_rr_v110
    0U,	// CLO_H_rr
    0U,	// CLO_rr
    0U,	// CLS_B_rr_v110
    0U,	// CLS_H_rr
    0U,	// CLS_rr
    0U,	// CLZ_B_rr_v110
    0U,	// CLZ_H_rr
    0U,	// CLZ_rr
    0U,	// CMOVN_src
    0U,	// CMOVN_srr
    0U,	// CMOV_src
    0U,	// CMOV_srr
    0U,	// CMPSWAP_W_bo_bso
    0U,	// CMPSWAP_W_bo_c
    0U,	// CMPSWAP_W_bo_pos
    0U,	// CMPSWAP_W_bo_pre
    0U,	// CMPSWAP_W_bo_r
    0U,	// CMP_F_rr
    0U,	// CRC32B_W_rr
    0U,	// CRC32L_W_rr
    0U,	// CRC32_B_rr
    0U,	// CRCN_rrr
    0U,	// CSUBN_A__rrr_v110
    0U,	// CSUBN_rrr
    0U,	// CSUB_A__rrr_v110
    0U,	// CSUB_rrr
    0U,	// DEBUG_sr
    0U,	// DEBUG_sys
    33U,	// DEXTR_rrpw
    33U,	// DEXTR_rrrr
    1U,	// DIFSC_A_rr_v110
    0U,	// DISABLE_sys
    0U,	// DISABLE_sys_1
    0U,	// DIV_F_rr
    0U,	// DIV_U_rr
    0U,	// DIV_rr
    0U,	// DSYNC_sys
    0U,	// DVADJ_rrr
    0U,	// DVADJ_rrr_v110
    0U,	// DVADJ_srr_v110
    0U,	// DVINIT_BU_rr
    0U,	// DVINIT_BU_rr_v110
    0U,	// DVINIT_B_rr
    0U,	// DVINIT_B_rr_v110
    0U,	// DVINIT_HU_rr
    0U,	// DVINIT_HU_rr_v110
    0U,	// DVINIT_H_rr
    0U,	// DVINIT_H_rr_v110
    0U,	// DVINIT_U_rr
    0U,	// DVINIT_U_rr_v110
    0U,	// DVINIT_rr
    0U,	// DVINIT_rr_v110
    0U,	// DVSTEP_U_rrr
    0U,	// DVSTEP_U_rrrv110
    0U,	// DVSTEP_Uv110
    0U,	// DVSTEP_rrr
    0U,	// DVSTEP_rrrv110
    0U,	// DVSTEPv110
    0U,	// ENABLE_sys
    0U,	// EQANY_B_rc
    0U,	// EQANY_B_rr
    0U,	// EQANY_H_rc
    0U,	// EQANY_H_rr
    0U,	// EQZ_A_rr
    0U,	// EQ_A_rr
    0U,	// EQ_B_rr
    0U,	// EQ_H_rr
    0U,	// EQ_W_rr
    0U,	// EQ_rc
    0U,	// EQ_rr
    0U,	// EQ_src
    0U,	// EQ_srr
    33U,	// EXTR_U_rrpw
    0U,	// EXTR_U_rrrr
    2U,	// EXTR_U_rrrw
    33U,	// EXTR_rrpw
    0U,	// EXTR_rrrr
    2U,	// EXTR_rrrw
    0U,	// FCALLA_b
    0U,	// FCALLA_i
    0U,	// FCALL_b
    0U,	// FRET_sr
    0U,	// FRET_sys
    0U,	// FTOHP_rr
    0U,	// FTOIZ_rr
    0U,	// FTOI_rr
    0U,	// FTOQ31Z_rr
    0U,	// FTOQ31_rr
    0U,	// FTOUZ_rr
    0U,	// FTOU_rr
    0U,	// GE_A_rr
    0U,	// GE_U_rc
    0U,	// GE_U_rr
    0U,	// GE_rc
    0U,	// GE_rr
    0U,	// HPTOF_rr
    33U,	// IMASK_rcpw
    33U,	// IMASK_rcrw
    33U,	// IMASK_rrpw
    2U,	// IMASK_rrrw
    161U,	// INSERT_rcpw
    33U,	// INSERT_rcrr
    3U,	// INSERT_rcrw
    161U,	// INSERT_rrpw
    161U,	// INSERT_rrrr
    161U,	// INSERT_rrrw
    0U,	// INSN_T
    0U,	// INS_T
    0U,	// ISYNC_sys
    0U,	// ITOF_rr
    0U,	// IXMAX_U_rrr
    0U,	// IXMAX_rrr
    0U,	// IXMIN_U_rrr
    0U,	// IXMIN_rrr
    0U,	// JA_b
    0U,	// JEQ_A_brr
    0U,	// JEQ_brc
    0U,	// JEQ_brr
    0U,	// JEQ_sbc1
    0U,	// JEQ_sbc2
    0U,	// JEQ_sbc_v110
    0U,	// JEQ_sbr1
    0U,	// JEQ_sbr2
    0U,	// JEQ_sbr_v110
    0U,	// JGEZ_sbr
    0U,	// JGEZ_sbr_v110
    0U,	// JGE_U_brc
    0U,	// JGE_U_brr
    0U,	// JGE_brc
    0U,	// JGE_brr
    0U,	// JGTZ_sbr
    0U,	// JGTZ_sbr_v110
    0U,	// JI_rr
    0U,	// JI_rr_v110
    0U,	// JI_sbr_v110
    0U,	// JI_sr
    0U,	// JLA_b
    0U,	// JLEZ_sbr
    0U,	// JLEZ_sbr_v110
    0U,	// JLI_rr
    0U,	// JLI_rr_v110
    0U,	// JLTZ_sbr
    0U,	// JLTZ_sbr_v110
    0U,	// JLT_U_brc
    0U,	// JLT_U_brr
    0U,	// JLT_brc
    0U,	// JLT_brr
    0U,	// JL_b
    0U,	// JNED_brc
    0U,	// JNED_brr
    0U,	// JNEI_brc
    0U,	// JNEI_brr
    0U,	// JNE_A_brr
    0U,	// JNE_brc
    0U,	// JNE_brr
    0U,	// JNE_sbc1
    0U,	// JNE_sbc2
    0U,	// JNE_sbc_v110
    0U,	// JNE_sbr1
    0U,	// JNE_sbr2
    0U,	// JNE_sbr_v110
    0U,	// JNZ_A_brr
    0U,	// JNZ_A_sbr
    0U,	// JNZ_T_brn
    0U,	// JNZ_T_sbrn
    0U,	// JNZ_T_sbrn_v110
    0U,	// JNZ_sb
    0U,	// JNZ_sb_v110
    0U,	// JNZ_sbr
    0U,	// JNZ_sbr_v110
    0U,	// JZ_A_brr
    0U,	// JZ_A_sbr
    0U,	// JZ_T_brn
    0U,	// JZ_T_sbrn
    0U,	// JZ_T_sbrn_v110
    0U,	// JZ_sb
    0U,	// JZ_sb_v110
    0U,	// JZ_sbr
    0U,	// JZ_sbr_v110
    0U,	// J_b
    0U,	// J_sb
    0U,	// J_sb_v110
    0U,	// LDLCX_abs
    0U,	// LDLCX_bo_bso
    0U,	// LDMST_abs
    0U,	// LDMST_bo_bso
    0U,	// LDMST_bo_c
    0U,	// LDMST_bo_pos
    0U,	// LDMST_bo_pre
    0U,	// LDMST_bo_r
    0U,	// LDUCX_abs
    0U,	// LDUCX_bo_bso
    0U,	// LD_A_abs
    0U,	// LD_A_bo_bso
    0U,	// LD_A_bo_c
    0U,	// LD_A_bo_pos
    0U,	// LD_A_bo_pre
    0U,	// LD_A_bo_r
    0U,	// LD_A_bol
    0U,	// LD_A_sc
    0U,	// LD_A_slr
    0U,	// LD_A_slr_post
    0U,	// LD_A_slr_post_v110
    0U,	// LD_A_slr_v110
    0U,	// LD_A_slro
    0U,	// LD_A_slro_v110
    0U,	// LD_A_sro
    0U,	// LD_A_sro_v110
    0U,	// LD_BU_abs
    0U,	// LD_BU_bo_bso
    0U,	// LD_BU_bo_c
    0U,	// LD_BU_bo_pos
    0U,	// LD_BU_bo_pre
    0U,	// LD_BU_bo_r
    0U,	// LD_BU_bol
    0U,	// LD_BU_slr
    0U,	// LD_BU_slr_post
    0U,	// LD_BU_slr_post_v110
    0U,	// LD_BU_slr_v110
    0U,	// LD_BU_slro
    0U,	// LD_BU_slro_v110
    0U,	// LD_BU_sro
    0U,	// LD_BU_sro_v110
    0U,	// LD_B_abs
    0U,	// LD_B_bo_bso
    0U,	// LD_B_bo_c
    0U,	// LD_B_bo_pos
    0U,	// LD_B_bo_pre
    0U,	// LD_B_bo_r
    0U,	// LD_B_bol
    0U,	// LD_B_slr_post_v110
    0U,	// LD_B_slr_v110
    0U,	// LD_B_slro_v110
    0U,	// LD_B_sro_v110
    0U,	// LD_DA_abs
    0U,	// LD_DA_bo_bso
    0U,	// LD_DA_bo_c
    0U,	// LD_DA_bo_pos
    0U,	// LD_DA_bo_pre
    0U,	// LD_DA_bo_r
    0U,	// LD_D_abs
    0U,	// LD_D_bo_bso
    0U,	// LD_D_bo_c
    0U,	// LD_D_bo_pos
    0U,	// LD_D_bo_pre
    0U,	// LD_D_bo_r
    0U,	// LD_HU_abs
    0U,	// LD_HU_bo_bso
    0U,	// LD_HU_bo_c
    0U,	// LD_HU_bo_pos
    0U,	// LD_HU_bo_pre
    0U,	// LD_HU_bo_r
    0U,	// LD_HU_bol
    0U,	// LD_H_abs
    0U,	// LD_H_bo_bso
    0U,	// LD_H_bo_c
    0U,	// LD_H_bo_pos
    0U,	// LD_H_bo_pre
    0U,	// LD_H_bo_r
    0U,	// LD_H_bol
    0U,	// LD_H_slr
    0U,	// LD_H_slr_post
    0U,	// LD_H_slr_post_v110
    0U,	// LD_H_slr_v110
    0U,	// LD_H_slro
    0U,	// LD_H_slro_v110
    0U,	// LD_H_sro
    0U,	// LD_H_sro_v110
    0U,	// LD_Q_abs
    0U,	// LD_Q_bo_bso
    0U,	// LD_Q_bo_c
    0U,	// LD_Q_bo_pos
    0U,	// LD_Q_bo_pre
    0U,	// LD_Q_bo_r
    0U,	// LD_W_abs
    0U,	// LD_W_bo_bso
    0U,	// LD_W_bo_c
    0U,	// LD_W_bo_pos
    0U,	// LD_W_bo_pre
    0U,	// LD_W_bo_r
    0U,	// LD_W_bol
    0U,	// LD_W_sc
    0U,	// LD_W_slr
    0U,	// LD_W_slr_post
    0U,	// LD_W_slr_post_v110
    0U,	// LD_W_slr_v110
    0U,	// LD_W_slro
    0U,	// LD_W_slro_v110
    0U,	// LD_W_sro
    0U,	// LD_W_sro_v110
    0U,	// LEA_abs
    0U,	// LEA_bo_bso
    0U,	// LEA_bol
    0U,	// LHA_abs
    0U,	// LOOPU_brr
    0U,	// LOOP_brr
    0U,	// LOOP_sbr
    0U,	// LT_A_rr
    0U,	// LT_B
    0U,	// LT_BU
    0U,	// LT_H
    0U,	// LT_HU
    0U,	// LT_U_rc
    0U,	// LT_U_rr
    0U,	// LT_U_srcv110
    0U,	// LT_U_srrv110
    0U,	// LT_W
    0U,	// LT_WU
    0U,	// LT_rc
    0U,	// LT_rr
    0U,	// LT_src
    0U,	// LT_srr
    52U,	// MADDMS_H_rrr1_LL
    53U,	// MADDMS_H_rrr1_LU
    54U,	// MADDMS_H_rrr1_UL
    55U,	// MADDMS_H_rrr1_UU
    65U,	// MADDMS_U_rcr_v110
    0U,	// MADDMS_U_rrr2_v110
    17U,	// MADDMS_rcr_v110
    0U,	// MADDMS_rrr2_v110
    52U,	// MADDM_H_rrr1_LL
    53U,	// MADDM_H_rrr1_LU
    54U,	// MADDM_H_rrr1_UL
    55U,	// MADDM_H_rrr1_UU
    0U,	// MADDM_H_rrr1_v110
    0U,	// MADDM_Q_rrr1_v110
    65U,	// MADDM_U_rcr_v110
    0U,	// MADDM_U_rrr2_v110
    17U,	// MADDM_rcr_v110
    0U,	// MADDM_rrr2_v110
    52U,	// MADDRS_H_rrr1_LL
    53U,	// MADDRS_H_rrr1_LU
    54U,	// MADDRS_H_rrr1_UL
    54U,	// MADDRS_H_rrr1_UL_2
    55U,	// MADDRS_H_rrr1_UU
    49U,	// MADDRS_H_rrr1_v110
    0U,	// MADDRS_Q_rrr1_L_L
    0U,	// MADDRS_Q_rrr1_U_U
    49U,	// MADDRS_Q_rrr1_v110
    52U,	// MADDR_H_rrr1_LL
    53U,	// MADDR_H_rrr1_LU
    54U,	// MADDR_H_rrr1_UL
    54U,	// MADDR_H_rrr1_UL_2
    55U,	// MADDR_H_rrr1_UU
    49U,	// MADDR_H_rrr1_v110
    0U,	// MADDR_Q_rrr1_L_L
    0U,	// MADDR_Q_rrr1_U_U
    49U,	// MADDR_Q_rrr1_v110
    52U,	// MADDSUMS_H_rrr1_LL
    53U,	// MADDSUMS_H_rrr1_LU
    54U,	// MADDSUMS_H_rrr1_UL
    55U,	// MADDSUMS_H_rrr1_UU
    52U,	// MADDSUM_H_rrr1_LL
    53U,	// MADDSUM_H_rrr1_LU
    54U,	// MADDSUM_H_rrr1_UL
    55U,	// MADDSUM_H_rrr1_UU
    52U,	// MADDSURS_H_rrr1_LL
    53U,	// MADDSURS_H_rrr1_LU
    54U,	// MADDSURS_H_rrr1_UL
    55U,	// MADDSURS_H_rrr1_UU
    52U,	// MADDSUR_H_rrr1_LL
    53U,	// MADDSUR_H_rrr1_LU
    54U,	// MADDSUR_H_rrr1_UL
    55U,	// MADDSUR_H_rrr1_UU
    52U,	// MADDSUS_H_rrr1_LL
    53U,	// MADDSUS_H_rrr1_LU
    54U,	// MADDSUS_H_rrr1_UL
    55U,	// MADDSUS_H_rrr1_UU
    52U,	// MADDSU_H_rrr1_LL
    53U,	// MADDSU_H_rrr1_LU
    54U,	// MADDSU_H_rrr1_UL
    55U,	// MADDSU_H_rrr1_UU
    52U,	// MADDS_H_rrr1_LL
    53U,	// MADDS_H_rrr1_LU
    54U,	// MADDS_H_rrr1_UL
    55U,	// MADDS_H_rrr1_UU
    49U,	// MADDS_H_rrr1_v110
    49U,	// MADDS_Q_rrr1
    56U,	// MADDS_Q_rrr1_L
    0U,	// MADDS_Q_rrr1_L_L
    57U,	// MADDS_Q_rrr1_U
    49U,	// MADDS_Q_rrr1_UU2_v110
    0U,	// MADDS_Q_rrr1_U_U
    49U,	// MADDS_Q_rrr1_e
    56U,	// MADDS_Q_rrr1_e_L
    0U,	// MADDS_Q_rrr1_e_L_L
    57U,	// MADDS_Q_rrr1_e_U
    0U,	// MADDS_Q_rrr1_e_U_U
    17U,	// MADDS_U_rcr
    17U,	// MADDS_U_rcr_e
    0U,	// MADDS_U_rrr2
    0U,	// MADDS_U_rrr2_e
    17U,	// MADDS_rcr
    17U,	// MADDS_rcr_e
    0U,	// MADDS_rrr2
    0U,	// MADDS_rrr2_e
    0U,	// MADD_F_rrr
    52U,	// MADD_H_rrr1_LL
    53U,	// MADD_H_rrr1_LU
    54U,	// MADD_H_rrr1_UL
    55U,	// MADD_H_rrr1_UU
    49U,	// MADD_H_rrr1_v110
    49U,	// MADD_Q_rrr1
    56U,	// MADD_Q_rrr1_L
    0U,	// MADD_Q_rrr1_L_L
    57U,	// MADD_Q_rrr1_U
    49U,	// MADD_Q_rrr1_UU2_v110
    0U,	// MADD_Q_rrr1_U_U
    49U,	// MADD_Q_rrr1_e
    56U,	// MADD_Q_rrr1_e_L
    0U,	// MADD_Q_rrr1_e_L_L
    57U,	// MADD_Q_rrr1_e_U
    0U,	// MADD_Q_rrr1_e_U_U
    65U,	// MADD_U_rcr
    0U,	// MADD_U_rrr2
    17U,	// MADD_rcr
    17U,	// MADD_rcr_e
    0U,	// MADD_rrr2
    0U,	// MADD_rrr2_e
    0U,	// MAX_B
    0U,	// MAX_BU
    0U,	// MAX_H
    0U,	// MAX_HU
    0U,	// MAX_U_rc
    0U,	// MAX_U_rr
    0U,	// MAX_rc
    0U,	// MAX_rr
    0U,	// MFCR_rlc
    0U,	// MIN_B
    0U,	// MIN_BU
    0U,	// MIN_H
    0U,	// MIN_HU
    0U,	// MIN_U_rc
    0U,	// MIN_U_rr
    0U,	// MIN_rc
    0U,	// MIN_rr
    0U,	// MOVH_A_rlc
    0U,	// MOVH_rlc
    0U,	// MOVZ_A_sr
    0U,	// MOV_AA_rr
    0U,	// MOV_AA_srr_srr
    0U,	// MOV_AA_srr_srr_v110
    0U,	// MOV_A_rr
    0U,	// MOV_A_src
    0U,	// MOV_A_srr
    0U,	// MOV_A_srr_v110
    0U,	// MOV_D_rr
    0U,	// MOV_D_srr_srr
    0U,	// MOV_D_srr_srr_v110
    0U,	// MOV_U_rlc
    0U,	// MOV_rlc
    0U,	// MOV_rlc_e
    0U,	// MOV_rr
    0U,	// MOV_rr_e
    0U,	// MOV_rr_eab
    0U,	// MOV_sc
    0U,	// MOV_sc_v110
    0U,	// MOV_src
    0U,	// MOV_src_e
    0U,	// MOV_srr
    52U,	// MSUBADMS_H_rrr1_LL
    53U,	// MSUBADMS_H_rrr1_LU
    54U,	// MSUBADMS_H_rrr1_UL
    55U,	// MSUBADMS_H_rrr1_UU
    52U,	// MSUBADM_H_rrr1_LL
    53U,	// MSUBADM_H_rrr1_LU
    54U,	// MSUBADM_H_rrr1_UL
    55U,	// MSUBADM_H_rrr1_UU
    52U,	// MSUBADRS_H_rrr1_LL
    53U,	// MSUBADRS_H_rrr1_LU
    54U,	// MSUBADRS_H_rrr1_UL
    55U,	// MSUBADRS_H_rrr1_UU
    49U,	// MSUBADRS_H_rrr1_v110
    52U,	// MSUBADR_H_rrr1_LL
    53U,	// MSUBADR_H_rrr1_LU
    54U,	// MSUBADR_H_rrr1_UL
    55U,	// MSUBADR_H_rrr1_UU
    49U,	// MSUBADR_H_rrr1_v110
    52U,	// MSUBADS_H_rrr1_LL
    53U,	// MSUBADS_H_rrr1_LU
    54U,	// MSUBADS_H_rrr1_UL
    55U,	// MSUBADS_H_rrr1_UU
    52U,	// MSUBAD_H_rrr1_LL
    53U,	// MSUBAD_H_rrr1_LU
    54U,	// MSUBAD_H_rrr1_UL
    55U,	// MSUBAD_H_rrr1_UU
    52U,	// MSUBMS_H_rrr1_LL
    53U,	// MSUBMS_H_rrr1_LU
    54U,	// MSUBMS_H_rrr1_UL
    55U,	// MSUBMS_H_rrr1_UU
    17U,	// MSUBMS_U_rcrv110
    0U,	// MSUBMS_U_rrr2v110
    17U,	// MSUBMS_rcrv110
    0U,	// MSUBMS_rrr2v110
    52U,	// MSUBM_H_rrr1_LL
    53U,	// MSUBM_H_rrr1_LU
    54U,	// MSUBM_H_rrr1_UL
    55U,	// MSUBM_H_rrr1_UU
    0U,	// MSUBM_H_rrr1_v110
    0U,	// MSUBM_Q_rrr1_v110
    17U,	// MSUBM_U_rcrv110
    0U,	// MSUBM_U_rrr2v110
    17U,	// MSUBM_rcrv110
    0U,	// MSUBM_rrr2v110
    52U,	// MSUBRS_H_rrr1_LL
    53U,	// MSUBRS_H_rrr1_LU
    54U,	// MSUBRS_H_rrr1_UL
    54U,	// MSUBRS_H_rrr1_UL_2
    55U,	// MSUBRS_H_rrr1_UU
    49U,	// MSUBRS_H_rrr1_v110
    0U,	// MSUBRS_Q_rrr1_L_L
    0U,	// MSUBRS_Q_rrr1_U_U
    49U,	// MSUBRS_Q_rrr1_v110
    52U,	// MSUBR_H_rrr1_LL
    53U,	// MSUBR_H_rrr1_LU
    54U,	// MSUBR_H_rrr1_UL
    54U,	// MSUBR_H_rrr1_UL_2
    55U,	// MSUBR_H_rrr1_UU
    49U,	// MSUBR_H_rrr1_v110
    0U,	// MSUBR_Q_rrr1_L_L
    0U,	// MSUBR_Q_rrr1_U_U
    49U,	// MSUBR_Q_rrr1_v110
    52U,	// MSUBS_H_rrr1_LL
    53U,	// MSUBS_H_rrr1_LU
    54U,	// MSUBS_H_rrr1_UL
    55U,	// MSUBS_H_rrr1_UU
    49U,	// MSUBS_H_rrr1_v110
    49U,	// MSUBS_Q_rrr1
    56U,	// MSUBS_Q_rrr1_L
    0U,	// MSUBS_Q_rrr1_L_L
    57U,	// MSUBS_Q_rrr1_U
    49U,	// MSUBS_Q_rrr1_UU2_v110
    0U,	// MSUBS_Q_rrr1_U_U
    49U,	// MSUBS_Q_rrr1_e
    56U,	// MSUBS_Q_rrr1_e_L
    0U,	// MSUBS_Q_rrr1_e_L_L
    57U,	// MSUBS_Q_rrr1_e_U
    0U,	// MSUBS_Q_rrr1_e_U_U
    17U,	// MSUBS_U_rcr
    17U,	// MSUBS_U_rcr_e
    0U,	// MSUBS_U_rrr2
    0U,	// MSUBS_U_rrr2_e
    17U,	// MSUBS_rcr
    17U,	// MSUBS_rcr_e
    0U,	// MSUBS_rrr2
    0U,	// MSUBS_rrr2_e
    0U,	// MSUB_F_rrr
    52U,	// MSUB_H_rrr1_LL
    53U,	// MSUB_H_rrr1_LU
    54U,	// MSUB_H_rrr1_UL
    55U,	// MSUB_H_rrr1_UU
    49U,	// MSUB_H_rrr1_v110
    49U,	// MSUB_Q_rrr1
    56U,	// MSUB_Q_rrr1_L
    0U,	// MSUB_Q_rrr1_L_L
    57U,	// MSUB_Q_rrr1_U
    49U,	// MSUB_Q_rrr1_UU2_v110
    0U,	// MSUB_Q_rrr1_U_U
    49U,	// MSUB_Q_rrr1_e
    56U,	// MSUB_Q_rrr1_e_L
    0U,	// MSUB_Q_rrr1_e_L_L
    57U,	// MSUB_Q_rrr1_e_U
    0U,	// MSUB_Q_rrr1_e_U_U
    65U,	// MSUB_U_rcr
    0U,	// MSUB_U_rrr2
    17U,	// MSUB_rcr
    17U,	// MSUB_rcr_e
    0U,	// MSUB_rrr2
    0U,	// MSUB_rrr2_e
    0U,	// MTCR_rlc
    4U,	// MULMS_H_rr1_LL2e
    5U,	// MULMS_H_rr1_LU2e
    6U,	// MULMS_H_rr1_UL2e
    7U,	// MULMS_H_rr1_UU2e
    4U,	// MULM_H_rr1_LL2e
    5U,	// MULM_H_rr1_LU2e
    6U,	// MULM_H_rr1_UL2e
    7U,	// MULM_H_rr1_UU2e
    0U,	// MULM_U_rc
    0U,	// MULM_U_rr
    0U,	// MULM_rc
    0U,	// MULM_rr
    4U,	// MULR_H_rr1_LL2e
    5U,	// MULR_H_rr1_LU2e
    6U,	// MULR_H_rr1_UL2e
    7U,	// MULR_H_rr1_UU2e
    1U,	// MULR_H_rr_v110
    0U,	// MULR_Q_rr1_2LL
    0U,	// MULR_Q_rr1_2UU
    1U,	// MULR_Q_rr_v110
    0U,	// MULS_U_rc
    0U,	// MULS_U_rr2
    0U,	// MULS_U_rr_v110
    0U,	// MULS_rc
    0U,	// MULS_rr2
    0U,	// MULS_rr_v110
    0U,	// MUL_F_rrr
    4U,	// MUL_H_rr1_LL2e
    5U,	// MUL_H_rr1_LU2e
    6U,	// MUL_H_rr1_UL2e
    7U,	// MUL_H_rr1_UU2e
    1U,	// MUL_H_rr_v110
    1U,	// MUL_Q_rr1_2
    0U,	// MUL_Q_rr1_2LL
    0U,	// MUL_Q_rr1_2UU
    8U,	// MUL_Q_rr1_2_L
    8U,	// MUL_Q_rr1_2_Le
    9U,	// MUL_Q_rr1_2_U
    9U,	// MUL_Q_rr1_2_Ue
    1U,	// MUL_Q_rr1_2__e
    1U,	// MUL_Q_rr_v110
    0U,	// MUL_U_rc
    0U,	// MUL_U_rr2
    0U,	// MUL_rc
    0U,	// MUL_rc_e
    0U,	// MUL_rr2
    0U,	// MUL_rr2_e
    0U,	// MUL_rr_v110
    0U,	// MUL_srr
    0U,	// NAND_T
    0U,	// NAND_rc
    0U,	// NAND_rr
    0U,	// NEZ_A
    0U,	// NE_A
    0U,	// NE_rc
    0U,	// NE_rr
    0U,	// NOP_sr
    0U,	// NOP_sys
    0U,	// NOR_T
    0U,	// NOR_rc
    0U,	// NOR_rr
    0U,	// NOR_sr
    0U,	// NOR_sr_v110
    0U,	// NOT_sr_v162
    0U,	// ORN_T
    0U,	// ORN_rc
    0U,	// ORN_rr
    0U,	// OR_ANDN_T
    0U,	// OR_AND_T
    0U,	// OR_EQ_rc
    0U,	// OR_EQ_rr
    0U,	// OR_GE_U_rc
    0U,	// OR_GE_U_rr
    0U,	// OR_GE_rc
    0U,	// OR_GE_rr
    0U,	// OR_LT_U_rc
    0U,	// OR_LT_U_rr
    0U,	// OR_LT_rc
    0U,	// OR_LT_rr
    0U,	// OR_NE_rc
    0U,	// OR_NE_rr
    0U,	// OR_NOR_T
    0U,	// OR_OR_T
    0U,	// OR_T
    0U,	// OR_rc
    0U,	// OR_rr
    0U,	// OR_sc
    0U,	// OR_sc_v110
    0U,	// OR_srr
    0U,	// OR_srr_v110
    0U,	// PACK_rrr
    0U,	// PARITY_rr
    0U,	// PARITY_rr_v110
    0U,	// POPCNT_W_rr
    0U,	// Q31TOF_rr
    0U,	// QSEED_F_rr
    0U,	// RESTORE_sys
    0U,	// RET_sr
    0U,	// RET_sys
    0U,	// RET_sys_v110
    0U,	// RFE_sr
    0U,	// RFE_sys_sys
    0U,	// RFE_sys_sys_v110
    0U,	// RFM_sys
    0U,	// RSLCX_sys
    0U,	// RSTV_sys
    0U,	// RSUBS_U_rc
    0U,	// RSUBS_rc
    0U,	// RSUB_rc
    0U,	// RSUB_sr_sr
    0U,	// RSUB_sr_sr_v110
    0U,	// SAT_BU_rr
    0U,	// SAT_BU_sr
    0U,	// SAT_BU_sr_v110
    0U,	// SAT_B_rr
    0U,	// SAT_B_sr
    0U,	// SAT_B_sr_v110
    0U,	// SAT_HU_rr
    0U,	// SAT_HU_sr
    0U,	// SAT_HU_sr_v110
    0U,	// SAT_H_rr
    0U,	// SAT_H_sr
    0U,	// SAT_H_sr_v110
    17U,	// SELN_A_rcr_v110
    0U,	// SELN_A_rrr_v110
    17U,	// SELN_rcr
    0U,	// SELN_rrr
    17U,	// SEL_A_rcr_v110
    0U,	// SEL_A_rrr_v110
    17U,	// SEL_rcr
    0U,	// SEL_rrr
    0U,	// SHAS_rc
    0U,	// SHAS_rr
    0U,	// SHA_B_rc
    0U,	// SHA_B_rr
    0U,	// SHA_H_rc
    0U,	// SHA_H_rr
    0U,	// SHA_rc
    0U,	// SHA_rr
    0U,	// SHA_src
    0U,	// SHA_src_v110
    0U,	// SHUFFLE_rc
    0U,	// SH_ANDN_T
    0U,	// SH_AND_T
    0U,	// SH_B_rc
    0U,	// SH_B_rr
    0U,	// SH_EQ_rc
    0U,	// SH_EQ_rr
    0U,	// SH_GE_U_rc
    0U,	// SH_GE_U_rr
    0U,	// SH_GE_rc
    0U,	// SH_GE_rr
    0U,	// SH_H_rc
    0U,	// SH_H_rr
    0U,	// SH_LT_U_rc
    0U,	// SH_LT_U_rr
    0U,	// SH_LT_rc
    0U,	// SH_LT_rr
    0U,	// SH_NAND_T
    0U,	// SH_NE_rc
    0U,	// SH_NE_rr
    0U,	// SH_NOR_T
    0U,	// SH_ORN_T
    0U,	// SH_OR_T
    0U,	// SH_XNOR_T
    0U,	// SH_XOR_T
    0U,	// SH_rc
    0U,	// SH_rr
    0U,	// SH_src
    0U,	// SH_src_v110
    0U,	// STLCX_abs
    0U,	// STLCX_bo_bso
    0U,	// STUCX_abs
    0U,	// STUCX_bo_bso
    0U,	// ST_A_abs
    0U,	// ST_A_bo_bso
    0U,	// ST_A_bo_c
    0U,	// ST_A_bo_pos
    0U,	// ST_A_bo_pre
    0U,	// ST_A_bo_r
    0U,	// ST_A_bol
    0U,	// ST_A_sc
    0U,	// ST_A_sro
    0U,	// ST_A_sro_v110
    0U,	// ST_A_ssr
    0U,	// ST_A_ssr_pos
    0U,	// ST_A_ssr_pos_v110
    0U,	// ST_A_ssr_v110
    0U,	// ST_A_ssro
    0U,	// ST_A_ssro_v110
    0U,	// ST_B_abs
    0U,	// ST_B_bo_bso
    0U,	// ST_B_bo_c
    0U,	// ST_B_bo_pos
    0U,	// ST_B_bo_pre
    0U,	// ST_B_bo_r
    0U,	// ST_B_bol
    0U,	// ST_B_sro
    0U,	// ST_B_sro_v110
    0U,	// ST_B_ssr
    0U,	// ST_B_ssr_pos
    0U,	// ST_B_ssr_pos_v110
    0U,	// ST_B_ssr_v110
    0U,	// ST_B_ssro
    0U,	// ST_B_ssro_v110
    0U,	// ST_DA_abs
    0U,	// ST_DA_bo_bso
    0U,	// ST_DA_bo_c
    0U,	// ST_DA_bo_pos
    0U,	// ST_DA_bo_pre
    0U,	// ST_DA_bo_r
    0U,	// ST_D_abs
    0U,	// ST_D_bo_bso
    0U,	// ST_D_bo_c
    0U,	// ST_D_bo_pos
    0U,	// ST_D_bo_pre
    0U,	// ST_D_bo_r
    0U,	// ST_H_abs
    0U,	// ST_H_bo_bso
    0U,	// ST_H_bo_c
    0U,	// ST_H_bo_pos
    0U,	// ST_H_bo_pre
    0U,	// ST_H_bo_r
    0U,	// ST_H_bol
    0U,	// ST_H_sro
    0U,	// ST_H_sro_v110
    0U,	// ST_H_ssr
    0U,	// ST_H_ssr_pos
    0U,	// ST_H_ssr_pos_v110
    0U,	// ST_H_ssr_v110
    0U,	// ST_H_ssro
    0U,	// ST_H_ssro_v110
    0U,	// ST_Q_abs
    0U,	// ST_Q_bo_bso
    0U,	// ST_Q_bo_c
    0U,	// ST_Q_bo_pos
    0U,	// ST_Q_bo_pre
    0U,	// ST_Q_bo_r
    0U,	// ST_T
    0U,	// ST_W_abs
    0U,	// ST_W_bo_bso
    0U,	// ST_W_bo_c
    0U,	// ST_W_bo_pos
    0U,	// ST_W_bo_pre
    0U,	// ST_W_bo_r
    0U,	// ST_W_bol
    0U,	// ST_W_sc
    0U,	// ST_W_sro
    0U,	// ST_W_sro_v110
    0U,	// ST_W_ssr
    0U,	// ST_W_ssr_pos
    0U,	// ST_W_ssr_pos_v110
    0U,	// ST_W_ssr_v110
    0U,	// ST_W_ssro
    0U,	// ST_W_ssro_v110
    0U,	// SUBC_rr
    1U,	// SUBSC_A_rr
    0U,	// SUBS_BU_rr
    0U,	// SUBS_B_rr
    0U,	// SUBS_HU_rr
    0U,	// SUBS_H_rr
    0U,	// SUBS_U_rr
    0U,	// SUBS_rr
    0U,	// SUBS_srr
    0U,	// SUBX_rr
    0U,	// SUB_A_rr
    0U,	// SUB_A_sc
    0U,	// SUB_A_sc_v110
    0U,	// SUB_B_rr
    0U,	// SUB_F_rrr
    0U,	// SUB_H_rr
    0U,	// SUB_rr
    0U,	// SUB_srr
    0U,	// SUB_srr_15a
    0U,	// SUB_srr_a15
    0U,	// SVLCX_sys
    0U,	// SWAPMSK_W_bo_bso
    0U,	// SWAPMSK_W_bo_c
    0U,	// SWAPMSK_W_bo_pos
    0U,	// SWAPMSK_W_bo_pre
    0U,	// SWAPMSK_W_bo_r
    0U,	// SWAP_A_abs
    0U,	// SWAP_A_bo_bso
    0U,	// SWAP_A_bo_c
    0U,	// SWAP_A_bo_pos
    0U,	// SWAP_A_bo_pre
    0U,	// SWAP_A_bo_r
    0U,	// SWAP_W_abs
    0U,	// SWAP_W_bo_bso
    0U,	// SWAP_W_bo_c
    0U,	// SWAP_W_bo_indexed
    0U,	// SWAP_W_bo_pos
    0U,	// SWAP_W_bo_pre
    0U,	// SWAP_W_bo_r
    0U,	// SYSCALL_rc
    0U,	// TLBDEMAP_rr
    0U,	// TLBFLUSH_A_rr
    0U,	// TLBFLUSH_B_rr
    0U,	// TLBMAP_rr
    0U,	// TLBPROBE_A_rr
    0U,	// TLBPROBE_I_rr
    0U,	// TRAPSV_sys
    0U,	// TRAPV_sys
    0U,	// UNPACK_rr_rr
    0U,	// UNPACK_rr_rr_v110
    0U,	// UPDFL_rr
    0U,	// UTOF_rr
    0U,	// WAIT_sys
    0U,	// XNOR_T
    0U,	// XNOR_rc
    0U,	// XNOR_rr
    0U,	// XOR_EQ_rc
    0U,	// XOR_EQ_rr
    0U,	// XOR_GE_U_rc
    0U,	// XOR_GE_U_rr
    0U,	// XOR_GE_rc
    0U,	// XOR_GE_rr
    0U,	// XOR_LT_U_rc
    0U,	// XOR_LT_U_rr
    0U,	// XOR_LT_rc
    0U,	// XOR_LT_rr
    0U,	// XOR_NE_rc
    0U,	// XOR_NE_rr
    0U,	// XOR_T
    0U,	// XOR_rc
    0U,	// XOR_rr
    0U,	// XOR_srr
  };

  // Emit the opcode for the instruction.
  uint64_t Bits = 0;
  Bits |= (uint64_t)OpInfo0[MCInst_getOpcode(MI)] << 0;
  Bits |= (uint64_t)OpInfo1[MCInst_getOpcode(MI)] << 32;
  MnemonicBitsInfo MBI = {AsmStrs+(Bits & 4095)-1, Bits};
  return MBI;

}
/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void printInstruction(MCInst *MI, uint64_t Address, SStream *O) {
  SStream_concat0(O, "");
  MnemonicBitsInfo MnemonicInfo = getMnemonic(MI, O);

  SStream_concat0(O, MnemonicInfo.first);

  uint64_t Bits = MnemonicInfo.second;
  assert(Bits != 0 && "Cannot print this instruction.");

  // Fragment 0 encoded into 4 bits for 13 unique commands.
  switch ((Bits >> 12) & 15) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // DBG_VALUE, DBG_VALUE_LIST, DBG_INSTR_REF, DBG_PHI, DBG_LABEL, BUNDLE, ...
    return;
    break;
  case 1:
    // ABSDIFS_B_rr_v110, ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ...
    printOperand(MI, 0, O);
    break;
  case 2:
    // AND_sc, AND_sc_v110, BISR_sc, BISR_sc_v110, LD_A_sc, LD_W_sc, MOV_sc, ...
    printZExtImm_8(MI, 0, O);
    break;
  case 3:
    // BISR_rc, BISR_rc_v161, SYSCALL_rc
    printSExtImm_9(MI, 0, O);
    return;
    break;
  case 4:
    // CALLA_b, CALL_b, FCALLA_b, FCALL_b, JA_b, JLA_b, JL_b, J_b
    printDisp24Imm(MI, 0, O);
    return;
    break;
  case 5:
    // CALL_sb, JNZ_sb, JNZ_sb_v110, JZ_sb, JZ_sb_v110, J_sb, J_sb_v110
    printDisp8Imm(MI, 0, O);
    return;
    break;
  case 6:
    // CMPSWAP_W_bo_bso, CMPSWAP_W_bo_c, CMPSWAP_W_bo_pos, CMPSWAP_W_bo_pre, ...
    printOperand(MI, 1, O);
    break;
  case 7:
    // JEQ_sbc1, JEQ_sbc2, JEQ_sbc_v110, JNE_sbc1, JNE_sbc2, JNE_sbc_v110
    printSExtImm_4(MI, 1, O);
    SStream_concat0(O, ", ");
    printDisp4Imm(MI, 0, O);
    return;
    break;
  case 8:
    // LDLCX_abs, LDUCX_abs, STLCX_abs, STUCX_abs, ST_T
    printOff18Imm(MI, 0, O);
    break;
  case 9:
    // LDMST_abs, ST_A_abs, ST_B_abs, ST_DA_abs, ST_D_abs, ST_H_abs, ST_Q_abs...
    printOff18Imm(MI, 1, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 0, O);
    return;
    break;
  case 10:
    // LOOPU_brr
    printDisp15Imm(MI, 0, O);
    return;
    break;
  case 11:
    // MTCR_rlc
    printSExtImm_16(MI, 0, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 1, O);
    return;
    break;
  case 12:
    // ST_A_ssro, ST_A_ssro_v110, ST_B_ssro, ST_B_ssro_v110, ST_H_ssro, ST_H_...
    printZExtImm_4(MI, 1, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 0, O);
    return;
    break;
  }


  // Fragment 1 encoded into 4 bits for 16 unique commands.
  switch ((Bits >> 16) & 15) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_B_rr_v110, ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ...
    SStream_concat0(O, ", ");
    break;
  case 1:
    // ADD_src_a15, ADD_srr_a15, CADDN_src, CADDN_srr_v110, CADD_src, CADD_sr...
    SStream_concat0(O, ", %d15, ");
    break;
  case 2:
    // AND_sc, AND_sc_v110, BISR_sc, BISR_sc_v110, CALLI_rr, CALLI_rr_v110, D...
    return;
    break;
  case 3:
    // CACHEA_I_bo_bso, CACHEA_I_bo_pre, CACHEA_WI_bo_bso, CACHEA_WI_bo_pre, ...
    SStream_concat1(O, ']');
    break;
  case 4:
    // CACHEA_I_bo_c, CACHEA_WI_bo_c, CACHEA_W_bo_c, CMPSWAP_W_bo_c, LDMST_bo...
    SStream_concat0(O, "+c]");
    set_mem_access(MI, false);
    break;
  case 5:
    // CACHEA_I_bo_pos, CACHEA_WI_bo_pos, CACHEA_W_bo_pos, CACHEI_I_bo_pos, C...
    SStream_concat0(O, "+]");
    set_mem_access(MI, false);
    break;
  case 6:
    // CACHEA_I_bo_r, CACHEA_WI_bo_r, CACHEA_W_bo_r
    SStream_concat0(O, "+r]");
    set_mem_access(MI, false);
    return;
    break;
  case 7:
    // CMPSWAP_W_bo_r, LDMST_bo_r, SWAPMSK_W_bo_r, SWAP_A_bo_r, SWAP_W_bo_r
    SStream_concat0(O, "+r], ");
    set_mem_access(MI, false);
    break;
  case 8:
    // LD_A_bo_bso, LD_A_bo_c, LD_A_bo_pos, LD_A_bo_r, LD_A_bol, LD_A_slr, LD...
    SStream_concat0(O, ", [");
    set_mem_access(MI, true);
    break;
  case 9:
    // LD_A_bo_pre, LD_BU_bo_pre, LD_B_bo_pre, LD_DA_bo_pre, LD_D_bo_pre, LD_...
    SStream_concat0(O, ", [+");
    set_mem_access(MI, true);
    break;
  case 10:
    // LD_A_slro, LD_A_slro_v110, LD_BU_slro, LD_BU_slro_v110, LD_B_slro_v110...
    SStream_concat0(O, ", [%a15]");
    set_mem_access(MI, true);
    printZExtImm_4(MI, 1, O);
    return;
    break;
  case 11:
    // ST_A_sc
    SStream_concat0(O, ", %a15");
    return;
    break;
  case 12:
    // ST_A_ssr, ST_A_ssr_v110, ST_B_ssr, ST_B_ssr_v110, ST_H_ssr, ST_H_ssr_v...
    SStream_concat0(O, "], ");
    set_mem_access(MI, false);
    printOperand(MI, 1, O);
    return;
    break;
  case 13:
    // ST_A_ssr_pos, ST_A_ssr_pos_v110, ST_B_ssr_pos, ST_B_ssr_pos_v110, ST_H...
    SStream_concat0(O, "+], ");
    set_mem_access(MI, false);
    printOperand(MI, 1, O);
    return;
    break;
  case 14:
    // ST_W_sc
    SStream_concat0(O, ", %d15");
    return;
    break;
  case 15:
    // SWAP_W_bo_indexed
    SStream_concat0(O, "+i], ");
    set_mem_access(MI, false);
    printOperand(MI, 0, O);
    return;
    break;
  }


  // Fragment 2 encoded into 4 bits for 14 unique commands.
  switch ((Bits >> 20) & 15) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_B_rr_v110, ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ...
    printOperand(MI, 1, O);
    break;
  case 1:
    // ABSS_B_rr_v110, ABSS_rr, ADDSC_AT_rr, ADDSC_A_rr, CADDN_A_rcr_v110, CA...
    printOperand(MI, 2, O);
    break;
  case 2:
    // ADD_A_src, ADD_src, ADD_src_15a, ADD_src_a15, CADDN_src, CADD_src, CMO...
    printSExtImm_4(MI, 1, O);
    break;
  case 3:
    // ADD_F_rrr, CADDN_A_rrr_v110, CADDN_rrr, CADD_A_rrr_v110, CADD_rrr, CRC...
    printOperand(MI, 3, O);
    SStream_concat0(O, ", ");
    break;
  case 4:
    // CACHEA_I_bo_bso, CACHEA_I_bo_c, CACHEA_I_bo_pos, CACHEA_I_bo_pre, CACH...
    printSExtImm_10(MI, 1, O);
    return;
    break;
  case 5:
    // CMPSWAP_W_bo_bso, CMPSWAP_W_bo_c, CMPSWAP_W_bo_pos, CMPSWAP_W_bo_pre, ...
    printSExtImm_10(MI, 2, O);
    SStream_concat0(O, ", ");
    break;
  case 6:
    // CMPSWAP_W_bo_r, LDMST_bo_r, ST_A_bo_pos, ST_A_bo_pre, ST_B_bo_pos, ST_...
    printOperand(MI, 0, O);
    break;
  case 7:
    // JEQ_sbr1, JEQ_sbr2, JEQ_sbr_v110, JGEZ_sbr, JGEZ_sbr_v110, JGTZ_sbr, J...
    printDisp4Imm(MI, 1, O);
    return;
    break;
  case 8:
    // JGE_U_brc, JLT_U_brc, JLT_brc, JNED_brc, JNEI_brc, LD_A_sro, LD_A_sro_...
    printZExtImm_4(MI, 1, O);
    break;
  case 9:
    // JNZ_A_brr, JZ_A_brr, LOOP_brr
    printDisp15Imm(MI, 1, O);
    return;
    break;
  case 10:
    // LD_A_abs, LD_BU_abs, LD_B_abs, LD_DA_abs, LD_D_abs, LD_HU_abs, LD_H_ab...
    printOff18Imm(MI, 1, O);
    return;
    break;
  case 11:
    // MFCR_rlc, MOVH_A_rlc, MOVH_rlc, MOV_U_rlc, MOV_rlc_e
    printZExtImm_16(MI, 1, O);
    return;
    break;
  case 12:
    // MOV_rlc
    printSExtImm_16(MI, 1, O);
    return;
    break;
  case 13:
    // ST_A_bol, ST_B_bol, ST_H_bol, ST_W_bol
    printSExtImm_16(MI, 2, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 1, O);
    return;
    break;
  }


  // Fragment 3 encoded into 4 bits for 14 unique commands.
  switch ((Bits >> 24) & 15) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_B_rr_v110, ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ...
    SStream_concat0(O, ", ");
    break;
  case 1:
    // ABSS_B_rr_v110, ABSS_rr, ABS_B_rr, ABS_H_rr, ABS_rr, ADDS_srr, ADD_A_s...
    return;
    break;
  case 2:
    // ADDSC_A_srrs
    SStream_concat0(O, ", %d15, ");
    printZExtImm_2(MI, 2, O);
    return;
    break;
  case 3:
    // ADD_F_rrr, CADDN_A_rrr_v110, CADDN_rrr, CADD_A_rrr_v110, CADD_rrr, CRC...
    printOperand(MI, 1, O);
    break;
  case 4:
    // CMPSWAP_W_bo_bso, CMPSWAP_W_bo_c, CMPSWAP_W_bo_pos, CMPSWAP_W_bo_pre, ...
    printOperand(MI, 0, O);
    return;
    break;
  case 5:
    // DVADJ_rrr, DVADJ_rrr_v110, DVSTEP_U_rrr, DVSTEP_U_rrrv110, DVSTEP_rrr,...
    printOperand(MI, 2, O);
    return;
    break;
  case 6:
    // LD_A_bo_bso, LD_A_bo_pre, LD_A_bol, LD_A_slr, LD_A_slr_v110, LD_BU_bo_...
    SStream_concat1(O, ']');
    break;
  case 7:
    // LD_A_bo_c, LD_BU_bo_c, LD_B_bo_c, LD_DA_bo_c, LD_D_bo_c, LD_HU_bo_c, L...
    SStream_concat0(O, "+c]");
    set_mem_access(MI, false);
    printSExtImm_10(MI, 2, O);
    return;
    break;
  case 8:
    // LD_A_bo_pos, LD_A_slr_post, LD_A_slr_post_v110, LD_BU_bo_pos, LD_BU_sl...
    SStream_concat0(O, "+]");
    set_mem_access(MI, false);
    break;
  case 9:
    // LD_A_bo_r, LD_BU_bo_r, LD_B_bo_r, LD_DA_bo_r, LD_D_bo_r, LD_HU_bo_r, L...
    SStream_concat0(O, "+r]");
    set_mem_access(MI, false);
    return;
    break;
  case 10:
    // MULR_Q_rr1_2LL, MUL_Q_rr1_2LL
    SStream_concat0(O, "l, ");
    printOperand(MI, 2, O);
    SStream_concat0(O, "l, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 11:
    // MULR_Q_rr1_2UU, MUL_Q_rr1_2UU
    SStream_concat0(O, "u, ");
    printOperand(MI, 2, O);
    SStream_concat0(O, "u, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 12:
    // ST_A_sro, ST_A_sro_v110
    SStream_concat0(O, ", %a15");
    return;
    break;
  case 13:
    // ST_B_sro, ST_B_sro_v110, ST_H_sro, ST_H_sro_v110, ST_W_sro, ST_W_sro_v...
    SStream_concat0(O, ", %d15");
    return;
    break;
  }


  // Fragment 4 encoded into 4 bits for 15 unique commands.
  switch ((Bits >> 28) & 15) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_B_rr_v110, ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ...
    printOperand(MI, 2, O);
    break;
  case 1:
    // ABSDIF_rc, ADDC_rc, ADDS_U_rc, ADDS_rc, ADDX_rc, ADD_rc, ANDN_rc, AND_...
    printSExtImm_9(MI, 2, O);
    return;
    break;
  case 2:
    // ADDIH_A_rlc, ADDIH_rlc
    printZExtImm_16(MI, 2, O);
    return;
    break;
  case 3:
    // ADDI_rlc, LD_A_bol, LD_BU_bol, LD_B_bol, LD_HU_bol, LD_H_bol, LD_W_bol...
    printSExtImm_16(MI, 2, O);
    return;
    break;
  case 4:
    // ADDSC_AT_rr, ADDSC_A_rr, CADDN_A_rcr_v110, CADDN_rcr, CADD_A_rcr_v110,...
    printOperand(MI, 1, O);
    break;
  case 5:
    // ADDSC_A_srrs_v110
    printZExtImm_2(MI, 2, O);
    return;
    break;
  case 6:
    // ADD_F_rrr, LD_A_slr, LD_A_slr_post, LD_A_slr_post_v110, LD_A_slr_v110,...
    return;
    break;
  case 7:
    // ANDN_T, AND_ANDN_T, AND_AND_T, AND_NOR_T, AND_OR_T, AND_T, INSN_T, INS...
    printZExtImm_4(MI, 3, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 2, O);
    SStream_concat0(O, ", ");
    printZExtImm_4(MI, 4, O);
    return;
    break;
  case 8:
    // CADDN_A_rrr_v110, CADDN_rrr, CADD_A_rrr_v110, CADD_rrr, CRCN_rrr, CSUB...
    SStream_concat0(O, ", ");
    printOperand(MI, 2, O);
    break;
  case 9:
    // EXTR_U_rrrw, EXTR_rrrw, IMASK_rrrw, INSERT_rcrw
    printOperand(MI, 3, O);
    SStream_concat0(O, ", ");
    break;
  case 10:
    // JEQ_A_brr, JEQ_brc, JEQ_brr, JGE_U_brc, JGE_U_brr, JGE_brc, JGE_brr, J...
    printDisp15Imm(MI, 2, O);
    return;
    break;
  case 11:
    // LD_A_bo_bso, LD_A_bo_pos, LD_A_bo_pre, LD_BU_bo_bso, LD_BU_bo_pos, LD_...
    printSExtImm_10(MI, 2, O);
    return;
    break;
  case 12:
    // MADDRS_Q_rrr1_L_L, MADDR_Q_rrr1_L_L, MADDS_Q_rrr1_L_L, MADDS_Q_rrr1_e_...
    SStream_concat0(O, "l, ");
    printOperand(MI, 2, O);
    SStream_concat0(O, "l, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 13:
    // MADDRS_Q_rrr1_U_U, MADDR_Q_rrr1_U_U, MADDS_Q_rrr1_U_U, MADDS_Q_rrr1_e_...
    SStream_concat0(O, "u, ");
    printOperand(MI, 2, O);
    SStream_concat0(O, "u, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 14:
    // OR_rc
    printZExtImm_9(MI, 2, O);
    return;
    break;
  }


  // Fragment 5 encoded into 4 bits for 10 unique commands.
  switch ((Bits >> 32) & 15) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_B_rr_v110, ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ...
    return;
    break;
  case 1:
    // ADDSC_A_rr, ADDSC_A_rr_v110, CADDN_A_rcr_v110, CADDN_rcr, CADD_A_rcr_v...
    SStream_concat0(O, ", ");
    break;
  case 2:
    // EXTR_U_rrrw, EXTR_rrrw, IMASK_rrrw
    printOperand(MI, 4, O);
    return;
    break;
  case 3:
    // INSERT_rcrw
    printOperand(MI, 2, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 4, O);
    return;
    break;
  case 4:
    // MADDMS_H_rrr1_LL, MADDM_H_rrr1_LL, MADDRS_H_rrr1_LL, MADDR_H_rrr1_LL, ...
    SStream_concat0(O, "ll, ");
    break;
  case 5:
    // MADDMS_H_rrr1_LU, MADDM_H_rrr1_LU, MADDRS_H_rrr1_LU, MADDR_H_rrr1_LU, ...
    SStream_concat0(O, "lu, ");
    break;
  case 6:
    // MADDMS_H_rrr1_UL, MADDM_H_rrr1_UL, MADDRS_H_rrr1_UL, MADDRS_H_rrr1_UL_...
    SStream_concat0(O, "ul, ");
    break;
  case 7:
    // MADDMS_H_rrr1_UU, MADDM_H_rrr1_UU, MADDRS_H_rrr1_UU, MADDR_H_rrr1_UU, ...
    SStream_concat0(O, "uu, ");
    break;
  case 8:
    // MADDS_Q_rrr1_L, MADDS_Q_rrr1_e_L, MADD_Q_rrr1_L, MADD_Q_rrr1_e_L, MSUB...
    SStream_concat0(O, "l, ");
    break;
  case 9:
    // MADDS_Q_rrr1_U, MADDS_Q_rrr1_e_U, MADD_Q_rrr1_U, MADD_Q_rrr1_e_U, MSUB...
    SStream_concat0(O, "u, ");
    break;
  }


  // Fragment 6 encoded into 3 bits for 5 unique commands.
  switch ((Bits >> 36) & 7) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ADDSC_A_rr, ADDSC_A_rr_v110, DIFSC_A_rr_v110, MULMS_H_rr1_LL2e, MULMS_...
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 1:
    // CADDN_A_rcr_v110, CADDN_rcr, CADD_A_rcr_v110, CADD_rcr, MADDMS_rcr_v11...
    printSExtImm_9(MI, 3, O);
    return;
    break;
  case 2:
    // DEXTR_rrpw, DEXTR_rrrr, EXTR_U_rrpw, EXTR_rrpw, IMASK_rcpw, IMASK_rcrw...
    printOperand(MI, 3, O);
    break;
  case 3:
    // MADDMS_H_rrr1_LL, MADDMS_H_rrr1_LU, MADDMS_H_rrr1_UL, MADDMS_H_rrr1_UU...
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 4:
    // MADDMS_U_rcr_v110, MADDM_U_rcr_v110, MADD_U_rcr, MSUB_U_rcr
    printZExtImm_9(MI, 3, O);
    return;
    break;
  }


  // Fragment 7 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 39) & 1) {
    // INSERT_rcpw, INSERT_rrpw, INSERT_rrrr, INSERT_rrrw
    SStream_concat0(O, ", ");
    printOperand(MI, 4, O);
    return;
  } else {
    // DEXTR_rrpw, DEXTR_rrrr, EXTR_U_rrpw, EXTR_rrpw, IMASK_rcpw, IMASK_rcrw...
    return;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 61 && "Invalid register number!");

  static const char AsmStrs[] = {
  /* 0 */ "d10\0"
  /* 4 */ "e10\0"
  /* 8 */ "p10\0"
  /* 12 */ "a0\0"
  /* 15 */ "d0\0"
  /* 18 */ "e0\0"
  /* 21 */ "p0\0"
  /* 24 */ "A10_A11\0"
  /* 32 */ "a11\0"
  /* 36 */ "d11\0"
  /* 40 */ "A0_A1\0"
  /* 46 */ "a1\0"
  /* 49 */ "d1\0"
  /* 52 */ "a12\0"
  /* 56 */ "d12\0"
  /* 60 */ "e12\0"
  /* 64 */ "p12\0"
  /* 68 */ "a2\0"
  /* 71 */ "d2\0"
  /* 74 */ "e2\0"
  /* 77 */ "p2\0"
  /* 80 */ "A12_A13\0"
  /* 88 */ "a13\0"
  /* 92 */ "d13\0"
  /* 96 */ "A2_A3\0"
  /* 102 */ "a3\0"
  /* 105 */ "d3\0"
  /* 108 */ "a14\0"
  /* 112 */ "d14\0"
  /* 116 */ "e14\0"
  /* 120 */ "p14\0"
  /* 124 */ "a4\0"
  /* 127 */ "d4\0"
  /* 130 */ "e4\0"
  /* 133 */ "p4\0"
  /* 136 */ "A14_A15\0"
  /* 144 */ "a15\0"
  /* 148 */ "d15\0"
  /* 152 */ "A4_A5\0"
  /* 158 */ "a5\0"
  /* 161 */ "d5\0"
  /* 164 */ "a6\0"
  /* 167 */ "d6\0"
  /* 170 */ "e6\0"
  /* 173 */ "p6\0"
  /* 176 */ "A6_A7\0"
  /* 182 */ "a7\0"
  /* 185 */ "d7\0"
  /* 188 */ "a8\0"
  /* 191 */ "d8\0"
  /* 194 */ "e8\0"
  /* 197 */ "p8\0"
  /* 200 */ "A8_A9\0"
  /* 206 */ "a9\0"
  /* 209 */ "d9\0"
  /* 212 */ "pc\0"
  /* 215 */ "pcxi\0"
  /* 220 */ "sp\0"
  /* 223 */ "psw\0"
  /* 227 */ "fcx\0"
};
  static const uint8_t RegAsmOffset[] = {
    227, 212, 215, 223, 12, 46, 68, 102, 124, 158, 164, 182, 188, 206, 
    220, 32, 52, 88, 108, 144, 15, 49, 71, 105, 127, 161, 167, 185, 
    191, 209, 0, 36, 56, 92, 112, 148, 18, 74, 130, 170, 194, 4, 
    60, 116, 21, 77, 133, 173, 197, 8, 64, 120, 40, 96, 152, 176, 
    200, 24, 80, 136, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}
#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

bool printAliasInstr(MCInst *MI, uint64_t Address, SStream *OS) {
  return false;
}

#endif // PRINT_ALIAS_INSTR
