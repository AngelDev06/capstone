/* Capstone Disassembly Engine, http://www.capstone-engine.org */
/* By Nguyen Anh Quynh <aquynh@gmail.com>, 2013-2022, */
/*    Rot127 <unisono@quyllur.org> 2022-2023 */
/* Automatically generated file by the LLVM TableGen Disassembler Backend. */
/* Do not edit. */

#include <capstone/platform.h>
#include <assert.h>

/// getMnemonic - This method is automatically generated by tablegen
/// from the instruction set description.
MnemonicBitsInfo getMnemonic(MCInst *MI, SStream *O) {
  static const char AsmStrs[] = {
  /* 0 */ "ld.a %a15, %a10, \0"
  /* 18 */ "ld.w %a15, %a10, \0"
  /* 36 */ "sub.a %a10, \0"
  /* 49 */ "st.a %a10, \0"
  /* 61 */ "ld.a %a15, \0"
  /* 73 */ "st.a %a15, \0"
  /* 85 */ "st.b %a15, \0"
  /* 97 */ "ld.h %a15, \0"
  /* 109 */ "st.h %a15, \0"
  /* 121 */ "ld.bu %a15, \0"
  /* 134 */ "ld.w %a15, \0"
  /* 146 */ "st.w %a15, \0"
  /* 158 */ "sub %d15, \0"
  /* 169 */ "add %d15, \0"
  /* 180 */ "and %d15, \0"
  /* 191 */ "jne %d15, \0"
  /* 202 */ "jeq %d15, \0"
  /* 213 */ "or %d15, \0"
  /* 223 */ "jz.t %d15, \0"
  /* 235 */ "jnz.t %d15, \0"
  /* 248 */ "lt %d15, \0"
  /* 258 */ "mov %d15, \0"
  /* 269 */ "ftoq31 \0"
  /* 277 */ "CMPSWAP.W \0"
  /* 288 */ "addsc.a \0"
  /* 297 */ "add.a \0"
  /* 304 */ "ld.a \0"
  /* 310 */ "ge.a \0"
  /* 316 */ "jne.a \0"
  /* 323 */ "addih.a \0"
  /* 332 */ "movh.a \0"
  /* 340 */ "jeq.a \0"
  /* 347 */ "lt.a \0"
  /* 353 */ "st.a \0"
  /* 359 */ "mov.a \0"
  /* 366 */ "nez.a \0"
  /* 373 */ "jz.a \0"
  /* 379 */ "jnz.a \0"
  /* 386 */ "eqz.a \0"
  /* 393 */ "mov.aa \0"
  /* 401 */ "ld.da \0"
  /* 408 */ "st.da \0"
  /* 415 */ "lea \0"
  /* 420 */ "lha \0"
  /* 425 */ "sha \0"
  /* 430 */ "ja \0"
  /* 434 */ "jla \0"
  /* 439 */ "fcalla \0"
  /* 447 */ "crc32.b \0"
  /* 456 */ "sub.b \0"
  /* 463 */ "add.b \0"
  /* 470 */ "ld.b \0"
  /* 476 */ "absdif.b \0"
  /* 486 */ "min.b \0"
  /* 493 */ "eq.b \0"
  /* 499 */ "abs.b \0"
  /* 506 */ "sat.b \0"
  /* 513 */ "dvinit.b \0"
  /* 523 */ "lt.b \0"
  /* 529 */ "st.b \0"
  /* 535 */ "max.b \0"
  /* 542 */ "eqany.b \0"
  /* 551 */ "csub \0"
  /* 557 */ "msub \0"
  /* 563 */ "rsub \0"
  /* 569 */ "subc \0"
  /* 575 */ "addc \0"
  /* 581 */ "ld.d \0"
  /* 587 */ "st.d \0"
  /* 593 */ "mov.d \0"
  /* 600 */ "cadd \0"
  /* 606 */ "madd \0"
  /* 612 */ "jned \0"
  /* 618 */ "nand \0"
  /* 624 */ "and.ge \0"
  /* 632 */ "sh.ge \0"
  /* 639 */ "xor.ge \0"
  /* 647 */ "jge \0"
  /* 652 */ "bmerge \0"
  /* 660 */ "disable \0"
  /* 669 */ "shuffle \0"
  /* 678 */ "and.ne \0"
  /* 686 */ "xor.ne \0"
  /* 694 */ "jne \0"
  /* 699 */ "msub.f \0"
  /* 707 */ "madd.f \0"
  /* 715 */ "qseed.f \0"
  /* 724 */ "cmp.f \0"
  /* 731 */ "div.f \0"
  /* 738 */ "absdif \0"
  /* 746 */ "q31tof \0"
  /* 754 */ "itof \0"
  /* 760 */ "hptof \0"
  /* 767 */ "utof \0"
  /* 773 */ "sha.h \0"
  /* 780 */ "msub.h \0"
  /* 788 */ "msubad.h \0"
  /* 798 */ "madd.h \0"
  /* 806 */ "ld.h \0"
  /* 812 */ "absdif.h \0"
  /* 822 */ "sh.h \0"
  /* 828 */ "mul.h \0"
  /* 835 */ "msubm.h \0"
  /* 844 */ "msubadm.h \0"
  /* 855 */ "maddm.h \0"
  /* 864 */ "mulm.h \0"
  /* 872 */ "maddsum.h \0"
  /* 883 */ "min.h \0"
  /* 890 */ "clo.h \0"
  /* 897 */ "eq.h \0"
  /* 903 */ "msubr.h \0"
  /* 912 */ "msubadr.h \0"
  /* 923 */ "maddr.h \0"
  /* 932 */ "mulr.h \0"
  /* 940 */ "maddsur.h \0"
  /* 951 */ "abs.h \0"
  /* 958 */ "msubs.h \0"
  /* 967 */ "msubads.h \0"
  /* 978 */ "madds.h \0"
  /* 987 */ "absdifs.h \0"
  /* 998 */ "cls.h \0"
  /* 1005 */ "msubms.h \0"
  /* 1015 */ "msubadms.h \0"
  /* 1027 */ "maddms.h \0"
  /* 1037 */ "maddsums.h \0"
  /* 1049 */ "msubrs.h \0"
  /* 1059 */ "msubadrs.h \0"
  /* 1071 */ "maddrs.h \0"
  /* 1081 */ "maddsurs.h \0"
  /* 1093 */ "abss.h \0"
  /* 1101 */ "maddsus.h \0"
  /* 1112 */ "sat.h \0"
  /* 1119 */ "dvinit.h \0"
  /* 1129 */ "lt.h \0"
  /* 1135 */ "st.h \0"
  /* 1141 */ "maddsu.h \0"
  /* 1151 */ "mov.h \0"
  /* 1158 */ "max.h \0"
  /* 1165 */ "eqany.h \0"
  /* 1174 */ "clz.h \0"
  /* 1181 */ "addih \0"
  /* 1188 */ "sh \0"
  /* 1192 */ "addi \0"
  /* 1198 */ "jnei \0"
  /* 1204 */ "ji \0"
  /* 1208 */ "jli \0"
  /* 1213 */ "fcalli \0"
  /* 1221 */ "ftoi \0"
  /* 1227 */ "dvadj \0"
  /* 1234 */ "unpack \0"
  /* 1242 */ "imask \0"
  /* 1249 */ "sel \0"
  /* 1254 */ "updfl \0"
  /* 1261 */ "jl \0"
  /* 1265 */ "fcall \0"
  /* 1272 */ "syscall \0"
  /* 1281 */ "mul \0"
  /* 1286 */ "crcn \0"
  /* 1292 */ "caddn \0"
  /* 1299 */ "andn \0"
  /* 1305 */ "ixmin \0"
  /* 1312 */ "seln \0"
  /* 1318 */ "orn \0"
  /* 1323 */ "cmovn \0"
  /* 1330 */ "clo \0"
  /* 1335 */ "dvstep \0"
  /* 1343 */ "ftohp \0"
  /* 1350 */ "loop \0"
  /* 1356 */ "msub.q \0"
  /* 1364 */ "madd.q \0"
  /* 1372 */ "ld.q \0"
  /* 1378 */ "mul.q \0"
  /* 1385 */ "msubr.q \0"
  /* 1394 */ "maddr.q \0"
  /* 1403 */ "mulr.q \0"
  /* 1411 */ "msubs.q \0"
  /* 1420 */ "madds.q \0"
  /* 1429 */ "msubrs.q \0"
  /* 1439 */ "maddrs.q \0"
  /* 1449 */ "st.q \0"
  /* 1455 */ "and.eq \0"
  /* 1463 */ "sh.eq \0"
  /* 1470 */ "xor.eq \0"
  /* 1478 */ "jeq \0"
  /* 1483 */ "mfcr \0"
  /* 1489 */ "xnor \0"
  /* 1495 */ "xor \0"
  /* 1500 */ "bisr \0"
  /* 1506 */ "dextr \0"
  /* 1513 */ "shas \0"
  /* 1519 */ "abs \0"
  /* 1524 */ "msubs \0"
  /* 1531 */ "rsubs \0"
  /* 1538 */ "madds \0"
  /* 1545 */ "absdifs \0"
  /* 1554 */ "cls \0"
  /* 1559 */ "muls \0"
  /* 1565 */ "abss \0"
  /* 1571 */ "and.and.t \0"
  /* 1582 */ "sh.and.t \0"
  /* 1592 */ "or.and.t \0"
  /* 1602 */ "sh.nand.t \0"
  /* 1613 */ "and.andn.t \0"
  /* 1625 */ "sh.andn.t \0"
  /* 1636 */ "or.andn.t \0"
  /* 1647 */ "sh.orn.t \0"
  /* 1657 */ "insn.t \0"
  /* 1665 */ "and.or.t \0"
  /* 1675 */ "sh.or.t \0"
  /* 1684 */ "or.or.t \0"
  /* 1693 */ "and.nor.t \0"
  /* 1704 */ "sh.nor.t \0"
  /* 1714 */ "or.nor.t \0"
  /* 1724 */ "sh.xnor.t \0"
  /* 1735 */ "sh.xor.t \0"
  /* 1745 */ "ins.t \0"
  /* 1752 */ "st.t \0"
  /* 1758 */ "jz.t \0"
  /* 1764 */ "jnz.t \0"
  /* 1771 */ "addsc.at \0"
  /* 1781 */ "bsplit \0"
  /* 1789 */ "dvinit \0"
  /* 1797 */ "and.lt \0"
  /* 1805 */ "sh.lt \0"
  /* 1812 */ "xor.lt \0"
  /* 1820 */ "jlt \0"
  /* 1825 */ "not \0"
  /* 1830 */ "insert \0"
  /* 1838 */ "ldmst \0"
  /* 1845 */ "madd.u \0"
  /* 1853 */ "and.ge.u \0"
  /* 1863 */ "sh.ge.u \0"
  /* 1872 */ "xor.ge.u \0"
  /* 1882 */ "jge.u \0"
  /* 1889 */ "mul.u \0"
  /* 1896 */ "ixmin.u \0"
  /* 1905 */ "dvstep.u \0"
  /* 1915 */ "extr.u \0"
  /* 1923 */ "rsubs.u \0"
  /* 1932 */ "madds.u \0"
  /* 1941 */ "muls.u \0"
  /* 1949 */ "dvinit.u \0"
  /* 1959 */ "and.lt.u \0"
  /* 1969 */ "sh.lt.u \0"
  /* 1978 */ "xor.lt.u \0"
  /* 1988 */ "jlt.u \0"
  /* 1995 */ "div.u \0"
  /* 2002 */ "mov.u \0"
  /* 2009 */ "ixmax.u \0"
  /* 2018 */ "ld.bu \0"
  /* 2025 */ "min.bu \0"
  /* 2033 */ "sat.bu \0"
  /* 2041 */ "dvinit.bu \0"
  /* 2052 */ "lt.bu \0"
  /* 2059 */ "max.bu \0"
  /* 2067 */ "ld.hu \0"
  /* 2074 */ "min.hu \0"
  /* 2082 */ "subs.hu \0"
  /* 2091 */ "adds.hu \0"
  /* 2100 */ "sat.hu \0"
  /* 2108 */ "dvinit.hu \0"
  /* 2119 */ "lt.hu \0"
  /* 2126 */ "max.hu \0"
  /* 2134 */ "ftou \0"
  /* 2140 */ "loopu \0"
  /* 2147 */ "lt.wu \0"
  /* 2154 */ "div \0"
  /* 2159 */ "cmov \0"
  /* 2165 */ "crc32b.w \0"
  /* 2175 */ "ld.w \0"
  /* 2181 */ "swapmsk.w \0"
  /* 2192 */ "crc32l.w \0"
  /* 2202 */ "swap.w \0"
  /* 2210 */ "eq.w \0"
  /* 2216 */ "lt.w \0"
  /* 2222 */ "popcnt.w \0"
  /* 2232 */ "st.w \0"
  /* 2238 */ "ixmax \0"
  /* 2245 */ "subx \0"
  /* 2251 */ "ldlcx \0"
  /* 2258 */ "stlcx \0"
  /* 2265 */ "lducx \0"
  /* 2272 */ "stucx \0"
  /* 2279 */ "addx \0"
  /* 2285 */ "parity \0"
  /* 2293 */ "ftoq31z \0"
  /* 2302 */ "jgez \0"
  /* 2308 */ "jlez \0"
  /* 2314 */ "ftoiz \0"
  /* 2321 */ "jz \0"
  /* 2325 */ "clz \0"
  /* 2330 */ "jnz \0"
  /* 2335 */ "jgtz \0"
  /* 2341 */ "jltz \0"
  /* 2347 */ "ftouz \0"
  /* 2354 */ "ld.a [+\0"
  /* 2362 */ "st.a [+\0"
  /* 2370 */ "st.b [+\0"
  /* 2378 */ "ld.h [+\0"
  /* 2386 */ "st.h [+\0"
  /* 2394 */ "cache.i [+\0"
  /* 2405 */ "cachei.i [+\0"
  /* 2417 */ "cache.wi [+\0"
  /* 2429 */ "cachei.wi [+\0"
  /* 2442 */ "ld.bu [+\0"
  /* 2451 */ "ld.w [+\0"
  /* 2459 */ "cache.w [+\0"
  /* 2470 */ "cachei.w [+\0"
  /* 2482 */ "st.w [+\0"
  /* 2490 */ "# XRay Function Patchable RET.\0"
  /* 2521 */ "# XRay Typed Event Log.\0"
  /* 2545 */ "# XRay Custom Event Log.\0"
  /* 2570 */ "# XRay Function Enter.\0"
  /* 2593 */ "# XRay Tail Call Exit.\0"
  /* 2616 */ "# XRay Function Exit.\0"
  /* 2638 */ "LIFETIME_END\0"
  /* 2651 */ "PSEUDO_PROBE\0"
  /* 2664 */ "BUNDLE\0"
  /* 2671 */ "DBG_VALUE\0"
  /* 2681 */ "DBG_INSTR_REF\0"
  /* 2695 */ "DBG_PHI\0"
  /* 2703 */ "DBG_LABEL\0"
  /* 2713 */ "LIFETIME_START\0"
  /* 2728 */ "DBG_VALUE_LIST\0"
  /* 2743 */ "cache.i [\0"
  /* 2753 */ "cachei.i [\0"
  /* 2764 */ "cache.wi [\0"
  /* 2775 */ "cachei.wi [\0"
  /* 2787 */ "cache.w [\0"
  /* 2797 */ "cachei.w [\0"
  /* 2808 */ "ldlcx [\0"
  /* 2816 */ "stlcx [\0"
  /* 2824 */ "lducx [\0"
  /* 2832 */ "stucx [\0"
  /* 2840 */ "sub.a\0"
  /* 2846 */ "add.a\0"
  /* 2852 */ "mov.a\0"
  /* 2858 */ "dsync\0"
  /* 2864 */ "isync\0"
  /* 2870 */ "rfe\0"
  /* 2874 */ "enable\0"
  /* 2881 */ "disable\0"
  /* 2889 */ "restore\0"
  /* 2897 */ "debug\0"
  /* 2903 */ "relck\0"
  /* 2909 */ "# FEntry call\0"
  /* 2923 */ "rfm\0"
  /* 2927 */ "nop\0"
  /* 2931 */ "fret\0"
  /* 2936 */ "wait\0"
  /* 2941 */ "trapv\0"
  /* 2947 */ "trapsv\0"
  /* 2954 */ "svlcx\0"
};
  static const uint32_t OpInfo0[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// INLINEASM_BR
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    2672U,	// DBG_VALUE
    2729U,	// DBG_VALUE_LIST
    2682U,	// DBG_INSTR_REF
    2696U,	// DBG_PHI
    2704U,	// DBG_LABEL
    0U,	// REG_SEQUENCE
    0U,	// COPY
    2665U,	// BUNDLE
    2714U,	// LIFETIME_START
    2639U,	// LIFETIME_END
    2652U,	// PSEUDO_PROBE
    0U,	// ARITH_FENCE
    0U,	// STACKMAP
    2910U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// PREALLOCATED_SETUP
    0U,	// PREALLOCATED_ARG
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    2571U,	// PATCHABLE_FUNCTION_ENTER
    2491U,	// PATCHABLE_RET
    2617U,	// PATCHABLE_FUNCTION_EXIT
    2594U,	// PATCHABLE_TAIL_CALL
    2546U,	// PATCHABLE_EVENT_CALL
    2522U,	// PATCHABLE_TYPED_EVENT_CALL
    0U,	// ICALL_BRANCH_FUNNEL
    0U,	// G_ASSERT_SEXT
    0U,	// G_ASSERT_ZEXT
    0U,	// G_ASSERT_ALIGN
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_SDIVREM
    0U,	// G_UDIVREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_BUILD_VECTOR
    0U,	// G_BUILD_VECTOR_TRUNC
    0U,	// G_CONCAT_VECTORS
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_FREEZE
    0U,	// G_INTRINSIC_FPTRUNC_ROUND
    0U,	// G_INTRINSIC_TRUNC
    0U,	// G_INTRINSIC_ROUND
    0U,	// G_INTRINSIC_LRINT
    0U,	// G_INTRINSIC_ROUNDEVEN
    0U,	// G_READCYCLECOUNTER
    0U,	// G_LOAD
    0U,	// G_SEXTLOAD
    0U,	// G_ZEXTLOAD
    0U,	// G_INDEXED_LOAD
    0U,	// G_INDEXED_SEXTLOAD
    0U,	// G_INDEXED_ZEXTLOAD
    0U,	// G_STORE
    0U,	// G_INDEXED_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_ATOMICRMW_FADD
    0U,	// G_ATOMICRMW_FSUB
    0U,	// G_ATOMICRMW_FMAX
    0U,	// G_ATOMICRMW_FMIN
    0U,	// G_FENCE
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INVOKE_REGION_START
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_SEXT_INREG
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_FSHL
    0U,	// G_FSHR
    0U,	// G_ROTR
    0U,	// G_ROTL
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDO
    0U,	// G_UADDE
    0U,	// G_USUBO
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SADDE
    0U,	// G_SSUBO
    0U,	// G_SSUBE
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_UADDSAT
    0U,	// G_SADDSAT
    0U,	// G_USUBSAT
    0U,	// G_SSUBSAT
    0U,	// G_USHLSAT
    0U,	// G_SSHLSAT
    0U,	// G_SMULFIX
    0U,	// G_UMULFIX
    0U,	// G_SMULFIXSAT
    0U,	// G_UMULFIXSAT
    0U,	// G_SDIVFIX
    0U,	// G_UDIVFIX
    0U,	// G_SDIVFIXSAT
    0U,	// G_UDIVFIXSAT
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FMAD
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FPOWI
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FLOG10
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_FABS
    0U,	// G_FCOPYSIGN
    0U,	// G_IS_FPCLASS
    0U,	// G_FCANONICALIZE
    0U,	// G_FMINNUM
    0U,	// G_FMAXNUM
    0U,	// G_FMINNUM_IEEE
    0U,	// G_FMAXNUM_IEEE
    0U,	// G_FMINIMUM
    0U,	// G_FMAXIMUM
    0U,	// G_PTR_ADD
    0U,	// G_PTRMASK
    0U,	// G_SMIN
    0U,	// G_SMAX
    0U,	// G_UMIN
    0U,	// G_UMAX
    0U,	// G_ABS
    0U,	// G_LROUND
    0U,	// G_LLROUND
    0U,	// G_BR
    0U,	// G_BRJT
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_CTTZ
    0U,	// G_CTTZ_ZERO_UNDEF
    0U,	// G_CTLZ
    0U,	// G_CTLZ_ZERO_UNDEF
    0U,	// G_CTPOP
    0U,	// G_BSWAP
    0U,	// G_BITREVERSE
    0U,	// G_FCEIL
    0U,	// G_FCOS
    0U,	// G_FSIN
    0U,	// G_FSQRT
    0U,	// G_FFLOOR
    0U,	// G_FRINT
    0U,	// G_FNEARBYINT
    0U,	// G_ADDRSPACE_CAST
    0U,	// G_BLOCK_ADDR
    0U,	// G_JUMP_TABLE
    0U,	// G_DYN_STACKALLOC
    0U,	// G_STRICT_FADD
    0U,	// G_STRICT_FSUB
    0U,	// G_STRICT_FMUL
    0U,	// G_STRICT_FDIV
    0U,	// G_STRICT_FREM
    0U,	// G_STRICT_FMA
    0U,	// G_STRICT_FSQRT
    0U,	// G_READ_REGISTER
    0U,	// G_WRITE_REGISTER
    0U,	// G_MEMCPY
    0U,	// G_MEMCPY_INLINE
    0U,	// G_MEMMOVE
    0U,	// G_MEMSET
    0U,	// G_BZERO
    0U,	// G_VECREDUCE_SEQ_FADD
    0U,	// G_VECREDUCE_SEQ_FMUL
    0U,	// G_VECREDUCE_FADD
    0U,	// G_VECREDUCE_FMUL
    0U,	// G_VECREDUCE_FMAX
    0U,	// G_VECREDUCE_FMIN
    0U,	// G_VECREDUCE_ADD
    0U,	// G_VECREDUCE_MUL
    0U,	// G_VECREDUCE_AND
    0U,	// G_VECREDUCE_OR
    0U,	// G_VECREDUCE_XOR
    0U,	// G_VECREDUCE_SMAX
    0U,	// G_VECREDUCE_SMIN
    0U,	// G_VECREDUCE_UMAX
    0U,	// G_VECREDUCE_UMIN
    0U,	// G_SBFX
    0U,	// G_UBFX
    5084U,	// ABSDIFS_H_rr
    5642U,	// ABSDIFS_rc
    5642U,	// ABSDIFS_rr
    4573U,	// ABSDIF_B_rr
    4909U,	// ABSDIF_H_rr
    134222563U,	// ABSDIF_rc
    4835U,	// ABSDIF_rr
    5190U,	// ABSS_H_rr
    5662U,	// ABSS_rr
    16781812U,	// ABS_B_rr
    16782264U,	// ABS_H_rr
    16782832U,	// ABS_rr
    134222400U,	// ADDC_rc
    4672U,	// ADDC_rr
    268439876U,	// ADDIH_A_rlc
    268440734U,	// ADDIH_rlc
    268440745U,	// ADDI_rlc
    5868U,	// ADDSC_AT_rr
    4385U,	// ADDSC_A_rr
    33558817U,	// ADDSC_A_srrs
    5076U,	// ADDS_H
    6188U,	// ADDS_HU
    6030U,	// ADDS_U
    134223758U,	// ADDS_U_rc
    134223364U,	// ADDS_rc
    5636U,	// ADDS_rr
    17831428U,	// ADDS_srr
    134224104U,	// ADDX_rc
    6376U,	// ADDX_rr
    2847U,	// ADD_A_rr
    18878762U,	// ADD_A_src
    17830186U,	// ADD_A_srr
    4560U,	// ADD_B_rr
    403706565U,	// ADD_F_rrr
    4896U,	// ADD_H_rr
    134222426U,	// ADD_rc
    4698U,	// ADD_rr
    18879066U,	// ADD_src
    18878634U,	// ADD_src_15a
    18944602U,	// ADD_src_a15
    17830490U,	// ADD_srr
    17830058U,	// ADD_srr_15a
    17896026U,	// ADD_srr_a15
    536876626U,	// ANDN_T
    134223124U,	// ANDN_rc
    5396U,	// ANDN_rr
    536876622U,	// AND_ANDN_T
    536876580U,	// AND_AND_T
    134223280U,	// AND_EQ_rc
    5552U,	// AND_EQ_rr
    134223678U,	// AND_GE_U_rc
    5950U,	// AND_GE_U_rr
    134222449U,	// AND_GE_rc
    4721U,	// AND_GE_rr
    134223784U,	// AND_LT_U_rc
    6056U,	// AND_LT_U_rr
    134223622U,	// AND_LT_rc
    5894U,	// AND_LT_rr
    134222503U,	// AND_NE_rc
    4775U,	// AND_NE_rr
    536876702U,	// AND_NOR_T
    536876674U,	// AND_OR_T
    536876584U,	// AND_T
    134222444U,	// AND_rc
    4716U,	// AND_rr
    139445U,	// AND_src
    17830508U,	// AND_srr
    13789U,	// BISR_rc
    140765U,	// BISR_sc
    4749U,	// BMAERGE_rr
    16783094U,	// BSPLIT_rr
    3349186U,	// CACHEI_I_bo_bso
    4409702U,	// CACHEI_I_bo_pos
    281282U,	// CACHEI_I_bo_pre
    3349208U,	// CACHEI_WI_bo_bso
    4409726U,	// CACHEI_WI_bo_pos
    281304U,	// CACHEI_WI_bo_pre
    3349230U,	// CACHEI_W_bo_bso
    334574U,	// CACHEI_W_bo_c
    4409767U,	// CACHEI_W_bo_pos
    281326U,	// CACHEI_W_bo_pre
    400110U,	// CACHEI_W_bo_r
    3349176U,	// CACHE_I_bo_bso
    334520U,	// CACHE_I_bo_c
    4409691U,	// CACHE_I_bo_pos
    281272U,	// CACHE_I_bo_pre
    400056U,	// CACHE_I_bo_r
    3349197U,	// CACHE_WI_bo_bso
    334541U,	// CACHE_WI_bo_c
    4409714U,	// CACHE_WI_bo_pos
    281293U,	// CACHE_WI_bo_pre
    400077U,	// CACHE_WI_bo_r
    3349220U,	// CACHE_W_bo_bso
    334564U,	// CACHE_W_bo_c
    4409756U,	// CACHE_W_bo_pos
    281316U,	// CACHE_W_bo_pre
    400100U,	// CACHE_W_bo_r
    1477448973U,	// CADDN_rcr
    5248269U,	// CADDN_rrr
    18945293U,	// CADDN_src
    1477448281U,	// CADD_rcr
    5247577U,	// CADD_rrr
    18944601U,	// CADD_src
    135609U,	// CALLA_b
    136383U,	// CALLI_rr
    136435U,	// CALL_b
    16782203U,	// CLO_H_rr
    16782643U,	// CLO_rr
    16782311U,	// CLS_H_rr
    16782867U,	// CLS_rr
    16782487U,	// CLZ_H_rr
    16783638U,	// CLZ_rr
    18945324U,	// CMOVN_src
    17896748U,	// CMOVN_srr
    18946160U,	// CMOV_src
    17897584U,	// CMOV_srr
    3363094U,	// CMPSWAP_W_bo_bso
    348438U,	// CMPSWAP_W_bo_c
    483606U,	// CMPSWAP_W_bo_pos
    6840598U,	// CMPSWAP_W_bo_pre
    413974U,	// CMPSWAP_W_bo_r
    4821U,	// CMP_F_rr
    403708022U,	// CRC32B_W_rr
    403708049U,	// CRC32L_W_rr
    403706304U,	// CRC32_B_rr
    5248263U,	// CRCN_rrr
    5247528U,	// CSUBN_rrr
    5247528U,	// CSUB_rrr
    2898U,	// DEBUG_sr
    2898U,	// DEBUG_sys
    1073747427U,	// DEXTR_rrpw
    1073747427U,	// DEXTR_rrrr
    2882U,	// DISABLE_sys
    135829U,	// DISABLE_sys_1
    4828U,	// DIV_F_rr
    6092U,	// DIV_U_rr
    6251U,	// DIV_rr
    2859U,	// DSYNC_sys
    403707084U,	// DVADJ_rrr
    6138U,	// DVINIT_BU_rr
    4610U,	// DVINIT_B_rr
    6205U,	// DVINIT_HU_rr
    5216U,	// DVINIT_H_rr
    6046U,	// DVINIT_U_rr
    5886U,	// DVINIT_rr
    403707762U,	// DVSTEP_U_rrr
    403707192U,	// DVSTEP_rrr
    2875U,	// ENABLE_sys
    134222367U,	// EQANY_B_rc
    4639U,	// EQANY_B_rr
    134222990U,	// EQANY_H_rc
    5262U,	// EQANY_H_rr
    16781699U,	// EQZ_A_rr
    4438U,	// EQ_A_rr
    4590U,	// EQ_B_rr
    4994U,	// EQ_H_rr
    6307U,	// EQ_W_rr
    134223284U,	// EQ_rc
    5556U,	// EQ_rr
    18878668U,	// EQ_src
    17830092U,	// EQ_srr
    1073747836U,	// EXTR_U_rrpw
    6012U,	// EXTR_U_rrrr
    1073747836U,	// EXTR_U_rrrw
    1073747428U,	// EXTR_rrpw
    5604U,	// EXTR_rrrr
    1073747428U,	// EXTR_rrrw
    135608U,	// FCALLA_b
    136382U,	// FCALLA_i
    136434U,	// FCALL_b
    2932U,	// FRET_sr
    2932U,	// FRET_sys
    16782656U,	// FTOHP_rr
    16783627U,	// FTOIZ_rr
    16782534U,	// FTOI_rr
    6390U,	// FTOQ31Z_rr
    4366U,	// FTOQ31_rr
    16783660U,	// FTOUZ_rr
    16783447U,	// FTOU_rr
    4407U,	// GE_A_rr
    134223682U,	// GE_U_rc
    5954U,	// GE_U_rr
    134222453U,	// GE_rc
    4725U,	// GE_rr
    16782073U,	// HPTOF_rr
    1073747163U,	// IMASK_rcpw
    1073747163U,	// IMASK_rcrw
    1073747163U,	// IMASK_rrpw
    1073747163U,	// IMASK_rrrw
    1073747751U,	// INSERT_rcpw
    1073747751U,	// INSERT_rcrr
    1073747751U,	// INSERT_rcrw
    1073747751U,	// INSERT_rrpw
    1073747751U,	// INSERT_rrrr
    1073747751U,	// INSERT_rrrw
    536876666U,	// INSN_T
    536876754U,	// INS_T
    2865U,	// ISYNC_sys
    16782067U,	// ITOF_rr
    403707866U,	// IXMAX_U_rrr
    403708095U,	// IXMAX_rrr
    403707753U,	// IXMIN_U_rrr
    403707162U,	// IXMIN_rrr
    135599U,	// JA_b
    4437U,	// JEQ_A_brr
    673203655U,	// JEQ_brc
    5575U,	// JEQ_brr
    28875U,	// JEQ_sbc1
    28875U,	// JEQ_sbc2
    7344331U,	// JEQ_sbr1
    7344331U,	// JEQ_sbr2
    7346431U,	// JGEZ_sbr
    673204059U,	// JGE_U_brc
    5979U,	// JGE_U_brr
    673202824U,	// JGE_brc
    4744U,	// JGE_brr
    7346464U,	// JGTZ_sbr
    136373U,	// JI_rr
    148661U,	// JI_sr
    135603U,	// JLA_b
    7346437U,	// JLEZ_sbr
    136377U,	// JLI_rr
    7346470U,	// JLTZ_sbr
    673204165U,	// JLT_U_brc
    6085U,	// JLT_U_brr
    673203997U,	// JLT_brc
    5917U,	// JLT_brr
    136430U,	// JL_b
    673202789U,	// JNED_brc
    4709U,	// JNED_brr
    673203375U,	// JNEI_brc
    5295U,	// JNEI_brr
    4413U,	// JNE_A_brr
    673202871U,	// JNE_brc
    4791U,	// JNE_brr
    28864U,	// JNE_sbc1
    28864U,	// JNE_sbc2
    7344320U,	// JNE_sbr1
    7344320U,	// JNE_sbr2
    4476U,	// JNZ_A_brr
    7344508U,	// JNZ_A_sbr
    5861U,	// JNZ_T_brn
    16781548U,	// JNZ_T_sbrn
    137499U,	// JNZ_sb
    7346459U,	// JNZ_sbr
    4470U,	// JZ_A_brr
    7344502U,	// JZ_A_sbr
    5855U,	// JZ_T_brn
    16781536U,	// JZ_T_sbrn
    137490U,	// JZ_sb
    7346450U,	// JZ_sbr
    136400U,	// J_b
    136400U,	// J_sb
    137420U,	// LDLCX_abs
    3349241U,	// LDLCX_bo_bso
    8406831U,	// LDMST_abs
    3364655U,	// LDMST_bo_bso
    349999U,	// LDMST_bo_c
    485167U,	// LDMST_bo_pos
    6842159U,	// LDMST_bo_pre
    415535U,	// LDMST_bo_r
    137434U,	// LDUCX_abs
    3349257U,	// LDUCX_bo_bso
    16781617U,	// LD_A_abs
    9965873U,	// LD_A_bo_bso
    11014449U,	// LD_A_bo_c
    463153U,	// LD_A_bo_pos
    6820145U,	// LD_A_bo_pre
    12063025U,	// LD_A_bo_r
    4401U,	// LD_A_bol
    139265U,	// LD_A_sc
    16781617U,	// LD_A_slr
    16980275U,	// LD_A_slr_post
    594225U,	// LD_A_slro
    12587070U,	// LD_A_sro
    16783331U,	// LD_BU_abs
    9967587U,	// LD_BU_bo_bso
    11016163U,	// LD_BU_bo_c
    464867U,	// LD_BU_bo_pos
    6821859U,	// LD_BU_bo_pre
    12064739U,	// LD_BU_bo_r
    6115U,	// LD_BU_bol
    16783331U,	// LD_BU_slr
    16980363U,	// LD_BU_slr_post
    595939U,	// LD_BU_slro
    12587130U,	// LD_BU_sro
    16781783U,	// LD_B_abs
    9966039U,	// LD_B_bo_bso
    11014615U,	// LD_B_bo_c
    463319U,	// LD_B_bo_pos
    6820311U,	// LD_B_bo_pre
    12063191U,	// LD_B_bo_r
    4567U,	// LD_B_bol
    16781714U,	// LD_DA_abs
    9965970U,	// LD_DA_bo_bso
    11014546U,	// LD_DA_bo_c
    463250U,	// LD_DA_bo_pos
    6820242U,	// LD_DA_bo_pre
    12063122U,	// LD_DA_bo_r
    16781894U,	// LD_D_abs
    9966150U,	// LD_D_bo_bso
    11014726U,	// LD_D_bo_c
    463430U,	// LD_D_bo_pos
    6820422U,	// LD_D_bo_pre
    12063302U,	// LD_D_bo_r
    16783380U,	// LD_HU_abs
    9967636U,	// LD_HU_bo_bso
    11016212U,	// LD_HU_bo_c
    464916U,	// LD_HU_bo_pos
    6821908U,	// LD_HU_bo_pre
    12064788U,	// LD_HU_bo_r
    6164U,	// LD_HU_bol
    16782119U,	// LD_H_abs
    9966375U,	// LD_H_bo_bso
    11014951U,	// LD_H_bo_c
    463655U,	// LD_H_bo_pos
    6820647U,	// LD_H_bo_pre
    12063527U,	// LD_H_bo_r
    4903U,	// LD_H_bol
    16782119U,	// LD_H_slr
    16980299U,	// LD_H_slr_post
    594727U,	// LD_H_slro
    12587106U,	// LD_H_sro
    16782685U,	// LD_Q_abs
    9966941U,	// LD_Q_bo_bso
    11015517U,	// LD_Q_bo_c
    464221U,	// LD_Q_bo_pos
    6821213U,	// LD_Q_bo_pre
    12064093U,	// LD_Q_bo_r
    16783488U,	// LD_W_abs
    9967744U,	// LD_W_bo_bso
    11016320U,	// LD_W_bo_c
    465024U,	// LD_W_bo_pos
    6822016U,	// LD_W_bo_pre
    12064896U,	// LD_W_bo_r
    6272U,	// LD_W_bol
    139283U,	// LD_W_sc
    16783488U,	// LD_W_slr
    16980372U,	// LD_W_slr_post
    596096U,	// LD_W_slro
    12587143U,	// LD_W_sro
    16781728U,	// LEA_abs
    9965984U,	// LEA_bo_bso
    4512U,	// LEA_bol
    16781733U,	// LHA_abs
    137309U,	// LOOPU_brr
    16782663U,	// LOOP_brr
    7345479U,	// LOOP_sbr
    4444U,	// LT_A_rr
    4620U,	// LT_B
    6149U,	// LT_BU
    5226U,	// LT_H
    6216U,	// LT_HU
    134223788U,	// LT_U_rc
    6060U,	// LT_U_rr
    6313U,	// LT_W
    6244U,	// LT_WU
    134223626U,	// LT_rc
    5898U,	// LT_rr
    18878713U,	// LT_src
    17830137U,	// LT_srr
    2152731652U,	// MADDMS_H_rrr1_LL
    3226473476U,	// MADDMS_H_rrr1_LU
    5248004U,	// MADDMS_H_rrr1_UL
    1078989828U,	// MADDMS_H_rrr1_UU
    2152731480U,	// MADDM_H_rrr1_LL
    3226473304U,	// MADDM_H_rrr1_LU
    5247832U,	// MADDM_H_rrr1_UL
    1078989656U,	// MADDM_H_rrr1_UU
    2152731696U,	// MADDRS_H_rrr1_DcEdDaDbUL
    2152731696U,	// MADDRS_H_rrr1_LL
    3226473520U,	// MADDRS_H_rrr1_LU
    5248048U,	// MADDRS_H_rrr1_UL
    1078989872U,	// MADDRS_H_rrr1_UU
    860886432U,	// MADDRS_Q_rrr1_L_L
    877663648U,	// MADDRS_Q_rrr1_U_U
    2152731548U,	// MADDR_H_rrr1_DcEdDaDbUL
    2152731548U,	// MADDR_H_rrr1_LL
    3226473372U,	// MADDR_H_rrr1_LU
    5247900U,	// MADDR_H_rrr1_UL
    1078989724U,	// MADDR_H_rrr1_UU
    860886387U,	// MADDR_Q_rrr1_L_L
    877663603U,	// MADDR_Q_rrr1_U_U
    2152731662U,	// MADDSUMS_H_rrr1_LL
    3226473486U,	// MADDSUMS_H_rrr1_LU
    5248014U,	// MADDSUMS_H_rrr1_UL
    1078989838U,	// MADDSUMS_H_rrr1_UU
    2152731497U,	// MADDSUM_H_rrr1_LL
    3226473321U,	// MADDSUM_H_rrr1_LU
    5247849U,	// MADDSUM_H_rrr1_UL
    1078989673U,	// MADDSUM_H_rrr1_UU
    2152731706U,	// MADDSURS_H_rrr1_LL
    3226473530U,	// MADDSURS_H_rrr1_LU
    5248058U,	// MADDSURS_H_rrr1_UL
    1078989882U,	// MADDSURS_H_rrr1_UU
    2152731565U,	// MADDSUR_H_rrr1_LL
    3226473389U,	// MADDSUR_H_rrr1_LU
    5247917U,	// MADDSUR_H_rrr1_UL
    1078989741U,	// MADDSUR_H_rrr1_UU
    2152731726U,	// MADDSUS_H_rrr1_LL
    3226473550U,	// MADDSUS_H_rrr1_LU
    5248078U,	// MADDSUS_H_rrr1_UL
    1078989902U,	// MADDSUS_H_rrr1_UU
    2152731766U,	// MADDSU_H_rrr1_LL
    3226473590U,	// MADDSU_H_rrr1_LU
    5248118U,	// MADDSU_H_rrr1_UL
    1078989942U,	// MADDSU_H_rrr1_UU
    2152731603U,	// MADDS_H_rrr1_LL
    3226473427U,	// MADDS_H_rrr1_LU
    5247955U,	// MADDS_H_rrr1_UL
    1078989779U,	// MADDS_H_rrr1_UU
    1078990221U,	// MADDS_Q_rrr1
    3226473869U,	// MADDS_Q_rrr1_L
    860886413U,	// MADDS_Q_rrr1_L_L
    5248397U,	// MADDS_Q_rrr1_U
    877663629U,	// MADDS_Q_rrr1_U_U
    1078990221U,	// MADDS_Q_rrr1_e
    3226473869U,	// MADDS_Q_rrr1_e_L
    860886413U,	// MADDS_Q_rrr1_e_L_L
    5248397U,	// MADDS_Q_rrr1_e_U
    877663629U,	// MADDS_Q_rrr1_e_U_U
    1477449613U,	// MADDS_U_rcr
    1477449613U,	// MADDS_U_rcr_e
    5248909U,	// MADDS_U_rrr2
    5248909U,	// MADDS_U_rrr2_e
    1477449219U,	// MADDS_rcr
    1477449219U,	// MADDS_rcr_e
    5248515U,	// MADDS_rrr2
    5248515U,	// MADDS_rrr2_e
    5247684U,	// MADD_F_rrr
    2152731423U,	// MADD_H_rrr1_LL
    3226473247U,	// MADD_H_rrr1_LU
    5247775U,	// MADD_H_rrr1_UL
    1078989599U,	// MADD_H_rrr1_UU
    1078990165U,	// MADD_Q_rrr1
    3226473813U,	// MADD_Q_rrr1_L
    860886357U,	// MADD_Q_rrr1_L_L
    5248341U,	// MADD_Q_rrr1_U
    877663573U,	// MADD_Q_rrr1_U_U
    1078990165U,	// MADD_Q_rrr1_e
    3226473813U,	// MADD_Q_rrr1_e_L
    860886357U,	// MADD_Q_rrr1_e_L_L
    5248341U,	// MADD_Q_rrr1_e_U
    877663573U,	// MADD_Q_rrr1_e_U_U
    1477449526U,	// MADD_U_rcr
    5248822U,	// MADD_U_rrr2
    1477448287U,	// MADD_rcr
    1477448287U,	// MADD_rcr_e
    5247583U,	// MADD_rrr2
    5247583U,	// MADD_rrr2_e
    4632U,	// MAX_B
    6156U,	// MAX_BU
    5255U,	// MAX_H
    6223U,	// MAX_HU
    134223836U,	// MAX_U_rc
    6108U,	// MAX_U_rr
    134224065U,	// MAX_rc
    6337U,	// MAX_rr
    268441036U,	// MFCR_rlc
    4583U,	// MIN_B
    6122U,	// MIN_BU
    4980U,	// MIN_H
    6171U,	// MIN_HU
    134223723U,	// MIN_U_rc
    5995U,	// MIN_U_rr
    134223132U,	// MIN_rc
    5404U,	// MIN_rr
    13635917U,	// MOVH_A_rlc
    16781706U,	// MOV_AA_rr
    17830282U,	// MOV_AA_srr
    2853U,	// MOV_A_rr
    18878824U,	// MOV_A_src
    17830248U,	// MOV_A_srr
    16781906U,	// MOV_D_rr
    17830482U,	// MOV_D_srr
    13636736U,	// MOV_H_rlc
    13637587U,	// MOV_U_rlc
    13637745U,	// MOV_rlcDc
    13637745U,	// MOV_rlcEc
    16783473U,	// MOV_rrDcDb
    6257U,	// MOV_rrEcDaDb
    16783473U,	// MOV_rrEcDb
    139523U,	// MOV_sc
    18880625U,	// MOV_srcDa
    14686321U,	// MOV_srcEa
    17832049U,	// MOV_srr
    2152731640U,	// MSUBADMS_H_rrr1_LL
    3226473464U,	// MSUBADMS_H_rrr1_LU
    5247992U,	// MSUBADMS_H_rrr1_UL
    1078989816U,	// MSUBADMS_H_rrr1_UU
    2152731469U,	// MSUBADM_H_rrr1_LL
    3226473293U,	// MSUBADM_H_rrr1_LU
    5247821U,	// MSUBADM_H_rrr1_UL
    1078989645U,	// MSUBADM_H_rrr1_UU
    2152731684U,	// MSUBADRS_H_rrr1_LL
    3226473508U,	// MSUBADRS_H_rrr1_LU
    5248036U,	// MSUBADRS_H_rrr1_UL
    1078989860U,	// MSUBADRS_H_rrr1_UU
    2152731537U,	// MSUBADR_H_rrr1_LL
    3226473361U,	// MSUBADR_H_rrr1_LU
    5247889U,	// MSUBADR_H_rrr1_UL
    1078989713U,	// MSUBADR_H_rrr1_UU
    2152731592U,	// MSUBADS_H_rrr1_LL
    3226473416U,	// MSUBADS_H_rrr1_LU
    5247944U,	// MSUBADS_H_rrr1_UL
    1078989768U,	// MSUBADS_H_rrr1_UU
    2152731413U,	// MSUBAD_H_rrr1_LL
    3226473237U,	// MSUBAD_H_rrr1_LU
    5247765U,	// MSUBAD_H_rrr1_UL
    1078989589U,	// MSUBAD_H_rrr1_UU
    2152731630U,	// MSUBMS_H_rrr1_LL
    3226473454U,	// MSUBMS_H_rrr1_LU
    5247982U,	// MSUBMS_H_rrr1_UL
    1078989806U,	// MSUBMS_H_rrr1_UU
    2152731460U,	// MSUBM_H_rrr1_LL
    3226473284U,	// MSUBM_H_rrr1_LU
    5247812U,	// MSUBM_H_rrr1_UL
    1078989636U,	// MSUBM_H_rrr1_UU
    2152731674U,	// MSUBRS_H_rrr1_DcEdDaDbUL
    2152731674U,	// MSUBRS_H_rrr1_LL
    3226473498U,	// MSUBRS_H_rrr1_LU
    5248026U,	// MSUBRS_H_rrr1_UL
    1078989850U,	// MSUBRS_H_rrr1_UU
    860886422U,	// MSUBRS_Q_rrr1_L_L
    877663638U,	// MSUBRS_Q_rrr1_U_U
    2152731528U,	// MSUBR_H_rrr1_DcEdDaDbUL
    2152731528U,	// MSUBR_H_rrr1_LL
    3226473352U,	// MSUBR_H_rrr1_LU
    5247880U,	// MSUBR_H_rrr1_UL
    1078989704U,	// MSUBR_H_rrr1_UU
    860886378U,	// MSUBR_Q_rrr1_L_L
    877663594U,	// MSUBR_Q_rrr1_U_U
    2152731583U,	// MSUBS_H_rrr1_LL
    3226473407U,	// MSUBS_H_rrr1_LU
    5247935U,	// MSUBS_H_rrr1_UL
    1078989759U,	// MSUBS_H_rrr1_UU
    1078990212U,	// MSUBS_Q_rrr1
    3226473860U,	// MSUBS_Q_rrr1_L
    860886404U,	// MSUBS_Q_rrr1_L_L
    5248388U,	// MSUBS_Q_rrr1_U
    877663620U,	// MSUBS_Q_rrr1_U_U
    1078990212U,	// MSUBS_Q_rrr1_e
    3226473860U,	// MSUBS_Q_rrr1_e_L
    860886404U,	// MSUBS_Q_rrr1_e_L_L
    5248388U,	// MSUBS_Q_rrr1_e_U
    877663620U,	// MSUBS_Q_rrr1_e_U_U
    1477449613U,	// MSUBS_U_rcr
    1477449613U,	// MSUBS_U_rcr_e
    5248909U,	// MSUBS_U_rrr2
    5248909U,	// MSUBS_U_rrr2_e
    1477449205U,	// MSUBS_rcr
    1477449205U,	// MSUBS_rcr_e
    5248501U,	// MSUBS_rrr2
    5248501U,	// MSUBS_rrr2_e
    5247676U,	// MSUB_F_rrr
    2152731405U,	// MSUB_H_rrr1_LL
    3226473229U,	// MSUB_H_rrr1_LU
    5247757U,	// MSUB_H_rrr1_UL
    1078989581U,	// MSUB_H_rrr1_UU
    1078990157U,	// MSUB_Q_rrr1
    3226473805U,	// MSUB_Q_rrr1_L
    860886349U,	// MSUB_Q_rrr1_L_L
    5248333U,	// MSUB_Q_rrr1_U
    877663565U,	// MSUB_Q_rrr1_U_U
    1078990157U,	// MSUB_Q_rrr1_e
    3226473805U,	// MSUB_Q_rrr1_e_L
    860886349U,	// MSUB_Q_rrr1_e_L_L
    5248333U,	// MSUB_Q_rrr1_e_U
    877663565U,	// MSUB_Q_rrr1_e_U_U
    1477449526U,	// MSUB_U_rcr
    5248822U,	// MSUB_U_rrr2
    1477448238U,	// MSUB_rcr
    1477448238U,	// MSUB_rcr_e
    5247534U,	// MSUB_rrr2
    5247534U,	// MSUB_rrr2_e
    1073746785U,	// MULM_H_rr1_LL2e
    2147488609U,	// MULM_H_rr1_LU2e
    3221230433U,	// MULM_H_rr1_UL2e
    4961U,	// MULM_H_rr1_UU2e
    1073746853U,	// MULR_H_rr1_LL2e
    2147488677U,	// MULR_H_rr1_LU2e
    3221230501U,	// MULR_H_rr1_UL2e
    5029U,	// MULR_H_rr1_UU2e
    989861244U,	// MULR_Q_rr1_2LL
    1006638460U,	// MULR_Q_rr1_2UU
    134223766U,	// MULS_U_rc
    6038U,	// MULS_U_rr2
    134223384U,	// MULS_rc
    5656U,	// MULS_rr2
    4796U,	// MUL_F_rrr
    1073746749U,	// MUL_H_rr1_LL2e
    2147488573U,	// MUL_H_rr1_LU2e
    3221230397U,	// MUL_H_rr1_UL2e
    4925U,	// MUL_H_rr1_UU2e
    989861219U,	// MUL_Q_rr1_2LL
    1006638435U,	// MUL_Q_rr1_2UU
    1073747299U,	// MUL_Q_rr1_2_L
    1073747299U,	// MUL_Q_rr1_2_Le
    2147489123U,	// MUL_Q_rr1_2_U
    2147489123U,	// MUL_Q_rr1_2_Ue
    1073747299U,	// MUL_Q_rr1_2__
    1073747299U,	// MUL_Q_rr1_2__e
    134223714U,	// MUL_U_rc
    5986U,	// MUL_U_rr2
    134223106U,	// MUL_rc
    134223106U,	// MUL_rc_e
    5378U,	// MUL_rr2
    5378U,	// MUL_rr2_e
    17831170U,	// MUL_srr
    536876614U,	// NAND_T
    134222443U,	// NAND_rc
    4715U,	// NAND_rr
    16781679U,	// NEZ_A
    4414U,	// NE_A
    134222507U,	// NE_rc
    4779U,	// NE_rr
    2928U,	// NOP_sr
    2928U,	// NOP_sys
    536876706U,	// NOR_T
    134223315U,	// NOR_rc
    5587U,	// NOR_rr
    149282U,	// NOT_sr
    536876659U,	// ORN_T
    134223143U,	// ORN_rc
    5415U,	// ORN_rr
    536876645U,	// OR_ANDN_T
    536876601U,	// OR_AND_T
    134223296U,	// OR_EQ_rc
    5568U,	// OR_EQ_rr
    134223698U,	// OR_GE_U_rc
    5970U,	// OR_GE_U_rr
    134222465U,	// OR_GE_rc
    4737U,	// OR_GE_rr
    134223804U,	// OR_LT_U_rc
    6076U,	// OR_LT_U_rr
    134223638U,	// OR_LT_rc
    5910U,	// OR_LT_rr
    134222512U,	// OR_NE_rc
    4784U,	// OR_NE_rr
    536876723U,	// OR_NOR_T
    536876693U,	// OR_OR_T
    536876678U,	// OR_T
    134223316U,	// OR_rc
    5588U,	// OR_rr
    139478U,	// OR_sc
    17831380U,	// OR_srr
    403707093U,	// PACK_rrr
    16783598U,	// PARITY_rr
    16783535U,	// POPCNT_W_rr
    4843U,	// Q31TOF_rr
    16782028U,	// QSEED_F_rr
    2890U,	// RESTORE_sys
    2933U,	// RET_sr
    2933U,	// RET_sys
    2871U,	// RFE_sr
    2871U,	// RFE_sys
    2924U,	// RFM_sys
    2904U,	// RSLCX_sys
    2890U,	// RSTV_sys
    134223748U,	// RSUBS_U_rc
    134223356U,	// RSUBS_rc
    134222388U,	// RSUB_rc
    148020U,	// RSUB_sr
    16783346U,	// SAT_BU_rr
    149490U,	// SAT_BU_sr
    16781819U,	// SAT_B_rr
    147963U,	// SAT_B_sr
    16783413U,	// SAT_HU_rr
    149557U,	// SAT_HU_sr
    16782425U,	// SAT_H_rr
    148569U,	// SAT_H_sr
    1477448993U,	// SELN_rcr
    5248289U,	// SELN_rrr
    1477448930U,	// SEL_rcr
    5248226U,	// SEL_rrr
    134223338U,	// SHAS_rc
    5610U,	// SHAS_rr
    134222598U,	// SHA_H_rc
    4870U,	// SHA_H_rr
    134222250U,	// SHA_rc
    4522U,	// SHA_rr
    14684586U,	// SHA_src
    134222494U,	// SHUFFLE_rc
    536876634U,	// SH_ANDN_T
    536876591U,	// SH_AND_T
    134223288U,	// SH_EQ_rc
    5560U,	// SH_EQ_rr
    134223688U,	// SH_GE_U_rc
    5960U,	// SH_GE_U_rr
    134222457U,	// SH_GE_rc
    4729U,	// SH_GE_rr
    134222647U,	// SH_H_rc
    4919U,	// SH_H_rr
    134223794U,	// SH_LT_U_rc
    6066U,	// SH_LT_U_rr
    134223630U,	// SH_LT_rc
    5902U,	// SH_LT_rr
    536876611U,	// SH_NAND_T
    134223630U,	// SH_NE_rc
    5902U,	// SH_NE_rr
    536876713U,	// SH_NOR_T
    536876656U,	// SH_ORN_T
    536876684U,	// SH_OR_T
    536876733U,	// SH_XNOR_T
    536876744U,	// SH_XOR_T
    134223013U,	// SH_rc
    5285U,	// SH_rr
    14685349U,	// SH_src
    137427U,	// STLCX_abs
    3349249U,	// STLCX_bo_bso
    137441U,	// STUCX_abs
    3349265U,	// STUCX_bo_bso
    8405346U,	// ST_A_abs
    9965922U,	// ST_A_bo_bso
    11014498U,	// ST_A_bo_c
    463202U,	// ST_A_bo_pos
    6820194U,	// ST_A_bo_pre
    12063074U,	// ST_A_bo_r
    403706210U,	// ST_A_bol
    663602U,	// ST_A_sc
    12587082U,	// ST_A_sro
    16781666U,	// ST_A_ssr
    16980283U,	// ST_A_ssr_pos
    32842U,	// ST_A_ssro
    8405522U,	// ST_B_abs
    9966098U,	// ST_B_bo_bso
    11014674U,	// ST_B_bo_c
    463378U,	// ST_B_bo_pos
    6820370U,	// ST_B_bo_pre
    12063250U,	// ST_B_bo_r
    403706386U,	// ST_B_bol
    12587094U,	// ST_B_sro
    16781842U,	// ST_B_ssr
    16980291U,	// ST_B_ssr_pos
    32854U,	// ST_B_ssro
    8405401U,	// ST_DA_abs
    9965977U,	// ST_DA_bo_bso
    11014553U,	// ST_DA_bo_c
    463257U,	// ST_DA_bo_pos
    6820249U,	// ST_DA_bo_pre
    12063129U,	// ST_DA_bo_r
    8405580U,	// ST_D_abs
    9966156U,	// ST_D_bo_bso
    11014732U,	// ST_D_bo_c
    463436U,	// ST_D_bo_pos
    6820428U,	// ST_D_bo_pre
    12063308U,	// ST_D_bo_r
    8406128U,	// ST_H_abs
    9966704U,	// ST_H_bo_bso
    11015280U,	// ST_H_bo_c
    463984U,	// ST_H_bo_pos
    6820976U,	// ST_H_bo_pre
    12063856U,	// ST_H_bo_r
    403706992U,	// ST_H_bol
    12587118U,	// ST_H_sro
    16782448U,	// ST_H_ssr
    16980307U,	// ST_H_ssr_pos
    32878U,	// ST_H_ssro
    8406442U,	// ST_Q_abs
    9967018U,	// ST_Q_bo_bso
    11015594U,	// ST_Q_bo_c
    464298U,	// ST_Q_bo_pos
    6821290U,	// ST_Q_bo_pre
    12064170U,	// ST_Q_bo_r
    5849U,	// ST_T
    8407225U,	// ST_W_abs
    9967801U,	// ST_W_bo_bso
    11016377U,	// ST_W_bo_c
    465081U,	// ST_W_bo_pos
    6822073U,	// ST_W_bo_pre
    12064953U,	// ST_W_bo_r
    403708089U,	// ST_W_bol
    12587155U,	// ST_W_sro
    16783545U,	// ST_W_ssr
    16980403U,	// ST_W_ssr_pos
    32915U,	// ST_W_ssro
    4666U,	// SUBC_rr
    6179U,	// SUBS_HU_rr
    5056U,	// SUBS_H_rr
    6021U,	// SUBS_U_rr
    5622U,	// SUBS_rr
    17831414U,	// SUBS_srr
    6342U,	// SUBX_rr
    2841U,	// SUB_A_rr
    139301U,	// SUB_A_sc
    4553U,	// SUB_B_rr
    403706557U,	// SUB_F_rrr
    4878U,	// SUB_H_rr
    4649U,	// SUB_rr
    17830441U,	// SUB_srr
    17830047U,	// SUB_srr_15a
    17895977U,	// SUB_srr_a15
    2955U,	// SVLCX_sys
    9967750U,	// SWAPMSK_W_bo_bso
    11016326U,	// SWAPMSK_W_bo_c
    465030U,	// SWAPMSK_W_bo_pos
    6822022U,	// SWAPMSK_W_bo_pre
    12064902U,	// SWAPMSK_W_bo_r
    8407195U,	// SWAP_W_abs
    9967771U,	// SWAP_W_bo_bso
    11016347U,	// SWAP_W_bo_c
    465051U,	// SWAP_W_bo_pos
    6822043U,	// SWAP_W_bo_pre
    12064923U,	// SWAP_W_bo_r
    13561U,	// SYSCALL_rc
    2948U,	// TRAPSV_sys
    2942U,	// TRAPV_sys
    16782547U,	// UNPACK_rr
    136423U,	// UPDFL_rr
    16782080U,	// UTOF_rr
    2937U,	// WAIT_sys
    536876736U,	// XNOR_T
    134223314U,	// XNOR_rc
    5586U,	// XNOR_rr
    134223295U,	// XOR_EQ_rc
    5567U,	// XOR_EQ_rr
    134223697U,	// XOR_GE_U_rc
    5969U,	// XOR_GE_U_rr
    134222464U,	// XOR_GE_rc
    4736U,	// XOR_GE_rr
    134223803U,	// XOR_LT_U_rc
    6075U,	// XOR_LT_U_rr
    134223637U,	// XOR_LT_rc
    5909U,	// XOR_LT_rr
    134222511U,	// XOR_NE_rc
    4783U,	// XOR_NE_rr
    536876747U,	// XOR_T
    134223320U,	// XOR_rc
    5592U,	// XOR_rr
    17831384U,	// XOR_srr
  };

  static const uint8_t OpInfo1[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// INLINEASM_BR
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// DBG_VALUE_LIST
    0U,	// DBG_INSTR_REF
    0U,	// DBG_PHI
    0U,	// DBG_LABEL
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// PSEUDO_PROBE
    0U,	// ARITH_FENCE
    0U,	// STACKMAP
    0U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// PREALLOCATED_SETUP
    0U,	// PREALLOCATED_ARG
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    0U,	// PATCHABLE_FUNCTION_ENTER
    0U,	// PATCHABLE_RET
    0U,	// PATCHABLE_FUNCTION_EXIT
    0U,	// PATCHABLE_TAIL_CALL
    0U,	// PATCHABLE_EVENT_CALL
    0U,	// PATCHABLE_TYPED_EVENT_CALL
    0U,	// ICALL_BRANCH_FUNNEL
    0U,	// G_ASSERT_SEXT
    0U,	// G_ASSERT_ZEXT
    0U,	// G_ASSERT_ALIGN
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_SDIVREM
    0U,	// G_UDIVREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_BUILD_VECTOR
    0U,	// G_BUILD_VECTOR_TRUNC
    0U,	// G_CONCAT_VECTORS
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_FREEZE
    0U,	// G_INTRINSIC_FPTRUNC_ROUND
    0U,	// G_INTRINSIC_TRUNC
    0U,	// G_INTRINSIC_ROUND
    0U,	// G_INTRINSIC_LRINT
    0U,	// G_INTRINSIC_ROUNDEVEN
    0U,	// G_READCYCLECOUNTER
    0U,	// G_LOAD
    0U,	// G_SEXTLOAD
    0U,	// G_ZEXTLOAD
    0U,	// G_INDEXED_LOAD
    0U,	// G_INDEXED_SEXTLOAD
    0U,	// G_INDEXED_ZEXTLOAD
    0U,	// G_STORE
    0U,	// G_INDEXED_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_ATOMICRMW_FADD
    0U,	// G_ATOMICRMW_FSUB
    0U,	// G_ATOMICRMW_FMAX
    0U,	// G_ATOMICRMW_FMIN
    0U,	// G_FENCE
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INVOKE_REGION_START
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_SEXT_INREG
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_FSHL
    0U,	// G_FSHR
    0U,	// G_ROTR
    0U,	// G_ROTL
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDO
    0U,	// G_UADDE
    0U,	// G_USUBO
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SADDE
    0U,	// G_SSUBO
    0U,	// G_SSUBE
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_UADDSAT
    0U,	// G_SADDSAT
    0U,	// G_USUBSAT
    0U,	// G_SSUBSAT
    0U,	// G_USHLSAT
    0U,	// G_SSHLSAT
    0U,	// G_SMULFIX
    0U,	// G_UMULFIX
    0U,	// G_SMULFIXSAT
    0U,	// G_UMULFIXSAT
    0U,	// G_SDIVFIX
    0U,	// G_UDIVFIX
    0U,	// G_SDIVFIXSAT
    0U,	// G_UDIVFIXSAT
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FMAD
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FPOWI
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FLOG10
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_FABS
    0U,	// G_FCOPYSIGN
    0U,	// G_IS_FPCLASS
    0U,	// G_FCANONICALIZE
    0U,	// G_FMINNUM
    0U,	// G_FMAXNUM
    0U,	// G_FMINNUM_IEEE
    0U,	// G_FMAXNUM_IEEE
    0U,	// G_FMINIMUM
    0U,	// G_FMAXIMUM
    0U,	// G_PTR_ADD
    0U,	// G_PTRMASK
    0U,	// G_SMIN
    0U,	// G_SMAX
    0U,	// G_UMIN
    0U,	// G_UMAX
    0U,	// G_ABS
    0U,	// G_LROUND
    0U,	// G_LLROUND
    0U,	// G_BR
    0U,	// G_BRJT
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_CTTZ
    0U,	// G_CTTZ_ZERO_UNDEF
    0U,	// G_CTLZ
    0U,	// G_CTLZ_ZERO_UNDEF
    0U,	// G_CTPOP
    0U,	// G_BSWAP
    0U,	// G_BITREVERSE
    0U,	// G_FCEIL
    0U,	// G_FCOS
    0U,	// G_FSIN
    0U,	// G_FSQRT
    0U,	// G_FFLOOR
    0U,	// G_FRINT
    0U,	// G_FNEARBYINT
    0U,	// G_ADDRSPACE_CAST
    0U,	// G_BLOCK_ADDR
    0U,	// G_JUMP_TABLE
    0U,	// G_DYN_STACKALLOC
    0U,	// G_STRICT_FADD
    0U,	// G_STRICT_FSUB
    0U,	// G_STRICT_FMUL
    0U,	// G_STRICT_FDIV
    0U,	// G_STRICT_FREM
    0U,	// G_STRICT_FMA
    0U,	// G_STRICT_FSQRT
    0U,	// G_READ_REGISTER
    0U,	// G_WRITE_REGISTER
    0U,	// G_MEMCPY
    0U,	// G_MEMCPY_INLINE
    0U,	// G_MEMMOVE
    0U,	// G_MEMSET
    0U,	// G_BZERO
    0U,	// G_VECREDUCE_SEQ_FADD
    0U,	// G_VECREDUCE_SEQ_FMUL
    0U,	// G_VECREDUCE_FADD
    0U,	// G_VECREDUCE_FMUL
    0U,	// G_VECREDUCE_FMAX
    0U,	// G_VECREDUCE_FMIN
    0U,	// G_VECREDUCE_ADD
    0U,	// G_VECREDUCE_MUL
    0U,	// G_VECREDUCE_AND
    0U,	// G_VECREDUCE_OR
    0U,	// G_VECREDUCE_XOR
    0U,	// G_VECREDUCE_SMAX
    0U,	// G_VECREDUCE_SMIN
    0U,	// G_VECREDUCE_UMAX
    0U,	// G_VECREDUCE_UMIN
    0U,	// G_SBFX
    0U,	// G_UBFX
    0U,	// ABSDIFS_H_rr
    0U,	// ABSDIFS_rc
    0U,	// ABSDIFS_rr
    0U,	// ABSDIF_B_rr
    0U,	// ABSDIF_H_rr
    0U,	// ABSDIF_rc
    0U,	// ABSDIF_rr
    0U,	// ABSS_H_rr
    0U,	// ABSS_rr
    0U,	// ABS_B_rr
    0U,	// ABS_H_rr
    0U,	// ABS_rr
    0U,	// ADDC_rc
    0U,	// ADDC_rr
    0U,	// ADDIH_A_rlc
    0U,	// ADDIH_rlc
    0U,	// ADDI_rlc
    0U,	// ADDSC_AT_rr
    0U,	// ADDSC_A_rr
    0U,	// ADDSC_A_srrs
    0U,	// ADDS_H
    0U,	// ADDS_HU
    0U,	// ADDS_U
    0U,	// ADDS_U_rc
    0U,	// ADDS_rc
    0U,	// ADDS_rr
    0U,	// ADDS_srr
    0U,	// ADDX_rc
    0U,	// ADDX_rr
    0U,	// ADD_A_rr
    0U,	// ADD_A_src
    0U,	// ADD_A_srr
    0U,	// ADD_B_rr
    0U,	// ADD_F_rrr
    0U,	// ADD_H_rr
    0U,	// ADD_rc
    0U,	// ADD_rr
    0U,	// ADD_src
    0U,	// ADD_src_15a
    0U,	// ADD_src_a15
    0U,	// ADD_srr
    0U,	// ADD_srr_15a
    0U,	// ADD_srr_a15
    0U,	// ANDN_T
    0U,	// ANDN_rc
    0U,	// ANDN_rr
    0U,	// AND_ANDN_T
    0U,	// AND_AND_T
    0U,	// AND_EQ_rc
    0U,	// AND_EQ_rr
    0U,	// AND_GE_U_rc
    0U,	// AND_GE_U_rr
    0U,	// AND_GE_rc
    0U,	// AND_GE_rr
    0U,	// AND_LT_U_rc
    0U,	// AND_LT_U_rr
    0U,	// AND_LT_rc
    0U,	// AND_LT_rr
    0U,	// AND_NE_rc
    0U,	// AND_NE_rr
    0U,	// AND_NOR_T
    0U,	// AND_OR_T
    0U,	// AND_T
    0U,	// AND_rc
    0U,	// AND_rr
    0U,	// AND_src
    0U,	// AND_srr
    0U,	// BISR_rc
    0U,	// BISR_sc
    0U,	// BMAERGE_rr
    0U,	// BSPLIT_rr
    0U,	// CACHEI_I_bo_bso
    0U,	// CACHEI_I_bo_pos
    0U,	// CACHEI_I_bo_pre
    0U,	// CACHEI_WI_bo_bso
    0U,	// CACHEI_WI_bo_pos
    0U,	// CACHEI_WI_bo_pre
    0U,	// CACHEI_W_bo_bso
    0U,	// CACHEI_W_bo_c
    0U,	// CACHEI_W_bo_pos
    0U,	// CACHEI_W_bo_pre
    0U,	// CACHEI_W_bo_r
    0U,	// CACHE_I_bo_bso
    0U,	// CACHE_I_bo_c
    0U,	// CACHE_I_bo_pos
    0U,	// CACHE_I_bo_pre
    0U,	// CACHE_I_bo_r
    0U,	// CACHE_WI_bo_bso
    0U,	// CACHE_WI_bo_c
    0U,	// CACHE_WI_bo_pos
    0U,	// CACHE_WI_bo_pre
    0U,	// CACHE_WI_bo_r
    0U,	// CACHE_W_bo_bso
    0U,	// CACHE_W_bo_c
    0U,	// CACHE_W_bo_pos
    0U,	// CACHE_W_bo_pre
    0U,	// CACHE_W_bo_r
    0U,	// CADDN_rcr
    0U,	// CADDN_rrr
    0U,	// CADDN_src
    0U,	// CADD_rcr
    0U,	// CADD_rrr
    0U,	// CADD_src
    0U,	// CALLA_b
    0U,	// CALLI_rr
    0U,	// CALL_b
    0U,	// CLO_H_rr
    0U,	// CLO_rr
    0U,	// CLS_H_rr
    0U,	// CLS_rr
    0U,	// CLZ_H_rr
    0U,	// CLZ_rr
    0U,	// CMOVN_src
    0U,	// CMOVN_srr
    0U,	// CMOV_src
    0U,	// CMOV_srr
    0U,	// CMPSWAP_W_bo_bso
    0U,	// CMPSWAP_W_bo_c
    0U,	// CMPSWAP_W_bo_pos
    0U,	// CMPSWAP_W_bo_pre
    0U,	// CMPSWAP_W_bo_r
    0U,	// CMP_F_rr
    0U,	// CRC32B_W_rr
    0U,	// CRC32L_W_rr
    0U,	// CRC32_B_rr
    0U,	// CRCN_rrr
    0U,	// CSUBN_rrr
    0U,	// CSUB_rrr
    0U,	// DEBUG_sr
    0U,	// DEBUG_sys
    4U,	// DEXTR_rrpw
    4U,	// DEXTR_rrrr
    0U,	// DISABLE_sys
    0U,	// DISABLE_sys_1
    0U,	// DIV_F_rr
    0U,	// DIV_U_rr
    0U,	// DIV_rr
    0U,	// DSYNC_sys
    0U,	// DVADJ_rrr
    0U,	// DVINIT_BU_rr
    0U,	// DVINIT_B_rr
    0U,	// DVINIT_HU_rr
    0U,	// DVINIT_H_rr
    0U,	// DVINIT_U_rr
    0U,	// DVINIT_rr
    0U,	// DVSTEP_U_rrr
    0U,	// DVSTEP_rrr
    0U,	// ENABLE_sys
    0U,	// EQANY_B_rc
    0U,	// EQANY_B_rr
    0U,	// EQANY_H_rc
    0U,	// EQANY_H_rr
    0U,	// EQZ_A_rr
    0U,	// EQ_A_rr
    0U,	// EQ_B_rr
    0U,	// EQ_H_rr
    0U,	// EQ_W_rr
    0U,	// EQ_rc
    0U,	// EQ_rr
    0U,	// EQ_src
    0U,	// EQ_srr
    4U,	// EXTR_U_rrpw
    0U,	// EXTR_U_rrrr
    4U,	// EXTR_U_rrrw
    4U,	// EXTR_rrpw
    0U,	// EXTR_rrrr
    4U,	// EXTR_rrrw
    0U,	// FCALLA_b
    0U,	// FCALLA_i
    0U,	// FCALL_b
    0U,	// FRET_sr
    0U,	// FRET_sys
    0U,	// FTOHP_rr
    0U,	// FTOIZ_rr
    0U,	// FTOI_rr
    0U,	// FTOQ31Z_rr
    0U,	// FTOQ31_rr
    0U,	// FTOUZ_rr
    0U,	// FTOU_rr
    0U,	// GE_A_rr
    0U,	// GE_U_rc
    0U,	// GE_U_rr
    0U,	// GE_rc
    0U,	// GE_rr
    0U,	// HPTOF_rr
    4U,	// IMASK_rcpw
    4U,	// IMASK_rcrw
    4U,	// IMASK_rrpw
    4U,	// IMASK_rrrw
    20U,	// INSERT_rcpw
    4U,	// INSERT_rcrr
    20U,	// INSERT_rcrw
    4U,	// INSERT_rrpw
    20U,	// INSERT_rrrr
    20U,	// INSERT_rrrw
    0U,	// INSN_T
    0U,	// INS_T
    0U,	// ISYNC_sys
    0U,	// ITOF_rr
    0U,	// IXMAX_U_rrr
    0U,	// IXMAX_rrr
    0U,	// IXMIN_U_rrr
    0U,	// IXMIN_rrr
    0U,	// JA_b
    0U,	// JEQ_A_brr
    0U,	// JEQ_brc
    0U,	// JEQ_brr
    0U,	// JEQ_sbc1
    0U,	// JEQ_sbc2
    0U,	// JEQ_sbr1
    0U,	// JEQ_sbr2
    0U,	// JGEZ_sbr
    0U,	// JGE_U_brc
    0U,	// JGE_U_brr
    0U,	// JGE_brc
    0U,	// JGE_brr
    0U,	// JGTZ_sbr
    0U,	// JI_rr
    0U,	// JI_sr
    0U,	// JLA_b
    0U,	// JLEZ_sbr
    0U,	// JLI_rr
    0U,	// JLTZ_sbr
    0U,	// JLT_U_brc
    0U,	// JLT_U_brr
    0U,	// JLT_brc
    0U,	// JLT_brr
    0U,	// JL_b
    0U,	// JNED_brc
    0U,	// JNED_brr
    0U,	// JNEI_brc
    0U,	// JNEI_brr
    0U,	// JNE_A_brr
    0U,	// JNE_brc
    0U,	// JNE_brr
    0U,	// JNE_sbc1
    0U,	// JNE_sbc2
    0U,	// JNE_sbr1
    0U,	// JNE_sbr2
    0U,	// JNZ_A_brr
    0U,	// JNZ_A_sbr
    0U,	// JNZ_T_brn
    0U,	// JNZ_T_sbrn
    0U,	// JNZ_sb
    0U,	// JNZ_sbr
    0U,	// JZ_A_brr
    0U,	// JZ_A_sbr
    0U,	// JZ_T_brn
    0U,	// JZ_T_sbrn
    0U,	// JZ_sb
    0U,	// JZ_sbr
    0U,	// J_b
    0U,	// J_sb
    0U,	// LDLCX_abs
    0U,	// LDLCX_bo_bso
    0U,	// LDMST_abs
    0U,	// LDMST_bo_bso
    0U,	// LDMST_bo_c
    0U,	// LDMST_bo_pos
    0U,	// LDMST_bo_pre
    0U,	// LDMST_bo_r
    0U,	// LDUCX_abs
    0U,	// LDUCX_bo_bso
    0U,	// LD_A_abs
    0U,	// LD_A_bo_bso
    0U,	// LD_A_bo_c
    0U,	// LD_A_bo_pos
    0U,	// LD_A_bo_pre
    0U,	// LD_A_bo_r
    0U,	// LD_A_bol
    0U,	// LD_A_sc
    0U,	// LD_A_slr
    0U,	// LD_A_slr_post
    0U,	// LD_A_slro
    0U,	// LD_A_sro
    0U,	// LD_BU_abs
    0U,	// LD_BU_bo_bso
    0U,	// LD_BU_bo_c
    0U,	// LD_BU_bo_pos
    0U,	// LD_BU_bo_pre
    0U,	// LD_BU_bo_r
    0U,	// LD_BU_bol
    0U,	// LD_BU_slr
    0U,	// LD_BU_slr_post
    0U,	// LD_BU_slro
    0U,	// LD_BU_sro
    0U,	// LD_B_abs
    0U,	// LD_B_bo_bso
    0U,	// LD_B_bo_c
    0U,	// LD_B_bo_pos
    0U,	// LD_B_bo_pre
    0U,	// LD_B_bo_r
    0U,	// LD_B_bol
    0U,	// LD_DA_abs
    0U,	// LD_DA_bo_bso
    0U,	// LD_DA_bo_c
    0U,	// LD_DA_bo_pos
    0U,	// LD_DA_bo_pre
    0U,	// LD_DA_bo_r
    0U,	// LD_D_abs
    0U,	// LD_D_bo_bso
    0U,	// LD_D_bo_c
    0U,	// LD_D_bo_pos
    0U,	// LD_D_bo_pre
    0U,	// LD_D_bo_r
    0U,	// LD_HU_abs
    0U,	// LD_HU_bo_bso
    0U,	// LD_HU_bo_c
    0U,	// LD_HU_bo_pos
    0U,	// LD_HU_bo_pre
    0U,	// LD_HU_bo_r
    0U,	// LD_HU_bol
    0U,	// LD_H_abs
    0U,	// LD_H_bo_bso
    0U,	// LD_H_bo_c
    0U,	// LD_H_bo_pos
    0U,	// LD_H_bo_pre
    0U,	// LD_H_bo_r
    0U,	// LD_H_bol
    0U,	// LD_H_slr
    0U,	// LD_H_slr_post
    0U,	// LD_H_slro
    0U,	// LD_H_sro
    0U,	// LD_Q_abs
    0U,	// LD_Q_bo_bso
    0U,	// LD_Q_bo_c
    0U,	// LD_Q_bo_pos
    0U,	// LD_Q_bo_pre
    0U,	// LD_Q_bo_r
    0U,	// LD_W_abs
    0U,	// LD_W_bo_bso
    0U,	// LD_W_bo_c
    0U,	// LD_W_bo_pos
    0U,	// LD_W_bo_pre
    0U,	// LD_W_bo_r
    0U,	// LD_W_bol
    0U,	// LD_W_sc
    0U,	// LD_W_slr
    0U,	// LD_W_slr_post
    0U,	// LD_W_slro
    0U,	// LD_W_sro
    0U,	// LEA_abs
    0U,	// LEA_bo_bso
    0U,	// LEA_bol
    0U,	// LHA_abs
    0U,	// LOOPU_brr
    0U,	// LOOP_brr
    0U,	// LOOP_sbr
    0U,	// LT_A_rr
    0U,	// LT_B
    0U,	// LT_BU
    0U,	// LT_H
    0U,	// LT_HU
    0U,	// LT_U_rc
    0U,	// LT_U_rr
    0U,	// LT_W
    0U,	// LT_WU
    0U,	// LT_rc
    0U,	// LT_rr
    0U,	// LT_src
    0U,	// LT_srr
    0U,	// MADDMS_H_rrr1_LL
    0U,	// MADDMS_H_rrr1_LU
    1U,	// MADDMS_H_rrr1_UL
    1U,	// MADDMS_H_rrr1_UU
    0U,	// MADDM_H_rrr1_LL
    0U,	// MADDM_H_rrr1_LU
    1U,	// MADDM_H_rrr1_UL
    1U,	// MADDM_H_rrr1_UU
    1U,	// MADDRS_H_rrr1_DcEdDaDbUL
    0U,	// MADDRS_H_rrr1_LL
    0U,	// MADDRS_H_rrr1_LU
    1U,	// MADDRS_H_rrr1_UL
    1U,	// MADDRS_H_rrr1_UU
    0U,	// MADDRS_Q_rrr1_L_L
    0U,	// MADDRS_Q_rrr1_U_U
    1U,	// MADDR_H_rrr1_DcEdDaDbUL
    0U,	// MADDR_H_rrr1_LL
    0U,	// MADDR_H_rrr1_LU
    1U,	// MADDR_H_rrr1_UL
    1U,	// MADDR_H_rrr1_UU
    0U,	// MADDR_Q_rrr1_L_L
    0U,	// MADDR_Q_rrr1_U_U
    0U,	// MADDSUMS_H_rrr1_LL
    0U,	// MADDSUMS_H_rrr1_LU
    1U,	// MADDSUMS_H_rrr1_UL
    1U,	// MADDSUMS_H_rrr1_UU
    0U,	// MADDSUM_H_rrr1_LL
    0U,	// MADDSUM_H_rrr1_LU
    1U,	// MADDSUM_H_rrr1_UL
    1U,	// MADDSUM_H_rrr1_UU
    0U,	// MADDSURS_H_rrr1_LL
    0U,	// MADDSURS_H_rrr1_LU
    1U,	// MADDSURS_H_rrr1_UL
    1U,	// MADDSURS_H_rrr1_UU
    0U,	// MADDSUR_H_rrr1_LL
    0U,	// MADDSUR_H_rrr1_LU
    1U,	// MADDSUR_H_rrr1_UL
    1U,	// MADDSUR_H_rrr1_UU
    0U,	// MADDSUS_H_rrr1_LL
    0U,	// MADDSUS_H_rrr1_LU
    1U,	// MADDSUS_H_rrr1_UL
    1U,	// MADDSUS_H_rrr1_UU
    0U,	// MADDSU_H_rrr1_LL
    0U,	// MADDSU_H_rrr1_LU
    1U,	// MADDSU_H_rrr1_UL
    1U,	// MADDSU_H_rrr1_UU
    0U,	// MADDS_H_rrr1_LL
    0U,	// MADDS_H_rrr1_LU
    1U,	// MADDS_H_rrr1_UL
    1U,	// MADDS_H_rrr1_UU
    8U,	// MADDS_Q_rrr1
    1U,	// MADDS_Q_rrr1_L
    0U,	// MADDS_Q_rrr1_L_L
    2U,	// MADDS_Q_rrr1_U
    0U,	// MADDS_Q_rrr1_U_U
    8U,	// MADDS_Q_rrr1_e
    1U,	// MADDS_Q_rrr1_e_L
    0U,	// MADDS_Q_rrr1_e_L_L
    2U,	// MADDS_Q_rrr1_e_U
    0U,	// MADDS_Q_rrr1_e_U_U
    0U,	// MADDS_U_rcr
    0U,	// MADDS_U_rcr_e
    0U,	// MADDS_U_rrr2
    0U,	// MADDS_U_rrr2_e
    0U,	// MADDS_rcr
    0U,	// MADDS_rcr_e
    0U,	// MADDS_rrr2
    0U,	// MADDS_rrr2_e
    0U,	// MADD_F_rrr
    0U,	// MADD_H_rrr1_LL
    0U,	// MADD_H_rrr1_LU
    1U,	// MADD_H_rrr1_UL
    1U,	// MADD_H_rrr1_UU
    8U,	// MADD_Q_rrr1
    1U,	// MADD_Q_rrr1_L
    0U,	// MADD_Q_rrr1_L_L
    2U,	// MADD_Q_rrr1_U
    0U,	// MADD_Q_rrr1_U_U
    8U,	// MADD_Q_rrr1_e
    1U,	// MADD_Q_rrr1_e_L
    0U,	// MADD_Q_rrr1_e_L_L
    2U,	// MADD_Q_rrr1_e_U
    0U,	// MADD_Q_rrr1_e_U_U
    0U,	// MADD_U_rcr
    0U,	// MADD_U_rrr2
    0U,	// MADD_rcr
    0U,	// MADD_rcr_e
    0U,	// MADD_rrr2
    0U,	// MADD_rrr2_e
    0U,	// MAX_B
    0U,	// MAX_BU
    0U,	// MAX_H
    0U,	// MAX_HU
    0U,	// MAX_U_rc
    0U,	// MAX_U_rr
    0U,	// MAX_rc
    0U,	// MAX_rr
    0U,	// MFCR_rlc
    0U,	// MIN_B
    0U,	// MIN_BU
    0U,	// MIN_H
    0U,	// MIN_HU
    0U,	// MIN_U_rc
    0U,	// MIN_U_rr
    0U,	// MIN_rc
    0U,	// MIN_rr
    0U,	// MOVH_A_rlc
    0U,	// MOV_AA_rr
    0U,	// MOV_AA_srr
    0U,	// MOV_A_rr
    0U,	// MOV_A_src
    0U,	// MOV_A_srr
    0U,	// MOV_D_rr
    0U,	// MOV_D_srr
    0U,	// MOV_H_rlc
    0U,	// MOV_U_rlc
    0U,	// MOV_rlcDc
    0U,	// MOV_rlcEc
    0U,	// MOV_rrDcDb
    0U,	// MOV_rrEcDaDb
    0U,	// MOV_rrEcDb
    0U,	// MOV_sc
    0U,	// MOV_srcDa
    0U,	// MOV_srcEa
    0U,	// MOV_srr
    0U,	// MSUBADMS_H_rrr1_LL
    0U,	// MSUBADMS_H_rrr1_LU
    1U,	// MSUBADMS_H_rrr1_UL
    1U,	// MSUBADMS_H_rrr1_UU
    0U,	// MSUBADM_H_rrr1_LL
    0U,	// MSUBADM_H_rrr1_LU
    1U,	// MSUBADM_H_rrr1_UL
    1U,	// MSUBADM_H_rrr1_UU
    0U,	// MSUBADRS_H_rrr1_LL
    0U,	// MSUBADRS_H_rrr1_LU
    1U,	// MSUBADRS_H_rrr1_UL
    1U,	// MSUBADRS_H_rrr1_UU
    0U,	// MSUBADR_H_rrr1_LL
    0U,	// MSUBADR_H_rrr1_LU
    1U,	// MSUBADR_H_rrr1_UL
    1U,	// MSUBADR_H_rrr1_UU
    0U,	// MSUBADS_H_rrr1_LL
    0U,	// MSUBADS_H_rrr1_LU
    1U,	// MSUBADS_H_rrr1_UL
    1U,	// MSUBADS_H_rrr1_UU
    0U,	// MSUBAD_H_rrr1_LL
    0U,	// MSUBAD_H_rrr1_LU
    1U,	// MSUBAD_H_rrr1_UL
    1U,	// MSUBAD_H_rrr1_UU
    0U,	// MSUBMS_H_rrr1_LL
    0U,	// MSUBMS_H_rrr1_LU
    1U,	// MSUBMS_H_rrr1_UL
    1U,	// MSUBMS_H_rrr1_UU
    0U,	// MSUBM_H_rrr1_LL
    0U,	// MSUBM_H_rrr1_LU
    1U,	// MSUBM_H_rrr1_UL
    1U,	// MSUBM_H_rrr1_UU
    1U,	// MSUBRS_H_rrr1_DcEdDaDbUL
    0U,	// MSUBRS_H_rrr1_LL
    0U,	// MSUBRS_H_rrr1_LU
    1U,	// MSUBRS_H_rrr1_UL
    1U,	// MSUBRS_H_rrr1_UU
    0U,	// MSUBRS_Q_rrr1_L_L
    0U,	// MSUBRS_Q_rrr1_U_U
    1U,	// MSUBR_H_rrr1_DcEdDaDbUL
    0U,	// MSUBR_H_rrr1_LL
    0U,	// MSUBR_H_rrr1_LU
    1U,	// MSUBR_H_rrr1_UL
    1U,	// MSUBR_H_rrr1_UU
    0U,	// MSUBR_Q_rrr1_L_L
    0U,	// MSUBR_Q_rrr1_U_U
    0U,	// MSUBS_H_rrr1_LL
    0U,	// MSUBS_H_rrr1_LU
    1U,	// MSUBS_H_rrr1_UL
    1U,	// MSUBS_H_rrr1_UU
    8U,	// MSUBS_Q_rrr1
    1U,	// MSUBS_Q_rrr1_L
    0U,	// MSUBS_Q_rrr1_L_L
    2U,	// MSUBS_Q_rrr1_U
    0U,	// MSUBS_Q_rrr1_U_U
    8U,	// MSUBS_Q_rrr1_e
    1U,	// MSUBS_Q_rrr1_e_L
    0U,	// MSUBS_Q_rrr1_e_L_L
    2U,	// MSUBS_Q_rrr1_e_U
    0U,	// MSUBS_Q_rrr1_e_U_U
    0U,	// MSUBS_U_rcr
    0U,	// MSUBS_U_rcr_e
    0U,	// MSUBS_U_rrr2
    0U,	// MSUBS_U_rrr2_e
    0U,	// MSUBS_rcr
    0U,	// MSUBS_rcr_e
    0U,	// MSUBS_rrr2
    0U,	// MSUBS_rrr2_e
    0U,	// MSUB_F_rrr
    0U,	// MSUB_H_rrr1_LL
    0U,	// MSUB_H_rrr1_LU
    1U,	// MSUB_H_rrr1_UL
    1U,	// MSUB_H_rrr1_UU
    8U,	// MSUB_Q_rrr1
    1U,	// MSUB_Q_rrr1_L
    0U,	// MSUB_Q_rrr1_L_L
    2U,	// MSUB_Q_rrr1_U
    0U,	// MSUB_Q_rrr1_U_U
    8U,	// MSUB_Q_rrr1_e
    1U,	// MSUB_Q_rrr1_e_L
    0U,	// MSUB_Q_rrr1_e_L_L
    2U,	// MSUB_Q_rrr1_e_U
    0U,	// MSUB_Q_rrr1_e_U_U
    0U,	// MSUB_U_rcr
    0U,	// MSUB_U_rrr2
    0U,	// MSUB_rcr
    0U,	// MSUB_rcr_e
    0U,	// MSUB_rrr2
    0U,	// MSUB_rrr2_e
    2U,	// MULM_H_rr1_LL2e
    2U,	// MULM_H_rr1_LU2e
    2U,	// MULM_H_rr1_UL2e
    3U,	// MULM_H_rr1_UU2e
    2U,	// MULR_H_rr1_LL2e
    2U,	// MULR_H_rr1_LU2e
    2U,	// MULR_H_rr1_UL2e
    3U,	// MULR_H_rr1_UU2e
    0U,	// MULR_Q_rr1_2LL
    0U,	// MULR_Q_rr1_2UU
    0U,	// MULS_U_rc
    0U,	// MULS_U_rr2
    0U,	// MULS_rc
    0U,	// MULS_rr2
    0U,	// MUL_F_rrr
    2U,	// MUL_H_rr1_LL2e
    2U,	// MUL_H_rr1_LU2e
    2U,	// MUL_H_rr1_UL2e
    3U,	// MUL_H_rr1_UU2e
    0U,	// MUL_Q_rr1_2LL
    0U,	// MUL_Q_rr1_2UU
    3U,	// MUL_Q_rr1_2_L
    3U,	// MUL_Q_rr1_2_Le
    3U,	// MUL_Q_rr1_2_U
    3U,	// MUL_Q_rr1_2_Ue
    12U,	// MUL_Q_rr1_2__
    12U,	// MUL_Q_rr1_2__e
    0U,	// MUL_U_rc
    0U,	// MUL_U_rr2
    0U,	// MUL_rc
    0U,	// MUL_rc_e
    0U,	// MUL_rr2
    0U,	// MUL_rr2_e
    0U,	// MUL_srr
    0U,	// NAND_T
    0U,	// NAND_rc
    0U,	// NAND_rr
    0U,	// NEZ_A
    0U,	// NE_A
    0U,	// NE_rc
    0U,	// NE_rr
    0U,	// NOP_sr
    0U,	// NOP_sys
    0U,	// NOR_T
    0U,	// NOR_rc
    0U,	// NOR_rr
    0U,	// NOT_sr
    0U,	// ORN_T
    0U,	// ORN_rc
    0U,	// ORN_rr
    0U,	// OR_ANDN_T
    0U,	// OR_AND_T
    0U,	// OR_EQ_rc
    0U,	// OR_EQ_rr
    0U,	// OR_GE_U_rc
    0U,	// OR_GE_U_rr
    0U,	// OR_GE_rc
    0U,	// OR_GE_rr
    0U,	// OR_LT_U_rc
    0U,	// OR_LT_U_rr
    0U,	// OR_LT_rc
    0U,	// OR_LT_rr
    0U,	// OR_NE_rc
    0U,	// OR_NE_rr
    0U,	// OR_NOR_T
    0U,	// OR_OR_T
    0U,	// OR_T
    0U,	// OR_rc
    0U,	// OR_rr
    0U,	// OR_sc
    0U,	// OR_srr
    0U,	// PACK_rrr
    0U,	// PARITY_rr
    0U,	// POPCNT_W_rr
    0U,	// Q31TOF_rr
    0U,	// QSEED_F_rr
    0U,	// RESTORE_sys
    0U,	// RET_sr
    0U,	// RET_sys
    0U,	// RFE_sr
    0U,	// RFE_sys
    0U,	// RFM_sys
    0U,	// RSLCX_sys
    0U,	// RSTV_sys
    0U,	// RSUBS_U_rc
    0U,	// RSUBS_rc
    0U,	// RSUB_rc
    0U,	// RSUB_sr
    0U,	// SAT_BU_rr
    0U,	// SAT_BU_sr
    0U,	// SAT_B_rr
    0U,	// SAT_B_sr
    0U,	// SAT_HU_rr
    0U,	// SAT_HU_sr
    0U,	// SAT_H_rr
    0U,	// SAT_H_sr
    0U,	// SELN_rcr
    0U,	// SELN_rrr
    0U,	// SEL_rcr
    0U,	// SEL_rrr
    0U,	// SHAS_rc
    0U,	// SHAS_rr
    0U,	// SHA_H_rc
    0U,	// SHA_H_rr
    0U,	// SHA_rc
    0U,	// SHA_rr
    0U,	// SHA_src
    0U,	// SHUFFLE_rc
    0U,	// SH_ANDN_T
    0U,	// SH_AND_T
    0U,	// SH_EQ_rc
    0U,	// SH_EQ_rr
    0U,	// SH_GE_U_rc
    0U,	// SH_GE_U_rr
    0U,	// SH_GE_rc
    0U,	// SH_GE_rr
    0U,	// SH_H_rc
    0U,	// SH_H_rr
    0U,	// SH_LT_U_rc
    0U,	// SH_LT_U_rr
    0U,	// SH_LT_rc
    0U,	// SH_LT_rr
    0U,	// SH_NAND_T
    0U,	// SH_NE_rc
    0U,	// SH_NE_rr
    0U,	// SH_NOR_T
    0U,	// SH_ORN_T
    0U,	// SH_OR_T
    0U,	// SH_XNOR_T
    0U,	// SH_XOR_T
    0U,	// SH_rc
    0U,	// SH_rr
    0U,	// SH_src
    0U,	// STLCX_abs
    0U,	// STLCX_bo_bso
    0U,	// STUCX_abs
    0U,	// STUCX_bo_bso
    0U,	// ST_A_abs
    0U,	// ST_A_bo_bso
    0U,	// ST_A_bo_c
    0U,	// ST_A_bo_pos
    0U,	// ST_A_bo_pre
    0U,	// ST_A_bo_r
    0U,	// ST_A_bol
    0U,	// ST_A_sc
    0U,	// ST_A_sro
    0U,	// ST_A_ssr
    0U,	// ST_A_ssr_pos
    0U,	// ST_A_ssro
    0U,	// ST_B_abs
    0U,	// ST_B_bo_bso
    0U,	// ST_B_bo_c
    0U,	// ST_B_bo_pos
    0U,	// ST_B_bo_pre
    0U,	// ST_B_bo_r
    0U,	// ST_B_bol
    0U,	// ST_B_sro
    0U,	// ST_B_ssr
    0U,	// ST_B_ssr_pos
    0U,	// ST_B_ssro
    0U,	// ST_DA_abs
    0U,	// ST_DA_bo_bso
    0U,	// ST_DA_bo_c
    0U,	// ST_DA_bo_pos
    0U,	// ST_DA_bo_pre
    0U,	// ST_DA_bo_r
    0U,	// ST_D_abs
    0U,	// ST_D_bo_bso
    0U,	// ST_D_bo_c
    0U,	// ST_D_bo_pos
    0U,	// ST_D_bo_pre
    0U,	// ST_D_bo_r
    0U,	// ST_H_abs
    0U,	// ST_H_bo_bso
    0U,	// ST_H_bo_c
    0U,	// ST_H_bo_pos
    0U,	// ST_H_bo_pre
    0U,	// ST_H_bo_r
    0U,	// ST_H_bol
    0U,	// ST_H_sro
    0U,	// ST_H_ssr
    0U,	// ST_H_ssr_pos
    0U,	// ST_H_ssro
    0U,	// ST_Q_abs
    0U,	// ST_Q_bo_bso
    0U,	// ST_Q_bo_c
    0U,	// ST_Q_bo_pos
    0U,	// ST_Q_bo_pre
    0U,	// ST_Q_bo_r
    0U,	// ST_T
    0U,	// ST_W_abs
    0U,	// ST_W_bo_bso
    0U,	// ST_W_bo_c
    0U,	// ST_W_bo_pos
    0U,	// ST_W_bo_pre
    0U,	// ST_W_bo_r
    0U,	// ST_W_bol
    0U,	// ST_W_sro
    0U,	// ST_W_ssr
    0U,	// ST_W_ssr_pos
    0U,	// ST_W_ssro
    0U,	// SUBC_rr
    0U,	// SUBS_HU_rr
    0U,	// SUBS_H_rr
    0U,	// SUBS_U_rr
    0U,	// SUBS_rr
    0U,	// SUBS_srr
    0U,	// SUBX_rr
    0U,	// SUB_A_rr
    0U,	// SUB_A_sc
    0U,	// SUB_B_rr
    0U,	// SUB_F_rrr
    0U,	// SUB_H_rr
    0U,	// SUB_rr
    0U,	// SUB_srr
    0U,	// SUB_srr_15a
    0U,	// SUB_srr_a15
    0U,	// SVLCX_sys
    0U,	// SWAPMSK_W_bo_bso
    0U,	// SWAPMSK_W_bo_c
    0U,	// SWAPMSK_W_bo_pos
    0U,	// SWAPMSK_W_bo_pre
    0U,	// SWAPMSK_W_bo_r
    0U,	// SWAP_W_abs
    0U,	// SWAP_W_bo_bso
    0U,	// SWAP_W_bo_c
    0U,	// SWAP_W_bo_pos
    0U,	// SWAP_W_bo_pre
    0U,	// SWAP_W_bo_r
    0U,	// SYSCALL_rc
    0U,	// TRAPSV_sys
    0U,	// TRAPV_sys
    0U,	// UNPACK_rr
    0U,	// UPDFL_rr
    0U,	// UTOF_rr
    0U,	// WAIT_sys
    0U,	// XNOR_T
    0U,	// XNOR_rc
    0U,	// XNOR_rr
    0U,	// XOR_EQ_rc
    0U,	// XOR_EQ_rr
    0U,	// XOR_GE_U_rc
    0U,	// XOR_GE_U_rr
    0U,	// XOR_GE_rc
    0U,	// XOR_GE_rr
    0U,	// XOR_LT_U_rc
    0U,	// XOR_LT_U_rr
    0U,	// XOR_LT_rc
    0U,	// XOR_LT_rr
    0U,	// XOR_NE_rc
    0U,	// XOR_NE_rr
    0U,	// XOR_T
    0U,	// XOR_rc
    0U,	// XOR_rr
    0U,	// XOR_srr
  };

  // Emit the opcode for the instruction.
  uint64_t Bits = 0;
  Bits |= (uint64_t)OpInfo0[MCInst_getOpcode(MI)] << 0;
  Bits |= (uint64_t)OpInfo1[MCInst_getOpcode(MI)] << 32;
  MnemonicBitsInfo MBI = {AsmStrs+(Bits & 4095)-1, Bits};
  return MBI;

}
/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void printInstruction(MCInst *MI, uint64_t Address, SStream *O) {
  SStream_concat0(O, "");
  MnemonicBitsInfo MnemonicInfo = getMnemonic(MI, O);

  SStream_concat0(O, MnemonicInfo.first);

  uint64_t Bits = MnemonicInfo.second;
  assert(Bits != 0 && "Cannot print this instruction.");

  // Fragment 0 encoded into 4 bits for 9 unique commands.
  switch ((Bits >> 12) & 15) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // DBG_VALUE, DBG_VALUE_LIST, DBG_INSTR_REF, DBG_PHI, DBG_LABEL, BUNDLE, ...
    return;
    break;
  case 1:
    // ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ABSDIF_H_rr, ABSDIF...
    printOperand(MI, 0, O);
    break;
  case 2:
    // AND_src, BISR_sc, LD_A_sc, LD_W_sc, MOV_sc, OR_sc, ST_A_sc, SUB_A_sc
    printZExtImm_8(MI, 0, O);
    break;
  case 3:
    // BISR_rc, SYSCALL_rc
    printSExtImm_9(MI, 0, O);
    return;
    break;
  case 4:
    // CACHEI_I_bo_pos, CACHEI_I_bo_pre, CACHEI_WI_bo_pos, CACHEI_WI_bo_pre, ...
    printOperand(MI, 1, O);
    break;
  case 5:
    // CMPSWAP_W_bo_bso, CMPSWAP_W_bo_c, CMPSWAP_W_bo_r, LDMST_bo_bso, LDMST_...
    printOperand(MI, 2, O);
    SStream_concat0(O, ", [");
    set_mem_access(MI, true);
    printOperand(MI, 0, O);
    break;
  case 6:
    // CMPSWAP_W_bo_pos, CMPSWAP_W_bo_pre, LDMST_bo_pos, LDMST_bo_pre
    printOperand(MI, 3, O);
    break;
  case 7:
    // JEQ_sbc1, JEQ_sbc2, JNE_sbc1, JNE_sbc2
    printSExtImm_4(MI, 0, O);
    SStream_concat0(O, ", ");
    printPCRelImmOperand(MI, 1, O);
    return;
    break;
  case 8:
    // ST_A_ssro, ST_B_ssro, ST_H_ssro, ST_W_ssro
    printSExtImm_4(MI, 1, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 0, O);
    return;
    break;
  }


  // Fragment 1 encoded into 4 bits for 11 unique commands.
  switch ((Bits >> 16) & 15) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ABSDIF_H_rr, ABSDIF...
    SStream_concat0(O, ", ");
    break;
  case 1:
    // ADD_src_a15, ADD_srr_a15, CADDN_src, CADD_src, CMOVN_src, CMOVN_srr, C...
    SStream_concat0(O, ", %d15, ");
    break;
  case 2:
    // AND_src, BISR_sc, CALLA_b, CALLI_rr, CALL_b, DISABLE_sys_1, FCALLA_b, ...
    return;
    break;
  case 3:
    // CACHEI_I_bo_bso, CACHEI_I_bo_pos, CACHEI_WI_bo_bso, CACHEI_WI_bo_pos, ...
    SStream_concat1(O, ']');
    break;
  case 4:
    // CACHEI_I_bo_pre, CACHEI_WI_bo_pre, CACHEI_W_bo_pre, CACHE_I_bo_pre, CA...
    SStream_concat0(O, "+]");
    set_mem_access(MI, false);
    printSExtImm_10(MI, 2, O);
    return;
    break;
  case 5:
    // CACHEI_W_bo_c, CACHE_I_bo_c, CACHE_WI_bo_c, CACHE_W_bo_c, CMPSWAP_W_bo...
    SStream_concat0(O, "+c]");
    set_mem_access(MI, false);
    return;
    break;
  case 6:
    // CACHEI_W_bo_r, CACHE_I_bo_r, CACHE_WI_bo_r, CACHE_W_bo_r, CMPSWAP_W_bo...
    SStream_concat0(O, "+r]");
    set_mem_access(MI, false);
    return;
    break;
  case 7:
    // CMPSWAP_W_bo_pos, LDMST_bo_pos, LD_A_bo_pos, LD_BU_bo_pos, LD_B_bo_pos...
    SStream_concat0(O, ", [+");
    set_mem_access(MI, true);
    printOperand(MI, 1, O);
    SStream_concat1(O, ']');
    printSExtImm_10(MI, 2, O);
    return;
    break;
  case 8:
    // CMPSWAP_W_bo_pre, LDMST_bo_pre, LD_A_bo_bso, LD_A_bo_c, LD_A_bo_pre, L...
    SStream_concat0(O, ", [");
    set_mem_access(MI, true);
    printOperand(MI, 1, O);
    break;
  case 9:
    // LD_A_slro, LD_BU_slro, LD_H_slro, LD_W_slro
    SStream_concat0(O, ", %a15, ");
    printZExtImm_4(MI, 1, O);
    return;
    break;
  case 10:
    // ST_A_sc
    SStream_concat0(O, ", %a15");
    return;
    break;
  }


  // Fragment 2 encoded into 4 bits for 15 unique commands.
  switch ((Bits >> 20) & 15) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ABSDIF_H_rr, ABSDIF...
    printOperand(MI, 1, O);
    break;
  case 1:
    // ADDS_srr, ADD_A_srr, ADD_F_rrr, ADD_srr, ADD_srr_15a, ADD_srr_a15, AND...
    printOperand(MI, 2, O);
    break;
  case 2:
    // ADD_A_src, ADD_src, ADD_src_15a, ADD_src_a15, CADDN_src, CADD_src, CMO...
    printSExtImm_4(MI, 2, O);
    break;
  case 3:
    // CACHEI_I_bo_bso, CACHEI_WI_bo_bso, CACHEI_W_bo_bso, CACHE_I_bo_bso, CA...
    printSExtImm_10(MI, 1, O);
    return;
    break;
  case 4:
    // CACHEI_I_bo_pos, CACHEI_WI_bo_pos, CACHEI_W_bo_pos, CACHE_I_bo_pos, CA...
    printSExtImm_10(MI, 2, O);
    return;
    break;
  case 5:
    // CADDN_rrr, CADD_rrr, CRCN_rrr, CSUBN_rrr, CSUB_rrr, MADDMS_H_rrr1_LL, ...
    printOperand(MI, 3, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 1, O);
    break;
  case 6:
    // CMPSWAP_W_bo_pre, LDMST_bo_pre, LD_A_bo_pre, LD_BU_bo_pre, LD_B_bo_pre...
    SStream_concat0(O, "+]");
    set_mem_access(MI, false);
    printSExtImm_10(MI, 2, O);
    return;
    break;
  case 7:
    // JEQ_sbr1, JEQ_sbr2, JGEZ_sbr, JGTZ_sbr, JLEZ_sbr, JLTZ_sbr, JNE_sbr1, ...
    printPCRelImmOperand(MI, 1, O);
    return;
    break;
  case 8:
    // LDMST_abs, ST_A_abs, ST_B_abs, ST_DA_abs, ST_D_abs, ST_H_abs, ST_Q_abs...
    printOperand(MI, 0, O);
    return;
    break;
  case 9:
    // LD_A_bo_bso, LD_BU_bo_bso, LD_B_bo_bso, LD_DA_bo_bso, LD_D_bo_bso, LD_...
    SStream_concat1(O, ']');
    printSExtImm_10(MI, 2, O);
    return;
    break;
  case 10:
    // LD_A_bo_c, LD_BU_bo_c, LD_B_bo_c, LD_DA_bo_c, LD_D_bo_c, LD_HU_bo_c, L...
    SStream_concat0(O, "+c]");
    set_mem_access(MI, false);
    return;
    break;
  case 11:
    // LD_A_bo_r, LD_BU_bo_r, LD_B_bo_r, LD_DA_bo_r, LD_D_bo_r, LD_HU_bo_r, L...
    SStream_concat0(O, "+r]");
    set_mem_access(MI, false);
    return;
    break;
  case 12:
    // LD_A_sro, LD_BU_sro, LD_H_sro, LD_W_sro, ST_A_sro, ST_B_sro, ST_H_sro,...
    printZExtImm_4(MI, 1, O);
    return;
    break;
  case 13:
    // MOVH_A_rlc, MOV_H_rlc, MOV_U_rlc, MOV_rlcDc, MOV_rlcEc
    printSExtImm_16(MI, 1, O);
    return;
    break;
  case 14:
    // MOV_srcEa, SHA_src, SH_src
    printSExtImm_4(MI, 1, O);
    return;
    break;
  }


  // Fragment 3 encoded into 3 bits for 5 unique commands.
  switch ((Bits >> 24) & 7) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ABSDIF_H_rr, ABSDIF...
    SStream_concat0(O, ", ");
    break;
  case 1:
    // ABS_B_rr, ABS_H_rr, ABS_rr, ADDS_srr, ADD_A_src, ADD_A_srr, ADD_src, A...
    return;
    break;
  case 2:
    // ADDSC_A_srrs
    SStream_concat0(O, ", %d15, ");
    printZExtImm_2(MI, 2, O);
    return;
    break;
  case 3:
    // MADDRS_Q_rrr1_L_L, MADDR_Q_rrr1_L_L, MADDS_Q_rrr1_L_L, MADDS_Q_rrr1_e_...
    SStream_concat0(O, "L, ");
    printOperand(MI, 2, O);
    SStream_concat0(O, "L, ");
    break;
  case 4:
    // MADDRS_Q_rrr1_U_U, MADDR_Q_rrr1_U_U, MADDS_Q_rrr1_U_U, MADDS_Q_rrr1_e_...
    SStream_concat0(O, "U, ");
    printOperand(MI, 2, O);
    SStream_concat0(O, "U, ");
    break;
  }


  // Fragment 4 encoded into 3 bits for 8 unique commands.
  switch ((Bits >> 27) & 7) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ABSDIF_H_rr, ABSDIF...
    printOperand(MI, 2, O);
    break;
  case 1:
    // ABSDIF_rc, ADDC_rc, ADDS_U_rc, ADDS_rc, ADDX_rc, ADD_rc, ANDN_rc, AND_...
    printSExtImm_9(MI, 2, O);
    return;
    break;
  case 2:
    // ADDIH_A_rlc, ADDIH_rlc, ADDI_rlc, MFCR_rlc
    printSExtImm_16(MI, 2, O);
    return;
    break;
  case 3:
    // ADD_F_rrr, CADDN_rcr, CADD_rcr, CRC32B_W_rr, CRC32L_W_rr, CRC32_B_rr, ...
    printOperand(MI, 1, O);
    break;
  case 4:
    // ANDN_T, AND_ANDN_T, AND_AND_T, AND_NOR_T, AND_OR_T, AND_T, INSN_T, INS...
    printZExtImm_4(MI, 3, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 2, O);
    SStream_concat0(O, ", ");
    printZExtImm_4(MI, 4, O);
    return;
    break;
  case 5:
    // JEQ_brc, JGE_U_brc, JGE_brc, JLT_U_brc, JLT_brc, JNED_brc, JNEI_brc, J...
    printPCRelImmOperand(MI, 0, O);
    return;
    break;
  case 6:
    // MADDRS_Q_rrr1_L_L, MADDRS_Q_rrr1_U_U, MADDR_Q_rrr1_L_L, MADDR_Q_rrr1_U...
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 7:
    // MULR_Q_rr1_2LL, MULR_Q_rr1_2UU, MUL_Q_rr1_2LL, MUL_Q_rr1_2UU
    printZExtImm_2(MI, 3, O);
    return;
    break;
  }


  // Fragment 5 encoded into 4 bits for 15 unique commands.
  switch ((Bits >> 30) & 15) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ABSDIF_H_rr, ABSDIF...
    return;
    break;
  case 1:
    // CADDN_rcr, CADD_rcr, DEXTR_rrpw, DEXTR_rrrr, EXTR_U_rrpw, EXTR_U_rrrw,...
    SStream_concat0(O, ", ");
    break;
  case 2:
    // MADDMS_H_rrr1_LL, MADDM_H_rrr1_LL, MADDRS_H_rrr1_LL, MADDR_H_rrr1_LL, ...
    SStream_concat0(O, " LL, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 3:
    // MADDMS_H_rrr1_LU, MADDM_H_rrr1_LU, MADDRS_H_rrr1_LU, MADDR_H_rrr1_LU, ...
    SStream_concat0(O, " LU, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 4:
    // MADDMS_H_rrr1_UL, MADDM_H_rrr1_UL, MADDRS_H_rrr1_UL, MADDR_H_rrr1_UL, ...
    SStream_concat0(O, " UL, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 5:
    // MADDMS_H_rrr1_UU, MADDM_H_rrr1_UU, MADDRS_H_rrr1_UU, MADDR_H_rrr1_UU, ...
    SStream_concat0(O, " UU, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 6:
    // MADDRS_H_rrr1_DcEdDaDbUL, MADDR_H_rrr1_DcEdDaDbUL, MSUBRS_H_rrr1_DcEdD...
    SStream_concat0(O, ", UL, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 7:
    // MADDS_Q_rrr1_L, MADDS_Q_rrr1_e_L, MADD_Q_rrr1_L, MADD_Q_rrr1_e_L, MSUB...
    SStream_concat0(O, " L, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 8:
    // MADDS_Q_rrr1_U, MADDS_Q_rrr1_e_U, MADD_Q_rrr1_U, MADD_Q_rrr1_e_U, MSUB...
    SStream_concat0(O, " U, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 9:
    // MULM_H_rr1_LL2e, MULR_H_rr1_LL2e, MUL_H_rr1_LL2e
    SStream_concat0(O, "LL, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 10:
    // MULM_H_rr1_LU2e, MULR_H_rr1_LU2e, MUL_H_rr1_LU2e
    SStream_concat0(O, "LU, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 11:
    // MULM_H_rr1_UL2e, MULR_H_rr1_UL2e, MUL_H_rr1_UL2e
    SStream_concat0(O, "UL, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 12:
    // MULM_H_rr1_UU2e, MULR_H_rr1_UU2e, MUL_H_rr1_UU2e
    SStream_concat0(O, "UU, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 13:
    // MUL_Q_rr1_2_L, MUL_Q_rr1_2_Le
    SStream_concat0(O, "L, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 14:
    // MUL_Q_rr1_2_U, MUL_Q_rr1_2_Ue
    SStream_concat0(O, "U, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  }


  // Fragment 6 encoded into 2 bits for 4 unique commands.
  switch ((Bits >> 34) & 3) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // CADDN_rcr, CADD_rcr, MADDS_U_rcr, MADDS_U_rcr_e, MADDS_rcr, MADDS_rcr_...
    printSExtImm_9(MI, 3, O);
    return;
    break;
  case 1:
    // DEXTR_rrpw, DEXTR_rrrr, EXTR_U_rrpw, EXTR_U_rrrw, EXTR_rrpw, EXTR_rrrw...
    printOperand(MI, 3, O);
    break;
  case 2:
    // MADDS_Q_rrr1, MADDS_Q_rrr1_e, MADD_Q_rrr1, MADD_Q_rrr1_e, MSUBS_Q_rrr1...
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 3:
    // MUL_Q_rr1_2__, MUL_Q_rr1_2__e
    printZExtImm_2(MI, 3, O);
    return;
    break;
  }


  // Fragment 7 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 36) & 1) {
    // INSERT_rcpw, INSERT_rcrw, INSERT_rrrr, INSERT_rrrw
    SStream_concat0(O, ", ");
    printOperand(MI, 4, O);
    return;
  } else {
    // DEXTR_rrpw, DEXTR_rrrr, EXTR_U_rrpw, EXTR_U_rrrw, EXTR_rrpw, EXTR_rrrw...
    return;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 61 && "Invalid register number!");

  static const char AsmStrs[] = {
  /* 0 */ "a10\0"
  /* 4 */ "d10\0"
  /* 8 */ "e10\0"
  /* 12 */ "p10\0"
  /* 16 */ "a0\0"
  /* 19 */ "d0\0"
  /* 22 */ "e0\0"
  /* 25 */ "p0\0"
  /* 28 */ "A10_A11\0"
  /* 36 */ "a11\0"
  /* 40 */ "d11\0"
  /* 44 */ "A0_A1\0"
  /* 50 */ "a1\0"
  /* 53 */ "d1\0"
  /* 56 */ "a12\0"
  /* 60 */ "d12\0"
  /* 64 */ "e12\0"
  /* 68 */ "p12\0"
  /* 72 */ "a2\0"
  /* 75 */ "d2\0"
  /* 78 */ "e2\0"
  /* 81 */ "p2\0"
  /* 84 */ "A12_A13\0"
  /* 92 */ "a13\0"
  /* 96 */ "d13\0"
  /* 100 */ "A2_A3\0"
  /* 106 */ "a3\0"
  /* 109 */ "d3\0"
  /* 112 */ "a14\0"
  /* 116 */ "d14\0"
  /* 120 */ "e14\0"
  /* 124 */ "p14\0"
  /* 128 */ "a4\0"
  /* 131 */ "d4\0"
  /* 134 */ "e4\0"
  /* 137 */ "p4\0"
  /* 140 */ "A14_A15\0"
  /* 148 */ "a15\0"
  /* 152 */ "d15\0"
  /* 156 */ "A4_A5\0"
  /* 162 */ "a5\0"
  /* 165 */ "d5\0"
  /* 168 */ "a6\0"
  /* 171 */ "d6\0"
  /* 174 */ "e6\0"
  /* 177 */ "p6\0"
  /* 180 */ "A6_A7\0"
  /* 186 */ "a7\0"
  /* 189 */ "d7\0"
  /* 192 */ "a8\0"
  /* 195 */ "d8\0"
  /* 198 */ "e8\0"
  /* 201 */ "p8\0"
  /* 204 */ "A8_A9\0"
  /* 210 */ "a9\0"
  /* 213 */ "d9\0"
  /* 216 */ "pc\0"
  /* 219 */ "pcxi\0"
  /* 224 */ "psw\0"
  /* 228 */ "fcx\0"
};
  static const uint8_t RegAsmOffset[] = {
    228, 216, 219, 224, 16, 50, 72, 106, 128, 162, 168, 186, 192, 210, 
    0, 36, 56, 92, 112, 148, 19, 53, 75, 109, 131, 165, 171, 189, 
    195, 213, 4, 40, 60, 96, 116, 152, 22, 78, 134, 174, 198, 8, 
    64, 120, 25, 81, 137, 177, 201, 12, 68, 124, 44, 100, 156, 180, 
    204, 28, 84, 140, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}
#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

bool printAliasInstr(MCInst *MI, uint64_t Address, SStream *OS) {
  return false;
}

#endif // PRINT_ALIAS_INSTR
