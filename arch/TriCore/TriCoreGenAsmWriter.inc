/* Capstone Disassembly Engine, http://www.capstone-engine.org */
/* By Nguyen Anh Quynh <aquynh@gmail.com>, 2013-2022, */
/*    Rot127 <unisono@quyllur.org> 2022-2023 */
/* Automatically generated file by the LLVM TableGen Disassembler Backend. */
/* Do not edit. */

#include <capstone/platform.h>
#include <assert.h>

/// getMnemonic - This method is automatically generated by tablegen
/// from the instruction set description.
MnemonicBitsInfo getMnemonic(MCInst *MI, SStream *O) {
  static const char AsmStrs[] = {
  /* 0 */ "sub %d15, \0"
  /* 11 */ "add %d15, \0"
  /* 22 */ "and %d15, \0"
  /* 33 */ "jne %d15, \0"
  /* 44 */ "jeq %d15, \0"
  /* 55 */ "or %d15, \0"
  /* 65 */ "jz.t %d15, \0"
  /* 77 */ "jnz.t %d15, \0"
  /* 90 */ "lt %d15, \0"
  /* 100 */ "lt.u %d15, \0"
  /* 112 */ "mov %d15, \0"
  /* 123 */ "jz %d15, \0"
  /* 133 */ "jnz %d15, \0"
  /* 144 */ "ld.a %a15, %sp, \0"
  /* 161 */ "ld.w %a15, %sp, \0"
  /* 178 */ "sub.a %sp, \0"
  /* 190 */ "st.a %sp, \0"
  /* 201 */ "st.w %sp, \0"
  /* 212 */ "ftoq31 \0"
  /* 220 */ "CMPSWAP.W \0"
  /* 231 */ "csub.a \0"
  /* 239 */ "subsc.a \0"
  /* 248 */ "addsc.a \0"
  /* 257 */ "difsc.a \0"
  /* 266 */ "cadd.a \0"
  /* 274 */ "ld.a \0"
  /* 280 */ "tlbprobe.a \0"
  /* 292 */ "ge.a \0"
  /* 298 */ "jne.a \0"
  /* 305 */ "addih.a \0"
  /* 314 */ "movh.a \0"
  /* 322 */ "sel.a \0"
  /* 329 */ "csubn.a \0"
  /* 338 */ "caddn.a \0"
  /* 347 */ "seln.a \0"
  /* 355 */ "swap.a \0"
  /* 363 */ "jeq.a \0"
  /* 370 */ "lt.a \0"
  /* 376 */ "st.a \0"
  /* 382 */ "mov.a \0"
  /* 389 */ "nez.a \0"
  /* 396 */ "jz.a \0"
  /* 402 */ "jnz.a \0"
  /* 409 */ "eqz.a \0"
  /* 416 */ "movz.a \0"
  /* 424 */ "mov.aa \0"
  /* 432 */ "ld.da \0"
  /* 439 */ "st.da \0"
  /* 446 */ "lea \0"
  /* 451 */ "lha \0"
  /* 456 */ "sha \0"
  /* 461 */ "ja \0"
  /* 465 */ "jla \0"
  /* 470 */ "fcalla \0"
  /* 478 */ "crc32.b \0"
  /* 487 */ "sha.b \0"
  /* 494 */ "sub.b \0"
  /* 501 */ "add.b \0"
  /* 508 */ "ld.b \0"
  /* 514 */ "absdif.b \0"
  /* 524 */ "sh.b \0"
  /* 530 */ "min.b \0"
  /* 537 */ "clo.b \0"
  /* 544 */ "eq.b \0"
  /* 550 */ "abs.b \0"
  /* 557 */ "subs.b \0"
  /* 565 */ "adds.b \0"
  /* 573 */ "absdifs.b \0"
  /* 584 */ "cls.b \0"
  /* 591 */ "abss.b \0"
  /* 599 */ "sat.b \0"
  /* 606 */ "dvinit.b \0"
  /* 616 */ "lt.b \0"
  /* 622 */ "st.b \0"
  /* 628 */ "max.b \0"
  /* 635 */ "eqany.b \0"
  /* 644 */ "clz.b \0"
  /* 651 */ "csub \0"
  /* 657 */ "msub \0"
  /* 663 */ "rsub \0"
  /* 669 */ "subc \0"
  /* 675 */ "addc \0"
  /* 681 */ "ld.d \0"
  /* 687 */ "st.d \0"
  /* 693 */ "mov.d \0"
  /* 700 */ "cadd \0"
  /* 706 */ "madd \0"
  /* 712 */ "jned \0"
  /* 718 */ "nand \0"
  /* 724 */ "and.ge \0"
  /* 732 */ "sh.ge \0"
  /* 739 */ "xor.ge \0"
  /* 747 */ "jge \0"
  /* 752 */ "bmerge \0"
  /* 760 */ "disable \0"
  /* 769 */ "shuffle \0"
  /* 778 */ "and.ne \0"
  /* 786 */ "xor.ne \0"
  /* 794 */ "jne \0"
  /* 799 */ "msub.f \0"
  /* 807 */ "madd.f \0"
  /* 815 */ "qseed.f \0"
  /* 824 */ "mul.f \0"
  /* 831 */ "cmp.f \0"
  /* 838 */ "div.f \0"
  /* 845 */ "absdif \0"
  /* 853 */ "q31tof \0"
  /* 861 */ "itof \0"
  /* 867 */ "hptof \0"
  /* 874 */ "utof \0"
  /* 880 */ "sha.h \0"
  /* 887 */ "msub.h \0"
  /* 895 */ "msubad.h \0"
  /* 905 */ "madd.h \0"
  /* 913 */ "ld.h \0"
  /* 919 */ "absdif.h \0"
  /* 929 */ "sh.h \0"
  /* 935 */ "mul.h \0"
  /* 942 */ "msubm.h \0"
  /* 951 */ "msubadm.h \0"
  /* 962 */ "maddm.h \0"
  /* 971 */ "mulm.h \0"
  /* 979 */ "maddsum.h \0"
  /* 990 */ "min.h \0"
  /* 997 */ "clo.h \0"
  /* 1004 */ "eq.h \0"
  /* 1010 */ "msubr.h \0"
  /* 1019 */ "msubadr.h \0"
  /* 1030 */ "maddr.h \0"
  /* 1039 */ "mulr.h \0"
  /* 1047 */ "maddsur.h \0"
  /* 1058 */ "abs.h \0"
  /* 1065 */ "msubs.h \0"
  /* 1074 */ "msubads.h \0"
  /* 1085 */ "madds.h \0"
  /* 1094 */ "absdifs.h \0"
  /* 1105 */ "cls.h \0"
  /* 1112 */ "msubms.h \0"
  /* 1122 */ "msubadms.h \0"
  /* 1134 */ "maddms.h \0"
  /* 1144 */ "mulms.h \0"
  /* 1153 */ "maddsums.h \0"
  /* 1165 */ "msubrs.h \0"
  /* 1175 */ "msubadrs.h \0"
  /* 1187 */ "maddrs.h \0"
  /* 1197 */ "maddsurs.h \0"
  /* 1209 */ "abss.h \0"
  /* 1217 */ "maddsus.h \0"
  /* 1228 */ "sat.h \0"
  /* 1235 */ "dvinit.h \0"
  /* 1245 */ "lt.h \0"
  /* 1251 */ "st.h \0"
  /* 1257 */ "maddsu.h \0"
  /* 1267 */ "max.h \0"
  /* 1274 */ "eqany.h \0"
  /* 1283 */ "clz.h \0"
  /* 1290 */ "addih \0"
  /* 1297 */ "sh \0"
  /* 1301 */ "movh \0"
  /* 1307 */ "tlbprobe.i \0"
  /* 1319 */ "addi \0"
  /* 1325 */ "jnei \0"
  /* 1331 */ "ji \0"
  /* 1335 */ "jli \0"
  /* 1340 */ "fcalli \0"
  /* 1348 */ "ftoi \0"
  /* 1354 */ "dvadj \0"
  /* 1361 */ "unpack \0"
  /* 1369 */ "imask \0"
  /* 1376 */ "sel \0"
  /* 1381 */ "updfl \0"
  /* 1388 */ "jl \0"
  /* 1392 */ "fcall \0"
  /* 1399 */ "syscall \0"
  /* 1408 */ "mul \0"
  /* 1413 */ "msubm \0"
  /* 1420 */ "maddm \0"
  /* 1427 */ "mulm \0"
  /* 1433 */ "crcn \0"
  /* 1439 */ "caddn \0"
  /* 1446 */ "andn \0"
  /* 1452 */ "ixmin \0"
  /* 1459 */ "seln \0"
  /* 1465 */ "orn \0"
  /* 1470 */ "cmovn \0"
  /* 1477 */ "clo \0"
  /* 1482 */ "tlbmap \0"
  /* 1490 */ "tlbdemap \0"
  /* 1500 */ "dvstep \0"
  /* 1508 */ "ftohp \0"
  /* 1515 */ "loop \0"
  /* 1521 */ "msub.q \0"
  /* 1529 */ "madd.q \0"
  /* 1537 */ "ld.q \0"
  /* 1543 */ "mul.q \0"
  /* 1550 */ "msubm.q \0"
  /* 1559 */ "maddm.q \0"
  /* 1568 */ "msubr.q \0"
  /* 1577 */ "maddr.q \0"
  /* 1586 */ "mulr.q \0"
  /* 1594 */ "msubs.q \0"
  /* 1603 */ "madds.q \0"
  /* 1612 */ "msubrs.q \0"
  /* 1622 */ "maddrs.q \0"
  /* 1632 */ "st.q \0"
  /* 1638 */ "and.eq \0"
  /* 1646 */ "sh.eq \0"
  /* 1653 */ "xor.eq \0"
  /* 1661 */ "jeq \0"
  /* 1666 */ "mfcr \0"
  /* 1672 */ "mtcr \0"
  /* 1678 */ "xnor \0"
  /* 1684 */ "xor \0"
  /* 1689 */ "bisr \0"
  /* 1695 */ "dextr \0"
  /* 1702 */ "shas \0"
  /* 1708 */ "abs \0"
  /* 1713 */ "msubs \0"
  /* 1720 */ "rsubs \0"
  /* 1727 */ "madds \0"
  /* 1734 */ "absdifs \0"
  /* 1743 */ "cls \0"
  /* 1748 */ "muls \0"
  /* 1754 */ "msubms \0"
  /* 1762 */ "maddms \0"
  /* 1770 */ "abss \0"
  /* 1776 */ "and.and.t \0"
  /* 1787 */ "sh.and.t \0"
  /* 1797 */ "or.and.t \0"
  /* 1807 */ "sh.nand.t \0"
  /* 1818 */ "and.andn.t \0"
  /* 1830 */ "sh.andn.t \0"
  /* 1841 */ "or.andn.t \0"
  /* 1852 */ "sh.orn.t \0"
  /* 1862 */ "insn.t \0"
  /* 1870 */ "and.or.t \0"
  /* 1880 */ "sh.or.t \0"
  /* 1889 */ "or.or.t \0"
  /* 1898 */ "and.nor.t \0"
  /* 1909 */ "sh.nor.t \0"
  /* 1919 */ "or.nor.t \0"
  /* 1929 */ "sh.xnor.t \0"
  /* 1940 */ "sh.xor.t \0"
  /* 1950 */ "ins.t \0"
  /* 1957 */ "st.t \0"
  /* 1963 */ "jz.t \0"
  /* 1969 */ "jnz.t \0"
  /* 1976 */ "bsplit \0"
  /* 1984 */ "dvinit \0"
  /* 1992 */ "and.lt \0"
  /* 2000 */ "sh.lt \0"
  /* 2007 */ "xor.lt \0"
  /* 2015 */ "jlt \0"
  /* 2020 */ "insert \0"
  /* 2028 */ "ldmst \0"
  /* 2035 */ "madd.u \0"
  /* 2043 */ "and.ge.u \0"
  /* 2053 */ "sh.ge.u \0"
  /* 2062 */ "xor.ge.u \0"
  /* 2072 */ "jge.u \0"
  /* 2079 */ "mul.u \0"
  /* 2086 */ "msubm.u \0"
  /* 2095 */ "maddm.u \0"
  /* 2104 */ "mulm.u \0"
  /* 2112 */ "ixmin.u \0"
  /* 2121 */ "dvstep.u \0"
  /* 2131 */ "extr.u \0"
  /* 2139 */ "rsubs.u \0"
  /* 2148 */ "madds.u \0"
  /* 2157 */ "muls.u \0"
  /* 2165 */ "msubms.u \0"
  /* 2175 */ "maddms.u \0"
  /* 2185 */ "dvinit.u \0"
  /* 2195 */ "and.lt.u \0"
  /* 2205 */ "sh.lt.u \0"
  /* 2214 */ "xor.lt.u \0"
  /* 2224 */ "jlt.u \0"
  /* 2231 */ "div.u \0"
  /* 2238 */ "mov.u \0"
  /* 2245 */ "ixmax.u \0"
  /* 2254 */ "ld.bu \0"
  /* 2261 */ "min.bu \0"
  /* 2269 */ "subs.bu \0"
  /* 2278 */ "adds.bu \0"
  /* 2287 */ "sat.bu \0"
  /* 2295 */ "dvinit.bu \0"
  /* 2306 */ "lt.bu \0"
  /* 2313 */ "max.bu \0"
  /* 2321 */ "ld.hu \0"
  /* 2328 */ "min.hu \0"
  /* 2336 */ "subs.hu \0"
  /* 2345 */ "adds.hu \0"
  /* 2354 */ "sat.hu \0"
  /* 2362 */ "dvinit.hu \0"
  /* 2373 */ "lt.hu \0"
  /* 2380 */ "max.hu \0"
  /* 2388 */ "ftou \0"
  /* 2394 */ "loopu \0"
  /* 2401 */ "lt.wu \0"
  /* 2408 */ "div \0"
  /* 2413 */ "cmov \0"
  /* 2419 */ "crc32b.w \0"
  /* 2429 */ "ld.w \0"
  /* 2435 */ "swapmsk.w \0"
  /* 2446 */ "crc32l.w \0"
  /* 2456 */ "swap.w \0"
  /* 2464 */ "eq.w \0"
  /* 2470 */ "lt.w \0"
  /* 2476 */ "popcnt.w \0"
  /* 2486 */ "st.w \0"
  /* 2492 */ "ixmax \0"
  /* 2499 */ "subx \0"
  /* 2505 */ "ldlcx \0"
  /* 2512 */ "stlcx \0"
  /* 2519 */ "lducx \0"
  /* 2526 */ "stucx \0"
  /* 2533 */ "addx \0"
  /* 2539 */ "parity \0"
  /* 2547 */ "ftoq31z \0"
  /* 2556 */ "jgez \0"
  /* 2562 */ "jlez \0"
  /* 2568 */ "ftoiz \0"
  /* 2575 */ "jz \0"
  /* 2579 */ "clz \0"
  /* 2584 */ "jnz \0"
  /* 2589 */ "jgtz \0"
  /* 2595 */ "jltz \0"
  /* 2601 */ "ftouz \0"
  /* 2608 */ "CMPSWAP.W [+\0"
  /* 2621 */ "cachea.i [+\0"
  /* 2633 */ "cachei.i [+\0"
  /* 2645 */ "cachea.wi [+\0"
  /* 2658 */ "cachei.wi [+\0"
  /* 2671 */ "ldmst [+\0"
  /* 2680 */ "cachea.w [+\0"
  /* 2692 */ "cachei.w [+\0"
  /* 2704 */ "# XRay Function Patchable RET.\0"
  /* 2735 */ "# XRay Typed Event Log.\0"
  /* 2759 */ "# XRay Custom Event Log.\0"
  /* 2784 */ "# XRay Function Enter.\0"
  /* 2807 */ "# XRay Tail Call Exit.\0"
  /* 2830 */ "# XRay Function Exit.\0"
  /* 2852 */ "addsc.at %d, %s2, %s1\0"
  /* 2874 */ "addsc.at %d, %s1, %s2\0"
  /* 2896 */ "LIFETIME_END\0"
  /* 2909 */ "PSEUDO_PROBE\0"
  /* 2922 */ "BUNDLE\0"
  /* 2929 */ "DBG_VALUE\0"
  /* 2939 */ "DBG_INSTR_REF\0"
  /* 2953 */ "DBG_PHI\0"
  /* 2961 */ "DBG_LABEL\0"
  /* 2971 */ "LIFETIME_START\0"
  /* 2986 */ "DBG_VALUE_LIST\0"
  /* 3001 */ "ld.a %a15, [\0"
  /* 3014 */ "ld.b %d15, [\0"
  /* 3027 */ "ld.h %d15, [\0"
  /* 3040 */ "ld.bu %d15, [\0"
  /* 3054 */ "ld.w %d15, [\0"
  /* 3067 */ "CMPSWAP.W [\0"
  /* 3079 */ "swap.a [\0"
  /* 3088 */ "st.a [\0"
  /* 3095 */ "st.da [\0"
  /* 3103 */ "st.b [\0"
  /* 3110 */ "st.d [\0"
  /* 3117 */ "st.h [\0"
  /* 3124 */ "cachea.i [\0"
  /* 3135 */ "cachei.i [\0"
  /* 3146 */ "cachea.wi [\0"
  /* 3158 */ "cachei.wi [\0"
  /* 3170 */ "st.q [\0"
  /* 3177 */ "ldmst [\0"
  /* 3185 */ "cachea.w [\0"
  /* 3196 */ "cachei.w [\0"
  /* 3207 */ "swapmsk.w [\0"
  /* 3219 */ "swap.w [\0"
  /* 3228 */ "st.w [\0"
  /* 3235 */ "ldlcx [\0"
  /* 3243 */ "stlcx [\0"
  /* 3251 */ "lducx [\0"
  /* 3259 */ "stucx [\0"
  /* 3267 */ "st.a [%a15]\0"
  /* 3279 */ "st.b [%a15]\0"
  /* 3291 */ "st.h [%a15]\0"
  /* 3303 */ "st.w [%a15]\0"
  /* 3315 */ "sub.a\0"
  /* 3321 */ "add.a\0"
  /* 3327 */ "tlbflush.a\0"
  /* 3338 */ "mov.a\0"
  /* 3344 */ "tlbflush.b\0"
  /* 3355 */ "dsync\0"
  /* 3361 */ "isync\0"
  /* 3367 */ "rfe\0"
  /* 3371 */ "enable\0"
  /* 3378 */ "disable\0"
  /* 3386 */ "restore\0"
  /* 3394 */ "debug\0"
  /* 3400 */ "relck\0"
  /* 3406 */ "# FEntry call\0"
  /* 3420 */ "rfm\0"
  /* 3424 */ "nop\0"
  /* 3428 */ "fret\0"
  /* 3433 */ "wait\0"
  /* 3438 */ "trapv\0"
  /* 3444 */ "trapsv\0"
  /* 3451 */ "rstv\0"
  /* 3456 */ "svlcx\0"
};
  static const uint32_t OpInfo0[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// INLINEASM_BR
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    2930U,	// DBG_VALUE
    2987U,	// DBG_VALUE_LIST
    2940U,	// DBG_INSTR_REF
    2954U,	// DBG_PHI
    2962U,	// DBG_LABEL
    0U,	// REG_SEQUENCE
    0U,	// COPY
    2923U,	// BUNDLE
    2972U,	// LIFETIME_START
    2897U,	// LIFETIME_END
    2910U,	// PSEUDO_PROBE
    0U,	// ARITH_FENCE
    0U,	// STACKMAP
    3407U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// PREALLOCATED_SETUP
    0U,	// PREALLOCATED_ARG
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    2785U,	// PATCHABLE_FUNCTION_ENTER
    2705U,	// PATCHABLE_RET
    2831U,	// PATCHABLE_FUNCTION_EXIT
    2808U,	// PATCHABLE_TAIL_CALL
    2760U,	// PATCHABLE_EVENT_CALL
    2736U,	// PATCHABLE_TYPED_EVENT_CALL
    0U,	// ICALL_BRANCH_FUNNEL
    0U,	// G_ASSERT_SEXT
    0U,	// G_ASSERT_ZEXT
    0U,	// G_ASSERT_ALIGN
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_SDIVREM
    0U,	// G_UDIVREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_BUILD_VECTOR
    0U,	// G_BUILD_VECTOR_TRUNC
    0U,	// G_CONCAT_VECTORS
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_FREEZE
    0U,	// G_INTRINSIC_FPTRUNC_ROUND
    0U,	// G_INTRINSIC_TRUNC
    0U,	// G_INTRINSIC_ROUND
    0U,	// G_INTRINSIC_LRINT
    0U,	// G_INTRINSIC_ROUNDEVEN
    0U,	// G_READCYCLECOUNTER
    0U,	// G_LOAD
    0U,	// G_SEXTLOAD
    0U,	// G_ZEXTLOAD
    0U,	// G_INDEXED_LOAD
    0U,	// G_INDEXED_SEXTLOAD
    0U,	// G_INDEXED_ZEXTLOAD
    0U,	// G_STORE
    0U,	// G_INDEXED_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_ATOMICRMW_FADD
    0U,	// G_ATOMICRMW_FSUB
    0U,	// G_ATOMICRMW_FMAX
    0U,	// G_ATOMICRMW_FMIN
    0U,	// G_FENCE
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INVOKE_REGION_START
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_SEXT_INREG
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_FSHL
    0U,	// G_FSHR
    0U,	// G_ROTR
    0U,	// G_ROTL
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDO
    0U,	// G_UADDE
    0U,	// G_USUBO
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SADDE
    0U,	// G_SSUBO
    0U,	// G_SSUBE
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_UADDSAT
    0U,	// G_SADDSAT
    0U,	// G_USUBSAT
    0U,	// G_SSUBSAT
    0U,	// G_USHLSAT
    0U,	// G_SSHLSAT
    0U,	// G_SMULFIX
    0U,	// G_UMULFIX
    0U,	// G_SMULFIXSAT
    0U,	// G_UMULFIXSAT
    0U,	// G_SDIVFIX
    0U,	// G_UDIVFIX
    0U,	// G_SDIVFIXSAT
    0U,	// G_UDIVFIXSAT
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FMAD
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FPOWI
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FLOG10
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_FABS
    0U,	// G_FCOPYSIGN
    0U,	// G_IS_FPCLASS
    0U,	// G_FCANONICALIZE
    0U,	// G_FMINNUM
    0U,	// G_FMAXNUM
    0U,	// G_FMINNUM_IEEE
    0U,	// G_FMAXNUM_IEEE
    0U,	// G_FMINIMUM
    0U,	// G_FMAXIMUM
    0U,	// G_PTR_ADD
    0U,	// G_PTRMASK
    0U,	// G_SMIN
    0U,	// G_SMAX
    0U,	// G_UMIN
    0U,	// G_UMAX
    0U,	// G_ABS
    0U,	// G_LROUND
    0U,	// G_LLROUND
    0U,	// G_BR
    0U,	// G_BRJT
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_CTTZ
    0U,	// G_CTTZ_ZERO_UNDEF
    0U,	// G_CTLZ
    0U,	// G_CTLZ_ZERO_UNDEF
    0U,	// G_CTPOP
    0U,	// G_BSWAP
    0U,	// G_BITREVERSE
    0U,	// G_FCEIL
    0U,	// G_FCOS
    0U,	// G_FSIN
    0U,	// G_FSQRT
    0U,	// G_FFLOOR
    0U,	// G_FRINT
    0U,	// G_FNEARBYINT
    0U,	// G_ADDRSPACE_CAST
    0U,	// G_BLOCK_ADDR
    0U,	// G_JUMP_TABLE
    0U,	// G_DYN_STACKALLOC
    0U,	// G_STRICT_FADD
    0U,	// G_STRICT_FSUB
    0U,	// G_STRICT_FMUL
    0U,	// G_STRICT_FDIV
    0U,	// G_STRICT_FREM
    0U,	// G_STRICT_FMA
    0U,	// G_STRICT_FSQRT
    0U,	// G_READ_REGISTER
    0U,	// G_WRITE_REGISTER
    0U,	// G_MEMCPY
    0U,	// G_MEMCPY_INLINE
    0U,	// G_MEMMOVE
    0U,	// G_MEMSET
    0U,	// G_BZERO
    0U,	// G_VECREDUCE_SEQ_FADD
    0U,	// G_VECREDUCE_SEQ_FMUL
    0U,	// G_VECREDUCE_FADD
    0U,	// G_VECREDUCE_FMUL
    0U,	// G_VECREDUCE_FMAX
    0U,	// G_VECREDUCE_FMIN
    0U,	// G_VECREDUCE_ADD
    0U,	// G_VECREDUCE_MUL
    0U,	// G_VECREDUCE_AND
    0U,	// G_VECREDUCE_OR
    0U,	// G_VECREDUCE_XOR
    0U,	// G_VECREDUCE_SMAX
    0U,	// G_VECREDUCE_SMIN
    0U,	// G_VECREDUCE_UMAX
    0U,	// G_VECREDUCE_UMIN
    0U,	// G_SBFX
    0U,	// G_UBFX
    4670U,	// ABSDIFS_B_rr_v110
    5191U,	// ABSDIFS_H_rr
    5831U,	// ABSDIFS_rc
    5831U,	// ABSDIFS_rr
    4611U,	// ABSDIF_B_rr
    5016U,	// ABSDIF_H_rr
    268440398U,	// ABSDIF_rc
    4942U,	// ABSDIF_rr
    4688U,	// ABSS_B_rr_v110
    5306U,	// ABSS_H_rr
    5867U,	// ABSS_rr
    16781863U,	// ABS_B_rr
    16782371U,	// ABS_H_rr
    16783021U,	// ABS_rr
    268440228U,	// ADDC_rc
    4772U,	// ADDC_rr
    536875314U,	// ADDIH_A_rlc
    536876299U,	// ADDIH_rlc
    536876328U,	// ADDI_rlc
    2853U,	// ADDSC_AT_rr
    2875U,	// ADDSC_AT_rr_v110
    806359289U,	// ADDSC_A_rr
    4345U,	// ADDSC_A_rr_v110
    33558777U,	// ADDSC_A_srrs
    1073746169U,	// ADDSC_A_srrs_v110
    6375U,	// ADDS_BU_rr_v110
    4662U,	// ADDS_B_rr_v110
    5183U,	// ADDS_H
    6442U,	// ADDS_HU
    6246U,	// ADDS_U
    268441702U,	// ADDS_U_rc
    268441281U,	// ADDS_rc
    5825U,	// ADDS_rr
    16783041U,	// ADDS_srr
    268442086U,	// ADDX_rc
    6630U,	// ADDX_rr
    3322U,	// ADD_A_rr
    2101516U,	// ADD_A_src
    16781580U,	// ADD_A_srr
    4598U,	// ADD_B_rr
    806359849U,	// ADD_F_rrr
    5003U,	// ADD_H_rr
    268440254U,	// ADD_rc
    4798U,	// ADD_rr
    2101950U,	// ADD_src
    2101260U,	// ADD_src_15a
    2167486U,	// ADD_src_a15
    16782014U,	// ADD_srr
    16781324U,	// ADD_srr_15a
    16847550U,	// ADD_srr_a15
    1342183199U,	// ANDN_T
    268440999U,	// ANDN_rc
    5543U,	// ANDN_rr
    1342183195U,	// AND_ANDN_T
    1342183153U,	// AND_AND_T
    268441191U,	// AND_EQ_rc
    5735U,	// AND_EQ_rr
    268441596U,	// AND_GE_U_rc
    6140U,	// AND_GE_U_rr
    268440277U,	// AND_GE_rc
    4821U,	// AND_GE_rr
    268441748U,	// AND_LT_U_rc
    6292U,	// AND_LT_U_rr
    268441545U,	// AND_LT_rc
    6089U,	// AND_LT_rr
    268440331U,	// AND_NE_rc
    4875U,	// AND_NE_rr
    1342183275U,	// AND_NOR_T
    1342183247U,	// AND_OR_T
    1342183157U,	// AND_T
    268440272U,	// AND_rc
    4816U,	// AND_rr
    139287U,	// AND_sc
    139287U,	// AND_sc_v110
    16782032U,	// AND_srr
    16782032U,	// AND_srr_v110
    13978U,	// BISR_rc
    13978U,	// BISR_rc_v161
    140954U,	// BISR_sc
    140954U,	// BISR_sc_v110
    4849U,	// BMERGAE_rr_v110
    4849U,	// BMERGE_rr
    16783289U,	// BSPLIT_rr
    16783289U,	// BSPLIT_rr_v110
    3349557U,	// CACHEA_I_bo_bso
    269365U,	// CACHEA_I_bo_c
    3480629U,	// CACHEA_I_bo_pos
    3349054U,	// CACHEA_I_bo_pre
    400437U,	// CACHEA_I_bo_r
    3349579U,	// CACHEA_WI_bo_bso
    269387U,	// CACHEA_WI_bo_c
    3480651U,	// CACHEA_WI_bo_pos
    3349078U,	// CACHEA_WI_bo_pre
    400459U,	// CACHEA_WI_bo_r
    3349618U,	// CACHEA_W_bo_bso
    269426U,	// CACHEA_W_bo_c
    3480690U,	// CACHEA_W_bo_pos
    3349113U,	// CACHEA_W_bo_pre
    400498U,	// CACHEA_W_bo_r
    3349568U,	// CACHEI_I_bo_bso
    3480640U,	// CACHEI_I_bo_pos
    3349066U,	// CACHEI_I_bo_pre
    3349591U,	// CACHEI_WI_bo_bso
    3480663U,	// CACHEI_WI_bo_pos
    3349091U,	// CACHEI_WI_bo_pre
    3349629U,	// CACHEI_W_bo_bso
    269437U,	// CACHEI_W_bo_c
    3480701U,	// CACHEI_W_bo_pos
    3349125U,	// CACHEI_W_bo_pre
    400509U,	// CACHEI_W_bo_r
    806359379U,	// CADDN_A_rcr_v110
    463187U,	// CADDN_A_rrr_v110
    806360480U,	// CADDN_rcr
    4199840U,	// CADDN_rrr
    2168224U,	// CADDN_src
    16848288U,	// CADDN_srr_v110
    806359307U,	// CADD_A_rcr_v110
    463115U,	// CADD_A_rrr_v110
    806359741U,	// CADD_rcr
    4199101U,	// CADD_rrr
    2167485U,	// CADD_src
    16847549U,	// CADD_srr_v110
    16856U,	// CALLA_b
    136510U,	// CALLI_rr
    136510U,	// CALLI_rr_v110
    17778U,	// CALL_b
    21874U,	// CALL_sb
    16781850U,	// CLO_B_rr_v110
    16782310U,	// CLO_H_rr
    16782790U,	// CLO_rr
    16781897U,	// CLS_B_rr_v110
    16782418U,	// CLS_H_rr
    16783056U,	// CLS_rr
    16781957U,	// CLZ_B_rr_v110
    16782596U,	// CLZ_H_rr
    16783892U,	// CLZ_rr
    2168255U,	// CMOVN_src
    16848319U,	// CMOVN_srr
    2169198U,	// CMOV_src
    16849262U,	// CMOV_srr
    5467132U,	// CMPSWAP_W_bo_bso
    5467132U,	// CMPSWAP_W_bo_c
    5598204U,	// CMPSWAP_W_bo_pos
    5466673U,	// CMPSWAP_W_bo_pre
    23093469U,	// CMPSWAP_W_bo_r
    4928U,	// CMP_F_rr
    806361460U,	// CRC32B_W_rr
    806361487U,	// CRC32L_W_rr
    806359519U,	// CRC32_B_rr
    4199834U,	// CRCN_rrr
    4198730U,	// CSUBN_A_rrr_v110
    4199052U,	// CSUBN_rrr
    4198632U,	// CSUB_A_rrr_v110
    4199052U,	// CSUB_rrr
    3395U,	// DEBUG_sr
    3395U,	// DEBUG_sys
    5792U,	// DEXTR_rrpw
    5792U,	// DEXTR_rrrr
    4354U,	// DIFSC_A_rr_v110
    3379U,	// DISABLE_sys
    135929U,	// DISABLE_sys_1
    4935U,	// DIV_F_rr
    6328U,	// DIV_U_rr
    6505U,	// DIV_rr
    3356U,	// DSYNC_sys
    806360395U,	// DVADJ_rrr
    806360395U,	// DVADJ_rrr_v110
    16782667U,	// DVADJ_srr_v110
    6392U,	// DVINIT_BU_rr
    6392U,	// DVINIT_BU_rr_v110
    4703U,	// DVINIT_B_rr
    4703U,	// DVINIT_B_rr_v110
    6459U,	// DVINIT_HU_rr
    6459U,	// DVINIT_HU_rr_v110
    5332U,	// DVINIT_H_rr
    5332U,	// DVINIT_H_rr_v110
    6282U,	// DVINIT_U_rr
    6282U,	// DVINIT_U_rr_v110
    6081U,	// DVINIT_rr
    6081U,	// DVINIT_rr_v110
    806361162U,	// DVSTEP_U_rrr
    806361162U,	// DVSTEP_U_rrrv110
    16783434U,	// DVSTEP_Uv110
    806360541U,	// DVSTEP_rrr
    806360541U,	// DVSTEP_rrrv110
    16782813U,	// DVSTEPv110
    3372U,	// ENABLE_sys
    268440188U,	// EQANY_B_rc
    4732U,	// EQANY_B_rr
    268440827U,	// EQANY_H_rc
    5371U,	// EQANY_H_rr
    16781722U,	// EQZ_A_rr
    4461U,	// EQ_A_rr
    4641U,	// EQ_B_rr
    5101U,	// EQ_H_rr
    6561U,	// EQ_W_rr
    268441195U,	// EQ_rc
    5739U,	// EQ_rr
    2101294U,	// EQ_src
    16781358U,	// EQ_srr
    6228U,	// EXTR_U_rrpw
    6228U,	// EXTR_U_rrrr
    6228U,	// EXTR_U_rrrw
    5793U,	// EXTR_rrpw
    5793U,	// EXTR_rrrr
    5793U,	// EXTR_rrrw
    16855U,	// FCALLA_b
    136509U,	// FCALLA_i
    17777U,	// FCALL_b
    3429U,	// FRET_sr
    3429U,	// FRET_sys
    16782821U,	// FTOHP_rr
    16783881U,	// FTOIZ_rr
    16782661U,	// FTOI_rr
    6644U,	// FTOQ31Z_rr
    4309U,	// FTOQ31_rr
    16783914U,	// FTOUZ_rr
    16783701U,	// FTOU_rr
    4389U,	// GE_A_rr
    268441600U,	// GE_U_rc
    6144U,	// GE_U_rr
    268440281U,	// GE_rc
    4825U,	// GE_rr
    16782180U,	// HPTOF_rr
    5466U,	// IMASK_rcpw
    806360410U,	// IMASK_rcrw
    5466U,	// IMASK_rrpw
    5466U,	// IMASK_rrrw
    6117U,	// INSERT_rcpw
    6117U,	// INSERT_rcrr
    1610618853U,	// INSERT_rcrw
    6117U,	// INSERT_rrpw
    6117U,	// INSERT_rrrr
    6117U,	// INSERT_rrrw
    1342183239U,	// INSN_T
    1342183327U,	// INS_T
    3362U,	// ISYNC_sys
    16782174U,	// ITOF_rr
    806361286U,	// IXMAX_U_rrr
    806361533U,	// IXMAX_rrr
    806361153U,	// IXMIN_U_rrr
    806360493U,	// IXMIN_rrr
    16846U,	// JA_b
    1879052652U,	// JEQ_A_brr
    1886393982U,	// JEQ_brc
    1879053950U,	// JEQ_brr
    28717U,	// JEQ_sbc1
    28717U,	// JEQ_sbc2
    28717U,	// JEQ_sbc_v110
    8392749U,	// JEQ_sbr1
    8392749U,	// JEQ_sbr2
    8392749U,	// JEQ_sbr_v110
    8395261U,	// JGEZ_sbr
    8395261U,	// JGEZ_sbr_v110
    1886394393U,	// JGE_U_brc
    1879054361U,	// JGE_U_brr
    1886393068U,	// JGE_brc
    1879053036U,	// JGE_brr
    8395294U,	// JGTZ_sbr
    8395294U,	// JGTZ_sbr_v110
    136500U,	// JI_rr
    136500U,	// JI_rr_v110
    8394036U,	// JI_sbr_v110
    136500U,	// JI_sr
    16850U,	// JLA_b
    8395267U,	// JLEZ_sbr
    8395267U,	// JLEZ_sbr_v110
    136504U,	// JLI_rr
    136504U,	// JLI_rr_v110
    8395300U,	// JLTZ_sbr
    8395300U,	// JLTZ_sbr_v110
    1886394545U,	// JLT_U_brc
    1879054513U,	// JLT_U_brr
    1886394336U,	// JLT_brc
    1879054304U,	// JLT_brr
    17773U,	// JL_b
    1886393033U,	// JNED_brc
    1879053001U,	// JNED_brr
    1886393646U,	// JNEI_brc
    1879053614U,	// JNEI_brr
    1879052587U,	// JNE_A_brr
    1886393115U,	// JNE_brc
    1879053083U,	// JNE_brr
    28706U,	// JNE_sbc1
    28706U,	// JNE_sbc2
    28706U,	// JNE_sbc_v110
    8392738U,	// JNE_sbr1
    8392738U,	// JNE_sbr2
    8392738U,	// JNE_sbr_v110
    1879052691U,	// JNZ_A_brr
    8393107U,	// JNZ_A_sbr
    1879054258U,	// JNZ_T_brn
    8392782U,	// JNZ_T_sbrn
    8392782U,	// JNZ_T_sbrn_v110
    20614U,	// JNZ_sb
    20614U,	// JNZ_sb_v110
    8395289U,	// JNZ_sbr
    8395289U,	// JNZ_sbr_v110
    1879052685U,	// JZ_A_brr
    8393101U,	// JZ_A_sbr
    1879054252U,	// JZ_T_brn
    8392770U,	// JZ_T_sbrn
    8392770U,	// JZ_T_sbrn_v110
    20604U,	// JZ_sb
    20604U,	// JZ_sb_v110
    8395280U,	// JZ_sbr
    8395280U,	// JZ_sbr_v110
    17743U,	// J_b
    21839U,	// J_sb
    21839U,	// J_sb_v110
    166346U,	// LDLCX_abs
    3349668U,	// LDLCX_bo_bso
    38893U,	// LDMST_abs
    5467242U,	// LDMST_bo_bso
    5467242U,	// LDMST_bo_c
    5598314U,	// LDMST_bo_pos
    5466736U,	// LDMST_bo_pre
    23095277U,	// LDMST_bo_r
    166360U,	// LDUCX_abs
    3349684U,	// LDUCX_bo_bso
    9441555U,	// LD_A_abs
    2198343955U,	// LD_A_bo_bso
    67637523U,	// LD_A_bo_c
    2231898387U,	// LD_A_bo_pos
    2198409491U,	// LD_A_bo_pre
    101191955U,	// LD_A_bo_r
    50860307U,	// LD_A_bol
    139409U,	// LD_A_sc
    2466779411U,	// LD_A_slr
    2500333843U,	// LD_A_slr_post
    2500333843U,	// LD_A_slr_post_v110
    2466779411U,	// LD_A_slr_v110
    659731U,	// LD_A_slro
    659731U,	// LD_A_slro_v110
    24320954U,	// LD_A_sro
    24320954U,	// LD_A_sro_v110
    9443535U,	// LD_BU_abs
    2198345935U,	// LD_BU_bo_bso
    67639503U,	// LD_BU_bo_c
    2231900367U,	// LD_BU_bo_pos
    2198411471U,	// LD_BU_bo_pre
    101193935U,	// LD_BU_bo_r
    50862287U,	// LD_BU_bol
    2466781391U,	// LD_BU_slr
    2500335823U,	// LD_BU_slr_post
    2500335823U,	// LD_BU_slr_post_v110
    2466781391U,	// LD_BU_slr_v110
    661711U,	// LD_BU_slro
    661711U,	// LD_BU_slro_v110
    24320993U,	// LD_BU_sro
    24320993U,	// LD_BU_sro_v110
    9441789U,	// LD_B_abs
    2198344189U,	// LD_B_bo_bso
    67637757U,	// LD_B_bo_c
    2231898621U,	// LD_B_bo_pos
    2198409725U,	// LD_B_bo_pre
    101192189U,	// LD_B_bo_r
    50860541U,	// LD_B_bol
    2500334077U,	// LD_B_slr_post_v110
    2466779645U,	// LD_B_slr_v110
    659965U,	// LD_B_slro_v110
    24320967U,	// LD_B_sro_v110
    9441713U,	// LD_DA_abs
    2198344113U,	// LD_DA_bo_bso
    67637681U,	// LD_DA_bo_c
    2231898545U,	// LD_DA_bo_pos
    2198409649U,	// LD_DA_bo_pre
    101192113U,	// LD_DA_bo_r
    9441962U,	// LD_D_abs
    2198344362U,	// LD_D_bo_bso
    67637930U,	// LD_D_bo_c
    2231898794U,	// LD_D_bo_pos
    2198409898U,	// LD_D_bo_pre
    101192362U,	// LD_D_bo_r
    9443602U,	// LD_HU_abs
    2198346002U,	// LD_HU_bo_bso
    67639570U,	// LD_HU_bo_c
    2231900434U,	// LD_HU_bo_pos
    2198411538U,	// LD_HU_bo_pre
    101194002U,	// LD_HU_bo_r
    50862354U,	// LD_HU_bol
    9442194U,	// LD_H_abs
    2198344594U,	// LD_H_bo_bso
    67638162U,	// LD_H_bo_c
    2231899026U,	// LD_H_bo_pos
    2198410130U,	// LD_H_bo_pre
    101192594U,	// LD_H_bo_r
    50860946U,	// LD_H_bol
    2466780050U,	// LD_H_slr
    2500334482U,	// LD_H_slr_post
    2500334482U,	// LD_H_slr_post_v110
    2466780050U,	// LD_H_slr_v110
    660370U,	// LD_H_slro
    660370U,	// LD_H_slro_v110
    24320980U,	// LD_H_sro
    24320980U,	// LD_H_sro_v110
    9442818U,	// LD_Q_abs
    2198345218U,	// LD_Q_bo_bso
    67638786U,	// LD_Q_bo_c
    2231899650U,	// LD_Q_bo_pos
    2198410754U,	// LD_Q_bo_pre
    101193218U,	// LD_Q_bo_r
    9443710U,	// LD_W_abs
    2198346110U,	// LD_W_bo_bso
    67639678U,	// LD_W_bo_c
    2231900542U,	// LD_W_bo_pos
    2198411646U,	// LD_W_bo_pre
    101194110U,	// LD_W_bo_r
    50862462U,	// LD_W_bol
    139426U,	// LD_W_sc
    2466781566U,	// LD_W_slr
    2500335998U,	// LD_W_slr_post
    2500335998U,	// LD_W_slr_post_v110
    2466781566U,	// LD_W_slr_v110
    661886U,	// LD_W_slro
    661886U,	// LD_W_slro_v110
    24321007U,	// LD_W_sro
    24321007U,	// LD_W_sro_v110
    9441727U,	// LEA_abs
    2198344127U,	// LEA_bo_bso
    50860479U,	// LEA_bol
    9441732U,	// LHA_abs
    43355U,	// LOOPU_brr
    10491372U,	// LOOP_brr
    8394220U,	// LOOP_sbr
    4467U,	// LT_A_rr
    4713U,	// LT_B
    6403U,	// LT_BU
    5342U,	// LT_H
    6470U,	// LT_HU
    268441752U,	// LT_U_rc
    6296U,	// LT_U_rr
    24121445U,	// LT_U_srcv110
    16781413U,	// LT_U_srrv110
    6567U,	// LT_W
    6498U,	// LT_WU
    268441549U,	// LT_rc
    6093U,	// LT_rr
    2101339U,	// LT_src
    16781403U,	// LT_srr
    4199535U,	// MADDMS_H_rrr1_LL
    4199535U,	// MADDMS_H_rrr1_LU
    4199535U,	// MADDMS_H_rrr1_UL
    4199535U,	// MADDMS_H_rrr1_UU
    806361216U,	// MADDMS_U_rcr_v110
    4200576U,	// MADDMS_U_rrr2_v110
    806360803U,	// MADDMS_rcr_v110
    4200163U,	// MADDMS_rrr2_v110
    4199363U,	// MADDM_H_rrr1_LL
    4199363U,	// MADDM_H_rrr1_LU
    4199363U,	// MADDM_H_rrr1_UL
    4199363U,	// MADDM_H_rrr1_UU
    4199363U,	// MADDM_H_rrr1_v110
    4199960U,	// MADDM_Q_rrr1_v110
    806361136U,	// MADDM_U_rcr_v110
    4200496U,	// MADDM_U_rrr2_v110
    806360461U,	// MADDM_rcr_v110
    4199821U,	// MADDM_rrr2_v110
    4199588U,	// MADDRS_H_rrr1_LL
    4199588U,	// MADDRS_H_rrr1_LU
    4199588U,	// MADDRS_H_rrr1_UL
    4199588U,	// MADDRS_H_rrr1_UL_2
    4199588U,	// MADDRS_H_rrr1_UU
    4199588U,	// MADDRS_H_rrr1_v110
    2805995095U,	// MADDRS_Q_rrr1_L_L
    2822772311U,	// MADDRS_Q_rrr1_U_U
    4200023U,	// MADDRS_Q_rrr1_v110
    4199431U,	// MADDR_H_rrr1_LL
    4199431U,	// MADDR_H_rrr1_LU
    4199431U,	// MADDR_H_rrr1_UL
    4199431U,	// MADDR_H_rrr1_UL_2
    4199431U,	// MADDR_H_rrr1_UU
    4199431U,	// MADDR_H_rrr1_v110
    2805995050U,	// MADDR_Q_rrr1_L_L
    2822772266U,	// MADDR_Q_rrr1_U_U
    4199978U,	// MADDR_Q_rrr1_v110
    4199554U,	// MADDSUMS_H_rrr1_LL
    4199554U,	// MADDSUMS_H_rrr1_LU
    4199554U,	// MADDSUMS_H_rrr1_UL
    4199554U,	// MADDSUMS_H_rrr1_UU
    4199380U,	// MADDSUM_H_rrr1_LL
    4199380U,	// MADDSUM_H_rrr1_LU
    4199380U,	// MADDSUM_H_rrr1_UL
    4199380U,	// MADDSUM_H_rrr1_UU
    4199598U,	// MADDSURS_H_rrr1_LL
    4199598U,	// MADDSURS_H_rrr1_LU
    4199598U,	// MADDSURS_H_rrr1_UL
    4199598U,	// MADDSURS_H_rrr1_UU
    4199448U,	// MADDSUR_H_rrr1_LL
    4199448U,	// MADDSUR_H_rrr1_LU
    4199448U,	// MADDSUR_H_rrr1_UL
    4199448U,	// MADDSUR_H_rrr1_UU
    4199618U,	// MADDSUS_H_rrr1_LL
    4199618U,	// MADDSUS_H_rrr1_LU
    4199618U,	// MADDSUS_H_rrr1_UL
    4199618U,	// MADDSUS_H_rrr1_UU
    4199658U,	// MADDSU_H_rrr1_LL
    4199658U,	// MADDSU_H_rrr1_LU
    4199658U,	// MADDSU_H_rrr1_UL
    4199658U,	// MADDSU_H_rrr1_UU
    4199486U,	// MADDS_H_rrr1_LL
    4199486U,	// MADDS_H_rrr1_LU
    4199486U,	// MADDS_H_rrr1_UL
    4199486U,	// MADDS_H_rrr1_UU
    4199486U,	// MADDS_H_rrr1_v110
    4200004U,	// MADDS_Q_rrr1
    4200004U,	// MADDS_Q_rrr1_L
    2805995076U,	// MADDS_Q_rrr1_L_L
    4200004U,	// MADDS_Q_rrr1_U
    4200004U,	// MADDS_Q_rrr1_UU2_v110
    2822772292U,	// MADDS_Q_rrr1_U_U
    4200004U,	// MADDS_Q_rrr1_e
    4200004U,	// MADDS_Q_rrr1_e_L
    2805995076U,	// MADDS_Q_rrr1_e_L_L
    4200004U,	// MADDS_Q_rrr1_e_U
    2822772292U,	// MADDS_Q_rrr1_e_U_U
    806361189U,	// MADDS_U_rcr
    806361189U,	// MADDS_U_rcr_e
    4200549U,	// MADDS_U_rrr2
    4200549U,	// MADDS_U_rrr2_e
    806360768U,	// MADDS_rcr
    806360768U,	// MADDS_rcr_e
    4200128U,	// MADDS_rrr2
    4200128U,	// MADDS_rrr2_e
    4199208U,	// MADD_F_rrr
    4199306U,	// MADD_H_rrr1_LL
    4199306U,	// MADD_H_rrr1_LU
    4199306U,	// MADD_H_rrr1_UL
    4199306U,	// MADD_H_rrr1_UU
    4199306U,	// MADD_H_rrr1_v110
    4199930U,	// MADD_Q_rrr1
    4199930U,	// MADD_Q_rrr1_L
    2805995002U,	// MADD_Q_rrr1_L_L
    4199930U,	// MADD_Q_rrr1_U
    4199930U,	// MADD_Q_rrr1_UU2_v110
    2822772218U,	// MADD_Q_rrr1_U_U
    4199930U,	// MADD_Q_rrr1_e
    4199930U,	// MADD_Q_rrr1_e_L
    2805995002U,	// MADD_Q_rrr1_e_L_L
    4199930U,	// MADD_Q_rrr1_e_U
    2822772218U,	// MADD_Q_rrr1_e_U_U
    806361076U,	// MADD_U_rcr
    4200436U,	// MADD_U_rrr2
    806359747U,	// MADD_rcr
    806359747U,	// MADD_rcr_e
    4199107U,	// MADD_rrr2
    4199107U,	// MADD_rrr2_e
    4725U,	// MAX_B
    6410U,	// MAX_BU
    5364U,	// MAX_H
    6477U,	// MAX_HU
    268441800U,	// MAX_U_rc
    6344U,	// MAX_U_rr
    268442047U,	// MAX_rc
    6591U,	// MAX_rr
    11540099U,	// MFCR_rlc
    4627U,	// MIN_B
    6358U,	// MIN_BU
    5087U,	// MIN_H
    6425U,	// MIN_HU
    268441667U,	// MIN_U_rc
    6211U,	// MIN_U_rr
    268441007U,	// MIN_rc
    5551U,	// MIN_rr
    11538747U,	// MOVH_A_rlc
    11539734U,	// MOVH_rlc
    135585U,	// MOVZ_A_sr
    17830313U,	// MOV_AA_rr
    16781737U,	// MOV_AA_srr_srr
    16781737U,	// MOV_AA_srr_srr_v110
    3339U,	// MOV_A_rr
    24121727U,	// MOV_A_src
    16781695U,	// MOV_A_srr
    16781695U,	// MOV_A_srr_v110
    17830582U,	// MOV_D_rr
    16782006U,	// MOV_D_srr_srr
    16782006U,	// MOV_D_srr_srr_v110
    11540671U,	// MOV_U_rlc
    11540847U,	// MOV_rlc
    11540847U,	// MOV_rlc_e
    17832303U,	// MOV_rr
    17832303U,	// MOV_rr_e
    6511U,	// MOV_rr_eab
    139377U,	// MOV_sc
    139377U,	// MOV_sc_v110
    2103663U,	// MOV_src
    2103663U,	// MOV_src_e
    16783727U,	// MOV_srr
    4199523U,	// MSUBADMS_H_rrr1_LL
    4199523U,	// MSUBADMS_H_rrr1_LU
    4199523U,	// MSUBADMS_H_rrr1_UL
    4199523U,	// MSUBADMS_H_rrr1_UU
    4199352U,	// MSUBADM_H_rrr1_LL
    4199352U,	// MSUBADM_H_rrr1_LU
    4199352U,	// MSUBADM_H_rrr1_UL
    4199352U,	// MSUBADM_H_rrr1_UU
    4199576U,	// MSUBADRS_H_rrr1_LL
    4199576U,	// MSUBADRS_H_rrr1_LU
    4199576U,	// MSUBADRS_H_rrr1_UL
    4199576U,	// MSUBADRS_H_rrr1_UU
    4199576U,	// MSUBADRS_H_rrr1_v110
    4199420U,	// MSUBADR_H_rrr1_LL
    4199420U,	// MSUBADR_H_rrr1_LU
    4199420U,	// MSUBADR_H_rrr1_UL
    4199420U,	// MSUBADR_H_rrr1_UU
    4199420U,	// MSUBADR_H_rrr1_v110
    4199475U,	// MSUBADS_H_rrr1_LL
    4199475U,	// MSUBADS_H_rrr1_LU
    4199475U,	// MSUBADS_H_rrr1_UL
    4199475U,	// MSUBADS_H_rrr1_UU
    4199296U,	// MSUBAD_H_rrr1_LL
    4199296U,	// MSUBAD_H_rrr1_LU
    4199296U,	// MSUBAD_H_rrr1_UL
    4199296U,	// MSUBAD_H_rrr1_UU
    4199513U,	// MSUBMS_H_rrr1_LL
    4199513U,	// MSUBMS_H_rrr1_LU
    4199513U,	// MSUBMS_H_rrr1_UL
    4199513U,	// MSUBMS_H_rrr1_UU
    806361206U,	// MSUBMS_U_rcrv110
    4200566U,	// MSUBMS_U_rrr2v110
    806360795U,	// MSUBMS_rcrv110
    4200155U,	// MSUBMS_rrr2v110
    4199343U,	// MSUBM_H_rrr1_LL
    4199343U,	// MSUBM_H_rrr1_LU
    4199343U,	// MSUBM_H_rrr1_UL
    4199343U,	// MSUBM_H_rrr1_UU
    4199343U,	// MSUBM_H_rrr1_v110
    4199951U,	// MSUBM_Q_rrr1_v110
    806361127U,	// MSUBM_U_rcrv110
    4200487U,	// MSUBM_U_rrr2v110
    806360454U,	// MSUBM_rcrv110
    4199814U,	// MSUBM_rrr2v110
    4199566U,	// MSUBRS_H_rrr1_LL
    4199566U,	// MSUBRS_H_rrr1_LU
    4199566U,	// MSUBRS_H_rrr1_UL
    4199566U,	// MSUBRS_H_rrr1_UL_2
    4199566U,	// MSUBRS_H_rrr1_UU
    4199566U,	// MSUBRS_H_rrr1_v110
    2805995085U,	// MSUBRS_Q_rrr1_L_L
    2822772301U,	// MSUBRS_Q_rrr1_U_U
    4200013U,	// MSUBRS_Q_rrr1_v110
    4199411U,	// MSUBR_H_rrr1_LL
    4199411U,	// MSUBR_H_rrr1_LU
    4199411U,	// MSUBR_H_rrr1_UL
    4199411U,	// MSUBR_H_rrr1_UL_2
    4199411U,	// MSUBR_H_rrr1_UU
    4199411U,	// MSUBR_H_rrr1_v110
    2805995041U,	// MSUBR_Q_rrr1_L_L
    2822772257U,	// MSUBR_Q_rrr1_U_U
    4199969U,	// MSUBR_Q_rrr1_v110
    4199466U,	// MSUBS_H_rrr1_LL
    4199466U,	// MSUBS_H_rrr1_LU
    4199466U,	// MSUBS_H_rrr1_UL
    4199466U,	// MSUBS_H_rrr1_UU
    4199466U,	// MSUBS_H_rrr1_v110
    4199995U,	// MSUBS_Q_rrr1
    4199995U,	// MSUBS_Q_rrr1_L
    2805995067U,	// MSUBS_Q_rrr1_L_L
    4199995U,	// MSUBS_Q_rrr1_U
    4199995U,	// MSUBS_Q_rrr1_UU2_v110
    2822772283U,	// MSUBS_Q_rrr1_U_U
    4199995U,	// MSUBS_Q_rrr1_e
    4199995U,	// MSUBS_Q_rrr1_e_L
    2805995067U,	// MSUBS_Q_rrr1_e_L_L
    4199995U,	// MSUBS_Q_rrr1_e_U
    2822772283U,	// MSUBS_Q_rrr1_e_U_U
    806361189U,	// MSUBS_U_rcr
    806361189U,	// MSUBS_U_rcr_e
    4200549U,	// MSUBS_U_rrr2
    4200549U,	// MSUBS_U_rrr2_e
    806360754U,	// MSUBS_rcr
    806360754U,	// MSUBS_rcr_e
    4200114U,	// MSUBS_rrr2
    4200114U,	// MSUBS_rrr2_e
    4199200U,	// MSUB_F_rrr
    4199288U,	// MSUB_H_rrr1_LL
    4199288U,	// MSUB_H_rrr1_LU
    4199288U,	// MSUB_H_rrr1_UL
    4199288U,	// MSUB_H_rrr1_UU
    4199288U,	// MSUB_H_rrr1_v110
    4199922U,	// MSUB_Q_rrr1
    4199922U,	// MSUB_Q_rrr1_L
    2805994994U,	// MSUB_Q_rrr1_L_L
    4199922U,	// MSUB_Q_rrr1_U
    4199922U,	// MSUB_Q_rrr1_UU2_v110
    2822772210U,	// MSUB_Q_rrr1_U_U
    4199922U,	// MSUB_Q_rrr1_e
    4199922U,	// MSUB_Q_rrr1_e_L
    2805994994U,	// MSUB_Q_rrr1_e_L_L
    4199922U,	// MSUB_Q_rrr1_e_U
    2822772210U,	// MSUB_Q_rrr1_e_U_U
    806361076U,	// MSUB_U_rcr
    4200436U,	// MSUB_U_rrr2
    806359698U,	// MSUB_rcr
    806359698U,	// MSUB_rcr_e
    4199058U,	// MSUB_rrr2
    4199058U,	// MSUB_rrr2_e
    46729U,	// MTCR_rlc
    5241U,	// MULMS_H_rr1_LL2e
    5241U,	// MULMS_H_rr1_LU2e
    5241U,	// MULMS_H_rr1_UL2e
    5241U,	// MULMS_H_rr1_UU2e
    5068U,	// MULM_H_rr1_LL2e
    5068U,	// MULM_H_rr1_LU2e
    5068U,	// MULM_H_rr1_UL2e
    5068U,	// MULM_H_rr1_UU2e
    268441657U,	// MULM_U_rc
    6201U,	// MULM_U_rr
    268440980U,	// MULM_rc
    5524U,	// MULM_rr
    5136U,	// MULR_H_rr
    5136U,	// MULR_H_rr1_LL2e
    5136U,	// MULR_H_rr1_LU2e
    5136U,	// MULR_H_rr1_UL2e
    5136U,	// MULR_H_rr1_UU2e
    5683U,	// MULR_Q_rr
    3070236211U,	// MULR_Q_rr1_2LL
    3087013427U,	// MULR_Q_rr1_2UU
    268441710U,	// MULS_U_rc
    6254U,	// MULS_U_rr2
    6254U,	// MULS_U_rr_v110
    268441301U,	// MULS_rc
    5845U,	// MULS_rr2
    5845U,	// MULS_rr_v110
    4921U,	// MUL_F_rrr
    5032U,	// MUL_H_rr
    5032U,	// MUL_H_rr1_LL2e
    5032U,	// MUL_H_rr1_LU2e
    5032U,	// MUL_H_rr1_UL2e
    5032U,	// MUL_H_rr1_UU2e
    5640U,	// MUL_Q_rr
    5640U,	// MUL_Q_rr1_2
    3070236168U,	// MUL_Q_rr1_2LL
    3087013384U,	// MUL_Q_rr1_2UU
    5640U,	// MUL_Q_rr1_2_L
    5640U,	// MUL_Q_rr1_2_Le
    5640U,	// MUL_Q_rr1_2_U
    5640U,	// MUL_Q_rr1_2_Ue
    5640U,	// MUL_Q_rr1_2__e
    268441632U,	// MUL_U_rc
    6176U,	// MUL_U_rr2
    268440961U,	// MUL_rc
    268440961U,	// MUL_rc_e
    5505U,	// MUL_rr2
    5505U,	// MUL_rr2_e
    5505U,	// MUL_rr_v110
    16782721U,	// MUL_srr
    1342183187U,	// NAND_T
    268440271U,	// NAND_rc
    4815U,	// NAND_rr
    16781702U,	// NEZ_A
    4396U,	// NE_A
    268440335U,	// NE_rc
    4879U,	// NE_rr
    3425U,	// NOP_sr
    3425U,	// NOP_sys
    1342183279U,	// NOR_T
    268441232U,	// NOR_rc
    5776U,	// NOR_rr
    136848U,	// NOR_sr
    136848U,	// NOR_sr_v110
    1342183232U,	// ORN_T
    268441018U,	// ORN_rc
    5562U,	// ORN_rr
    1342183218U,	// OR_ANDN_T
    1342183174U,	// OR_AND_T
    268441207U,	// OR_EQ_rc
    5751U,	// OR_EQ_rr
    268441616U,	// OR_GE_U_rc
    6160U,	// OR_GE_U_rr
    268440293U,	// OR_GE_rc
    4837U,	// OR_GE_rr
    268441768U,	// OR_LT_U_rc
    6312U,	// OR_LT_U_rr
    268441561U,	// OR_LT_rc
    6105U,	// OR_LT_rr
    268440340U,	// OR_NE_rc
    4884U,	// OR_NE_rr
    1342183296U,	// OR_NOR_T
    1342183266U,	// OR_OR_T
    1342183251U,	// OR_T
    268441233U,	// OR_rc
    5777U,	// OR_rr
    139320U,	// OR_sc
    139320U,	// OR_sc_v110
    16782993U,	// OR_srr
    16782993U,	// OR_srr_v110
    806360404U,	// PACK_rrr
    16783852U,	// PARITY_rr
    16783852U,	// PARITY_rr_v110
    16783789U,	// POPCNT_W_rr
    4950U,	// Q31TOF_rr
    16782128U,	// QSEED_F_rr
    3387U,	// RESTORE_sys
    3430U,	// RET_sr
    3430U,	// RET_sys
    3430U,	// RET_sys_v110
    3368U,	// RFE_sr
    3368U,	// RFE_sys_sys
    3368U,	// RFE_sys_sys_v110
    3421U,	// RFM_sys
    3401U,	// RSLCX_sys
    3452U,	// RSTV_sys
    268441692U,	// RSUBS_U_rc
    268441273U,	// RSUBS_rc
    268440216U,	// RSUB_rc
    135832U,	// RSUB_sr_sr
    135832U,	// RSUB_sr_sr_v110
    16783600U,	// SAT_BU_rr
    137456U,	// SAT_BU_sr
    137456U,	// SAT_BU_sr_v110
    16781912U,	// SAT_B_rr
    135768U,	// SAT_B_sr
    135768U,	// SAT_B_sr_v110
    16783667U,	// SAT_HU_rr
    137523U,	// SAT_HU_sr
    137523U,	// SAT_HU_sr_v110
    16782541U,	// SAT_H_rr
    136397U,	// SAT_H_sr
    136397U,	// SAT_H_sr_v110
    806359388U,	// SELN_A_rcr_v110
    4198748U,	// SELN_A_rrr_v110
    806360500U,	// SELN_rcr
    4199860U,	// SELN_rrr
    806359363U,	// SEL_A_rcr_v110
    4198723U,	// SEL_A_rrr_v110
    806360417U,	// SEL_rcr
    4199777U,	// SEL_rrr
    268441255U,	// SHAS_rc
    5799U,	// SHAS_rr
    268440040U,	// SHA_B_rc
    4584U,	// SHA_B_rr
    268440433U,	// SHA_H_rc
    4977U,	// SHA_H_rr
    268440009U,	// SHA_rc
    4553U,	// SHA_rr
    2101705U,	// SHA_src
    2101705U,	// SHA_src_v110
    268440322U,	// SHUFFLE_rc
    1342183207U,	// SH_ANDN_T
    1342183164U,	// SH_AND_T
    268440077U,	// SH_B_rc
    4621U,	// SH_B_rr
    268441199U,	// SH_EQ_rc
    5743U,	// SH_EQ_rr
    268441606U,	// SH_GE_U_rc
    6150U,	// SH_GE_U_rr
    268440285U,	// SH_GE_rc
    4829U,	// SH_GE_rr
    268440482U,	// SH_H_rc
    5026U,	// SH_H_rr
    268441758U,	// SH_LT_U_rc
    6302U,	// SH_LT_U_rr
    268441553U,	// SH_LT_rc
    6097U,	// SH_LT_rr
    1342183184U,	// SH_NAND_T
    268441553U,	// SH_NE_rc
    6097U,	// SH_NE_rr
    1342183286U,	// SH_NOR_T
    1342183229U,	// SH_ORN_T
    1342183257U,	// SH_OR_T
    1342183306U,	// SH_XNOR_T
    1342183317U,	// SH_XOR_T
    268440850U,	// SH_rc
    5394U,	// SH_rr
    2102546U,	// SH_src
    2102546U,	// SH_src_v110
    166353U,	// STLCX_abs
    3349676U,	// STLCX_bo_bso
    166367U,	// STUCX_abs
    3349692U,	// STUCX_bo_bso
    37241U,	// ST_A_abs
    5467153U,	// ST_A_bo_bso
    67637625U,	// ST_A_bo_c
    2238210425U,	// ST_A_bo_pos
    2204721529U,	// ST_A_bo_pre
    101192057U,	// ST_A_bo_r
    12786705U,	// ST_A_bol
    729279U,	// ST_A_sc
    158538769U,	// ST_A_sro
    158538769U,	// ST_A_sro_v110
    793617U,	// ST_A_ssr
    859153U,	// ST_A_ssr_pos
    859153U,	// ST_A_ssr_pos_v110
    793617U,	// ST_A_ssr_v110
    52420U,	// ST_A_ssro
    52420U,	// ST_A_ssro_v110
    37487U,	// ST_B_abs
    5467168U,	// ST_B_bo_bso
    67637871U,	// ST_B_bo_c
    2238210671U,	// ST_B_bo_pos
    2204721775U,	// ST_B_bo_pre
    101192303U,	// ST_B_bo_r
    12786720U,	// ST_B_bol
    175316000U,	// ST_B_sro
    175316000U,	// ST_B_sro_v110
    793632U,	// ST_B_ssr
    859168U,	// ST_B_ssr_pos
    859168U,	// ST_B_ssr_pos_v110
    793632U,	// ST_B_ssr_v110
    52432U,	// ST_B_ssro
    52432U,	// ST_B_ssro_v110
    37304U,	// ST_DA_abs
    5467160U,	// ST_DA_bo_bso
    67637688U,	// ST_DA_bo_c
    2238210488U,	// ST_DA_bo_pos
    2204721592U,	// ST_DA_bo_pre
    101192120U,	// ST_DA_bo_r
    37552U,	// ST_D_abs
    5467175U,	// ST_D_bo_bso
    67637936U,	// ST_D_bo_c
    2238210736U,	// ST_D_bo_pos
    2204721840U,	// ST_D_bo_pre
    101192368U,	// ST_D_bo_r
    38116U,	// ST_H_abs
    5467182U,	// ST_H_bo_bso
    67638500U,	// ST_H_bo_c
    2238211300U,	// ST_H_bo_pos
    2204722404U,	// ST_H_bo_pre
    101192932U,	// ST_H_bo_r
    12786734U,	// ST_H_bol
    175316014U,	// ST_H_sro
    175316014U,	// ST_H_sro_v110
    793646U,	// ST_H_ssr
    859182U,	// ST_H_ssr_pos
    859182U,	// ST_H_ssr_pos_v110
    793646U,	// ST_H_ssr_v110
    52444U,	// ST_H_ssro
    52444U,	// ST_H_ssro_v110
    38497U,	// ST_Q_abs
    5467235U,	// ST_Q_bo_bso
    67638881U,	// ST_Q_bo_c
    2238211681U,	// ST_Q_bo_pos
    2204722785U,	// ST_Q_bo_pre
    101193313U,	// ST_Q_bo_r
    34726U,	// ST_T
    39351U,	// ST_W_abs
    5467293U,	// ST_W_bo_bso
    67639735U,	// ST_W_bo_c
    2238212535U,	// ST_W_bo_pos
    2204723639U,	// ST_W_bo_pre
    101194167U,	// ST_W_bo_r
    12786845U,	// ST_W_bol
    729290U,	// ST_W_sc
    175316125U,	// ST_W_sro
    175316125U,	// ST_W_sro_v110
    793757U,	// ST_W_ssr
    859293U,	// ST_W_ssr_pos
    859293U,	// ST_W_ssr_pos_v110
    793757U,	// ST_W_ssr_v110
    52456U,	// ST_W_ssro
    52456U,	// ST_W_ssro_v110
    4766U,	// SUBC_rr
    4336U,	// SUBSC_A_rr
    6366U,	// SUBS_BU_rr
    4654U,	// SUBS_B_rr
    6433U,	// SUBS_HU_rr
    5163U,	// SUBS_H_rr
    6237U,	// SUBS_U_rr
    5811U,	// SUBS_rr
    16783027U,	// SUBS_srr
    6596U,	// SUBX_rr
    3316U,	// SUB_A_rr
    139443U,	// SUB_A_sc
    139443U,	// SUB_A_sc_v110
    4591U,	// SUB_B_rr
    806359841U,	// SUB_F_rrr
    4985U,	// SUB_H_rr
    4749U,	// SUB_rr
    16781965U,	// SUB_srr
    16781313U,	// SUB_srr_15a
    16847501U,	// SUB_srr_a15
    3457U,	// SVLCX_sys
    5467272U,	// SWAPMSK_W_bo_bso
    67639684U,	// SWAPMSK_W_bo_c
    2238212484U,	// SWAPMSK_W_bo_pos
    2204723588U,	// SWAPMSK_W_bo_pre
    101194116U,	// SWAPMSK_W_bo_r
    37220U,	// SWAP_A_abs
    5467144U,	// SWAP_A_bo_bso
    67637604U,	// SWAP_A_bo_c
    2238210404U,	// SWAP_A_bo_pos
    2204721508U,	// SWAP_A_bo_pre
    101192036U,	// SWAP_A_bo_r
    39321U,	// SWAP_W_abs
    5467284U,	// SWAP_W_bo_bso
    67639705U,	// SWAP_W_bo_c
    945300U,	// SWAP_W_bo_indexed
    2238212505U,	// SWAP_W_bo_pos
    2204723609U,	// SWAP_W_bo_pre
    101194137U,	// SWAP_W_bo_r
    13688U,	// SYSCALL_rc
    136659U,	// TLBDEMAP_rr
    3328U,	// TLBFLUSH_A_rr
    3345U,	// TLBFLUSH_B_rr
    136651U,	// TLBMAP_rr
    135449U,	// TLBPROBE_A_rr
    136476U,	// TLBPROBE_I_rr
    3445U,	// TRAPSV_sys
    3439U,	// TRAPV_sys
    16782674U,	// UNPACK_rr_rr
    16782674U,	// UNPACK_rr_rr_v110
    136550U,	// UPDFL_rr
    16782187U,	// UTOF_rr
    3434U,	// WAIT_sys
    1342183309U,	// XNOR_T
    268441231U,	// XNOR_rc
    5775U,	// XNOR_rr
    268441206U,	// XOR_EQ_rc
    5750U,	// XOR_EQ_rr
    268441615U,	// XOR_GE_U_rc
    6159U,	// XOR_GE_U_rr
    268440292U,	// XOR_GE_rc
    4836U,	// XOR_GE_rr
    268441767U,	// XOR_LT_U_rc
    6311U,	// XOR_LT_U_rr
    268441560U,	// XOR_LT_rc
    6104U,	// XOR_LT_rr
    268440339U,	// XOR_NE_rc
    4883U,	// XOR_NE_rr
    1342183320U,	// XOR_T
    268441237U,	// XOR_rc
    5781U,	// XOR_rr
    16782997U,	// XOR_srr
  };

  static const uint8_t OpInfo1[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// INLINEASM_BR
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// DBG_VALUE_LIST
    0U,	// DBG_INSTR_REF
    0U,	// DBG_PHI
    0U,	// DBG_LABEL
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// PSEUDO_PROBE
    0U,	// ARITH_FENCE
    0U,	// STACKMAP
    0U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// PREALLOCATED_SETUP
    0U,	// PREALLOCATED_ARG
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    0U,	// PATCHABLE_FUNCTION_ENTER
    0U,	// PATCHABLE_RET
    0U,	// PATCHABLE_FUNCTION_EXIT
    0U,	// PATCHABLE_TAIL_CALL
    0U,	// PATCHABLE_EVENT_CALL
    0U,	// PATCHABLE_TYPED_EVENT_CALL
    0U,	// ICALL_BRANCH_FUNNEL
    0U,	// G_ASSERT_SEXT
    0U,	// G_ASSERT_ZEXT
    0U,	// G_ASSERT_ALIGN
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_SDIVREM
    0U,	// G_UDIVREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_BUILD_VECTOR
    0U,	// G_BUILD_VECTOR_TRUNC
    0U,	// G_CONCAT_VECTORS
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_FREEZE
    0U,	// G_INTRINSIC_FPTRUNC_ROUND
    0U,	// G_INTRINSIC_TRUNC
    0U,	// G_INTRINSIC_ROUND
    0U,	// G_INTRINSIC_LRINT
    0U,	// G_INTRINSIC_ROUNDEVEN
    0U,	// G_READCYCLECOUNTER
    0U,	// G_LOAD
    0U,	// G_SEXTLOAD
    0U,	// G_ZEXTLOAD
    0U,	// G_INDEXED_LOAD
    0U,	// G_INDEXED_SEXTLOAD
    0U,	// G_INDEXED_ZEXTLOAD
    0U,	// G_STORE
    0U,	// G_INDEXED_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_ATOMICRMW_FADD
    0U,	// G_ATOMICRMW_FSUB
    0U,	// G_ATOMICRMW_FMAX
    0U,	// G_ATOMICRMW_FMIN
    0U,	// G_FENCE
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INVOKE_REGION_START
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_SEXT_INREG
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_FSHL
    0U,	// G_FSHR
    0U,	// G_ROTR
    0U,	// G_ROTL
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDO
    0U,	// G_UADDE
    0U,	// G_USUBO
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SADDE
    0U,	// G_SSUBO
    0U,	// G_SSUBE
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_UADDSAT
    0U,	// G_SADDSAT
    0U,	// G_USUBSAT
    0U,	// G_SSUBSAT
    0U,	// G_USHLSAT
    0U,	// G_SSHLSAT
    0U,	// G_SMULFIX
    0U,	// G_UMULFIX
    0U,	// G_SMULFIXSAT
    0U,	// G_UMULFIXSAT
    0U,	// G_SDIVFIX
    0U,	// G_UDIVFIX
    0U,	// G_SDIVFIXSAT
    0U,	// G_UDIVFIXSAT
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FMAD
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FPOWI
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FLOG10
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_FABS
    0U,	// G_FCOPYSIGN
    0U,	// G_IS_FPCLASS
    0U,	// G_FCANONICALIZE
    0U,	// G_FMINNUM
    0U,	// G_FMAXNUM
    0U,	// G_FMINNUM_IEEE
    0U,	// G_FMAXNUM_IEEE
    0U,	// G_FMINIMUM
    0U,	// G_FMAXIMUM
    0U,	// G_PTR_ADD
    0U,	// G_PTRMASK
    0U,	// G_SMIN
    0U,	// G_SMAX
    0U,	// G_UMIN
    0U,	// G_UMAX
    0U,	// G_ABS
    0U,	// G_LROUND
    0U,	// G_LLROUND
    0U,	// G_BR
    0U,	// G_BRJT
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_CTTZ
    0U,	// G_CTTZ_ZERO_UNDEF
    0U,	// G_CTLZ
    0U,	// G_CTLZ_ZERO_UNDEF
    0U,	// G_CTPOP
    0U,	// G_BSWAP
    0U,	// G_BITREVERSE
    0U,	// G_FCEIL
    0U,	// G_FCOS
    0U,	// G_FSIN
    0U,	// G_FSQRT
    0U,	// G_FFLOOR
    0U,	// G_FRINT
    0U,	// G_FNEARBYINT
    0U,	// G_ADDRSPACE_CAST
    0U,	// G_BLOCK_ADDR
    0U,	// G_JUMP_TABLE
    0U,	// G_DYN_STACKALLOC
    0U,	// G_STRICT_FADD
    0U,	// G_STRICT_FSUB
    0U,	// G_STRICT_FMUL
    0U,	// G_STRICT_FDIV
    0U,	// G_STRICT_FREM
    0U,	// G_STRICT_FMA
    0U,	// G_STRICT_FSQRT
    0U,	// G_READ_REGISTER
    0U,	// G_WRITE_REGISTER
    0U,	// G_MEMCPY
    0U,	// G_MEMCPY_INLINE
    0U,	// G_MEMMOVE
    0U,	// G_MEMSET
    0U,	// G_BZERO
    0U,	// G_VECREDUCE_SEQ_FADD
    0U,	// G_VECREDUCE_SEQ_FMUL
    0U,	// G_VECREDUCE_FADD
    0U,	// G_VECREDUCE_FMUL
    0U,	// G_VECREDUCE_FMAX
    0U,	// G_VECREDUCE_FMIN
    0U,	// G_VECREDUCE_ADD
    0U,	// G_VECREDUCE_MUL
    0U,	// G_VECREDUCE_AND
    0U,	// G_VECREDUCE_OR
    0U,	// G_VECREDUCE_XOR
    0U,	// G_VECREDUCE_SMAX
    0U,	// G_VECREDUCE_SMIN
    0U,	// G_VECREDUCE_UMAX
    0U,	// G_VECREDUCE_UMIN
    0U,	// G_SBFX
    0U,	// G_UBFX
    0U,	// ABSDIFS_B_rr_v110
    0U,	// ABSDIFS_H_rr
    0U,	// ABSDIFS_rc
    0U,	// ABSDIFS_rr
    0U,	// ABSDIF_B_rr
    0U,	// ABSDIF_H_rr
    0U,	// ABSDIF_rc
    0U,	// ABSDIF_rr
    0U,	// ABSS_B_rr_v110
    0U,	// ABSS_H_rr
    0U,	// ABSS_rr
    0U,	// ABS_B_rr
    0U,	// ABS_H_rr
    0U,	// ABS_rr
    0U,	// ADDC_rc
    0U,	// ADDC_rr
    0U,	// ADDIH_A_rlc
    0U,	// ADDIH_rlc
    0U,	// ADDI_rlc
    0U,	// ADDSC_AT_rr
    0U,	// ADDSC_AT_rr_v110
    1U,	// ADDSC_A_rr
    1U,	// ADDSC_A_rr_v110
    0U,	// ADDSC_A_srrs
    0U,	// ADDSC_A_srrs_v110
    0U,	// ADDS_BU_rr_v110
    0U,	// ADDS_B_rr_v110
    0U,	// ADDS_H
    0U,	// ADDS_HU
    0U,	// ADDS_U
    0U,	// ADDS_U_rc
    0U,	// ADDS_rc
    0U,	// ADDS_rr
    0U,	// ADDS_srr
    0U,	// ADDX_rc
    0U,	// ADDX_rr
    0U,	// ADD_A_rr
    0U,	// ADD_A_src
    0U,	// ADD_A_srr
    0U,	// ADD_B_rr
    0U,	// ADD_F_rrr
    0U,	// ADD_H_rr
    0U,	// ADD_rc
    0U,	// ADD_rr
    0U,	// ADD_src
    0U,	// ADD_src_15a
    0U,	// ADD_src_a15
    0U,	// ADD_srr
    0U,	// ADD_srr_15a
    0U,	// ADD_srr_a15
    0U,	// ANDN_T
    0U,	// ANDN_rc
    0U,	// ANDN_rr
    0U,	// AND_ANDN_T
    0U,	// AND_AND_T
    0U,	// AND_EQ_rc
    0U,	// AND_EQ_rr
    0U,	// AND_GE_U_rc
    0U,	// AND_GE_U_rr
    0U,	// AND_GE_rc
    0U,	// AND_GE_rr
    0U,	// AND_LT_U_rc
    0U,	// AND_LT_U_rr
    0U,	// AND_LT_rc
    0U,	// AND_LT_rr
    0U,	// AND_NE_rc
    0U,	// AND_NE_rr
    0U,	// AND_NOR_T
    0U,	// AND_OR_T
    0U,	// AND_T
    0U,	// AND_rc
    0U,	// AND_rr
    0U,	// AND_sc
    0U,	// AND_sc_v110
    0U,	// AND_srr
    0U,	// AND_srr_v110
    0U,	// BISR_rc
    0U,	// BISR_rc_v161
    0U,	// BISR_sc
    0U,	// BISR_sc_v110
    0U,	// BMERGAE_rr_v110
    0U,	// BMERGE_rr
    0U,	// BSPLIT_rr
    0U,	// BSPLIT_rr_v110
    0U,	// CACHEA_I_bo_bso
    0U,	// CACHEA_I_bo_c
    0U,	// CACHEA_I_bo_pos
    0U,	// CACHEA_I_bo_pre
    0U,	// CACHEA_I_bo_r
    0U,	// CACHEA_WI_bo_bso
    0U,	// CACHEA_WI_bo_c
    0U,	// CACHEA_WI_bo_pos
    0U,	// CACHEA_WI_bo_pre
    0U,	// CACHEA_WI_bo_r
    0U,	// CACHEA_W_bo_bso
    0U,	// CACHEA_W_bo_c
    0U,	// CACHEA_W_bo_pos
    0U,	// CACHEA_W_bo_pre
    0U,	// CACHEA_W_bo_r
    0U,	// CACHEI_I_bo_bso
    0U,	// CACHEI_I_bo_pos
    0U,	// CACHEI_I_bo_pre
    0U,	// CACHEI_WI_bo_bso
    0U,	// CACHEI_WI_bo_pos
    0U,	// CACHEI_WI_bo_pre
    0U,	// CACHEI_W_bo_bso
    0U,	// CACHEI_W_bo_c
    0U,	// CACHEI_W_bo_pos
    0U,	// CACHEI_W_bo_pre
    0U,	// CACHEI_W_bo_r
    17U,	// CADDN_A_rcr_v110
    0U,	// CADDN_A_rrr_v110
    17U,	// CADDN_rcr
    0U,	// CADDN_rrr
    0U,	// CADDN_src
    0U,	// CADDN_srr_v110
    17U,	// CADD_A_rcr_v110
    0U,	// CADD_A_rrr_v110
    17U,	// CADD_rcr
    0U,	// CADD_rrr
    0U,	// CADD_src
    0U,	// CADD_srr_v110
    0U,	// CALLA_b
    0U,	// CALLI_rr
    0U,	// CALLI_rr_v110
    0U,	// CALL_b
    0U,	// CALL_sb
    0U,	// CLO_B_rr_v110
    0U,	// CLO_H_rr
    0U,	// CLO_rr
    0U,	// CLS_B_rr_v110
    0U,	// CLS_H_rr
    0U,	// CLS_rr
    0U,	// CLZ_B_rr_v110
    0U,	// CLZ_H_rr
    0U,	// CLZ_rr
    0U,	// CMOVN_src
    0U,	// CMOVN_srr
    0U,	// CMOV_src
    0U,	// CMOV_srr
    0U,	// CMPSWAP_W_bo_bso
    0U,	// CMPSWAP_W_bo_c
    0U,	// CMPSWAP_W_bo_pos
    0U,	// CMPSWAP_W_bo_pre
    0U,	// CMPSWAP_W_bo_r
    0U,	// CMP_F_rr
    0U,	// CRC32B_W_rr
    0U,	// CRC32L_W_rr
    0U,	// CRC32_B_rr
    0U,	// CRCN_rrr
    0U,	// CSUBN_A_rrr_v110
    0U,	// CSUBN_rrr
    0U,	// CSUB_A_rrr_v110
    0U,	// CSUB_rrr
    0U,	// DEBUG_sr
    0U,	// DEBUG_sys
    33U,	// DEXTR_rrpw
    33U,	// DEXTR_rrrr
    1U,	// DIFSC_A_rr_v110
    0U,	// DISABLE_sys
    0U,	// DISABLE_sys_1
    0U,	// DIV_F_rr
    0U,	// DIV_U_rr
    0U,	// DIV_rr
    0U,	// DSYNC_sys
    0U,	// DVADJ_rrr
    0U,	// DVADJ_rrr_v110
    0U,	// DVADJ_srr_v110
    0U,	// DVINIT_BU_rr
    0U,	// DVINIT_BU_rr_v110
    0U,	// DVINIT_B_rr
    0U,	// DVINIT_B_rr_v110
    0U,	// DVINIT_HU_rr
    0U,	// DVINIT_HU_rr_v110
    0U,	// DVINIT_H_rr
    0U,	// DVINIT_H_rr_v110
    0U,	// DVINIT_U_rr
    0U,	// DVINIT_U_rr_v110
    0U,	// DVINIT_rr
    0U,	// DVINIT_rr_v110
    0U,	// DVSTEP_U_rrr
    0U,	// DVSTEP_U_rrrv110
    0U,	// DVSTEP_Uv110
    0U,	// DVSTEP_rrr
    0U,	// DVSTEP_rrrv110
    0U,	// DVSTEPv110
    0U,	// ENABLE_sys
    0U,	// EQANY_B_rc
    0U,	// EQANY_B_rr
    0U,	// EQANY_H_rc
    0U,	// EQANY_H_rr
    0U,	// EQZ_A_rr
    0U,	// EQ_A_rr
    0U,	// EQ_B_rr
    0U,	// EQ_H_rr
    0U,	// EQ_W_rr
    0U,	// EQ_rc
    0U,	// EQ_rr
    0U,	// EQ_src
    0U,	// EQ_srr
    33U,	// EXTR_U_rrpw
    0U,	// EXTR_U_rrrr
    33U,	// EXTR_U_rrrw
    33U,	// EXTR_rrpw
    0U,	// EXTR_rrrr
    33U,	// EXTR_rrrw
    0U,	// FCALLA_b
    0U,	// FCALLA_i
    0U,	// FCALL_b
    0U,	// FRET_sr
    0U,	// FRET_sys
    0U,	// FTOHP_rr
    0U,	// FTOIZ_rr
    0U,	// FTOI_rr
    0U,	// FTOQ31Z_rr
    0U,	// FTOQ31_rr
    0U,	// FTOUZ_rr
    0U,	// FTOU_rr
    0U,	// GE_A_rr
    0U,	// GE_U_rc
    0U,	// GE_U_rr
    0U,	// GE_rc
    0U,	// GE_rr
    0U,	// HPTOF_rr
    33U,	// IMASK_rcpw
    33U,	// IMASK_rcrw
    33U,	// IMASK_rrpw
    33U,	// IMASK_rrrw
    161U,	// INSERT_rcpw
    33U,	// INSERT_rcrr
    0U,	// INSERT_rcrw
    161U,	// INSERT_rrpw
    161U,	// INSERT_rrrr
    161U,	// INSERT_rrrw
    0U,	// INSN_T
    0U,	// INS_T
    0U,	// ISYNC_sys
    0U,	// ITOF_rr
    0U,	// IXMAX_U_rrr
    0U,	// IXMAX_rrr
    0U,	// IXMIN_U_rrr
    0U,	// IXMIN_rrr
    0U,	// JA_b
    0U,	// JEQ_A_brr
    0U,	// JEQ_brc
    0U,	// JEQ_brr
    0U,	// JEQ_sbc1
    0U,	// JEQ_sbc2
    0U,	// JEQ_sbc_v110
    0U,	// JEQ_sbr1
    0U,	// JEQ_sbr2
    0U,	// JEQ_sbr_v110
    0U,	// JGEZ_sbr
    0U,	// JGEZ_sbr_v110
    0U,	// JGE_U_brc
    0U,	// JGE_U_brr
    0U,	// JGE_brc
    0U,	// JGE_brr
    0U,	// JGTZ_sbr
    0U,	// JGTZ_sbr_v110
    0U,	// JI_rr
    0U,	// JI_rr_v110
    0U,	// JI_sbr_v110
    0U,	// JI_sr
    0U,	// JLA_b
    0U,	// JLEZ_sbr
    0U,	// JLEZ_sbr_v110
    0U,	// JLI_rr
    0U,	// JLI_rr_v110
    0U,	// JLTZ_sbr
    0U,	// JLTZ_sbr_v110
    0U,	// JLT_U_brc
    0U,	// JLT_U_brr
    0U,	// JLT_brc
    0U,	// JLT_brr
    0U,	// JL_b
    0U,	// JNED_brc
    0U,	// JNED_brr
    0U,	// JNEI_brc
    0U,	// JNEI_brr
    0U,	// JNE_A_brr
    0U,	// JNE_brc
    0U,	// JNE_brr
    0U,	// JNE_sbc1
    0U,	// JNE_sbc2
    0U,	// JNE_sbc_v110
    0U,	// JNE_sbr1
    0U,	// JNE_sbr2
    0U,	// JNE_sbr_v110
    0U,	// JNZ_A_brr
    0U,	// JNZ_A_sbr
    0U,	// JNZ_T_brn
    0U,	// JNZ_T_sbrn
    0U,	// JNZ_T_sbrn_v110
    0U,	// JNZ_sb
    0U,	// JNZ_sb_v110
    0U,	// JNZ_sbr
    0U,	// JNZ_sbr_v110
    0U,	// JZ_A_brr
    0U,	// JZ_A_sbr
    0U,	// JZ_T_brn
    0U,	// JZ_T_sbrn
    0U,	// JZ_T_sbrn_v110
    0U,	// JZ_sb
    0U,	// JZ_sb_v110
    0U,	// JZ_sbr
    0U,	// JZ_sbr_v110
    0U,	// J_b
    0U,	// J_sb
    0U,	// J_sb_v110
    0U,	// LDLCX_abs
    0U,	// LDLCX_bo_bso
    0U,	// LDMST_abs
    0U,	// LDMST_bo_bso
    0U,	// LDMST_bo_c
    0U,	// LDMST_bo_pos
    0U,	// LDMST_bo_pre
    0U,	// LDMST_bo_r
    0U,	// LDUCX_abs
    0U,	// LDUCX_bo_bso
    0U,	// LD_A_abs
    0U,	// LD_A_bo_bso
    0U,	// LD_A_bo_c
    0U,	// LD_A_bo_pos
    0U,	// LD_A_bo_pre
    0U,	// LD_A_bo_r
    0U,	// LD_A_bol
    0U,	// LD_A_sc
    0U,	// LD_A_slr
    0U,	// LD_A_slr_post
    0U,	// LD_A_slr_post_v110
    0U,	// LD_A_slr_v110
    0U,	// LD_A_slro
    0U,	// LD_A_slro_v110
    0U,	// LD_A_sro
    0U,	// LD_A_sro_v110
    0U,	// LD_BU_abs
    0U,	// LD_BU_bo_bso
    0U,	// LD_BU_bo_c
    0U,	// LD_BU_bo_pos
    0U,	// LD_BU_bo_pre
    0U,	// LD_BU_bo_r
    0U,	// LD_BU_bol
    0U,	// LD_BU_slr
    0U,	// LD_BU_slr_post
    0U,	// LD_BU_slr_post_v110
    0U,	// LD_BU_slr_v110
    0U,	// LD_BU_slro
    0U,	// LD_BU_slro_v110
    0U,	// LD_BU_sro
    0U,	// LD_BU_sro_v110
    0U,	// LD_B_abs
    0U,	// LD_B_bo_bso
    0U,	// LD_B_bo_c
    0U,	// LD_B_bo_pos
    0U,	// LD_B_bo_pre
    0U,	// LD_B_bo_r
    0U,	// LD_B_bol
    0U,	// LD_B_slr_post_v110
    0U,	// LD_B_slr_v110
    0U,	// LD_B_slro_v110
    0U,	// LD_B_sro_v110
    0U,	// LD_DA_abs
    0U,	// LD_DA_bo_bso
    0U,	// LD_DA_bo_c
    0U,	// LD_DA_bo_pos
    0U,	// LD_DA_bo_pre
    0U,	// LD_DA_bo_r
    0U,	// LD_D_abs
    0U,	// LD_D_bo_bso
    0U,	// LD_D_bo_c
    0U,	// LD_D_bo_pos
    0U,	// LD_D_bo_pre
    0U,	// LD_D_bo_r
    0U,	// LD_HU_abs
    0U,	// LD_HU_bo_bso
    0U,	// LD_HU_bo_c
    0U,	// LD_HU_bo_pos
    0U,	// LD_HU_bo_pre
    0U,	// LD_HU_bo_r
    0U,	// LD_HU_bol
    0U,	// LD_H_abs
    0U,	// LD_H_bo_bso
    0U,	// LD_H_bo_c
    0U,	// LD_H_bo_pos
    0U,	// LD_H_bo_pre
    0U,	// LD_H_bo_r
    0U,	// LD_H_bol
    0U,	// LD_H_slr
    0U,	// LD_H_slr_post
    0U,	// LD_H_slr_post_v110
    0U,	// LD_H_slr_v110
    0U,	// LD_H_slro
    0U,	// LD_H_slro_v110
    0U,	// LD_H_sro
    0U,	// LD_H_sro_v110
    0U,	// LD_Q_abs
    0U,	// LD_Q_bo_bso
    0U,	// LD_Q_bo_c
    0U,	// LD_Q_bo_pos
    0U,	// LD_Q_bo_pre
    0U,	// LD_Q_bo_r
    0U,	// LD_W_abs
    0U,	// LD_W_bo_bso
    0U,	// LD_W_bo_c
    0U,	// LD_W_bo_pos
    0U,	// LD_W_bo_pre
    0U,	// LD_W_bo_r
    0U,	// LD_W_bol
    0U,	// LD_W_sc
    0U,	// LD_W_slr
    0U,	// LD_W_slr_post
    0U,	// LD_W_slr_post_v110
    0U,	// LD_W_slr_v110
    0U,	// LD_W_slro
    0U,	// LD_W_slro_v110
    0U,	// LD_W_sro
    0U,	// LD_W_sro_v110
    0U,	// LEA_abs
    0U,	// LEA_bo_bso
    0U,	// LEA_bol
    0U,	// LHA_abs
    0U,	// LOOPU_brr
    0U,	// LOOP_brr
    0U,	// LOOP_sbr
    0U,	// LT_A_rr
    0U,	// LT_B
    0U,	// LT_BU
    0U,	// LT_H
    0U,	// LT_HU
    0U,	// LT_U_rc
    0U,	// LT_U_rr
    0U,	// LT_U_srcv110
    0U,	// LT_U_srrv110
    0U,	// LT_W
    0U,	// LT_WU
    0U,	// LT_rc
    0U,	// LT_rr
    0U,	// LT_src
    0U,	// LT_srr
    2U,	// MADDMS_H_rrr1_LL
    3U,	// MADDMS_H_rrr1_LU
    4U,	// MADDMS_H_rrr1_UL
    5U,	// MADDMS_H_rrr1_UU
    49U,	// MADDMS_U_rcr_v110
    0U,	// MADDMS_U_rrr2_v110
    17U,	// MADDMS_rcr_v110
    0U,	// MADDMS_rrr2_v110
    2U,	// MADDM_H_rrr1_LL
    3U,	// MADDM_H_rrr1_LU
    4U,	// MADDM_H_rrr1_UL
    5U,	// MADDM_H_rrr1_UU
    65U,	// MADDM_H_rrr1_v110
    65U,	// MADDM_Q_rrr1_v110
    49U,	// MADDM_U_rcr_v110
    0U,	// MADDM_U_rrr2_v110
    17U,	// MADDM_rcr_v110
    0U,	// MADDM_rrr2_v110
    2U,	// MADDRS_H_rrr1_LL
    3U,	// MADDRS_H_rrr1_LU
    4U,	// MADDRS_H_rrr1_UL
    4U,	// MADDRS_H_rrr1_UL_2
    5U,	// MADDRS_H_rrr1_UU
    65U,	// MADDRS_H_rrr1_v110
    0U,	// MADDRS_Q_rrr1_L_L
    0U,	// MADDRS_Q_rrr1_U_U
    65U,	// MADDRS_Q_rrr1_v110
    2U,	// MADDR_H_rrr1_LL
    3U,	// MADDR_H_rrr1_LU
    4U,	// MADDR_H_rrr1_UL
    4U,	// MADDR_H_rrr1_UL_2
    5U,	// MADDR_H_rrr1_UU
    65U,	// MADDR_H_rrr1_v110
    0U,	// MADDR_Q_rrr1_L_L
    0U,	// MADDR_Q_rrr1_U_U
    65U,	// MADDR_Q_rrr1_v110
    2U,	// MADDSUMS_H_rrr1_LL
    3U,	// MADDSUMS_H_rrr1_LU
    4U,	// MADDSUMS_H_rrr1_UL
    5U,	// MADDSUMS_H_rrr1_UU
    2U,	// MADDSUM_H_rrr1_LL
    3U,	// MADDSUM_H_rrr1_LU
    4U,	// MADDSUM_H_rrr1_UL
    5U,	// MADDSUM_H_rrr1_UU
    2U,	// MADDSURS_H_rrr1_LL
    3U,	// MADDSURS_H_rrr1_LU
    4U,	// MADDSURS_H_rrr1_UL
    5U,	// MADDSURS_H_rrr1_UU
    2U,	// MADDSUR_H_rrr1_LL
    3U,	// MADDSUR_H_rrr1_LU
    4U,	// MADDSUR_H_rrr1_UL
    5U,	// MADDSUR_H_rrr1_UU
    2U,	// MADDSUS_H_rrr1_LL
    3U,	// MADDSUS_H_rrr1_LU
    4U,	// MADDSUS_H_rrr1_UL
    5U,	// MADDSUS_H_rrr1_UU
    2U,	// MADDSU_H_rrr1_LL
    3U,	// MADDSU_H_rrr1_LU
    4U,	// MADDSU_H_rrr1_UL
    5U,	// MADDSU_H_rrr1_UU
    2U,	// MADDS_H_rrr1_LL
    3U,	// MADDS_H_rrr1_LU
    4U,	// MADDS_H_rrr1_UL
    5U,	// MADDS_H_rrr1_UU
    65U,	// MADDS_H_rrr1_v110
    65U,	// MADDS_Q_rrr1
    6U,	// MADDS_Q_rrr1_L
    0U,	// MADDS_Q_rrr1_L_L
    7U,	// MADDS_Q_rrr1_U
    65U,	// MADDS_Q_rrr1_UU2_v110
    0U,	// MADDS_Q_rrr1_U_U
    65U,	// MADDS_Q_rrr1_e
    6U,	// MADDS_Q_rrr1_e_L
    0U,	// MADDS_Q_rrr1_e_L_L
    7U,	// MADDS_Q_rrr1_e_U
    0U,	// MADDS_Q_rrr1_e_U_U
    17U,	// MADDS_U_rcr
    17U,	// MADDS_U_rcr_e
    0U,	// MADDS_U_rrr2
    0U,	// MADDS_U_rrr2_e
    17U,	// MADDS_rcr
    17U,	// MADDS_rcr_e
    0U,	// MADDS_rrr2
    0U,	// MADDS_rrr2_e
    0U,	// MADD_F_rrr
    2U,	// MADD_H_rrr1_LL
    3U,	// MADD_H_rrr1_LU
    4U,	// MADD_H_rrr1_UL
    5U,	// MADD_H_rrr1_UU
    65U,	// MADD_H_rrr1_v110
    65U,	// MADD_Q_rrr1
    6U,	// MADD_Q_rrr1_L
    0U,	// MADD_Q_rrr1_L_L
    7U,	// MADD_Q_rrr1_U
    65U,	// MADD_Q_rrr1_UU2_v110
    0U,	// MADD_Q_rrr1_U_U
    65U,	// MADD_Q_rrr1_e
    6U,	// MADD_Q_rrr1_e_L
    0U,	// MADD_Q_rrr1_e_L_L
    7U,	// MADD_Q_rrr1_e_U
    0U,	// MADD_Q_rrr1_e_U_U
    49U,	// MADD_U_rcr
    0U,	// MADD_U_rrr2
    17U,	// MADD_rcr
    17U,	// MADD_rcr_e
    0U,	// MADD_rrr2
    0U,	// MADD_rrr2_e
    0U,	// MAX_B
    0U,	// MAX_BU
    0U,	// MAX_H
    0U,	// MAX_HU
    0U,	// MAX_U_rc
    0U,	// MAX_U_rr
    0U,	// MAX_rc
    0U,	// MAX_rr
    0U,	// MFCR_rlc
    0U,	// MIN_B
    0U,	// MIN_BU
    0U,	// MIN_H
    0U,	// MIN_HU
    0U,	// MIN_U_rc
    0U,	// MIN_U_rr
    0U,	// MIN_rc
    0U,	// MIN_rr
    0U,	// MOVH_A_rlc
    0U,	// MOVH_rlc
    0U,	// MOVZ_A_sr
    0U,	// MOV_AA_rr
    0U,	// MOV_AA_srr_srr
    0U,	// MOV_AA_srr_srr_v110
    0U,	// MOV_A_rr
    0U,	// MOV_A_src
    0U,	// MOV_A_srr
    0U,	// MOV_A_srr_v110
    0U,	// MOV_D_rr
    0U,	// MOV_D_srr_srr
    0U,	// MOV_D_srr_srr_v110
    0U,	// MOV_U_rlc
    0U,	// MOV_rlc
    0U,	// MOV_rlc_e
    0U,	// MOV_rr
    0U,	// MOV_rr_e
    0U,	// MOV_rr_eab
    0U,	// MOV_sc
    0U,	// MOV_sc_v110
    0U,	// MOV_src
    0U,	// MOV_src_e
    0U,	// MOV_srr
    2U,	// MSUBADMS_H_rrr1_LL
    3U,	// MSUBADMS_H_rrr1_LU
    4U,	// MSUBADMS_H_rrr1_UL
    5U,	// MSUBADMS_H_rrr1_UU
    2U,	// MSUBADM_H_rrr1_LL
    3U,	// MSUBADM_H_rrr1_LU
    4U,	// MSUBADM_H_rrr1_UL
    5U,	// MSUBADM_H_rrr1_UU
    2U,	// MSUBADRS_H_rrr1_LL
    3U,	// MSUBADRS_H_rrr1_LU
    4U,	// MSUBADRS_H_rrr1_UL
    5U,	// MSUBADRS_H_rrr1_UU
    65U,	// MSUBADRS_H_rrr1_v110
    2U,	// MSUBADR_H_rrr1_LL
    3U,	// MSUBADR_H_rrr1_LU
    4U,	// MSUBADR_H_rrr1_UL
    5U,	// MSUBADR_H_rrr1_UU
    65U,	// MSUBADR_H_rrr1_v110
    2U,	// MSUBADS_H_rrr1_LL
    3U,	// MSUBADS_H_rrr1_LU
    4U,	// MSUBADS_H_rrr1_UL
    5U,	// MSUBADS_H_rrr1_UU
    2U,	// MSUBAD_H_rrr1_LL
    3U,	// MSUBAD_H_rrr1_LU
    4U,	// MSUBAD_H_rrr1_UL
    5U,	// MSUBAD_H_rrr1_UU
    2U,	// MSUBMS_H_rrr1_LL
    3U,	// MSUBMS_H_rrr1_LU
    4U,	// MSUBMS_H_rrr1_UL
    5U,	// MSUBMS_H_rrr1_UU
    17U,	// MSUBMS_U_rcrv110
    0U,	// MSUBMS_U_rrr2v110
    17U,	// MSUBMS_rcrv110
    0U,	// MSUBMS_rrr2v110
    2U,	// MSUBM_H_rrr1_LL
    3U,	// MSUBM_H_rrr1_LU
    4U,	// MSUBM_H_rrr1_UL
    5U,	// MSUBM_H_rrr1_UU
    65U,	// MSUBM_H_rrr1_v110
    65U,	// MSUBM_Q_rrr1_v110
    17U,	// MSUBM_U_rcrv110
    0U,	// MSUBM_U_rrr2v110
    17U,	// MSUBM_rcrv110
    0U,	// MSUBM_rrr2v110
    2U,	// MSUBRS_H_rrr1_LL
    3U,	// MSUBRS_H_rrr1_LU
    4U,	// MSUBRS_H_rrr1_UL
    4U,	// MSUBRS_H_rrr1_UL_2
    5U,	// MSUBRS_H_rrr1_UU
    65U,	// MSUBRS_H_rrr1_v110
    0U,	// MSUBRS_Q_rrr1_L_L
    0U,	// MSUBRS_Q_rrr1_U_U
    65U,	// MSUBRS_Q_rrr1_v110
    2U,	// MSUBR_H_rrr1_LL
    3U,	// MSUBR_H_rrr1_LU
    4U,	// MSUBR_H_rrr1_UL
    4U,	// MSUBR_H_rrr1_UL_2
    5U,	// MSUBR_H_rrr1_UU
    65U,	// MSUBR_H_rrr1_v110
    0U,	// MSUBR_Q_rrr1_L_L
    0U,	// MSUBR_Q_rrr1_U_U
    65U,	// MSUBR_Q_rrr1_v110
    2U,	// MSUBS_H_rrr1_LL
    3U,	// MSUBS_H_rrr1_LU
    4U,	// MSUBS_H_rrr1_UL
    5U,	// MSUBS_H_rrr1_UU
    65U,	// MSUBS_H_rrr1_v110
    65U,	// MSUBS_Q_rrr1
    6U,	// MSUBS_Q_rrr1_L
    0U,	// MSUBS_Q_rrr1_L_L
    7U,	// MSUBS_Q_rrr1_U
    65U,	// MSUBS_Q_rrr1_UU2_v110
    0U,	// MSUBS_Q_rrr1_U_U
    65U,	// MSUBS_Q_rrr1_e
    6U,	// MSUBS_Q_rrr1_e_L
    0U,	// MSUBS_Q_rrr1_e_L_L
    7U,	// MSUBS_Q_rrr1_e_U
    0U,	// MSUBS_Q_rrr1_e_U_U
    17U,	// MSUBS_U_rcr
    17U,	// MSUBS_U_rcr_e
    0U,	// MSUBS_U_rrr2
    0U,	// MSUBS_U_rrr2_e
    17U,	// MSUBS_rcr
    17U,	// MSUBS_rcr_e
    0U,	// MSUBS_rrr2
    0U,	// MSUBS_rrr2_e
    0U,	// MSUB_F_rrr
    2U,	// MSUB_H_rrr1_LL
    3U,	// MSUB_H_rrr1_LU
    4U,	// MSUB_H_rrr1_UL
    5U,	// MSUB_H_rrr1_UU
    65U,	// MSUB_H_rrr1_v110
    65U,	// MSUB_Q_rrr1
    6U,	// MSUB_Q_rrr1_L
    0U,	// MSUB_Q_rrr1_L_L
    7U,	// MSUB_Q_rrr1_U
    65U,	// MSUB_Q_rrr1_UU2_v110
    0U,	// MSUB_Q_rrr1_U_U
    65U,	// MSUB_Q_rrr1_e
    6U,	// MSUB_Q_rrr1_e_L
    0U,	// MSUB_Q_rrr1_e_L_L
    7U,	// MSUB_Q_rrr1_e_U
    0U,	// MSUB_Q_rrr1_e_U_U
    49U,	// MSUB_U_rcr
    0U,	// MSUB_U_rrr2
    17U,	// MSUB_rcr
    17U,	// MSUB_rcr_e
    0U,	// MSUB_rrr2
    0U,	// MSUB_rrr2_e
    0U,	// MTCR_rlc
    8U,	// MULMS_H_rr1_LL2e
    9U,	// MULMS_H_rr1_LU2e
    10U,	// MULMS_H_rr1_UL2e
    11U,	// MULMS_H_rr1_UU2e
    8U,	// MULM_H_rr1_LL2e
    9U,	// MULM_H_rr1_LU2e
    10U,	// MULM_H_rr1_UL2e
    11U,	// MULM_H_rr1_UU2e
    0U,	// MULM_U_rc
    0U,	// MULM_U_rr
    0U,	// MULM_rc
    0U,	// MULM_rr
    0U,	// MULR_H_rr
    8U,	// MULR_H_rr1_LL2e
    9U,	// MULR_H_rr1_LU2e
    10U,	// MULR_H_rr1_UL2e
    11U,	// MULR_H_rr1_UU2e
    0U,	// MULR_Q_rr
    0U,	// MULR_Q_rr1_2LL
    0U,	// MULR_Q_rr1_2UU
    0U,	// MULS_U_rc
    0U,	// MULS_U_rr2
    0U,	// MULS_U_rr_v110
    0U,	// MULS_rc
    0U,	// MULS_rr2
    0U,	// MULS_rr_v110
    0U,	// MUL_F_rrr
    0U,	// MUL_H_rr
    8U,	// MUL_H_rr1_LL2e
    9U,	// MUL_H_rr1_LU2e
    10U,	// MUL_H_rr1_UL2e
    11U,	// MUL_H_rr1_UU2e
    0U,	// MUL_Q_rr
    1U,	// MUL_Q_rr1_2
    0U,	// MUL_Q_rr1_2LL
    0U,	// MUL_Q_rr1_2UU
    12U,	// MUL_Q_rr1_2_L
    12U,	// MUL_Q_rr1_2_Le
    13U,	// MUL_Q_rr1_2_U
    13U,	// MUL_Q_rr1_2_Ue
    1U,	// MUL_Q_rr1_2__e
    0U,	// MUL_U_rc
    0U,	// MUL_U_rr2
    0U,	// MUL_rc
    0U,	// MUL_rc_e
    0U,	// MUL_rr2
    0U,	// MUL_rr2_e
    0U,	// MUL_rr_v110
    0U,	// MUL_srr
    0U,	// NAND_T
    0U,	// NAND_rc
    0U,	// NAND_rr
    0U,	// NEZ_A
    0U,	// NE_A
    0U,	// NE_rc
    0U,	// NE_rr
    0U,	// NOP_sr
    0U,	// NOP_sys
    0U,	// NOR_T
    0U,	// NOR_rc
    0U,	// NOR_rr
    0U,	// NOR_sr
    0U,	// NOR_sr_v110
    0U,	// ORN_T
    0U,	// ORN_rc
    0U,	// ORN_rr
    0U,	// OR_ANDN_T
    0U,	// OR_AND_T
    0U,	// OR_EQ_rc
    0U,	// OR_EQ_rr
    0U,	// OR_GE_U_rc
    0U,	// OR_GE_U_rr
    0U,	// OR_GE_rc
    0U,	// OR_GE_rr
    0U,	// OR_LT_U_rc
    0U,	// OR_LT_U_rr
    0U,	// OR_LT_rc
    0U,	// OR_LT_rr
    0U,	// OR_NE_rc
    0U,	// OR_NE_rr
    0U,	// OR_NOR_T
    0U,	// OR_OR_T
    0U,	// OR_T
    0U,	// OR_rc
    0U,	// OR_rr
    0U,	// OR_sc
    0U,	// OR_sc_v110
    0U,	// OR_srr
    0U,	// OR_srr_v110
    0U,	// PACK_rrr
    0U,	// PARITY_rr
    0U,	// PARITY_rr_v110
    0U,	// POPCNT_W_rr
    0U,	// Q31TOF_rr
    0U,	// QSEED_F_rr
    0U,	// RESTORE_sys
    0U,	// RET_sr
    0U,	// RET_sys
    0U,	// RET_sys_v110
    0U,	// RFE_sr
    0U,	// RFE_sys_sys
    0U,	// RFE_sys_sys_v110
    0U,	// RFM_sys
    0U,	// RSLCX_sys
    0U,	// RSTV_sys
    0U,	// RSUBS_U_rc
    0U,	// RSUBS_rc
    0U,	// RSUB_rc
    0U,	// RSUB_sr_sr
    0U,	// RSUB_sr_sr_v110
    0U,	// SAT_BU_rr
    0U,	// SAT_BU_sr
    0U,	// SAT_BU_sr_v110
    0U,	// SAT_B_rr
    0U,	// SAT_B_sr
    0U,	// SAT_B_sr_v110
    0U,	// SAT_HU_rr
    0U,	// SAT_HU_sr
    0U,	// SAT_HU_sr_v110
    0U,	// SAT_H_rr
    0U,	// SAT_H_sr
    0U,	// SAT_H_sr_v110
    17U,	// SELN_A_rcr_v110
    0U,	// SELN_A_rrr_v110
    17U,	// SELN_rcr
    0U,	// SELN_rrr
    17U,	// SEL_A_rcr_v110
    0U,	// SEL_A_rrr_v110
    17U,	// SEL_rcr
    0U,	// SEL_rrr
    0U,	// SHAS_rc
    0U,	// SHAS_rr
    0U,	// SHA_B_rc
    0U,	// SHA_B_rr
    0U,	// SHA_H_rc
    0U,	// SHA_H_rr
    0U,	// SHA_rc
    0U,	// SHA_rr
    0U,	// SHA_src
    0U,	// SHA_src_v110
    0U,	// SHUFFLE_rc
    0U,	// SH_ANDN_T
    0U,	// SH_AND_T
    0U,	// SH_B_rc
    0U,	// SH_B_rr
    0U,	// SH_EQ_rc
    0U,	// SH_EQ_rr
    0U,	// SH_GE_U_rc
    0U,	// SH_GE_U_rr
    0U,	// SH_GE_rc
    0U,	// SH_GE_rr
    0U,	// SH_H_rc
    0U,	// SH_H_rr
    0U,	// SH_LT_U_rc
    0U,	// SH_LT_U_rr
    0U,	// SH_LT_rc
    0U,	// SH_LT_rr
    0U,	// SH_NAND_T
    0U,	// SH_NE_rc
    0U,	// SH_NE_rr
    0U,	// SH_NOR_T
    0U,	// SH_ORN_T
    0U,	// SH_OR_T
    0U,	// SH_XNOR_T
    0U,	// SH_XOR_T
    0U,	// SH_rc
    0U,	// SH_rr
    0U,	// SH_src
    0U,	// SH_src_v110
    0U,	// STLCX_abs
    0U,	// STLCX_bo_bso
    0U,	// STUCX_abs
    0U,	// STUCX_bo_bso
    0U,	// ST_A_abs
    0U,	// ST_A_bo_bso
    0U,	// ST_A_bo_c
    0U,	// ST_A_bo_pos
    0U,	// ST_A_bo_pre
    0U,	// ST_A_bo_r
    0U,	// ST_A_bol
    0U,	// ST_A_sc
    0U,	// ST_A_sro
    0U,	// ST_A_sro_v110
    0U,	// ST_A_ssr
    0U,	// ST_A_ssr_pos
    0U,	// ST_A_ssr_pos_v110
    0U,	// ST_A_ssr_v110
    0U,	// ST_A_ssro
    0U,	// ST_A_ssro_v110
    0U,	// ST_B_abs
    0U,	// ST_B_bo_bso
    0U,	// ST_B_bo_c
    0U,	// ST_B_bo_pos
    0U,	// ST_B_bo_pre
    0U,	// ST_B_bo_r
    0U,	// ST_B_bol
    0U,	// ST_B_sro
    0U,	// ST_B_sro_v110
    0U,	// ST_B_ssr
    0U,	// ST_B_ssr_pos
    0U,	// ST_B_ssr_pos_v110
    0U,	// ST_B_ssr_v110
    0U,	// ST_B_ssro
    0U,	// ST_B_ssro_v110
    0U,	// ST_DA_abs
    0U,	// ST_DA_bo_bso
    0U,	// ST_DA_bo_c
    0U,	// ST_DA_bo_pos
    0U,	// ST_DA_bo_pre
    0U,	// ST_DA_bo_r
    0U,	// ST_D_abs
    0U,	// ST_D_bo_bso
    0U,	// ST_D_bo_c
    0U,	// ST_D_bo_pos
    0U,	// ST_D_bo_pre
    0U,	// ST_D_bo_r
    0U,	// ST_H_abs
    0U,	// ST_H_bo_bso
    0U,	// ST_H_bo_c
    0U,	// ST_H_bo_pos
    0U,	// ST_H_bo_pre
    0U,	// ST_H_bo_r
    0U,	// ST_H_bol
    0U,	// ST_H_sro
    0U,	// ST_H_sro_v110
    0U,	// ST_H_ssr
    0U,	// ST_H_ssr_pos
    0U,	// ST_H_ssr_pos_v110
    0U,	// ST_H_ssr_v110
    0U,	// ST_H_ssro
    0U,	// ST_H_ssro_v110
    0U,	// ST_Q_abs
    0U,	// ST_Q_bo_bso
    0U,	// ST_Q_bo_c
    0U,	// ST_Q_bo_pos
    0U,	// ST_Q_bo_pre
    0U,	// ST_Q_bo_r
    0U,	// ST_T
    0U,	// ST_W_abs
    0U,	// ST_W_bo_bso
    0U,	// ST_W_bo_c
    0U,	// ST_W_bo_pos
    0U,	// ST_W_bo_pre
    0U,	// ST_W_bo_r
    0U,	// ST_W_bol
    0U,	// ST_W_sc
    0U,	// ST_W_sro
    0U,	// ST_W_sro_v110
    0U,	// ST_W_ssr
    0U,	// ST_W_ssr_pos
    0U,	// ST_W_ssr_pos_v110
    0U,	// ST_W_ssr_v110
    0U,	// ST_W_ssro
    0U,	// ST_W_ssro_v110
    0U,	// SUBC_rr
    1U,	// SUBSC_A_rr
    0U,	// SUBS_BU_rr
    0U,	// SUBS_B_rr
    0U,	// SUBS_HU_rr
    0U,	// SUBS_H_rr
    0U,	// SUBS_U_rr
    0U,	// SUBS_rr
    0U,	// SUBS_srr
    0U,	// SUBX_rr
    0U,	// SUB_A_rr
    0U,	// SUB_A_sc
    0U,	// SUB_A_sc_v110
    0U,	// SUB_B_rr
    0U,	// SUB_F_rrr
    0U,	// SUB_H_rr
    0U,	// SUB_rr
    0U,	// SUB_srr
    0U,	// SUB_srr_15a
    0U,	// SUB_srr_a15
    0U,	// SVLCX_sys
    0U,	// SWAPMSK_W_bo_bso
    0U,	// SWAPMSK_W_bo_c
    0U,	// SWAPMSK_W_bo_pos
    0U,	// SWAPMSK_W_bo_pre
    0U,	// SWAPMSK_W_bo_r
    0U,	// SWAP_A_abs
    0U,	// SWAP_A_bo_bso
    0U,	// SWAP_A_bo_c
    0U,	// SWAP_A_bo_pos
    0U,	// SWAP_A_bo_pre
    0U,	// SWAP_A_bo_r
    0U,	// SWAP_W_abs
    0U,	// SWAP_W_bo_bso
    0U,	// SWAP_W_bo_c
    0U,	// SWAP_W_bo_indexed
    0U,	// SWAP_W_bo_pos
    0U,	// SWAP_W_bo_pre
    0U,	// SWAP_W_bo_r
    0U,	// SYSCALL_rc
    0U,	// TLBDEMAP_rr
    0U,	// TLBFLUSH_A_rr
    0U,	// TLBFLUSH_B_rr
    0U,	// TLBMAP_rr
    0U,	// TLBPROBE_A_rr
    0U,	// TLBPROBE_I_rr
    0U,	// TRAPSV_sys
    0U,	// TRAPV_sys
    0U,	// UNPACK_rr_rr
    0U,	// UNPACK_rr_rr_v110
    0U,	// UPDFL_rr
    0U,	// UTOF_rr
    0U,	// WAIT_sys
    0U,	// XNOR_T
    0U,	// XNOR_rc
    0U,	// XNOR_rr
    0U,	// XOR_EQ_rc
    0U,	// XOR_EQ_rr
    0U,	// XOR_GE_U_rc
    0U,	// XOR_GE_U_rr
    0U,	// XOR_GE_rc
    0U,	// XOR_GE_rr
    0U,	// XOR_LT_U_rc
    0U,	// XOR_LT_U_rr
    0U,	// XOR_LT_rc
    0U,	// XOR_LT_rr
    0U,	// XOR_NE_rc
    0U,	// XOR_NE_rr
    0U,	// XOR_T
    0U,	// XOR_rc
    0U,	// XOR_rr
    0U,	// XOR_srr
  };

  // Emit the opcode for the instruction.
  uint64_t Bits = 0;
  Bits |= (uint64_t)OpInfo0[MCInst_getOpcode(MI)] << 0;
  Bits |= (uint64_t)OpInfo1[MCInst_getOpcode(MI)] << 32;
  MnemonicBitsInfo MBI = {AsmStrs+(Bits & 4095)-1, Bits};
  return MBI;

}
/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void printInstruction(MCInst *MI, uint64_t Address, SStream *O) {
  SStream_concat0(O, "");
  MnemonicBitsInfo MnemonicInfo = getMnemonic(MI, O);

  SStream_concat0(O, MnemonicInfo.first);

  uint64_t Bits = MnemonicInfo.second;
  assert(Bits != 0 && "Cannot print this instruction.");

  // Fragment 0 encoded into 4 bits for 13 unique commands.
  switch ((Bits >> 12) & 15) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // DBG_VALUE, DBG_VALUE_LIST, DBG_INSTR_REF, DBG_PHI, DBG_LABEL, BUNDLE, ...
    return;
    break;
  case 1:
    // ABSDIFS_B_rr_v110, ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ...
    printOperand(MI, 0, O);
    break;
  case 2:
    // AND_sc, AND_sc_v110, BISR_sc, BISR_sc_v110, LD_A_sc, LD_W_sc, MOV_sc, ...
    printZExtImm_8(MI, 0, O);
    break;
  case 3:
    // BISR_rc, BISR_rc_v161, SYSCALL_rc
    printSExtImm_9(MI, 0, O);
    return;
    break;
  case 4:
    // CALLA_b, CALL_b, FCALLA_b, FCALL_b, JA_b, JLA_b, JL_b, J_b
    printDisp24Imm(MI, 0, O);
    return;
    break;
  case 5:
    // CALL_sb, JNZ_sb, JNZ_sb_v110, JZ_sb, JZ_sb_v110, J_sb, J_sb_v110
    printDisp8Imm(MI, 0, O);
    return;
    break;
  case 6:
    // CMPSWAP_W_bo_bso, CMPSWAP_W_bo_c, CMPSWAP_W_bo_pos, CMPSWAP_W_bo_pre, ...
    printOperand(MI, 1, O);
    break;
  case 7:
    // JEQ_sbc1, JEQ_sbc2, JEQ_sbc_v110, JNE_sbc1, JNE_sbc2, JNE_sbc_v110
    printSExtImm_4(MI, 1, O);
    SStream_concat0(O, ", ");
    printDisp4Imm(MI, 0, O);
    return;
    break;
  case 8:
    // LDLCX_abs, LDUCX_abs, STLCX_abs, STUCX_abs, ST_T
    printOff18Imm(MI, 0, O);
    break;
  case 9:
    // LDMST_abs, ST_A_abs, ST_B_abs, ST_DA_abs, ST_D_abs, ST_H_abs, ST_Q_abs...
    printOff18Imm(MI, 1, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 0, O);
    return;
    break;
  case 10:
    // LOOPU_brr
    printDisp15Imm(MI, 0, O);
    return;
    break;
  case 11:
    // MTCR_rlc
    printSExtImm_16(MI, 0, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 1, O);
    return;
    break;
  case 12:
    // ST_A_ssro, ST_A_ssro_v110, ST_B_ssro, ST_B_ssro_v110, ST_H_ssro, ST_H_...
    printZExtImm_4(MI, 1, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 0, O);
    return;
    break;
  }


  // Fragment 1 encoded into 4 bits for 15 unique commands.
  switch ((Bits >> 16) & 15) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_B_rr_v110, ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ...
    SStream_concat0(O, ", ");
    break;
  case 1:
    // ADD_src_a15, ADD_srr_a15, CADDN_src, CADDN_srr_v110, CADD_src, CADD_sr...
    SStream_concat0(O, ", %d15, ");
    break;
  case 2:
    // AND_sc, AND_sc_v110, BISR_sc, BISR_sc_v110, CALLI_rr, CALLI_rr_v110, D...
    return;
    break;
  case 3:
    // CACHEA_I_bo_bso, CACHEA_I_bo_pre, CACHEA_WI_bo_bso, CACHEA_WI_bo_pre, ...
    SStream_concat1(O, ']');
    break;
  case 4:
    // CACHEA_I_bo_c, CACHEA_WI_bo_c, CACHEA_W_bo_c, CACHEI_W_bo_c
    SStream_concat0(O, "+c]");
    set_mem_access(MI, false);
    printSExtImm_10(MI, 1, O);
    return;
    break;
  case 5:
    // CACHEA_I_bo_pos, CACHEA_WI_bo_pos, CACHEA_W_bo_pos, CACHEI_I_bo_pos, C...
    SStream_concat0(O, "+]");
    set_mem_access(MI, false);
    break;
  case 6:
    // CACHEA_I_bo_r, CACHEA_WI_bo_r, CACHEA_W_bo_r, CACHEI_W_bo_r
    SStream_concat0(O, "+r]");
    set_mem_access(MI, false);
    return;
    break;
  case 7:
    // CADDN_A_rrr_v110, CADD_A_rrr_v110
    SStream_concat1(O, ' ');
    printOperand(MI, 3, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 1, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 2, O);
    return;
    break;
  case 8:
    // LD_A_bo_bso, LD_A_bo_c, LD_A_bo_pos, LD_A_bo_r, LD_A_bol, LD_A_slr, LD...
    SStream_concat0(O, ", [");
    set_mem_access(MI, true);
    break;
  case 9:
    // LD_A_bo_pre, LD_BU_bo_pre, LD_B_bo_pre, LD_DA_bo_pre, LD_D_bo_pre, LD_...
    SStream_concat0(O, ", [+");
    set_mem_access(MI, true);
    break;
  case 10:
    // LD_A_slro, LD_A_slro_v110, LD_BU_slro, LD_BU_slro_v110, LD_B_slro_v110...
    SStream_concat0(O, ", [%a15]");
    set_mem_access(MI, true);
    printZExtImm_4(MI, 1, O);
    return;
    break;
  case 11:
    // ST_A_sc, ST_W_sc
    SStream_concat0(O, ", %a15");
    return;
    break;
  case 12:
    // ST_A_ssr, ST_A_ssr_v110, ST_B_ssr, ST_B_ssr_v110, ST_H_ssr, ST_H_ssr_v...
    SStream_concat0(O, "], ");
    set_mem_access(MI, false);
    printOperand(MI, 1, O);
    return;
    break;
  case 13:
    // ST_A_ssr_pos, ST_A_ssr_pos_v110, ST_B_ssr_pos, ST_B_ssr_pos_v110, ST_H...
    SStream_concat0(O, "+], ");
    set_mem_access(MI, false);
    printOperand(MI, 1, O);
    return;
    break;
  case 14:
    // SWAP_W_bo_indexed
    SStream_concat1(O, '+');
    printSExtImm_10(MI, 2, O);
    SStream_concat0(O, "], ");
    set_mem_access(MI, false);
    printOperand(MI, 0, O);
    return;
    break;
  }


  // Fragment 2 encoded into 4 bits for 13 unique commands.
  switch ((Bits >> 20) & 15) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_B_rr_v110, ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ...
    printOperand(MI, 1, O);
    break;
  case 1:
    // ADDSC_A_rr, ADD_F_rrr, CADDN_A_rcr_v110, CADDN_rcr, CADD_A_rcr_v110, C...
    printOperand(MI, 2, O);
    break;
  case 2:
    // ADD_A_src, ADD_src, ADD_src_15a, ADD_src_a15, CADDN_src, CADD_src, CMO...
    printSExtImm_4(MI, 1, O);
    return;
    break;
  case 3:
    // CACHEA_I_bo_bso, CACHEA_I_bo_pos, CACHEA_I_bo_pre, CACHEA_WI_bo_bso, C...
    printSExtImm_10(MI, 1, O);
    return;
    break;
  case 4:
    // CADDN_rrr, CADD_rrr, CRCN_rrr, CSUBN_A_rrr_v110, CSUBN_rrr, CSUB_A_rrr...
    printOperand(MI, 3, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 1, O);
    break;
  case 5:
    // CMPSWAP_W_bo_bso, CMPSWAP_W_bo_c, CMPSWAP_W_bo_pos, CMPSWAP_W_bo_pre, ...
    printSExtImm_10(MI, 2, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 0, O);
    return;
    break;
  case 6:
    // CMPSWAP_W_bo_r, LDMST_bo_r, ST_A_bo_pos, ST_A_bo_pre, ST_B_bo_pos, ST_...
    printOperand(MI, 0, O);
    break;
  case 7:
    // JEQ_brc, JGE_U_brc, JGE_brc, JLT_U_brc, JLT_brc, JNED_brc, JNEI_brc, J...
    printZExtImm_4(MI, 1, O);
    break;
  case 8:
    // JEQ_sbr1, JEQ_sbr2, JEQ_sbr_v110, JGEZ_sbr, JGEZ_sbr_v110, JGTZ_sbr, J...
    printDisp4Imm(MI, 1, O);
    return;
    break;
  case 9:
    // LD_A_abs, LD_BU_abs, LD_B_abs, LD_DA_abs, LD_D_abs, LD_HU_abs, LD_H_ab...
    printOff18Imm(MI, 1, O);
    return;
    break;
  case 10:
    // LOOP_brr
    printDisp15Imm(MI, 1, O);
    return;
    break;
  case 11:
    // MFCR_rlc, MOVH_A_rlc, MOVH_rlc, MOV_U_rlc, MOV_rlc, MOV_rlc_e
    printZExtImm_16(MI, 1, O);
    return;
    break;
  case 12:
    // ST_A_bol, ST_B_bol, ST_H_bol, ST_W_bol
    printSExtImm_16(MI, 2, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 1, O);
    return;
    break;
  }


  // Fragment 3 encoded into 4 bits for 11 unique commands.
  switch ((Bits >> 24) & 15) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_B_rr_v110, ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ...
    SStream_concat0(O, ", ");
    break;
  case 1:
    // ABS_B_rr, ABS_H_rr, ABS_rr, ADDS_srr, ADD_A_srr, ADD_srr, ADD_srr_15a,...
    return;
    break;
  case 2:
    // ADDSC_A_srrs
    SStream_concat0(O, ", %d15, ");
    printZExtImm_2(MI, 2, O);
    return;
    break;
  case 3:
    // LD_A_bo_bso, LD_A_bo_pre, LD_A_bol, LD_A_slr, LD_A_slr_v110, LD_BU_bo_...
    SStream_concat1(O, ']');
    break;
  case 4:
    // LD_A_bo_c, LD_BU_bo_c, LD_B_bo_c, LD_DA_bo_c, LD_D_bo_c, LD_HU_bo_c, L...
    SStream_concat0(O, "+c]");
    set_mem_access(MI, false);
    printSExtImm_10(MI, 2, O);
    return;
    break;
  case 5:
    // LD_A_bo_pos, LD_A_slr_post, LD_A_slr_post_v110, LD_BU_bo_pos, LD_BU_sl...
    SStream_concat0(O, "+]");
    set_mem_access(MI, false);
    break;
  case 6:
    // LD_A_bo_r, LD_BU_bo_r, LD_B_bo_r, LD_DA_bo_r, LD_D_bo_r, LD_HU_bo_r, L...
    SStream_concat0(O, "+r]");
    set_mem_access(MI, false);
    return;
    break;
  case 7:
    // MADDRS_Q_rrr1_L_L, MADDR_Q_rrr1_L_L, MADDS_Q_rrr1_L_L, MADDS_Q_rrr1_e_...
    SStream_concat0(O, "L, ");
    printOperand(MI, 2, O);
    SStream_concat0(O, "L, ");
    break;
  case 8:
    // MADDRS_Q_rrr1_U_U, MADDR_Q_rrr1_U_U, MADDS_Q_rrr1_U_U, MADDS_Q_rrr1_e_...
    SStream_concat0(O, "U, ");
    printOperand(MI, 2, O);
    SStream_concat0(O, "U, ");
    break;
  case 9:
    // ST_A_sro, ST_A_sro_v110
    SStream_concat0(O, ", %a15");
    return;
    break;
  case 10:
    // ST_B_sro, ST_B_sro_v110, ST_H_sro, ST_H_sro_v110, ST_W_sro, ST_W_sro_v...
    SStream_concat0(O, ", %d15");
    return;
    break;
  }


  // Fragment 4 encoded into 4 bits for 12 unique commands.
  switch ((Bits >> 28) & 15) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_B_rr_v110, ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ...
    printOperand(MI, 2, O);
    break;
  case 1:
    // ABSDIF_rc, ADDC_rc, ADDS_U_rc, ADDS_rc, ADDX_rc, ADD_rc, ANDN_rc, AND_...
    printSExtImm_9(MI, 2, O);
    return;
    break;
  case 2:
    // ADDIH_A_rlc, ADDIH_rlc, ADDI_rlc
    printSExtImm_16(MI, 2, O);
    return;
    break;
  case 3:
    // ADDSC_A_rr, ADD_F_rrr, CADDN_A_rcr_v110, CADDN_rcr, CADD_A_rcr_v110, C...
    printOperand(MI, 1, O);
    break;
  case 4:
    // ADDSC_A_srrs_v110
    printZExtImm_2(MI, 2, O);
    return;
    break;
  case 5:
    // ANDN_T, AND_ANDN_T, AND_AND_T, AND_NOR_T, AND_OR_T, AND_T, INSN_T, INS...
    printZExtImm_4(MI, 3, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 2, O);
    SStream_concat0(O, ", ");
    printZExtImm_4(MI, 4, O);
    return;
    break;
  case 6:
    // INSERT_rcrw
    printOperand(MI, 3, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 2, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 4, O);
    return;
    break;
  case 7:
    // JEQ_A_brr, JEQ_brc, JEQ_brr, JGE_U_brc, JGE_U_brr, JGE_brc, JGE_brr, J...
    printDisp15Imm(MI, 2, O);
    return;
    break;
  case 8:
    // LD_A_bo_bso, LD_A_bo_pos, LD_A_bo_pre, LD_BU_bo_bso, LD_BU_bo_pos, LD_...
    printSExtImm_10(MI, 2, O);
    return;
    break;
  case 9:
    // LD_A_slr, LD_A_slr_post, LD_A_slr_post_v110, LD_A_slr_v110, LD_BU_slr,...
    return;
    break;
  case 10:
    // MADDRS_Q_rrr1_L_L, MADDRS_Q_rrr1_U_U, MADDR_Q_rrr1_L_L, MADDR_Q_rrr1_U...
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 11:
    // MULR_Q_rr1_2LL, MULR_Q_rr1_2UU, MUL_Q_rr1_2LL, MUL_Q_rr1_2UU
    printZExtImm_2(MI, 3, O);
    return;
    break;
  }


  // Fragment 5 encoded into 4 bits for 14 unique commands.
  switch ((Bits >> 32) & 15) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_B_rr_v110, ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ...
    return;
    break;
  case 1:
    // ADDSC_A_rr, ADDSC_A_rr_v110, CADDN_A_rcr_v110, CADDN_rcr, CADD_A_rcr_v...
    SStream_concat0(O, ", ");
    break;
  case 2:
    // MADDMS_H_rrr1_LL, MADDM_H_rrr1_LL, MADDRS_H_rrr1_LL, MADDR_H_rrr1_LL, ...
    SStream_concat0(O, " LL, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 3:
    // MADDMS_H_rrr1_LU, MADDM_H_rrr1_LU, MADDRS_H_rrr1_LU, MADDR_H_rrr1_LU, ...
    SStream_concat0(O, " LU, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 4:
    // MADDMS_H_rrr1_UL, MADDM_H_rrr1_UL, MADDRS_H_rrr1_UL, MADDRS_H_rrr1_UL_...
    SStream_concat0(O, " UL, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 5:
    // MADDMS_H_rrr1_UU, MADDM_H_rrr1_UU, MADDRS_H_rrr1_UU, MADDR_H_rrr1_UU, ...
    SStream_concat0(O, " UU, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 6:
    // MADDS_Q_rrr1_L, MADDS_Q_rrr1_e_L, MADD_Q_rrr1_L, MADD_Q_rrr1_e_L, MSUB...
    SStream_concat0(O, " L, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 7:
    // MADDS_Q_rrr1_U, MADDS_Q_rrr1_e_U, MADD_Q_rrr1_U, MADD_Q_rrr1_e_U, MSUB...
    SStream_concat0(O, " U, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 8:
    // MULMS_H_rr1_LL2e, MULM_H_rr1_LL2e, MULR_H_rr1_LL2e, MUL_H_rr1_LL2e
    SStream_concat0(O, "LL, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 9:
    // MULMS_H_rr1_LU2e, MULM_H_rr1_LU2e, MULR_H_rr1_LU2e, MUL_H_rr1_LU2e
    SStream_concat0(O, "LU, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 10:
    // MULMS_H_rr1_UL2e, MULM_H_rr1_UL2e, MULR_H_rr1_UL2e, MUL_H_rr1_UL2e
    SStream_concat0(O, "UL, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 11:
    // MULMS_H_rr1_UU2e, MULM_H_rr1_UU2e, MULR_H_rr1_UU2e, MUL_H_rr1_UU2e
    SStream_concat0(O, "UU, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 12:
    // MUL_Q_rr1_2_L, MUL_Q_rr1_2_Le
    SStream_concat0(O, "L, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 13:
    // MUL_Q_rr1_2_U, MUL_Q_rr1_2_Ue
    SStream_concat0(O, "U, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  }


  // Fragment 6 encoded into 3 bits for 5 unique commands.
  switch ((Bits >> 36) & 7) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ADDSC_A_rr, ADDSC_A_rr_v110, DIFSC_A_rr_v110, MUL_Q_rr1_2, MUL_Q_rr1_2...
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 1:
    // CADDN_A_rcr_v110, CADDN_rcr, CADD_A_rcr_v110, CADD_rcr, MADDMS_rcr_v11...
    printSExtImm_9(MI, 3, O);
    return;
    break;
  case 2:
    // DEXTR_rrpw, DEXTR_rrrr, EXTR_U_rrpw, EXTR_U_rrrw, EXTR_rrpw, EXTR_rrrw...
    printOperand(MI, 3, O);
    break;
  case 3:
    // MADDMS_U_rcr_v110, MADDM_U_rcr_v110, MADD_U_rcr, MSUB_U_rcr
    printZExtImm_9(MI, 3, O);
    return;
    break;
  case 4:
    // MADDM_H_rrr1_v110, MADDM_Q_rrr1_v110, MADDRS_H_rrr1_v110, MADDRS_Q_rrr...
    printZExtImm_2(MI, 4, O);
    return;
    break;
  }


  // Fragment 7 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 39) & 1) {
    // INSERT_rcpw, INSERT_rrpw, INSERT_rrrr, INSERT_rrrw
    SStream_concat0(O, ", ");
    printOperand(MI, 4, O);
    return;
  } else {
    // DEXTR_rrpw, DEXTR_rrrr, EXTR_U_rrpw, EXTR_U_rrrw, EXTR_rrpw, EXTR_rrrw...
    return;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 61 && "Invalid register number!");

  static const char AsmStrs[] = {
  /* 0 */ "d10\0"
  /* 4 */ "e10\0"
  /* 8 */ "p10\0"
  /* 12 */ "a0\0"
  /* 15 */ "d0\0"
  /* 18 */ "e0\0"
  /* 21 */ "p0\0"
  /* 24 */ "A10_A11\0"
  /* 32 */ "a11\0"
  /* 36 */ "d11\0"
  /* 40 */ "A0_A1\0"
  /* 46 */ "a1\0"
  /* 49 */ "d1\0"
  /* 52 */ "a12\0"
  /* 56 */ "d12\0"
  /* 60 */ "e12\0"
  /* 64 */ "p12\0"
  /* 68 */ "a2\0"
  /* 71 */ "d2\0"
  /* 74 */ "e2\0"
  /* 77 */ "p2\0"
  /* 80 */ "A12_A13\0"
  /* 88 */ "a13\0"
  /* 92 */ "d13\0"
  /* 96 */ "A2_A3\0"
  /* 102 */ "a3\0"
  /* 105 */ "d3\0"
  /* 108 */ "a14\0"
  /* 112 */ "d14\0"
  /* 116 */ "e14\0"
  /* 120 */ "p14\0"
  /* 124 */ "a4\0"
  /* 127 */ "d4\0"
  /* 130 */ "e4\0"
  /* 133 */ "p4\0"
  /* 136 */ "A14_A15\0"
  /* 144 */ "a15\0"
  /* 148 */ "d15\0"
  /* 152 */ "A4_A5\0"
  /* 158 */ "a5\0"
  /* 161 */ "d5\0"
  /* 164 */ "a6\0"
  /* 167 */ "d6\0"
  /* 170 */ "e6\0"
  /* 173 */ "p6\0"
  /* 176 */ "A6_A7\0"
  /* 182 */ "a7\0"
  /* 185 */ "d7\0"
  /* 188 */ "a8\0"
  /* 191 */ "d8\0"
  /* 194 */ "e8\0"
  /* 197 */ "p8\0"
  /* 200 */ "A8_A9\0"
  /* 206 */ "a9\0"
  /* 209 */ "d9\0"
  /* 212 */ "pc\0"
  /* 215 */ "pcxi\0"
  /* 220 */ "sp\0"
  /* 223 */ "psw\0"
  /* 227 */ "fcx\0"
};
  static const uint8_t RegAsmOffset[] = {
    227, 212, 215, 223, 12, 46, 68, 102, 124, 158, 164, 182, 188, 206, 
    220, 32, 52, 88, 108, 144, 15, 49, 71, 105, 127, 161, 167, 185, 
    191, 209, 0, 36, 56, 92, 112, 148, 18, 74, 130, 170, 194, 4, 
    60, 116, 21, 77, 133, 173, 197, 8, 64, 120, 40, 96, 152, 176, 
    200, 24, 80, 136, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}
#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

bool printAliasInstr(MCInst *MI, uint64_t Address, SStream *OS) {
  return false;
}

#endif // PRINT_ALIAS_INSTR
