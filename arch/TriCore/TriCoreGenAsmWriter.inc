/* Capstone Disassembly Engine, http://www.capstone-engine.org */
/* By Nguyen Anh Quynh <aquynh@gmail.com>, 2013-2022, */
/*    Rot127 <unisono@quyllur.org> 2022-2023 */
/* Automatically generated file by the LLVM TableGen Disassembler Backend. */
/* Do not edit. */

#include <capstone/platform.h>
#include <assert.h>

/// getMnemonic - This method is automatically generated by tablegen
/// from the instruction set description.
MnemonicBitsInfo getMnemonic(MCInst *MI, SStream *O) {
  static const char AsmStrs[] = {
  /* 0 */ "sub %d15, \0"
  /* 11 */ "add %d15, \0"
  /* 22 */ "and %d15, \0"
  /* 33 */ "jne %d15, \0"
  /* 44 */ "jeq %d15, \0"
  /* 55 */ "or %d15, \0"
  /* 65 */ "jz.t %d15, \0"
  /* 77 */ "jnz.t %d15, \0"
  /* 90 */ "lt %d15, \0"
  /* 100 */ "mov %d15, \0"
  /* 111 */ "jz %d15, \0"
  /* 121 */ "jnz %d15, \0"
  /* 132 */ "ld.a %a15, %sp, \0"
  /* 149 */ "ld.w %a15, %sp, \0"
  /* 166 */ "sub.a %sp, \0"
  /* 178 */ "st.a %sp, \0"
  /* 189 */ "ftoq31 \0"
  /* 197 */ "CMPSWAP.W \0"
  /* 208 */ "addsc.a \0"
  /* 217 */ "add.a \0"
  /* 224 */ "ld.a \0"
  /* 230 */ "ge.a \0"
  /* 236 */ "jne.a \0"
  /* 243 */ "addih.a \0"
  /* 252 */ "movh.a \0"
  /* 260 */ "jeq.a \0"
  /* 267 */ "lt.a \0"
  /* 273 */ "st.a \0"
  /* 279 */ "mov.a \0"
  /* 286 */ "nez.a \0"
  /* 293 */ "jz.a \0"
  /* 299 */ "jnz.a \0"
  /* 306 */ "eqz.a \0"
  /* 313 */ "mov.aa \0"
  /* 321 */ "ld.da \0"
  /* 328 */ "st.da \0"
  /* 335 */ "lea \0"
  /* 340 */ "lha \0"
  /* 345 */ "sha \0"
  /* 350 */ "ja \0"
  /* 354 */ "jla \0"
  /* 359 */ "fcalla \0"
  /* 367 */ "crc32.b \0"
  /* 376 */ "sub.b \0"
  /* 383 */ "add.b \0"
  /* 390 */ "ld.b \0"
  /* 396 */ "absdif.b \0"
  /* 406 */ "min.b \0"
  /* 413 */ "eq.b \0"
  /* 419 */ "abs.b \0"
  /* 426 */ "adds.b \0"
  /* 434 */ "absdifs.b \0"
  /* 445 */ "abss.b \0"
  /* 453 */ "sat.b \0"
  /* 460 */ "dvinit.b \0"
  /* 470 */ "lt.b \0"
  /* 476 */ "st.b \0"
  /* 482 */ "max.b \0"
  /* 489 */ "eqany.b \0"
  /* 498 */ "csub \0"
  /* 504 */ "msub \0"
  /* 510 */ "rsub \0"
  /* 516 */ "subc \0"
  /* 522 */ "addc \0"
  /* 528 */ "ld.d \0"
  /* 534 */ "st.d \0"
  /* 540 */ "mov.d \0"
  /* 547 */ "cadd \0"
  /* 553 */ "madd \0"
  /* 559 */ "jned \0"
  /* 565 */ "nand \0"
  /* 571 */ "and.ge \0"
  /* 579 */ "sh.ge \0"
  /* 586 */ "xor.ge \0"
  /* 594 */ "jge \0"
  /* 599 */ "bmerge \0"
  /* 607 */ "disable \0"
  /* 616 */ "shuffle \0"
  /* 625 */ "and.ne \0"
  /* 633 */ "xor.ne \0"
  /* 641 */ "jne \0"
  /* 646 */ "msub.f \0"
  /* 654 */ "madd.f \0"
  /* 662 */ "qseed.f \0"
  /* 671 */ "mul.f \0"
  /* 678 */ "cmp.f \0"
  /* 685 */ "div.f \0"
  /* 692 */ "absdif \0"
  /* 700 */ "q31tof \0"
  /* 708 */ "itof \0"
  /* 714 */ "hptof \0"
  /* 721 */ "utof \0"
  /* 727 */ "sha.h \0"
  /* 734 */ "msub.h \0"
  /* 742 */ "msubad.h \0"
  /* 752 */ "madd.h \0"
  /* 760 */ "ld.h \0"
  /* 766 */ "absdif.h \0"
  /* 776 */ "sh.h \0"
  /* 782 */ "mul.h \0"
  /* 789 */ "msubm.h \0"
  /* 798 */ "msubadm.h \0"
  /* 809 */ "maddm.h \0"
  /* 818 */ "mulm.h \0"
  /* 826 */ "maddsum.h \0"
  /* 837 */ "min.h \0"
  /* 844 */ "clo.h \0"
  /* 851 */ "eq.h \0"
  /* 857 */ "msubr.h \0"
  /* 866 */ "msubadr.h \0"
  /* 877 */ "maddr.h \0"
  /* 886 */ "mulr.h \0"
  /* 894 */ "maddsur.h \0"
  /* 905 */ "abs.h \0"
  /* 912 */ "msubs.h \0"
  /* 921 */ "msubads.h \0"
  /* 932 */ "madds.h \0"
  /* 941 */ "absdifs.h \0"
  /* 952 */ "cls.h \0"
  /* 959 */ "msubms.h \0"
  /* 969 */ "msubadms.h \0"
  /* 981 */ "maddms.h \0"
  /* 991 */ "maddsums.h \0"
  /* 1003 */ "msubrs.h \0"
  /* 1013 */ "msubadrs.h \0"
  /* 1025 */ "maddrs.h \0"
  /* 1035 */ "maddsurs.h \0"
  /* 1047 */ "abss.h \0"
  /* 1055 */ "maddsus.h \0"
  /* 1066 */ "sat.h \0"
  /* 1073 */ "dvinit.h \0"
  /* 1083 */ "lt.h \0"
  /* 1089 */ "st.h \0"
  /* 1095 */ "maddsu.h \0"
  /* 1105 */ "max.h \0"
  /* 1112 */ "eqany.h \0"
  /* 1121 */ "clz.h \0"
  /* 1128 */ "addih \0"
  /* 1135 */ "sh \0"
  /* 1139 */ "movh \0"
  /* 1145 */ "addi \0"
  /* 1151 */ "jnei \0"
  /* 1157 */ "ji \0"
  /* 1161 */ "jli \0"
  /* 1166 */ "fcalli \0"
  /* 1174 */ "ftoi \0"
  /* 1180 */ "dvadj \0"
  /* 1187 */ "unpack \0"
  /* 1195 */ "imask \0"
  /* 1202 */ "sel \0"
  /* 1207 */ "updfl \0"
  /* 1214 */ "jl \0"
  /* 1218 */ "fcall \0"
  /* 1225 */ "syscall \0"
  /* 1234 */ "mul \0"
  /* 1239 */ "crcn \0"
  /* 1245 */ "caddn \0"
  /* 1252 */ "andn \0"
  /* 1258 */ "ixmin \0"
  /* 1265 */ "seln \0"
  /* 1271 */ "orn \0"
  /* 1276 */ "cmovn \0"
  /* 1283 */ "clo \0"
  /* 1288 */ "dvstep \0"
  /* 1296 */ "ftohp \0"
  /* 1303 */ "loop \0"
  /* 1309 */ "msub.q \0"
  /* 1317 */ "madd.q \0"
  /* 1325 */ "ld.q \0"
  /* 1331 */ "mul.q \0"
  /* 1338 */ "msubr.q \0"
  /* 1347 */ "maddr.q \0"
  /* 1356 */ "mulr.q \0"
  /* 1364 */ "msubs.q \0"
  /* 1373 */ "madds.q \0"
  /* 1382 */ "msubrs.q \0"
  /* 1392 */ "maddrs.q \0"
  /* 1402 */ "st.q \0"
  /* 1408 */ "and.eq \0"
  /* 1416 */ "sh.eq \0"
  /* 1423 */ "xor.eq \0"
  /* 1431 */ "jeq \0"
  /* 1436 */ "mfcr \0"
  /* 1442 */ "mtcr \0"
  /* 1448 */ "xnor \0"
  /* 1454 */ "xor \0"
  /* 1459 */ "bisr \0"
  /* 1465 */ "dextr \0"
  /* 1472 */ "shas \0"
  /* 1478 */ "abs \0"
  /* 1483 */ "msubs \0"
  /* 1490 */ "rsubs \0"
  /* 1497 */ "madds \0"
  /* 1504 */ "absdifs \0"
  /* 1513 */ "cls \0"
  /* 1518 */ "muls \0"
  /* 1524 */ "abss \0"
  /* 1530 */ "and.and.t \0"
  /* 1541 */ "sh.and.t \0"
  /* 1551 */ "or.and.t \0"
  /* 1561 */ "sh.nand.t \0"
  /* 1572 */ "and.andn.t \0"
  /* 1584 */ "sh.andn.t \0"
  /* 1595 */ "or.andn.t \0"
  /* 1606 */ "sh.orn.t \0"
  /* 1616 */ "insn.t \0"
  /* 1624 */ "and.or.t \0"
  /* 1634 */ "sh.or.t \0"
  /* 1643 */ "or.or.t \0"
  /* 1652 */ "and.nor.t \0"
  /* 1663 */ "sh.nor.t \0"
  /* 1673 */ "or.nor.t \0"
  /* 1683 */ "sh.xnor.t \0"
  /* 1694 */ "sh.xor.t \0"
  /* 1704 */ "ins.t \0"
  /* 1711 */ "st.t \0"
  /* 1717 */ "jz.t \0"
  /* 1723 */ "jnz.t \0"
  /* 1730 */ "bsplit \0"
  /* 1738 */ "dvinit \0"
  /* 1746 */ "and.lt \0"
  /* 1754 */ "sh.lt \0"
  /* 1761 */ "xor.lt \0"
  /* 1769 */ "jlt \0"
  /* 1774 */ "not \0"
  /* 1779 */ "insert \0"
  /* 1787 */ "ldmst \0"
  /* 1794 */ "madd.u \0"
  /* 1802 */ "and.ge.u \0"
  /* 1812 */ "sh.ge.u \0"
  /* 1821 */ "xor.ge.u \0"
  /* 1831 */ "jge.u \0"
  /* 1838 */ "mul.u \0"
  /* 1845 */ "ixmin.u \0"
  /* 1854 */ "dvstep.u \0"
  /* 1864 */ "extr.u \0"
  /* 1872 */ "rsubs.u \0"
  /* 1881 */ "madds.u \0"
  /* 1890 */ "muls.u \0"
  /* 1898 */ "dvinit.u \0"
  /* 1908 */ "and.lt.u \0"
  /* 1918 */ "sh.lt.u \0"
  /* 1927 */ "xor.lt.u \0"
  /* 1937 */ "jlt.u \0"
  /* 1944 */ "div.u \0"
  /* 1951 */ "mov.u \0"
  /* 1958 */ "ixmax.u \0"
  /* 1967 */ "ld.bu \0"
  /* 1974 */ "min.bu \0"
  /* 1982 */ "adds.bu \0"
  /* 1991 */ "sat.bu \0"
  /* 1999 */ "dvinit.bu \0"
  /* 2010 */ "lt.bu \0"
  /* 2017 */ "max.bu \0"
  /* 2025 */ "ld.hu \0"
  /* 2032 */ "min.hu \0"
  /* 2040 */ "subs.hu \0"
  /* 2049 */ "adds.hu \0"
  /* 2058 */ "sat.hu \0"
  /* 2066 */ "dvinit.hu \0"
  /* 2077 */ "lt.hu \0"
  /* 2084 */ "max.hu \0"
  /* 2092 */ "ftou \0"
  /* 2098 */ "loopu \0"
  /* 2105 */ "lt.wu \0"
  /* 2112 */ "div \0"
  /* 2117 */ "cmov \0"
  /* 2123 */ "crc32b.w \0"
  /* 2133 */ "ld.w \0"
  /* 2139 */ "swapmsk.w \0"
  /* 2150 */ "crc32l.w \0"
  /* 2160 */ "swap.w \0"
  /* 2168 */ "eq.w \0"
  /* 2174 */ "lt.w \0"
  /* 2180 */ "popcnt.w \0"
  /* 2190 */ "st.w \0"
  /* 2196 */ "ixmax \0"
  /* 2203 */ "subx \0"
  /* 2209 */ "ldlcx \0"
  /* 2216 */ "stlcx \0"
  /* 2223 */ "lducx \0"
  /* 2230 */ "stucx \0"
  /* 2237 */ "addx \0"
  /* 2243 */ "parity \0"
  /* 2251 */ "ftoq31z \0"
  /* 2260 */ "jgez \0"
  /* 2266 */ "jlez \0"
  /* 2272 */ "ftoiz \0"
  /* 2279 */ "jz \0"
  /* 2283 */ "clz \0"
  /* 2288 */ "jnz \0"
  /* 2293 */ "jgtz \0"
  /* 2299 */ "jltz \0"
  /* 2305 */ "ftouz \0"
  /* 2312 */ "CMPSWAP.W [+\0"
  /* 2325 */ "cache.i [+\0"
  /* 2336 */ "cachei.i [+\0"
  /* 2348 */ "cache.wi [+\0"
  /* 2360 */ "cachei.wi [+\0"
  /* 2373 */ "ldmst [+\0"
  /* 2382 */ "cache.w [+\0"
  /* 2393 */ "cachei.w [+\0"
  /* 2405 */ "# XRay Function Patchable RET.\0"
  /* 2436 */ "# XRay Typed Event Log.\0"
  /* 2460 */ "# XRay Custom Event Log.\0"
  /* 2485 */ "# XRay Function Enter.\0"
  /* 2508 */ "# XRay Tail Call Exit.\0"
  /* 2531 */ "# XRay Function Exit.\0"
  /* 2553 */ "addsc.at %d, %s2, %s1\0"
  /* 2575 */ "addsc.at %d, %s1, %s2\0"
  /* 2597 */ "LIFETIME_END\0"
  /* 2610 */ "PSEUDO_PROBE\0"
  /* 2623 */ "BUNDLE\0"
  /* 2630 */ "DBG_VALUE\0"
  /* 2640 */ "DBG_INSTR_REF\0"
  /* 2654 */ "DBG_PHI\0"
  /* 2662 */ "DBG_LABEL\0"
  /* 2672 */ "LIFETIME_START\0"
  /* 2687 */ "DBG_VALUE_LIST\0"
  /* 2702 */ "ld.a %a15, [\0"
  /* 2715 */ "ld.h %d15, [\0"
  /* 2728 */ "ld.bu %d15, [\0"
  /* 2742 */ "ld.w %d15, [\0"
  /* 2755 */ "CMPSWAP.W [\0"
  /* 2767 */ "st.a [\0"
  /* 2774 */ "st.da [\0"
  /* 2782 */ "st.b [\0"
  /* 2789 */ "st.d [\0"
  /* 2796 */ "st.h [\0"
  /* 2803 */ "cache.i [\0"
  /* 2813 */ "cachei.i [\0"
  /* 2824 */ "cache.wi [\0"
  /* 2835 */ "cachei.wi [\0"
  /* 2847 */ "st.q [\0"
  /* 2854 */ "ldmst [\0"
  /* 2862 */ "cache.w [\0"
  /* 2872 */ "cachei.w [\0"
  /* 2883 */ "swapmsk.w [\0"
  /* 2895 */ "swap.w [\0"
  /* 2904 */ "st.w [\0"
  /* 2911 */ "ldlcx [\0"
  /* 2919 */ "stlcx [\0"
  /* 2927 */ "lducx [\0"
  /* 2935 */ "stucx [\0"
  /* 2943 */ "st.a [%a15]\0"
  /* 2955 */ "st.b [%a15]\0"
  /* 2967 */ "st.h [%a15]\0"
  /* 2979 */ "st.w [%a15]\0"
  /* 2991 */ "sub.a\0"
  /* 2997 */ "add.a\0"
  /* 3003 */ "mov.a\0"
  /* 3009 */ "dsync\0"
  /* 3015 */ "isync\0"
  /* 3021 */ "rfe\0"
  /* 3025 */ "enable\0"
  /* 3032 */ "disable\0"
  /* 3040 */ "restore\0"
  /* 3048 */ "debug\0"
  /* 3054 */ "relck\0"
  /* 3060 */ "# FEntry call\0"
  /* 3074 */ "rfm\0"
  /* 3078 */ "nop\0"
  /* 3082 */ "fret\0"
  /* 3087 */ "wait\0"
  /* 3092 */ "trapv\0"
  /* 3098 */ "trapsv\0"
  /* 3105 */ "svlcx\0"
};
  static const uint32_t OpInfo0[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// INLINEASM_BR
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    2631U,	// DBG_VALUE
    2688U,	// DBG_VALUE_LIST
    2641U,	// DBG_INSTR_REF
    2655U,	// DBG_PHI
    2663U,	// DBG_LABEL
    0U,	// REG_SEQUENCE
    0U,	// COPY
    2624U,	// BUNDLE
    2673U,	// LIFETIME_START
    2598U,	// LIFETIME_END
    2611U,	// PSEUDO_PROBE
    0U,	// ARITH_FENCE
    0U,	// STACKMAP
    3061U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// PREALLOCATED_SETUP
    0U,	// PREALLOCATED_ARG
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    2486U,	// PATCHABLE_FUNCTION_ENTER
    2406U,	// PATCHABLE_RET
    2532U,	// PATCHABLE_FUNCTION_EXIT
    2509U,	// PATCHABLE_TAIL_CALL
    2461U,	// PATCHABLE_EVENT_CALL
    2437U,	// PATCHABLE_TYPED_EVENT_CALL
    0U,	// ICALL_BRANCH_FUNNEL
    0U,	// G_ASSERT_SEXT
    0U,	// G_ASSERT_ZEXT
    0U,	// G_ASSERT_ALIGN
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_SDIVREM
    0U,	// G_UDIVREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_BUILD_VECTOR
    0U,	// G_BUILD_VECTOR_TRUNC
    0U,	// G_CONCAT_VECTORS
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_FREEZE
    0U,	// G_INTRINSIC_FPTRUNC_ROUND
    0U,	// G_INTRINSIC_TRUNC
    0U,	// G_INTRINSIC_ROUND
    0U,	// G_INTRINSIC_LRINT
    0U,	// G_INTRINSIC_ROUNDEVEN
    0U,	// G_READCYCLECOUNTER
    0U,	// G_LOAD
    0U,	// G_SEXTLOAD
    0U,	// G_ZEXTLOAD
    0U,	// G_INDEXED_LOAD
    0U,	// G_INDEXED_SEXTLOAD
    0U,	// G_INDEXED_ZEXTLOAD
    0U,	// G_STORE
    0U,	// G_INDEXED_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_ATOMICRMW_FADD
    0U,	// G_ATOMICRMW_FSUB
    0U,	// G_ATOMICRMW_FMAX
    0U,	// G_ATOMICRMW_FMIN
    0U,	// G_FENCE
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INVOKE_REGION_START
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_SEXT_INREG
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_FSHL
    0U,	// G_FSHR
    0U,	// G_ROTR
    0U,	// G_ROTL
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDO
    0U,	// G_UADDE
    0U,	// G_USUBO
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SADDE
    0U,	// G_SSUBO
    0U,	// G_SSUBE
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_UADDSAT
    0U,	// G_SADDSAT
    0U,	// G_USUBSAT
    0U,	// G_SSUBSAT
    0U,	// G_USHLSAT
    0U,	// G_SSHLSAT
    0U,	// G_SMULFIX
    0U,	// G_UMULFIX
    0U,	// G_SMULFIXSAT
    0U,	// G_UMULFIXSAT
    0U,	// G_SDIVFIX
    0U,	// G_UDIVFIX
    0U,	// G_SDIVFIXSAT
    0U,	// G_UDIVFIXSAT
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FMAD
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FPOWI
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FLOG10
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_FABS
    0U,	// G_FCOPYSIGN
    0U,	// G_IS_FPCLASS
    0U,	// G_FCANONICALIZE
    0U,	// G_FMINNUM
    0U,	// G_FMAXNUM
    0U,	// G_FMINNUM_IEEE
    0U,	// G_FMAXNUM_IEEE
    0U,	// G_FMINIMUM
    0U,	// G_FMAXIMUM
    0U,	// G_PTR_ADD
    0U,	// G_PTRMASK
    0U,	// G_SMIN
    0U,	// G_SMAX
    0U,	// G_UMIN
    0U,	// G_UMAX
    0U,	// G_ABS
    0U,	// G_LROUND
    0U,	// G_LLROUND
    0U,	// G_BR
    0U,	// G_BRJT
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_CTTZ
    0U,	// G_CTTZ_ZERO_UNDEF
    0U,	// G_CTLZ
    0U,	// G_CTLZ_ZERO_UNDEF
    0U,	// G_CTPOP
    0U,	// G_BSWAP
    0U,	// G_BITREVERSE
    0U,	// G_FCEIL
    0U,	// G_FCOS
    0U,	// G_FSIN
    0U,	// G_FSQRT
    0U,	// G_FFLOOR
    0U,	// G_FRINT
    0U,	// G_FNEARBYINT
    0U,	// G_ADDRSPACE_CAST
    0U,	// G_BLOCK_ADDR
    0U,	// G_JUMP_TABLE
    0U,	// G_DYN_STACKALLOC
    0U,	// G_STRICT_FADD
    0U,	// G_STRICT_FSUB
    0U,	// G_STRICT_FMUL
    0U,	// G_STRICT_FDIV
    0U,	// G_STRICT_FREM
    0U,	// G_STRICT_FMA
    0U,	// G_STRICT_FSQRT
    0U,	// G_READ_REGISTER
    0U,	// G_WRITE_REGISTER
    0U,	// G_MEMCPY
    0U,	// G_MEMCPY_INLINE
    0U,	// G_MEMMOVE
    0U,	// G_MEMSET
    0U,	// G_BZERO
    0U,	// G_VECREDUCE_SEQ_FADD
    0U,	// G_VECREDUCE_SEQ_FMUL
    0U,	// G_VECREDUCE_FADD
    0U,	// G_VECREDUCE_FMUL
    0U,	// G_VECREDUCE_FMAX
    0U,	// G_VECREDUCE_FMIN
    0U,	// G_VECREDUCE_ADD
    0U,	// G_VECREDUCE_MUL
    0U,	// G_VECREDUCE_AND
    0U,	// G_VECREDUCE_OR
    0U,	// G_VECREDUCE_XOR
    0U,	// G_VECREDUCE_SMAX
    0U,	// G_VECREDUCE_SMIN
    0U,	// G_VECREDUCE_UMAX
    0U,	// G_VECREDUCE_UMIN
    0U,	// G_SBFX
    0U,	// G_UBFX
    4531U,	// ABSDIFS_B_rr_v110
    5038U,	// ABSDIFS_H_rr
    5601U,	// ABSDIFS_rc
    5601U,	// ABSDIFS_rr
    4493U,	// ABSDIF_B_rr
    4863U,	// ABSDIF_H_rr
    268440245U,	// ABSDIF_rc
    4789U,	// ABSDIF_rr
    4542U,	// ABSS_B_rr_v110
    5144U,	// ABSS_H_rr
    5621U,	// ABSS_rr
    16781732U,	// ABS_B_rr
    16782218U,	// ABS_H_rr
    16782791U,	// ABS_rr
    268440075U,	// ADDC_rc
    4619U,	// ADDC_rr
    536875252U,	// ADDIH_A_rlc
    536876137U,	// ADDIH_rlc
    536876154U,	// ADDI_rlc
    2576U,	// ADDSC_AT_rr_v110
    2554U,	// ADDSC_AT_rr_v120u
    4305U,	// ADDSC_A_rr_v110
    806359249U,	// ADDSC_A_rr_v120u
    1073746129U,	// ADDSC_A_srrs_v110
    33558737U,	// ADDSC_A_srrs_v120u
    6079U,	// ADDS_BU_rr_v110
    4523U,	// ADDS_B_rr_v110
    5030U,	// ADDS_H
    6146U,	// ADDS_HU
    5979U,	// ADDS_U
    268441435U,	// ADDS_U_rc
    268441051U,	// ADDS_rc
    5595U,	// ADDS_rr
    16782811U,	// ADDS_srr
    268441790U,	// ADDX_rc
    6334U,	// ADDX_rr
    2998U,	// ADD_A_rr
    2101466U,	// ADD_A_src
    16781530U,	// ADD_A_srr
    4480U,	// ADD_B_rr
    806359696U,	// ADD_F_rrr
    4850U,	// ADD_H_rr
    268440101U,	// ADD_rc
    4645U,	// ADD_rr
    2101797U,	// ADD_src
    2101260U,	// ADD_src_15a
    2167333U,	// ADD_src_a15
    16781861U,	// ADD_srr
    16781324U,	// ADD_srr_15a
    16847397U,	// ADD_srr_a15
    1342182953U,	// ANDN_T
    268440805U,	// ANDN_rc
    5349U,	// ANDN_rr
    1342182949U,	// AND_ANDN_T
    1342182907U,	// AND_AND_T
    268440961U,	// AND_EQ_rc
    5505U,	// AND_EQ_rr
    268441355U,	// AND_GE_U_rc
    5899U,	// AND_GE_U_rr
    268440124U,	// AND_GE_rc
    4668U,	// AND_GE_rr
    268441461U,	// AND_LT_U_rc
    6005U,	// AND_LT_U_rr
    268441299U,	// AND_LT_rc
    5843U,	// AND_LT_rr
    268440178U,	// AND_NE_rc
    4722U,	// AND_NE_rr
    1342183029U,	// AND_NOR_T
    1342183001U,	// AND_OR_T
    1342182911U,	// AND_T
    268440119U,	// AND_rc
    4663U,	// AND_rr
    139287U,	// AND_src
    16781879U,	// AND_srr
    13748U,	// BISR_rc
    140724U,	// BISR_sc
    4696U,	// BMAERGE_rr
    16783043U,	// BSPLIT_rr
    3349246U,	// CACHEI_I_bo_bso
    3414782U,	// CACHEI_I_bo_pos
    3348769U,	// CACHEI_I_bo_pre
    3349268U,	// CACHEI_WI_bo_bso
    3414804U,	// CACHEI_WI_bo_pos
    3348793U,	// CACHEI_WI_bo_pre
    3349305U,	// CACHEI_W_bo_bso
    334649U,	// CACHEI_W_bo_c
    3414841U,	// CACHEI_W_bo_pos
    3348826U,	// CACHEI_W_bo_pre
    400185U,	// CACHEI_W_bo_r
    3349236U,	// CACHE_I_bo_bso
    334580U,	// CACHE_I_bo_c
    3414772U,	// CACHE_I_bo_pos
    3348758U,	// CACHE_I_bo_pre
    400116U,	// CACHE_I_bo_r
    3349257U,	// CACHE_WI_bo_bso
    334601U,	// CACHE_WI_bo_c
    3414793U,	// CACHE_WI_bo_pos
    3348781U,	// CACHE_WI_bo_pre
    400137U,	// CACHE_WI_bo_r
    3349295U,	// CACHE_W_bo_bso
    334639U,	// CACHE_W_bo_c
    3414831U,	// CACHE_W_bo_pos
    3348815U,	// CACHE_W_bo_pre
    400175U,	// CACHE_W_bo_r
    806360286U,	// CADDN_rcr
    4199646U,	// CADDN_rrr
    2168030U,	// CADDN_src
    806359588U,	// CADD_rcr
    4198948U,	// CADD_rrr
    2167332U,	// CADD_src
    16745U,	// CALLA_b
    152720U,	// CALLI_rr
    17604U,	// CALL_b
    25796U,	// CALL_sb
    16782157U,	// CLO_H_rr
    16782596U,	// CLO_rr
    16782265U,	// CLS_H_rr
    16782826U,	// CLS_rr
    16782434U,	// CLZ_H_rr
    16783596U,	// CLZ_rr
    2168061U,	// CMOVN_src
    16848125U,	// CMOVN_srr
    2168902U,	// CMOV_src
    16848966U,	// CMOV_srr
    5462724U,	// CMPSWAP_W_bo_bso
    5462724U,	// CMPSWAP_W_bo_c
    5528260U,	// CMPSWAP_W_bo_pos
    5462281U,	// CMPSWAP_W_bo_pre
    23089350U,	// CMPSWAP_W_bo_r
    4775U,	// CMP_F_rr
    806361164U,	// CRC32B_W_rr
    806361191U,	// CRC32L_W_rr
    806359408U,	// CRC32_B_rr
    4199640U,	// CRCN_rrr
    4198899U,	// CSUBN_rrr
    4198899U,	// CSUB_rrr
    3049U,	// DEBUG_sr
    3049U,	// DEBUG_sys
    5562U,	// DEXTR_rrpw
    5562U,	// DEXTR_rrrr
    3033U,	// DISABLE_sys
    135776U,	// DISABLE_sys_1
    4782U,	// DIV_F_rr
    6041U,	// DIV_U_rr
    6209U,	// DIV_rr
    3010U,	// DSYNC_sys
    806360221U,	// DVADJ_rrr
    6096U,	// DVINIT_BU_rr
    4557U,	// DVINIT_B_rr
    6163U,	// DVINIT_HU_rr
    5170U,	// DVINIT_H_rr
    5995U,	// DVINIT_U_rr
    5835U,	// DVINIT_rr
    806360895U,	// DVSTEP_U_rrr
    806360329U,	// DVSTEP_rrr
    3026U,	// ENABLE_sys
    268440042U,	// EQANY_B_rc
    4586U,	// EQANY_B_rr
    268440665U,	// EQANY_H_rc
    5209U,	// EQANY_H_rr
    16781619U,	// EQZ_A_rr
    4358U,	// EQ_A_rr
    4510U,	// EQ_B_rr
    4948U,	// EQ_H_rr
    6265U,	// EQ_W_rr
    268440965U,	// EQ_rc
    5509U,	// EQ_rr
    2101294U,	// EQ_src
    16781358U,	// EQ_srr
    5961U,	// EXTR_U_rrpw
    5961U,	// EXTR_U_rrrr
    5961U,	// EXTR_U_rrrw
    5563U,	// EXTR_rrpw
    5563U,	// EXTR_rrrr
    5563U,	// EXTR_rrrw
    16744U,	// FCALLA_b
    152719U,	// FCALLA_i
    17603U,	// FCALL_b
    3083U,	// FRET_sr
    3083U,	// FRET_sys
    16782609U,	// FTOHP_rr
    16783585U,	// FTOIZ_rr
    16782487U,	// FTOI_rr
    6348U,	// FTOQ31Z_rr
    4286U,	// FTOQ31_rr
    16783618U,	// FTOUZ_rr
    16783405U,	// FTOU_rr
    4327U,	// GE_A_rr
    268441359U,	// GE_U_rc
    5903U,	// GE_U_rr
    268440128U,	// GE_rc
    4672U,	// GE_rr
    16782027U,	// HPTOF_rr
    5292U,	// IMASK_rcpw
    5292U,	// IMASK_rcrw
    5292U,	// IMASK_rrpw
    5292U,	// IMASK_rrrw
    5876U,	// INSERT_rcpw
    5876U,	// INSERT_rcrr
    5876U,	// INSERT_rcrw
    5876U,	// INSERT_rrpw
    5876U,	// INSERT_rrrr
    5876U,	// INSERT_rrrw
    1342182993U,	// INSN_T
    1342183081U,	// INS_T
    3016U,	// ISYNC_sys
    16782021U,	// ITOF_rr
    806360999U,	// IXMAX_U_rrr
    806361237U,	// IXMAX_rrr
    806360886U,	// IXMIN_U_rrr
    806360299U,	// IXMIN_rrr
    16735U,	// JA_b
    1610617093U,	// JEQ_A_brr
    1617958296U,	// JEQ_brc
    1610618264U,	// JEQ_brr
    28717U,	// JEQ_sbc1
    28717U,	// JEQ_sbc2
    8392749U,	// JEQ_sbr1
    8392749U,	// JEQ_sbr2
    8394965U,	// JGEZ_sbr
    1617958696U,	// JGE_U_brc
    1610618664U,	// JGE_U_brr
    1617957459U,	// JGE_brc
    1610617427U,	// JGE_brr
    8394998U,	// JGTZ_sbr
    152710U,	// JI_rr
    136326U,	// JI_sr
    16739U,	// JLA_b
    8394971U,	// JLEZ_sbr
    152714U,	// JLI_rr
    8395004U,	// JLTZ_sbr
    1617958802U,	// JLT_U_brc
    1610618770U,	// JLT_U_brr
    1617958634U,	// JLT_brc
    1610618602U,	// JLT_brr
    17599U,	// JL_b
    1617957424U,	// JNED_brc
    1610617392U,	// JNED_brr
    1617958016U,	// JNEI_brc
    1610617984U,	// JNEI_brr
    1610617069U,	// JNE_A_brr
    1617957506U,	// JNE_brc
    1610617474U,	// JNE_brr
    28706U,	// JNE_sbc1
    28706U,	// JNE_sbc2
    8392738U,	// JNE_sbr1
    8392738U,	// JNE_sbr2
    1610617132U,	// JNZ_A_brr
    8393004U,	// JNZ_A_sbr
    1610618556U,	// JNZ_T_brn
    8392782U,	// JNZ_T_sbrn
    24698U,	// JNZ_sb
    8394993U,	// JNZ_sbr
    1610617126U,	// JZ_A_brr
    8392998U,	// JZ_A_sbr
    1610618550U,	// JZ_T_brn
    8392770U,	// JZ_T_sbrn
    24688U,	// JZ_sb
    8394984U,	// JZ_sbr
    17569U,	// J_b
    25761U,	// J_sb
    166050U,	// LDLCX_abs
    3349344U,	// LDLCX_bo_bso
    38652U,	// LDMST_abs
    5462823U,	// LDMST_bo_bso
    5462823U,	// LDMST_bo_c
    5528359U,	// LDMST_bo_pos
    5462342U,	// LDMST_bo_pre
    23090940U,	// LDMST_bo_r
    166064U,	// LDUCX_abs
    3349360U,	// LDUCX_bo_bso
    9441505U,	// LD_A_abs
    1929842913U,	// LD_A_bo_bso
    67571937U,	// LD_A_bo_c
    1963397345U,	// LD_A_bo_pos
    1929908449U,	// LD_A_bo_pre
    101126369U,	// LD_A_bo_r
    50794721U,	// LD_A_bol
    139397U,	// LD_A_sc
    2198278369U,	// LD_A_slr
    2231832801U,	// LD_A_slr_post
    594145U,	// LD_A_slro
    24320655U,	// LD_A_sro
    9443248U,	// LD_BU_abs
    1929844656U,	// LD_BU_bo_bso
    67573680U,	// LD_BU_bo_c
    1963399088U,	// LD_BU_bo_pos
    1929910192U,	// LD_BU_bo_pre
    101128112U,	// LD_BU_bo_r
    50796464U,	// LD_BU_bol
    2198280112U,	// LD_BU_slr
    2231834544U,	// LD_BU_slr_post
    595888U,	// LD_BU_slro
    24320681U,	// LD_BU_sro
    9441671U,	// LD_B_abs
    1929843079U,	// LD_B_bo_bso
    67572103U,	// LD_B_bo_c
    1963397511U,	// LD_B_bo_pos
    1929908615U,	// LD_B_bo_pre
    101126535U,	// LD_B_bo_r
    50794887U,	// LD_B_bol
    9441602U,	// LD_DA_abs
    1929843010U,	// LD_DA_bo_bso
    67572034U,	// LD_DA_bo_c
    1963397442U,	// LD_DA_bo_pos
    1929908546U,	// LD_DA_bo_pre
    101126466U,	// LD_DA_bo_r
    9441809U,	// LD_D_abs
    1929843217U,	// LD_D_bo_bso
    67572241U,	// LD_D_bo_c
    1963397649U,	// LD_D_bo_pos
    1929908753U,	// LD_D_bo_pre
    101126673U,	// LD_D_bo_r
    9443306U,	// LD_HU_abs
    1929844714U,	// LD_HU_bo_bso
    67573738U,	// LD_HU_bo_c
    1963399146U,	// LD_HU_bo_pos
    1929910250U,	// LD_HU_bo_pre
    101128170U,	// LD_HU_bo_r
    50796522U,	// LD_HU_bol
    9442041U,	// LD_H_abs
    1929843449U,	// LD_H_bo_bso
    67572473U,	// LD_H_bo_c
    1963397881U,	// LD_H_bo_pos
    1929908985U,	// LD_H_bo_pre
    101126905U,	// LD_H_bo_r
    50795257U,	// LD_H_bol
    2198278905U,	// LD_H_slr
    2231833337U,	// LD_H_slr_post
    594681U,	// LD_H_slro
    24320668U,	// LD_H_sro
    9442606U,	// LD_Q_abs
    1929844014U,	// LD_Q_bo_bso
    67573038U,	// LD_Q_bo_c
    1963398446U,	// LD_Q_bo_pos
    1929909550U,	// LD_Q_bo_pre
    101127470U,	// LD_Q_bo_r
    9443414U,	// LD_W_abs
    1929844822U,	// LD_W_bo_bso
    67573846U,	// LD_W_bo_c
    1963399254U,	// LD_W_bo_pos
    1929910358U,	// LD_W_bo_pre
    101128278U,	// LD_W_bo_r
    50796630U,	// LD_W_bol
    139414U,	// LD_W_sc
    2198280278U,	// LD_W_slr
    2231834710U,	// LD_W_slr_post
    596054U,	// LD_W_slro
    24320695U,	// LD_W_sro
    9441616U,	// LEA_abs
    1929843024U,	// LEA_bo_bso
    50794832U,	// LEA_bol
    9441621U,	// LHA_abs
    43059U,	// LOOPU_brr
    10491160U,	// LOOP_brr
    8394008U,	// LOOP_sbr
    4364U,	// LT_A_rr
    4567U,	// LT_B
    6107U,	// LT_BU
    5180U,	// LT_H
    6174U,	// LT_HU
    268441465U,	// LT_U_rc
    6009U,	// LT_U_rr
    6271U,	// LT_W
    6202U,	// LT_WU
    268441303U,	// LT_rc
    5847U,	// LT_rr
    2101339U,	// LT_src
    16781403U,	// LT_srr
    4199382U,	// MADDMS_H_rrr1_LL
    4199382U,	// MADDMS_H_rrr1_LU
    4199382U,	// MADDMS_H_rrr1_UL
    4199382U,	// MADDMS_H_rrr1_UU
    4199210U,	// MADDM_H_rrr1_LL
    4199210U,	// MADDM_H_rrr1_LU
    4199210U,	// MADDM_H_rrr1_UL
    4199210U,	// MADDM_H_rrr1_UU
    4199426U,	// MADDRS_H_rrr1_DcEdDaDbUL
    4199426U,	// MADDRS_H_rrr1_LL
    4199426U,	// MADDRS_H_rrr1_LU
    4199426U,	// MADDRS_H_rrr1_UL
    4199426U,	// MADDRS_H_rrr1_UU
    2537559409U,	// MADDRS_Q_rrr1_L_L
    2554336625U,	// MADDRS_Q_rrr1_U_U
    4199278U,	// MADDR_H_rrr1_DcEdDaDbUL
    4199278U,	// MADDR_H_rrr1_LL
    4199278U,	// MADDR_H_rrr1_LU
    4199278U,	// MADDR_H_rrr1_UL
    4199278U,	// MADDR_H_rrr1_UU
    2537559364U,	// MADDR_Q_rrr1_L_L
    2554336580U,	// MADDR_Q_rrr1_U_U
    4199392U,	// MADDSUMS_H_rrr1_LL
    4199392U,	// MADDSUMS_H_rrr1_LU
    4199392U,	// MADDSUMS_H_rrr1_UL
    4199392U,	// MADDSUMS_H_rrr1_UU
    4199227U,	// MADDSUM_H_rrr1_LL
    4199227U,	// MADDSUM_H_rrr1_LU
    4199227U,	// MADDSUM_H_rrr1_UL
    4199227U,	// MADDSUM_H_rrr1_UU
    4199436U,	// MADDSURS_H_rrr1_LL
    4199436U,	// MADDSURS_H_rrr1_LU
    4199436U,	// MADDSURS_H_rrr1_UL
    4199436U,	// MADDSURS_H_rrr1_UU
    4199295U,	// MADDSUR_H_rrr1_LL
    4199295U,	// MADDSUR_H_rrr1_LU
    4199295U,	// MADDSUR_H_rrr1_UL
    4199295U,	// MADDSUR_H_rrr1_UU
    4199456U,	// MADDSUS_H_rrr1_LL
    4199456U,	// MADDSUS_H_rrr1_LU
    4199456U,	// MADDSUS_H_rrr1_UL
    4199456U,	// MADDSUS_H_rrr1_UU
    4199496U,	// MADDSU_H_rrr1_LL
    4199496U,	// MADDSU_H_rrr1_LU
    4199496U,	// MADDSU_H_rrr1_UL
    4199496U,	// MADDSU_H_rrr1_UU
    4199333U,	// MADDS_H_rrr1_LL
    4199333U,	// MADDS_H_rrr1_LU
    4199333U,	// MADDS_H_rrr1_UL
    4199333U,	// MADDS_H_rrr1_UU
    4199774U,	// MADDS_Q_rrr1
    4199774U,	// MADDS_Q_rrr1_L
    2537559390U,	// MADDS_Q_rrr1_L_L
    4199774U,	// MADDS_Q_rrr1_U
    2554336606U,	// MADDS_Q_rrr1_U_U
    4199774U,	// MADDS_Q_rrr1_e
    4199774U,	// MADDS_Q_rrr1_e_L
    2537559390U,	// MADDS_Q_rrr1_e_L_L
    4199774U,	// MADDS_Q_rrr1_e_U
    2554336606U,	// MADDS_Q_rrr1_e_U_U
    806360922U,	// MADDS_U_rcr
    806360922U,	// MADDS_U_rcr_e
    4200282U,	// MADDS_U_rrr2
    4200282U,	// MADDS_U_rrr2_e
    806360538U,	// MADDS_rcr
    806360538U,	// MADDS_rcr_e
    4199898U,	// MADDS_rrr2
    4199898U,	// MADDS_rrr2_e
    4199055U,	// MADD_F_rrr
    4199153U,	// MADD_H_rrr1_LL
    4199153U,	// MADD_H_rrr1_LU
    4199153U,	// MADD_H_rrr1_UL
    4199153U,	// MADD_H_rrr1_UU
    4199718U,	// MADD_Q_rrr1
    4199718U,	// MADD_Q_rrr1_L
    2537559334U,	// MADD_Q_rrr1_L_L
    4199718U,	// MADD_Q_rrr1_U
    2554336550U,	// MADD_Q_rrr1_U_U
    4199718U,	// MADD_Q_rrr1_e
    4199718U,	// MADD_Q_rrr1_e_L
    2537559334U,	// MADD_Q_rrr1_e_L_L
    4199718U,	// MADD_Q_rrr1_e_U
    2554336550U,	// MADD_Q_rrr1_e_U_U
    806360835U,	// MADD_U_rcr
    4200195U,	// MADD_U_rrr2
    806359594U,	// MADD_rcr
    806359594U,	// MADD_rcr_e
    4198954U,	// MADD_rrr2
    4198954U,	// MADD_rrr2_e
    4579U,	// MAX_B
    6114U,	// MAX_BU
    5202U,	// MAX_H
    6181U,	// MAX_HU
    268441513U,	// MAX_U_rc
    6057U,	// MAX_U_rr
    268441751U,	// MAX_rc
    6295U,	// MAX_rr
    11539869U,	// MFCR_rlc
    4503U,	// MIN_B
    6071U,	// MIN_BU
    4934U,	// MIN_H
    6129U,	// MIN_HU
    268441400U,	// MIN_U_rc
    5944U,	// MIN_U_rr
    268440813U,	// MIN_rc
    5357U,	// MIN_rr
    11538685U,	// MOVH_A_rlc
    11539572U,	// MOVH_rlc
    17830202U,	// MOV_AA_rr
    16781626U,	// MOV_AA_srr
    3004U,	// MOV_A_rr
    24121624U,	// MOV_A_src
    16781592U,	// MOV_A_srr
    17830429U,	// MOV_D_rr
    16781853U,	// MOV_D_srr
    11540384U,	// MOV_U_rlc
    11540551U,	// MOV_rlcDc
    11540551U,	// MOV_rlcEc
    17832007U,	// MOV_rrDcDb
    6215U,	// MOV_rrEcDaDb
    17832007U,	// MOV_rrEcDb
    139365U,	// MOV_sc
    2103367U,	// MOV_srcDa
    2103367U,	// MOV_srcEa
    16783431U,	// MOV_srr
    4199370U,	// MSUBADMS_H_rrr1_LL
    4199370U,	// MSUBADMS_H_rrr1_LU
    4199370U,	// MSUBADMS_H_rrr1_UL
    4199370U,	// MSUBADMS_H_rrr1_UU
    4199199U,	// MSUBADM_H_rrr1_LL
    4199199U,	// MSUBADM_H_rrr1_LU
    4199199U,	// MSUBADM_H_rrr1_UL
    4199199U,	// MSUBADM_H_rrr1_UU
    4199414U,	// MSUBADRS_H_rrr1_LL
    4199414U,	// MSUBADRS_H_rrr1_LU
    4199414U,	// MSUBADRS_H_rrr1_UL
    4199414U,	// MSUBADRS_H_rrr1_UU
    4199267U,	// MSUBADR_H_rrr1_LL
    4199267U,	// MSUBADR_H_rrr1_LU
    4199267U,	// MSUBADR_H_rrr1_UL
    4199267U,	// MSUBADR_H_rrr1_UU
    4199322U,	// MSUBADS_H_rrr1_LL
    4199322U,	// MSUBADS_H_rrr1_LU
    4199322U,	// MSUBADS_H_rrr1_UL
    4199322U,	// MSUBADS_H_rrr1_UU
    4199143U,	// MSUBAD_H_rrr1_LL
    4199143U,	// MSUBAD_H_rrr1_LU
    4199143U,	// MSUBAD_H_rrr1_UL
    4199143U,	// MSUBAD_H_rrr1_UU
    4199360U,	// MSUBMS_H_rrr1_LL
    4199360U,	// MSUBMS_H_rrr1_LU
    4199360U,	// MSUBMS_H_rrr1_UL
    4199360U,	// MSUBMS_H_rrr1_UU
    4199190U,	// MSUBM_H_rrr1_LL
    4199190U,	// MSUBM_H_rrr1_LU
    4199190U,	// MSUBM_H_rrr1_UL
    4199190U,	// MSUBM_H_rrr1_UU
    4199404U,	// MSUBRS_H_rrr1_DcEdDaDbUL
    4199404U,	// MSUBRS_H_rrr1_LL
    4199404U,	// MSUBRS_H_rrr1_LU
    4199404U,	// MSUBRS_H_rrr1_UL
    4199404U,	// MSUBRS_H_rrr1_UU
    2537559399U,	// MSUBRS_Q_rrr1_L_L
    2554336615U,	// MSUBRS_Q_rrr1_U_U
    4199258U,	// MSUBR_H_rrr1_DcEdDaDbUL
    4199258U,	// MSUBR_H_rrr1_LL
    4199258U,	// MSUBR_H_rrr1_LU
    4199258U,	// MSUBR_H_rrr1_UL
    4199258U,	// MSUBR_H_rrr1_UU
    2537559355U,	// MSUBR_Q_rrr1_L_L
    2554336571U,	// MSUBR_Q_rrr1_U_U
    4199313U,	// MSUBS_H_rrr1_LL
    4199313U,	// MSUBS_H_rrr1_LU
    4199313U,	// MSUBS_H_rrr1_UL
    4199313U,	// MSUBS_H_rrr1_UU
    4199765U,	// MSUBS_Q_rrr1
    4199765U,	// MSUBS_Q_rrr1_L
    2537559381U,	// MSUBS_Q_rrr1_L_L
    4199765U,	// MSUBS_Q_rrr1_U
    2554336597U,	// MSUBS_Q_rrr1_U_U
    4199765U,	// MSUBS_Q_rrr1_e
    4199765U,	// MSUBS_Q_rrr1_e_L
    2537559381U,	// MSUBS_Q_rrr1_e_L_L
    4199765U,	// MSUBS_Q_rrr1_e_U
    2554336597U,	// MSUBS_Q_rrr1_e_U_U
    806360922U,	// MSUBS_U_rcr
    806360922U,	// MSUBS_U_rcr_e
    4200282U,	// MSUBS_U_rrr2
    4200282U,	// MSUBS_U_rrr2_e
    806360524U,	// MSUBS_rcr
    806360524U,	// MSUBS_rcr_e
    4199884U,	// MSUBS_rrr2
    4199884U,	// MSUBS_rrr2_e
    4199047U,	// MSUB_F_rrr
    4199135U,	// MSUB_H_rrr1_LL
    4199135U,	// MSUB_H_rrr1_LU
    4199135U,	// MSUB_H_rrr1_UL
    4199135U,	// MSUB_H_rrr1_UU
    4199710U,	// MSUB_Q_rrr1
    4199710U,	// MSUB_Q_rrr1_L
    2537559326U,	// MSUB_Q_rrr1_L_L
    4199710U,	// MSUB_Q_rrr1_U
    2554336542U,	// MSUB_Q_rrr1_U_U
    4199710U,	// MSUB_Q_rrr1_e
    4199710U,	// MSUB_Q_rrr1_e_L
    2537559326U,	// MSUB_Q_rrr1_e_L_L
    4199710U,	// MSUB_Q_rrr1_e_U
    2554336542U,	// MSUB_Q_rrr1_e_U_U
    806360835U,	// MSUB_U_rcr
    4200195U,	// MSUB_U_rrr2
    806359545U,	// MSUB_rcr
    806359545U,	// MSUB_rcr_e
    4198905U,	// MSUB_rrr2
    4198905U,	// MSUB_rrr2_e
    46499U,	// MTCR_rlc
    4915U,	// MULM_H_rr1_LL2e
    4915U,	// MULM_H_rr1_LU2e
    4915U,	// MULM_H_rr1_UL2e
    4915U,	// MULM_H_rr1_UU2e
    4983U,	// MULR_H_rr1_LL2e
    4983U,	// MULR_H_rr1_LU2e
    4983U,	// MULR_H_rr1_UL2e
    4983U,	// MULR_H_rr1_UU2e
    2801800525U,	// MULR_Q_rr1_2LL
    2818577741U,	// MULR_Q_rr1_2UU
    268441443U,	// MULS_U_rc
    5987U,	// MULS_U_rr2
    268441071U,	// MULS_rc
    5615U,	// MULS_rr2
    4768U,	// MUL_F_rrr
    4879U,	// MUL_H_rr1_LL2e
    4879U,	// MUL_H_rr1_LU2e
    4879U,	// MUL_H_rr1_UL2e
    4879U,	// MUL_H_rr1_UU2e
    2801800500U,	// MUL_Q_rr1_2LL
    2818577716U,	// MUL_Q_rr1_2UU
    5428U,	// MUL_Q_rr1_2_L
    5428U,	// MUL_Q_rr1_2_Le
    5428U,	// MUL_Q_rr1_2_U
    5428U,	// MUL_Q_rr1_2_Ue
    5428U,	// MUL_Q_rr1_2__
    5428U,	// MUL_Q_rr1_2__e
    268441391U,	// MUL_U_rc
    5935U,	// MUL_U_rr2
    268440787U,	// MUL_rc
    268440787U,	// MUL_rc_e
    5331U,	// MUL_rr2
    5331U,	// MUL_rr2_e
    16782547U,	// MUL_srr
    1342182941U,	// NAND_T
    268440118U,	// NAND_rc
    4662U,	// NAND_rr
    16781599U,	// NEZ_A
    4334U,	// NE_A
    268440182U,	// NE_rc
    4726U,	// NE_rr
    3079U,	// NOP_sr
    3079U,	// NOP_sys
    1342183033U,	// NOR_T
    268441002U,	// NOR_rc
    5546U,	// NOR_rr
    136943U,	// NOT_sr
    1342182986U,	// ORN_T
    268440824U,	// ORN_rc
    5368U,	// ORN_rr
    1342182972U,	// OR_ANDN_T
    1342182928U,	// OR_AND_T
    268440977U,	// OR_EQ_rc
    5521U,	// OR_EQ_rr
    268441375U,	// OR_GE_U_rc
    5919U,	// OR_GE_U_rr
    268440140U,	// OR_GE_rc
    4684U,	// OR_GE_rr
    268441481U,	// OR_LT_U_rc
    6025U,	// OR_LT_U_rr
    268441315U,	// OR_LT_rc
    5859U,	// OR_LT_rr
    268440187U,	// OR_NE_rc
    4731U,	// OR_NE_rr
    1342183050U,	// OR_NOR_T
    1342183020U,	// OR_OR_T
    1342183005U,	// OR_T
    268441003U,	// OR_rc
    5547U,	// OR_rr
    139320U,	// OR_sc
    16782763U,	// OR_srr
    806360230U,	// PACK_rrr
    16783556U,	// PARITY_rr
    16783493U,	// POPCNT_W_rr
    4797U,	// Q31TOF_rr
    16781975U,	// QSEED_F_rr
    3041U,	// RESTORE_sys
    3084U,	// RET_sr
    3084U,	// RET_sys
    3022U,	// RFE_sr
    3022U,	// RFE_sys
    3075U,	// RFM_sys
    3055U,	// RSLCX_sys
    3041U,	// RSTV_sys
    268441425U,	// RSUBS_U_rc
    268441043U,	// RSUBS_rc
    268440063U,	// RSUB_rc
    135679U,	// RSUB_sr
    16783304U,	// SAT_BU_rr
    137160U,	// SAT_BU_sr
    16781766U,	// SAT_B_rr
    135622U,	// SAT_B_sr
    16783371U,	// SAT_HU_rr
    137227U,	// SAT_HU_sr
    16782379U,	// SAT_H_rr
    136235U,	// SAT_H_sr
    806360306U,	// SELN_rcr
    4199666U,	// SELN_rrr
    806360243U,	// SEL_rcr
    4199603U,	// SEL_rrr
    268441025U,	// SHAS_rc
    5569U,	// SHAS_rr
    268440280U,	// SHA_H_rc
    4824U,	// SHA_H_rr
    268439898U,	// SHA_rc
    4442U,	// SHA_rr
    2101594U,	// SHA_src
    268440169U,	// SHUFFLE_rc
    1342182961U,	// SH_ANDN_T
    1342182918U,	// SH_AND_T
    268440969U,	// SH_EQ_rc
    5513U,	// SH_EQ_rr
    268441365U,	// SH_GE_U_rc
    5909U,	// SH_GE_U_rr
    268440132U,	// SH_GE_rc
    4676U,	// SH_GE_rr
    268440329U,	// SH_H_rc
    4873U,	// SH_H_rr
    268441471U,	// SH_LT_U_rc
    6015U,	// SH_LT_U_rr
    268441307U,	// SH_LT_rc
    5851U,	// SH_LT_rr
    1342182938U,	// SH_NAND_T
    268441307U,	// SH_NE_rc
    5851U,	// SH_NE_rr
    1342183040U,	// SH_NOR_T
    1342182983U,	// SH_ORN_T
    1342183011U,	// SH_OR_T
    1342183060U,	// SH_XNOR_T
    1342183071U,	// SH_XOR_T
    268440688U,	// SH_rc
    5232U,	// SH_rr
    2102384U,	// SH_src
    166057U,	// STLCX_abs
    3349352U,	// STLCX_bo_bso
    166071U,	// STUCX_abs
    3349368U,	// STUCX_bo_bso
    37138U,	// ST_A_abs
    5462736U,	// ST_A_bo_bso
    67571986U,	// ST_A_bo_c
    1969705234U,	// ST_A_bo_pos
    1936216338U,	// ST_A_bo_pre
    101126418U,	// ST_A_bo_r
    12786384U,	// ST_A_bol
    663731U,	// ST_A_sc
    158538448U,	// ST_A_sro
    727760U,	// ST_A_ssr
    793296U,	// ST_A_ssr_pos
    52096U,	// ST_A_ssro
    37341U,	// ST_B_abs
    5462751U,	// ST_B_bo_bso
    67572189U,	// ST_B_bo_c
    1969705437U,	// ST_B_bo_pos
    1936216541U,	// ST_B_bo_pre
    101126621U,	// ST_B_bo_r
    12786399U,	// ST_B_bol
    175315679U,	// ST_B_sro
    727775U,	// ST_B_ssr
    793311U,	// ST_B_ssr_pos
    52108U,	// ST_B_ssro
    37193U,	// ST_DA_abs
    5462743U,	// ST_DA_bo_bso
    67572041U,	// ST_DA_bo_c
    1969705289U,	// ST_DA_bo_pos
    1936216393U,	// ST_DA_bo_pre
    101126473U,	// ST_DA_bo_r
    37399U,	// ST_D_abs
    5462758U,	// ST_D_bo_bso
    67572247U,	// ST_D_bo_c
    1969705495U,	// ST_D_bo_pos
    1936216599U,	// ST_D_bo_pre
    101126679U,	// ST_D_bo_r
    37954U,	// ST_H_abs
    5462765U,	// ST_H_bo_bso
    67572802U,	// ST_H_bo_c
    1969706050U,	// ST_H_bo_pos
    1936217154U,	// ST_H_bo_pre
    101127234U,	// ST_H_bo_r
    12786413U,	// ST_H_bol
    175315693U,	// ST_H_sro
    727789U,	// ST_H_ssr
    793325U,	// ST_H_ssr_pos
    52120U,	// ST_H_ssro
    38267U,	// ST_Q_abs
    5462816U,	// ST_Q_bo_bso
    67573115U,	// ST_Q_bo_c
    1969706363U,	// ST_Q_bo_pos
    1936217467U,	// ST_Q_bo_pre
    101127547U,	// ST_Q_bo_r
    34480U,	// ST_T
    39055U,	// ST_W_abs
    5462873U,	// ST_W_bo_bso
    67573903U,	// ST_W_bo_c
    1969707151U,	// ST_W_bo_pos
    1936218255U,	// ST_W_bo_pre
    101128335U,	// ST_W_bo_r
    12786521U,	// ST_W_bol
    175315801U,	// ST_W_sro
    727897U,	// ST_W_ssr
    793433U,	// ST_W_ssr_pos
    52132U,	// ST_W_ssro
    4613U,	// SUBC_rr
    6137U,	// SUBS_HU_rr
    5010U,	// SUBS_H_rr
    5970U,	// SUBS_U_rr
    5581U,	// SUBS_rr
    16782797U,	// SUBS_srr
    6300U,	// SUBX_rr
    2992U,	// SUB_A_rr
    139431U,	// SUB_A_sc
    4473U,	// SUB_B_rr
    806359688U,	// SUB_F_rrr
    4832U,	// SUB_H_rr
    4596U,	// SUB_rr
    16781812U,	// SUB_srr
    16781313U,	// SUB_srr_15a
    16847348U,	// SUB_srr_a15
    3106U,	// SVLCX_sys
    5462852U,	// SWAPMSK_W_bo_bso
    67573852U,	// SWAPMSK_W_bo_c
    1969707100U,	// SWAPMSK_W_bo_pos
    1936218204U,	// SWAPMSK_W_bo_pre
    101128284U,	// SWAPMSK_W_bo_r
    39025U,	// SWAP_W_abs
    5462864U,	// SWAP_W_bo_bso
    67573873U,	// SWAP_W_bo_c
    1969707121U,	// SWAP_W_bo_pos
    1936218225U,	// SWAP_W_bo_pre
    101128305U,	// SWAP_W_bo_r
    13514U,	// SYSCALL_rc
    3099U,	// TRAPSV_sys
    3093U,	// TRAPV_sys
    16782500U,	// UNPACK_rr
    152760U,	// UPDFL_rr
    16782034U,	// UTOF_rr
    3088U,	// WAIT_sys
    1342183063U,	// XNOR_T
    268441001U,	// XNOR_rc
    5545U,	// XNOR_rr
    268440976U,	// XOR_EQ_rc
    5520U,	// XOR_EQ_rr
    268441374U,	// XOR_GE_U_rc
    5918U,	// XOR_GE_U_rr
    268440139U,	// XOR_GE_rc
    4683U,	// XOR_GE_rr
    268441480U,	// XOR_LT_U_rc
    6024U,	// XOR_LT_U_rr
    268441314U,	// XOR_LT_rc
    5858U,	// XOR_LT_rr
    268440186U,	// XOR_NE_rc
    4730U,	// XOR_NE_rr
    1342183074U,	// XOR_T
    268441007U,	// XOR_rc
    5551U,	// XOR_rr
    16782767U,	// XOR_srr
  };

  static const uint8_t OpInfo1[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// INLINEASM_BR
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// DBG_VALUE_LIST
    0U,	// DBG_INSTR_REF
    0U,	// DBG_PHI
    0U,	// DBG_LABEL
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// PSEUDO_PROBE
    0U,	// ARITH_FENCE
    0U,	// STACKMAP
    0U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// PREALLOCATED_SETUP
    0U,	// PREALLOCATED_ARG
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    0U,	// PATCHABLE_FUNCTION_ENTER
    0U,	// PATCHABLE_RET
    0U,	// PATCHABLE_FUNCTION_EXIT
    0U,	// PATCHABLE_TAIL_CALL
    0U,	// PATCHABLE_EVENT_CALL
    0U,	// PATCHABLE_TYPED_EVENT_CALL
    0U,	// ICALL_BRANCH_FUNNEL
    0U,	// G_ASSERT_SEXT
    0U,	// G_ASSERT_ZEXT
    0U,	// G_ASSERT_ALIGN
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_SDIVREM
    0U,	// G_UDIVREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_BUILD_VECTOR
    0U,	// G_BUILD_VECTOR_TRUNC
    0U,	// G_CONCAT_VECTORS
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_FREEZE
    0U,	// G_INTRINSIC_FPTRUNC_ROUND
    0U,	// G_INTRINSIC_TRUNC
    0U,	// G_INTRINSIC_ROUND
    0U,	// G_INTRINSIC_LRINT
    0U,	// G_INTRINSIC_ROUNDEVEN
    0U,	// G_READCYCLECOUNTER
    0U,	// G_LOAD
    0U,	// G_SEXTLOAD
    0U,	// G_ZEXTLOAD
    0U,	// G_INDEXED_LOAD
    0U,	// G_INDEXED_SEXTLOAD
    0U,	// G_INDEXED_ZEXTLOAD
    0U,	// G_STORE
    0U,	// G_INDEXED_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_ATOMICRMW_FADD
    0U,	// G_ATOMICRMW_FSUB
    0U,	// G_ATOMICRMW_FMAX
    0U,	// G_ATOMICRMW_FMIN
    0U,	// G_FENCE
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INVOKE_REGION_START
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_SEXT_INREG
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_FSHL
    0U,	// G_FSHR
    0U,	// G_ROTR
    0U,	// G_ROTL
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDO
    0U,	// G_UADDE
    0U,	// G_USUBO
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SADDE
    0U,	// G_SSUBO
    0U,	// G_SSUBE
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_UADDSAT
    0U,	// G_SADDSAT
    0U,	// G_USUBSAT
    0U,	// G_SSUBSAT
    0U,	// G_USHLSAT
    0U,	// G_SSHLSAT
    0U,	// G_SMULFIX
    0U,	// G_UMULFIX
    0U,	// G_SMULFIXSAT
    0U,	// G_UMULFIXSAT
    0U,	// G_SDIVFIX
    0U,	// G_UDIVFIX
    0U,	// G_SDIVFIXSAT
    0U,	// G_UDIVFIXSAT
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FMAD
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FPOWI
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FLOG10
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_FABS
    0U,	// G_FCOPYSIGN
    0U,	// G_IS_FPCLASS
    0U,	// G_FCANONICALIZE
    0U,	// G_FMINNUM
    0U,	// G_FMAXNUM
    0U,	// G_FMINNUM_IEEE
    0U,	// G_FMAXNUM_IEEE
    0U,	// G_FMINIMUM
    0U,	// G_FMAXIMUM
    0U,	// G_PTR_ADD
    0U,	// G_PTRMASK
    0U,	// G_SMIN
    0U,	// G_SMAX
    0U,	// G_UMIN
    0U,	// G_UMAX
    0U,	// G_ABS
    0U,	// G_LROUND
    0U,	// G_LLROUND
    0U,	// G_BR
    0U,	// G_BRJT
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_CTTZ
    0U,	// G_CTTZ_ZERO_UNDEF
    0U,	// G_CTLZ
    0U,	// G_CTLZ_ZERO_UNDEF
    0U,	// G_CTPOP
    0U,	// G_BSWAP
    0U,	// G_BITREVERSE
    0U,	// G_FCEIL
    0U,	// G_FCOS
    0U,	// G_FSIN
    0U,	// G_FSQRT
    0U,	// G_FFLOOR
    0U,	// G_FRINT
    0U,	// G_FNEARBYINT
    0U,	// G_ADDRSPACE_CAST
    0U,	// G_BLOCK_ADDR
    0U,	// G_JUMP_TABLE
    0U,	// G_DYN_STACKALLOC
    0U,	// G_STRICT_FADD
    0U,	// G_STRICT_FSUB
    0U,	// G_STRICT_FMUL
    0U,	// G_STRICT_FDIV
    0U,	// G_STRICT_FREM
    0U,	// G_STRICT_FMA
    0U,	// G_STRICT_FSQRT
    0U,	// G_READ_REGISTER
    0U,	// G_WRITE_REGISTER
    0U,	// G_MEMCPY
    0U,	// G_MEMCPY_INLINE
    0U,	// G_MEMMOVE
    0U,	// G_MEMSET
    0U,	// G_BZERO
    0U,	// G_VECREDUCE_SEQ_FADD
    0U,	// G_VECREDUCE_SEQ_FMUL
    0U,	// G_VECREDUCE_FADD
    0U,	// G_VECREDUCE_FMUL
    0U,	// G_VECREDUCE_FMAX
    0U,	// G_VECREDUCE_FMIN
    0U,	// G_VECREDUCE_ADD
    0U,	// G_VECREDUCE_MUL
    0U,	// G_VECREDUCE_AND
    0U,	// G_VECREDUCE_OR
    0U,	// G_VECREDUCE_XOR
    0U,	// G_VECREDUCE_SMAX
    0U,	// G_VECREDUCE_SMIN
    0U,	// G_VECREDUCE_UMAX
    0U,	// G_VECREDUCE_UMIN
    0U,	// G_SBFX
    0U,	// G_UBFX
    0U,	// ABSDIFS_B_rr_v110
    0U,	// ABSDIFS_H_rr
    0U,	// ABSDIFS_rc
    0U,	// ABSDIFS_rr
    0U,	// ABSDIF_B_rr
    0U,	// ABSDIF_H_rr
    0U,	// ABSDIF_rc
    0U,	// ABSDIF_rr
    0U,	// ABSS_B_rr_v110
    0U,	// ABSS_H_rr
    0U,	// ABSS_rr
    0U,	// ABS_B_rr
    0U,	// ABS_H_rr
    0U,	// ABS_rr
    0U,	// ADDC_rc
    0U,	// ADDC_rr
    0U,	// ADDIH_A_rlc
    0U,	// ADDIH_rlc
    0U,	// ADDI_rlc
    0U,	// ADDSC_AT_rr_v110
    0U,	// ADDSC_AT_rr_v120u
    1U,	// ADDSC_A_rr_v110
    1U,	// ADDSC_A_rr_v120u
    0U,	// ADDSC_A_srrs_v110
    0U,	// ADDSC_A_srrs_v120u
    0U,	// ADDS_BU_rr_v110
    0U,	// ADDS_B_rr_v110
    0U,	// ADDS_H
    0U,	// ADDS_HU
    0U,	// ADDS_U
    0U,	// ADDS_U_rc
    0U,	// ADDS_rc
    0U,	// ADDS_rr
    0U,	// ADDS_srr
    0U,	// ADDX_rc
    0U,	// ADDX_rr
    0U,	// ADD_A_rr
    0U,	// ADD_A_src
    0U,	// ADD_A_srr
    0U,	// ADD_B_rr
    0U,	// ADD_F_rrr
    0U,	// ADD_H_rr
    0U,	// ADD_rc
    0U,	// ADD_rr
    0U,	// ADD_src
    0U,	// ADD_src_15a
    0U,	// ADD_src_a15
    0U,	// ADD_srr
    0U,	// ADD_srr_15a
    0U,	// ADD_srr_a15
    0U,	// ANDN_T
    0U,	// ANDN_rc
    0U,	// ANDN_rr
    0U,	// AND_ANDN_T
    0U,	// AND_AND_T
    0U,	// AND_EQ_rc
    0U,	// AND_EQ_rr
    0U,	// AND_GE_U_rc
    0U,	// AND_GE_U_rr
    0U,	// AND_GE_rc
    0U,	// AND_GE_rr
    0U,	// AND_LT_U_rc
    0U,	// AND_LT_U_rr
    0U,	// AND_LT_rc
    0U,	// AND_LT_rr
    0U,	// AND_NE_rc
    0U,	// AND_NE_rr
    0U,	// AND_NOR_T
    0U,	// AND_OR_T
    0U,	// AND_T
    0U,	// AND_rc
    0U,	// AND_rr
    0U,	// AND_src
    0U,	// AND_srr
    0U,	// BISR_rc
    0U,	// BISR_sc
    0U,	// BMAERGE_rr
    0U,	// BSPLIT_rr
    0U,	// CACHEI_I_bo_bso
    0U,	// CACHEI_I_bo_pos
    0U,	// CACHEI_I_bo_pre
    0U,	// CACHEI_WI_bo_bso
    0U,	// CACHEI_WI_bo_pos
    0U,	// CACHEI_WI_bo_pre
    0U,	// CACHEI_W_bo_bso
    0U,	// CACHEI_W_bo_c
    0U,	// CACHEI_W_bo_pos
    0U,	// CACHEI_W_bo_pre
    0U,	// CACHEI_W_bo_r
    0U,	// CACHE_I_bo_bso
    0U,	// CACHE_I_bo_c
    0U,	// CACHE_I_bo_pos
    0U,	// CACHE_I_bo_pre
    0U,	// CACHE_I_bo_r
    0U,	// CACHE_WI_bo_bso
    0U,	// CACHE_WI_bo_c
    0U,	// CACHE_WI_bo_pos
    0U,	// CACHE_WI_bo_pre
    0U,	// CACHE_WI_bo_r
    0U,	// CACHE_W_bo_bso
    0U,	// CACHE_W_bo_c
    0U,	// CACHE_W_bo_pos
    0U,	// CACHE_W_bo_pre
    0U,	// CACHE_W_bo_r
    17U,	// CADDN_rcr
    0U,	// CADDN_rrr
    0U,	// CADDN_src
    17U,	// CADD_rcr
    0U,	// CADD_rrr
    0U,	// CADD_src
    0U,	// CALLA_b
    0U,	// CALLI_rr
    0U,	// CALL_b
    0U,	// CALL_sb
    0U,	// CLO_H_rr
    0U,	// CLO_rr
    0U,	// CLS_H_rr
    0U,	// CLS_rr
    0U,	// CLZ_H_rr
    0U,	// CLZ_rr
    0U,	// CMOVN_src
    0U,	// CMOVN_srr
    0U,	// CMOV_src
    0U,	// CMOV_srr
    0U,	// CMPSWAP_W_bo_bso
    0U,	// CMPSWAP_W_bo_c
    0U,	// CMPSWAP_W_bo_pos
    0U,	// CMPSWAP_W_bo_pre
    0U,	// CMPSWAP_W_bo_r
    0U,	// CMP_F_rr
    0U,	// CRC32B_W_rr
    0U,	// CRC32L_W_rr
    0U,	// CRC32_B_rr
    0U,	// CRCN_rrr
    0U,	// CSUBN_rrr
    0U,	// CSUB_rrr
    0U,	// DEBUG_sr
    0U,	// DEBUG_sys
    1U,	// DEXTR_rrpw
    1U,	// DEXTR_rrrr
    0U,	// DISABLE_sys
    0U,	// DISABLE_sys_1
    0U,	// DIV_F_rr
    0U,	// DIV_U_rr
    0U,	// DIV_rr
    0U,	// DSYNC_sys
    0U,	// DVADJ_rrr
    0U,	// DVINIT_BU_rr
    0U,	// DVINIT_B_rr
    0U,	// DVINIT_HU_rr
    0U,	// DVINIT_H_rr
    0U,	// DVINIT_U_rr
    0U,	// DVINIT_rr
    0U,	// DVSTEP_U_rrr
    0U,	// DVSTEP_rrr
    0U,	// ENABLE_sys
    0U,	// EQANY_B_rc
    0U,	// EQANY_B_rr
    0U,	// EQANY_H_rc
    0U,	// EQANY_H_rr
    0U,	// EQZ_A_rr
    0U,	// EQ_A_rr
    0U,	// EQ_B_rr
    0U,	// EQ_H_rr
    0U,	// EQ_W_rr
    0U,	// EQ_rc
    0U,	// EQ_rr
    0U,	// EQ_src
    0U,	// EQ_srr
    1U,	// EXTR_U_rrpw
    0U,	// EXTR_U_rrrr
    1U,	// EXTR_U_rrrw
    1U,	// EXTR_rrpw
    0U,	// EXTR_rrrr
    1U,	// EXTR_rrrw
    0U,	// FCALLA_b
    0U,	// FCALLA_i
    0U,	// FCALL_b
    0U,	// FRET_sr
    0U,	// FRET_sys
    0U,	// FTOHP_rr
    0U,	// FTOIZ_rr
    0U,	// FTOI_rr
    0U,	// FTOQ31Z_rr
    0U,	// FTOQ31_rr
    0U,	// FTOUZ_rr
    0U,	// FTOU_rr
    0U,	// GE_A_rr
    0U,	// GE_U_rc
    0U,	// GE_U_rr
    0U,	// GE_rc
    0U,	// GE_rr
    0U,	// HPTOF_rr
    1U,	// IMASK_rcpw
    1U,	// IMASK_rcrw
    1U,	// IMASK_rrpw
    1U,	// IMASK_rrrw
    65U,	// INSERT_rcpw
    1U,	// INSERT_rcrr
    65U,	// INSERT_rcrw
    65U,	// INSERT_rrpw
    65U,	// INSERT_rrrr
    65U,	// INSERT_rrrw
    0U,	// INSN_T
    0U,	// INS_T
    0U,	// ISYNC_sys
    0U,	// ITOF_rr
    0U,	// IXMAX_U_rrr
    0U,	// IXMAX_rrr
    0U,	// IXMIN_U_rrr
    0U,	// IXMIN_rrr
    0U,	// JA_b
    0U,	// JEQ_A_brr
    0U,	// JEQ_brc
    0U,	// JEQ_brr
    0U,	// JEQ_sbc1
    0U,	// JEQ_sbc2
    0U,	// JEQ_sbr1
    0U,	// JEQ_sbr2
    0U,	// JGEZ_sbr
    0U,	// JGE_U_brc
    0U,	// JGE_U_brr
    0U,	// JGE_brc
    0U,	// JGE_brr
    0U,	// JGTZ_sbr
    0U,	// JI_rr
    0U,	// JI_sr
    0U,	// JLA_b
    0U,	// JLEZ_sbr
    0U,	// JLI_rr
    0U,	// JLTZ_sbr
    0U,	// JLT_U_brc
    0U,	// JLT_U_brr
    0U,	// JLT_brc
    0U,	// JLT_brr
    0U,	// JL_b
    0U,	// JNED_brc
    0U,	// JNED_brr
    0U,	// JNEI_brc
    0U,	// JNEI_brr
    0U,	// JNE_A_brr
    0U,	// JNE_brc
    0U,	// JNE_brr
    0U,	// JNE_sbc1
    0U,	// JNE_sbc2
    0U,	// JNE_sbr1
    0U,	// JNE_sbr2
    0U,	// JNZ_A_brr
    0U,	// JNZ_A_sbr
    0U,	// JNZ_T_brn
    0U,	// JNZ_T_sbrn
    0U,	// JNZ_sb
    0U,	// JNZ_sbr
    0U,	// JZ_A_brr
    0U,	// JZ_A_sbr
    0U,	// JZ_T_brn
    0U,	// JZ_T_sbrn
    0U,	// JZ_sb
    0U,	// JZ_sbr
    0U,	// J_b
    0U,	// J_sb
    0U,	// LDLCX_abs
    0U,	// LDLCX_bo_bso
    0U,	// LDMST_abs
    0U,	// LDMST_bo_bso
    0U,	// LDMST_bo_c
    0U,	// LDMST_bo_pos
    0U,	// LDMST_bo_pre
    0U,	// LDMST_bo_r
    0U,	// LDUCX_abs
    0U,	// LDUCX_bo_bso
    0U,	// LD_A_abs
    0U,	// LD_A_bo_bso
    0U,	// LD_A_bo_c
    0U,	// LD_A_bo_pos
    0U,	// LD_A_bo_pre
    0U,	// LD_A_bo_r
    0U,	// LD_A_bol
    0U,	// LD_A_sc
    0U,	// LD_A_slr
    0U,	// LD_A_slr_post
    0U,	// LD_A_slro
    0U,	// LD_A_sro
    0U,	// LD_BU_abs
    0U,	// LD_BU_bo_bso
    0U,	// LD_BU_bo_c
    0U,	// LD_BU_bo_pos
    0U,	// LD_BU_bo_pre
    0U,	// LD_BU_bo_r
    0U,	// LD_BU_bol
    0U,	// LD_BU_slr
    0U,	// LD_BU_slr_post
    0U,	// LD_BU_slro
    0U,	// LD_BU_sro
    0U,	// LD_B_abs
    0U,	// LD_B_bo_bso
    0U,	// LD_B_bo_c
    0U,	// LD_B_bo_pos
    0U,	// LD_B_bo_pre
    0U,	// LD_B_bo_r
    0U,	// LD_B_bol
    0U,	// LD_DA_abs
    0U,	// LD_DA_bo_bso
    0U,	// LD_DA_bo_c
    0U,	// LD_DA_bo_pos
    0U,	// LD_DA_bo_pre
    0U,	// LD_DA_bo_r
    0U,	// LD_D_abs
    0U,	// LD_D_bo_bso
    0U,	// LD_D_bo_c
    0U,	// LD_D_bo_pos
    0U,	// LD_D_bo_pre
    0U,	// LD_D_bo_r
    0U,	// LD_HU_abs
    0U,	// LD_HU_bo_bso
    0U,	// LD_HU_bo_c
    0U,	// LD_HU_bo_pos
    0U,	// LD_HU_bo_pre
    0U,	// LD_HU_bo_r
    0U,	// LD_HU_bol
    0U,	// LD_H_abs
    0U,	// LD_H_bo_bso
    0U,	// LD_H_bo_c
    0U,	// LD_H_bo_pos
    0U,	// LD_H_bo_pre
    0U,	// LD_H_bo_r
    0U,	// LD_H_bol
    0U,	// LD_H_slr
    0U,	// LD_H_slr_post
    0U,	// LD_H_slro
    0U,	// LD_H_sro
    0U,	// LD_Q_abs
    0U,	// LD_Q_bo_bso
    0U,	// LD_Q_bo_c
    0U,	// LD_Q_bo_pos
    0U,	// LD_Q_bo_pre
    0U,	// LD_Q_bo_r
    0U,	// LD_W_abs
    0U,	// LD_W_bo_bso
    0U,	// LD_W_bo_c
    0U,	// LD_W_bo_pos
    0U,	// LD_W_bo_pre
    0U,	// LD_W_bo_r
    0U,	// LD_W_bol
    0U,	// LD_W_sc
    0U,	// LD_W_slr
    0U,	// LD_W_slr_post
    0U,	// LD_W_slro
    0U,	// LD_W_sro
    0U,	// LEA_abs
    0U,	// LEA_bo_bso
    0U,	// LEA_bol
    0U,	// LHA_abs
    0U,	// LOOPU_brr
    0U,	// LOOP_brr
    0U,	// LOOP_sbr
    0U,	// LT_A_rr
    0U,	// LT_B
    0U,	// LT_BU
    0U,	// LT_H
    0U,	// LT_HU
    0U,	// LT_U_rc
    0U,	// LT_U_rr
    0U,	// LT_W
    0U,	// LT_WU
    0U,	// LT_rc
    0U,	// LT_rr
    0U,	// LT_src
    0U,	// LT_srr
    2U,	// MADDMS_H_rrr1_LL
    3U,	// MADDMS_H_rrr1_LU
    4U,	// MADDMS_H_rrr1_UL
    5U,	// MADDMS_H_rrr1_UU
    2U,	// MADDM_H_rrr1_LL
    3U,	// MADDM_H_rrr1_LU
    4U,	// MADDM_H_rrr1_UL
    5U,	// MADDM_H_rrr1_UU
    6U,	// MADDRS_H_rrr1_DcEdDaDbUL
    2U,	// MADDRS_H_rrr1_LL
    3U,	// MADDRS_H_rrr1_LU
    4U,	// MADDRS_H_rrr1_UL
    5U,	// MADDRS_H_rrr1_UU
    0U,	// MADDRS_Q_rrr1_L_L
    0U,	// MADDRS_Q_rrr1_U_U
    6U,	// MADDR_H_rrr1_DcEdDaDbUL
    2U,	// MADDR_H_rrr1_LL
    3U,	// MADDR_H_rrr1_LU
    4U,	// MADDR_H_rrr1_UL
    5U,	// MADDR_H_rrr1_UU
    0U,	// MADDR_Q_rrr1_L_L
    0U,	// MADDR_Q_rrr1_U_U
    2U,	// MADDSUMS_H_rrr1_LL
    3U,	// MADDSUMS_H_rrr1_LU
    4U,	// MADDSUMS_H_rrr1_UL
    5U,	// MADDSUMS_H_rrr1_UU
    2U,	// MADDSUM_H_rrr1_LL
    3U,	// MADDSUM_H_rrr1_LU
    4U,	// MADDSUM_H_rrr1_UL
    5U,	// MADDSUM_H_rrr1_UU
    2U,	// MADDSURS_H_rrr1_LL
    3U,	// MADDSURS_H_rrr1_LU
    4U,	// MADDSURS_H_rrr1_UL
    5U,	// MADDSURS_H_rrr1_UU
    2U,	// MADDSUR_H_rrr1_LL
    3U,	// MADDSUR_H_rrr1_LU
    4U,	// MADDSUR_H_rrr1_UL
    5U,	// MADDSUR_H_rrr1_UU
    2U,	// MADDSUS_H_rrr1_LL
    3U,	// MADDSUS_H_rrr1_LU
    4U,	// MADDSUS_H_rrr1_UL
    5U,	// MADDSUS_H_rrr1_UU
    2U,	// MADDSU_H_rrr1_LL
    3U,	// MADDSU_H_rrr1_LU
    4U,	// MADDSU_H_rrr1_UL
    5U,	// MADDSU_H_rrr1_UU
    2U,	// MADDS_H_rrr1_LL
    3U,	// MADDS_H_rrr1_LU
    4U,	// MADDS_H_rrr1_UL
    5U,	// MADDS_H_rrr1_UU
    33U,	// MADDS_Q_rrr1
    7U,	// MADDS_Q_rrr1_L
    0U,	// MADDS_Q_rrr1_L_L
    8U,	// MADDS_Q_rrr1_U
    0U,	// MADDS_Q_rrr1_U_U
    33U,	// MADDS_Q_rrr1_e
    7U,	// MADDS_Q_rrr1_e_L
    0U,	// MADDS_Q_rrr1_e_L_L
    8U,	// MADDS_Q_rrr1_e_U
    0U,	// MADDS_Q_rrr1_e_U_U
    17U,	// MADDS_U_rcr
    17U,	// MADDS_U_rcr_e
    0U,	// MADDS_U_rrr2
    0U,	// MADDS_U_rrr2_e
    17U,	// MADDS_rcr
    17U,	// MADDS_rcr_e
    0U,	// MADDS_rrr2
    0U,	// MADDS_rrr2_e
    0U,	// MADD_F_rrr
    2U,	// MADD_H_rrr1_LL
    3U,	// MADD_H_rrr1_LU
    4U,	// MADD_H_rrr1_UL
    5U,	// MADD_H_rrr1_UU
    33U,	// MADD_Q_rrr1
    7U,	// MADD_Q_rrr1_L
    0U,	// MADD_Q_rrr1_L_L
    8U,	// MADD_Q_rrr1_U
    0U,	// MADD_Q_rrr1_U_U
    33U,	// MADD_Q_rrr1_e
    7U,	// MADD_Q_rrr1_e_L
    0U,	// MADD_Q_rrr1_e_L_L
    8U,	// MADD_Q_rrr1_e_U
    0U,	// MADD_Q_rrr1_e_U_U
    17U,	// MADD_U_rcr
    0U,	// MADD_U_rrr2
    17U,	// MADD_rcr
    17U,	// MADD_rcr_e
    0U,	// MADD_rrr2
    0U,	// MADD_rrr2_e
    0U,	// MAX_B
    0U,	// MAX_BU
    0U,	// MAX_H
    0U,	// MAX_HU
    0U,	// MAX_U_rc
    0U,	// MAX_U_rr
    0U,	// MAX_rc
    0U,	// MAX_rr
    0U,	// MFCR_rlc
    0U,	// MIN_B
    0U,	// MIN_BU
    0U,	// MIN_H
    0U,	// MIN_HU
    0U,	// MIN_U_rc
    0U,	// MIN_U_rr
    0U,	// MIN_rc
    0U,	// MIN_rr
    0U,	// MOVH_A_rlc
    0U,	// MOVH_rlc
    0U,	// MOV_AA_rr
    0U,	// MOV_AA_srr
    0U,	// MOV_A_rr
    0U,	// MOV_A_src
    0U,	// MOV_A_srr
    0U,	// MOV_D_rr
    0U,	// MOV_D_srr
    0U,	// MOV_U_rlc
    0U,	// MOV_rlcDc
    0U,	// MOV_rlcEc
    0U,	// MOV_rrDcDb
    0U,	// MOV_rrEcDaDb
    0U,	// MOV_rrEcDb
    0U,	// MOV_sc
    0U,	// MOV_srcDa
    0U,	// MOV_srcEa
    0U,	// MOV_srr
    2U,	// MSUBADMS_H_rrr1_LL
    3U,	// MSUBADMS_H_rrr1_LU
    4U,	// MSUBADMS_H_rrr1_UL
    5U,	// MSUBADMS_H_rrr1_UU
    2U,	// MSUBADM_H_rrr1_LL
    3U,	// MSUBADM_H_rrr1_LU
    4U,	// MSUBADM_H_rrr1_UL
    5U,	// MSUBADM_H_rrr1_UU
    2U,	// MSUBADRS_H_rrr1_LL
    3U,	// MSUBADRS_H_rrr1_LU
    4U,	// MSUBADRS_H_rrr1_UL
    5U,	// MSUBADRS_H_rrr1_UU
    2U,	// MSUBADR_H_rrr1_LL
    3U,	// MSUBADR_H_rrr1_LU
    4U,	// MSUBADR_H_rrr1_UL
    5U,	// MSUBADR_H_rrr1_UU
    2U,	// MSUBADS_H_rrr1_LL
    3U,	// MSUBADS_H_rrr1_LU
    4U,	// MSUBADS_H_rrr1_UL
    5U,	// MSUBADS_H_rrr1_UU
    2U,	// MSUBAD_H_rrr1_LL
    3U,	// MSUBAD_H_rrr1_LU
    4U,	// MSUBAD_H_rrr1_UL
    5U,	// MSUBAD_H_rrr1_UU
    2U,	// MSUBMS_H_rrr1_LL
    3U,	// MSUBMS_H_rrr1_LU
    4U,	// MSUBMS_H_rrr1_UL
    5U,	// MSUBMS_H_rrr1_UU
    2U,	// MSUBM_H_rrr1_LL
    3U,	// MSUBM_H_rrr1_LU
    4U,	// MSUBM_H_rrr1_UL
    5U,	// MSUBM_H_rrr1_UU
    6U,	// MSUBRS_H_rrr1_DcEdDaDbUL
    2U,	// MSUBRS_H_rrr1_LL
    3U,	// MSUBRS_H_rrr1_LU
    4U,	// MSUBRS_H_rrr1_UL
    5U,	// MSUBRS_H_rrr1_UU
    0U,	// MSUBRS_Q_rrr1_L_L
    0U,	// MSUBRS_Q_rrr1_U_U
    6U,	// MSUBR_H_rrr1_DcEdDaDbUL
    2U,	// MSUBR_H_rrr1_LL
    3U,	// MSUBR_H_rrr1_LU
    4U,	// MSUBR_H_rrr1_UL
    5U,	// MSUBR_H_rrr1_UU
    0U,	// MSUBR_Q_rrr1_L_L
    0U,	// MSUBR_Q_rrr1_U_U
    2U,	// MSUBS_H_rrr1_LL
    3U,	// MSUBS_H_rrr1_LU
    4U,	// MSUBS_H_rrr1_UL
    5U,	// MSUBS_H_rrr1_UU
    33U,	// MSUBS_Q_rrr1
    7U,	// MSUBS_Q_rrr1_L
    0U,	// MSUBS_Q_rrr1_L_L
    8U,	// MSUBS_Q_rrr1_U
    0U,	// MSUBS_Q_rrr1_U_U
    33U,	// MSUBS_Q_rrr1_e
    7U,	// MSUBS_Q_rrr1_e_L
    0U,	// MSUBS_Q_rrr1_e_L_L
    8U,	// MSUBS_Q_rrr1_e_U
    0U,	// MSUBS_Q_rrr1_e_U_U
    17U,	// MSUBS_U_rcr
    17U,	// MSUBS_U_rcr_e
    0U,	// MSUBS_U_rrr2
    0U,	// MSUBS_U_rrr2_e
    17U,	// MSUBS_rcr
    17U,	// MSUBS_rcr_e
    0U,	// MSUBS_rrr2
    0U,	// MSUBS_rrr2_e
    0U,	// MSUB_F_rrr
    2U,	// MSUB_H_rrr1_LL
    3U,	// MSUB_H_rrr1_LU
    4U,	// MSUB_H_rrr1_UL
    5U,	// MSUB_H_rrr1_UU
    33U,	// MSUB_Q_rrr1
    7U,	// MSUB_Q_rrr1_L
    0U,	// MSUB_Q_rrr1_L_L
    8U,	// MSUB_Q_rrr1_U
    0U,	// MSUB_Q_rrr1_U_U
    33U,	// MSUB_Q_rrr1_e
    7U,	// MSUB_Q_rrr1_e_L
    0U,	// MSUB_Q_rrr1_e_L_L
    8U,	// MSUB_Q_rrr1_e_U
    0U,	// MSUB_Q_rrr1_e_U_U
    17U,	// MSUB_U_rcr
    0U,	// MSUB_U_rrr2
    17U,	// MSUB_rcr
    17U,	// MSUB_rcr_e
    0U,	// MSUB_rrr2
    0U,	// MSUB_rrr2_e
    0U,	// MTCR_rlc
    9U,	// MULM_H_rr1_LL2e
    10U,	// MULM_H_rr1_LU2e
    11U,	// MULM_H_rr1_UL2e
    12U,	// MULM_H_rr1_UU2e
    9U,	// MULR_H_rr1_LL2e
    10U,	// MULR_H_rr1_LU2e
    11U,	// MULR_H_rr1_UL2e
    12U,	// MULR_H_rr1_UU2e
    0U,	// MULR_Q_rr1_2LL
    0U,	// MULR_Q_rr1_2UU
    0U,	// MULS_U_rc
    0U,	// MULS_U_rr2
    0U,	// MULS_rc
    0U,	// MULS_rr2
    0U,	// MUL_F_rrr
    9U,	// MUL_H_rr1_LL2e
    10U,	// MUL_H_rr1_LU2e
    11U,	// MUL_H_rr1_UL2e
    12U,	// MUL_H_rr1_UU2e
    0U,	// MUL_Q_rr1_2LL
    0U,	// MUL_Q_rr1_2UU
    13U,	// MUL_Q_rr1_2_L
    13U,	// MUL_Q_rr1_2_Le
    14U,	// MUL_Q_rr1_2_U
    14U,	// MUL_Q_rr1_2_Ue
    49U,	// MUL_Q_rr1_2__
    49U,	// MUL_Q_rr1_2__e
    0U,	// MUL_U_rc
    0U,	// MUL_U_rr2
    0U,	// MUL_rc
    0U,	// MUL_rc_e
    0U,	// MUL_rr2
    0U,	// MUL_rr2_e
    0U,	// MUL_srr
    0U,	// NAND_T
    0U,	// NAND_rc
    0U,	// NAND_rr
    0U,	// NEZ_A
    0U,	// NE_A
    0U,	// NE_rc
    0U,	// NE_rr
    0U,	// NOP_sr
    0U,	// NOP_sys
    0U,	// NOR_T
    0U,	// NOR_rc
    0U,	// NOR_rr
    0U,	// NOT_sr
    0U,	// ORN_T
    0U,	// ORN_rc
    0U,	// ORN_rr
    0U,	// OR_ANDN_T
    0U,	// OR_AND_T
    0U,	// OR_EQ_rc
    0U,	// OR_EQ_rr
    0U,	// OR_GE_U_rc
    0U,	// OR_GE_U_rr
    0U,	// OR_GE_rc
    0U,	// OR_GE_rr
    0U,	// OR_LT_U_rc
    0U,	// OR_LT_U_rr
    0U,	// OR_LT_rc
    0U,	// OR_LT_rr
    0U,	// OR_NE_rc
    0U,	// OR_NE_rr
    0U,	// OR_NOR_T
    0U,	// OR_OR_T
    0U,	// OR_T
    0U,	// OR_rc
    0U,	// OR_rr
    0U,	// OR_sc
    0U,	// OR_srr
    0U,	// PACK_rrr
    0U,	// PARITY_rr
    0U,	// POPCNT_W_rr
    0U,	// Q31TOF_rr
    0U,	// QSEED_F_rr
    0U,	// RESTORE_sys
    0U,	// RET_sr
    0U,	// RET_sys
    0U,	// RFE_sr
    0U,	// RFE_sys
    0U,	// RFM_sys
    0U,	// RSLCX_sys
    0U,	// RSTV_sys
    0U,	// RSUBS_U_rc
    0U,	// RSUBS_rc
    0U,	// RSUB_rc
    0U,	// RSUB_sr
    0U,	// SAT_BU_rr
    0U,	// SAT_BU_sr
    0U,	// SAT_B_rr
    0U,	// SAT_B_sr
    0U,	// SAT_HU_rr
    0U,	// SAT_HU_sr
    0U,	// SAT_H_rr
    0U,	// SAT_H_sr
    17U,	// SELN_rcr
    0U,	// SELN_rrr
    17U,	// SEL_rcr
    0U,	// SEL_rrr
    0U,	// SHAS_rc
    0U,	// SHAS_rr
    0U,	// SHA_H_rc
    0U,	// SHA_H_rr
    0U,	// SHA_rc
    0U,	// SHA_rr
    0U,	// SHA_src
    0U,	// SHUFFLE_rc
    0U,	// SH_ANDN_T
    0U,	// SH_AND_T
    0U,	// SH_EQ_rc
    0U,	// SH_EQ_rr
    0U,	// SH_GE_U_rc
    0U,	// SH_GE_U_rr
    0U,	// SH_GE_rc
    0U,	// SH_GE_rr
    0U,	// SH_H_rc
    0U,	// SH_H_rr
    0U,	// SH_LT_U_rc
    0U,	// SH_LT_U_rr
    0U,	// SH_LT_rc
    0U,	// SH_LT_rr
    0U,	// SH_NAND_T
    0U,	// SH_NE_rc
    0U,	// SH_NE_rr
    0U,	// SH_NOR_T
    0U,	// SH_ORN_T
    0U,	// SH_OR_T
    0U,	// SH_XNOR_T
    0U,	// SH_XOR_T
    0U,	// SH_rc
    0U,	// SH_rr
    0U,	// SH_src
    0U,	// STLCX_abs
    0U,	// STLCX_bo_bso
    0U,	// STUCX_abs
    0U,	// STUCX_bo_bso
    0U,	// ST_A_abs
    0U,	// ST_A_bo_bso
    0U,	// ST_A_bo_c
    0U,	// ST_A_bo_pos
    0U,	// ST_A_bo_pre
    0U,	// ST_A_bo_r
    0U,	// ST_A_bol
    0U,	// ST_A_sc
    0U,	// ST_A_sro
    0U,	// ST_A_ssr
    0U,	// ST_A_ssr_pos
    0U,	// ST_A_ssro
    0U,	// ST_B_abs
    0U,	// ST_B_bo_bso
    0U,	// ST_B_bo_c
    0U,	// ST_B_bo_pos
    0U,	// ST_B_bo_pre
    0U,	// ST_B_bo_r
    0U,	// ST_B_bol
    0U,	// ST_B_sro
    0U,	// ST_B_ssr
    0U,	// ST_B_ssr_pos
    0U,	// ST_B_ssro
    0U,	// ST_DA_abs
    0U,	// ST_DA_bo_bso
    0U,	// ST_DA_bo_c
    0U,	// ST_DA_bo_pos
    0U,	// ST_DA_bo_pre
    0U,	// ST_DA_bo_r
    0U,	// ST_D_abs
    0U,	// ST_D_bo_bso
    0U,	// ST_D_bo_c
    0U,	// ST_D_bo_pos
    0U,	// ST_D_bo_pre
    0U,	// ST_D_bo_r
    0U,	// ST_H_abs
    0U,	// ST_H_bo_bso
    0U,	// ST_H_bo_c
    0U,	// ST_H_bo_pos
    0U,	// ST_H_bo_pre
    0U,	// ST_H_bo_r
    0U,	// ST_H_bol
    0U,	// ST_H_sro
    0U,	// ST_H_ssr
    0U,	// ST_H_ssr_pos
    0U,	// ST_H_ssro
    0U,	// ST_Q_abs
    0U,	// ST_Q_bo_bso
    0U,	// ST_Q_bo_c
    0U,	// ST_Q_bo_pos
    0U,	// ST_Q_bo_pre
    0U,	// ST_Q_bo_r
    0U,	// ST_T
    0U,	// ST_W_abs
    0U,	// ST_W_bo_bso
    0U,	// ST_W_bo_c
    0U,	// ST_W_bo_pos
    0U,	// ST_W_bo_pre
    0U,	// ST_W_bo_r
    0U,	// ST_W_bol
    0U,	// ST_W_sro
    0U,	// ST_W_ssr
    0U,	// ST_W_ssr_pos
    0U,	// ST_W_ssro
    0U,	// SUBC_rr
    0U,	// SUBS_HU_rr
    0U,	// SUBS_H_rr
    0U,	// SUBS_U_rr
    0U,	// SUBS_rr
    0U,	// SUBS_srr
    0U,	// SUBX_rr
    0U,	// SUB_A_rr
    0U,	// SUB_A_sc
    0U,	// SUB_B_rr
    0U,	// SUB_F_rrr
    0U,	// SUB_H_rr
    0U,	// SUB_rr
    0U,	// SUB_srr
    0U,	// SUB_srr_15a
    0U,	// SUB_srr_a15
    0U,	// SVLCX_sys
    0U,	// SWAPMSK_W_bo_bso
    0U,	// SWAPMSK_W_bo_c
    0U,	// SWAPMSK_W_bo_pos
    0U,	// SWAPMSK_W_bo_pre
    0U,	// SWAPMSK_W_bo_r
    0U,	// SWAP_W_abs
    0U,	// SWAP_W_bo_bso
    0U,	// SWAP_W_bo_c
    0U,	// SWAP_W_bo_pos
    0U,	// SWAP_W_bo_pre
    0U,	// SWAP_W_bo_r
    0U,	// SYSCALL_rc
    0U,	// TRAPSV_sys
    0U,	// TRAPV_sys
    0U,	// UNPACK_rr
    0U,	// UPDFL_rr
    0U,	// UTOF_rr
    0U,	// WAIT_sys
    0U,	// XNOR_T
    0U,	// XNOR_rc
    0U,	// XNOR_rr
    0U,	// XOR_EQ_rc
    0U,	// XOR_EQ_rr
    0U,	// XOR_GE_U_rc
    0U,	// XOR_GE_U_rr
    0U,	// XOR_GE_rc
    0U,	// XOR_GE_rr
    0U,	// XOR_LT_U_rc
    0U,	// XOR_LT_U_rr
    0U,	// XOR_LT_rc
    0U,	// XOR_LT_rr
    0U,	// XOR_NE_rc
    0U,	// XOR_NE_rr
    0U,	// XOR_T
    0U,	// XOR_rc
    0U,	// XOR_rr
    0U,	// XOR_srr
  };

  // Emit the opcode for the instruction.
  uint64_t Bits = 0;
  Bits |= (uint64_t)OpInfo0[MCInst_getOpcode(MI)] << 0;
  Bits |= (uint64_t)OpInfo1[MCInst_getOpcode(MI)] << 32;
  MnemonicBitsInfo MBI = {AsmStrs+(Bits & 4095)-1, Bits};
  return MBI;

}
/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void printInstruction(MCInst *MI, uint64_t Address, SStream *O) {
  SStream_concat0(O, "");
  MnemonicBitsInfo MnemonicInfo = getMnemonic(MI, O);

  SStream_concat0(O, MnemonicInfo.first);

  uint64_t Bits = MnemonicInfo.second;
  assert(Bits != 0 && "Cannot print this instruction.");

  // Fragment 0 encoded into 4 bits for 13 unique commands.
  switch ((Bits >> 12) & 15) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // DBG_VALUE, DBG_VALUE_LIST, DBG_INSTR_REF, DBG_PHI, DBG_LABEL, BUNDLE, ...
    return;
    break;
  case 1:
    // ABSDIFS_B_rr_v110, ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ...
    printOperand(MI, 0, O);
    break;
  case 2:
    // AND_src, BISR_sc, LD_A_sc, LD_W_sc, MOV_sc, OR_sc, ST_A_sc, SUB_A_sc
    printZExtImm_8(MI, 0, O);
    break;
  case 3:
    // BISR_rc, SYSCALL_rc
    printSExtImm_9(MI, 0, O);
    return;
    break;
  case 4:
    // CALLA_b, CALL_b, FCALLA_b, FCALL_b, JA_b, JLA_b, JL_b, J_b
    printDisp24Imm(MI, 0, O);
    return;
    break;
  case 5:
    // CALLI_rr, CMPSWAP_W_bo_bso, CMPSWAP_W_bo_c, CMPSWAP_W_bo_pos, CMPSWAP_...
    printOperand(MI, 1, O);
    break;
  case 6:
    // CALL_sb, JNZ_sb, JZ_sb, J_sb
    printDisp8Imm(MI, 0, O);
    return;
    break;
  case 7:
    // JEQ_sbc1, JEQ_sbc2, JNE_sbc1, JNE_sbc2
    printSExtImm_4(MI, 1, O);
    SStream_concat0(O, ", ");
    printDisp4Imm(MI, 0, O);
    return;
    break;
  case 8:
    // LDLCX_abs, LDUCX_abs, STLCX_abs, STUCX_abs, ST_T
    printOff18Imm(MI, 0, O);
    break;
  case 9:
    // LDMST_abs, ST_A_abs, ST_B_abs, ST_DA_abs, ST_D_abs, ST_H_abs, ST_Q_abs...
    printOff18Imm(MI, 1, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 0, O);
    return;
    break;
  case 10:
    // LOOPU_brr
    printDisp15Imm(MI, 0, O);
    return;
    break;
  case 11:
    // MTCR_rlc
    printSExtImm_16(MI, 0, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 1, O);
    return;
    break;
  case 12:
    // ST_A_ssro, ST_B_ssro, ST_H_ssro, ST_W_ssro
    printZExtImm_4(MI, 1, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 0, O);
    return;
    break;
  }


  // Fragment 1 encoded into 4 bits for 13 unique commands.
  switch ((Bits >> 16) & 15) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_B_rr_v110, ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ...
    SStream_concat0(O, ", ");
    break;
  case 1:
    // ADD_src_a15, ADD_srr_a15, CADDN_src, CADD_src, CMOVN_src, CMOVN_srr, C...
    SStream_concat0(O, ", %d15, ");
    break;
  case 2:
    // AND_src, BISR_sc, CALLI_rr, DISABLE_sys_1, FCALLA_i, JI_rr, JI_sr, JLI...
    return;
    break;
  case 3:
    // CACHEI_I_bo_bso, CACHEI_I_bo_pre, CACHEI_WI_bo_bso, CACHEI_WI_bo_pre, ...
    SStream_concat1(O, ']');
    break;
  case 4:
    // CACHEI_I_bo_pos, CACHEI_WI_bo_pos, CACHEI_W_bo_pos, CACHE_I_bo_pos, CA...
    SStream_concat0(O, "+]");
    set_mem_access(MI, false);
    break;
  case 5:
    // CACHEI_W_bo_c, CACHE_I_bo_c, CACHE_WI_bo_c, CACHE_W_bo_c
    SStream_concat0(O, "+c]");
    set_mem_access(MI, false);
    printSExtImm_10(MI, 1, O);
    return;
    break;
  case 6:
    // CACHEI_W_bo_r, CACHE_I_bo_r, CACHE_WI_bo_r, CACHE_W_bo_r
    SStream_concat0(O, "+r]");
    set_mem_access(MI, false);
    return;
    break;
  case 7:
    // LD_A_bo_bso, LD_A_bo_c, LD_A_bo_pos, LD_A_bo_r, LD_A_bol, LD_A_slr, LD...
    SStream_concat0(O, ", [");
    set_mem_access(MI, true);
    break;
  case 8:
    // LD_A_bo_pre, LD_BU_bo_pre, LD_B_bo_pre, LD_DA_bo_pre, LD_D_bo_pre, LD_...
    SStream_concat0(O, ", [+");
    set_mem_access(MI, true);
    break;
  case 9:
    // LD_A_slro, LD_BU_slro, LD_H_slro, LD_W_slro
    SStream_concat0(O, ", [%a15]");
    set_mem_access(MI, true);
    printZExtImm_4(MI, 1, O);
    return;
    break;
  case 10:
    // ST_A_sc
    SStream_concat0(O, ", %a15");
    return;
    break;
  case 11:
    // ST_A_ssr, ST_B_ssr, ST_H_ssr, ST_W_ssr
    SStream_concat0(O, "], ");
    set_mem_access(MI, false);
    printOperand(MI, 1, O);
    return;
    break;
  case 12:
    // ST_A_ssr_pos, ST_B_ssr_pos, ST_H_ssr_pos, ST_W_ssr_pos
    SStream_concat0(O, "+], ");
    set_mem_access(MI, false);
    printOperand(MI, 1, O);
    return;
    break;
  }


  // Fragment 2 encoded into 4 bits for 13 unique commands.
  switch ((Bits >> 20) & 15) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_B_rr_v110, ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ...
    printOperand(MI, 1, O);
    break;
  case 1:
    // ADDSC_A_rr_v120u, ADD_F_rrr, CADDN_rcr, CADD_rcr, CRC32B_W_rr, CRC32L_...
    printOperand(MI, 2, O);
    break;
  case 2:
    // ADD_A_src, ADD_src, ADD_src_15a, ADD_src_a15, CADDN_src, CADD_src, CMO...
    printSExtImm_4(MI, 1, O);
    return;
    break;
  case 3:
    // CACHEI_I_bo_bso, CACHEI_I_bo_pos, CACHEI_I_bo_pre, CACHEI_WI_bo_bso, C...
    printSExtImm_10(MI, 1, O);
    return;
    break;
  case 4:
    // CADDN_rrr, CADD_rrr, CRCN_rrr, CSUBN_rrr, CSUB_rrr, MADDMS_H_rrr1_LL, ...
    printOperand(MI, 3, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 1, O);
    break;
  case 5:
    // CMPSWAP_W_bo_bso, CMPSWAP_W_bo_c, CMPSWAP_W_bo_pos, CMPSWAP_W_bo_pre, ...
    printSExtImm_10(MI, 2, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 0, O);
    return;
    break;
  case 6:
    // CMPSWAP_W_bo_r, LDMST_bo_r, ST_A_bo_pos, ST_A_bo_pre, ST_B_bo_pos, ST_...
    printOperand(MI, 0, O);
    break;
  case 7:
    // JEQ_brc, JGE_U_brc, JGE_brc, JLT_U_brc, JLT_brc, JNED_brc, JNEI_brc, J...
    printZExtImm_4(MI, 1, O);
    break;
  case 8:
    // JEQ_sbr1, JEQ_sbr2, JGEZ_sbr, JGTZ_sbr, JLEZ_sbr, JLTZ_sbr, JNE_sbr1, ...
    printDisp4Imm(MI, 1, O);
    return;
    break;
  case 9:
    // LD_A_abs, LD_BU_abs, LD_B_abs, LD_DA_abs, LD_D_abs, LD_HU_abs, LD_H_ab...
    printOff18Imm(MI, 1, O);
    return;
    break;
  case 10:
    // LOOP_brr
    printDisp15Imm(MI, 1, O);
    return;
    break;
  case 11:
    // MFCR_rlc, MOVH_A_rlc, MOVH_rlc, MOV_U_rlc, MOV_rlcDc, MOV_rlcEc
    printZExtImm_16(MI, 1, O);
    return;
    break;
  case 12:
    // ST_A_bol, ST_B_bol, ST_H_bol, ST_W_bol
    printSExtImm_16(MI, 2, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 1, O);
    return;
    break;
  }


  // Fragment 3 encoded into 4 bits for 11 unique commands.
  switch ((Bits >> 24) & 15) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_B_rr_v110, ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ...
    SStream_concat0(O, ", ");
    break;
  case 1:
    // ABS_B_rr, ABS_H_rr, ABS_rr, ADDS_srr, ADD_A_srr, ADD_srr, ADD_srr_15a,...
    return;
    break;
  case 2:
    // ADDSC_A_srrs_v120u
    SStream_concat0(O, ", %d15, ");
    printZExtImm_2(MI, 2, O);
    return;
    break;
  case 3:
    // LD_A_bo_bso, LD_A_bo_pre, LD_A_bol, LD_A_slr, LD_BU_bo_bso, LD_BU_bo_p...
    SStream_concat1(O, ']');
    break;
  case 4:
    // LD_A_bo_c, LD_BU_bo_c, LD_B_bo_c, LD_DA_bo_c, LD_D_bo_c, LD_HU_bo_c, L...
    SStream_concat0(O, "+c]");
    set_mem_access(MI, false);
    printSExtImm_10(MI, 2, O);
    return;
    break;
  case 5:
    // LD_A_bo_pos, LD_A_slr_post, LD_BU_bo_pos, LD_BU_slr_post, LD_B_bo_pos,...
    SStream_concat0(O, "+]");
    set_mem_access(MI, false);
    break;
  case 6:
    // LD_A_bo_r, LD_BU_bo_r, LD_B_bo_r, LD_DA_bo_r, LD_D_bo_r, LD_HU_bo_r, L...
    SStream_concat0(O, "+r]");
    set_mem_access(MI, false);
    return;
    break;
  case 7:
    // MADDRS_Q_rrr1_L_L, MADDR_Q_rrr1_L_L, MADDS_Q_rrr1_L_L, MADDS_Q_rrr1_e_...
    SStream_concat0(O, "L, ");
    printOperand(MI, 2, O);
    SStream_concat0(O, "L, ");
    break;
  case 8:
    // MADDRS_Q_rrr1_U_U, MADDR_Q_rrr1_U_U, MADDS_Q_rrr1_U_U, MADDS_Q_rrr1_e_...
    SStream_concat0(O, "U, ");
    printOperand(MI, 2, O);
    SStream_concat0(O, "U, ");
    break;
  case 9:
    // ST_A_sro
    SStream_concat0(O, ", %a15");
    return;
    break;
  case 10:
    // ST_B_sro, ST_H_sro, ST_W_sro
    SStream_concat0(O, ", %d15");
    return;
    break;
  }


  // Fragment 4 encoded into 4 bits for 11 unique commands.
  switch ((Bits >> 28) & 15) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_B_rr_v110, ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ...
    printOperand(MI, 2, O);
    break;
  case 1:
    // ABSDIF_rc, ADDC_rc, ADDS_U_rc, ADDS_rc, ADDX_rc, ADD_rc, ANDN_rc, AND_...
    printSExtImm_9(MI, 2, O);
    return;
    break;
  case 2:
    // ADDIH_A_rlc, ADDIH_rlc, ADDI_rlc
    printSExtImm_16(MI, 2, O);
    return;
    break;
  case 3:
    // ADDSC_A_rr_v120u, ADD_F_rrr, CADDN_rcr, CADD_rcr, CRC32B_W_rr, CRC32L_...
    printOperand(MI, 1, O);
    break;
  case 4:
    // ADDSC_A_srrs_v110
    printZExtImm_2(MI, 2, O);
    return;
    break;
  case 5:
    // ANDN_T, AND_ANDN_T, AND_AND_T, AND_NOR_T, AND_OR_T, AND_T, INSN_T, INS...
    printZExtImm_4(MI, 3, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 2, O);
    SStream_concat0(O, ", ");
    printZExtImm_4(MI, 4, O);
    return;
    break;
  case 6:
    // JEQ_A_brr, JEQ_brc, JEQ_brr, JGE_U_brc, JGE_U_brr, JGE_brc, JGE_brr, J...
    printDisp15Imm(MI, 2, O);
    return;
    break;
  case 7:
    // LD_A_bo_bso, LD_A_bo_pos, LD_A_bo_pre, LD_BU_bo_bso, LD_BU_bo_pos, LD_...
    printSExtImm_10(MI, 2, O);
    return;
    break;
  case 8:
    // LD_A_slr, LD_A_slr_post, LD_BU_slr, LD_BU_slr_post, LD_H_slr, LD_H_slr...
    return;
    break;
  case 9:
    // MADDRS_Q_rrr1_L_L, MADDRS_Q_rrr1_U_U, MADDR_Q_rrr1_L_L, MADDR_Q_rrr1_U...
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 10:
    // MULR_Q_rr1_2LL, MULR_Q_rr1_2UU, MUL_Q_rr1_2LL, MUL_Q_rr1_2UU
    printZExtImm_2(MI, 3, O);
    return;
    break;
  }


  // Fragment 5 encoded into 4 bits for 15 unique commands.
  switch ((Bits >> 32) & 15) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_B_rr_v110, ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ...
    return;
    break;
  case 1:
    // ADDSC_A_rr_v110, ADDSC_A_rr_v120u, CADDN_rcr, CADD_rcr, DEXTR_rrpw, DE...
    SStream_concat0(O, ", ");
    break;
  case 2:
    // MADDMS_H_rrr1_LL, MADDM_H_rrr1_LL, MADDRS_H_rrr1_LL, MADDR_H_rrr1_LL, ...
    SStream_concat0(O, " LL, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 3:
    // MADDMS_H_rrr1_LU, MADDM_H_rrr1_LU, MADDRS_H_rrr1_LU, MADDR_H_rrr1_LU, ...
    SStream_concat0(O, " LU, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 4:
    // MADDMS_H_rrr1_UL, MADDM_H_rrr1_UL, MADDRS_H_rrr1_UL, MADDR_H_rrr1_UL, ...
    SStream_concat0(O, " UL, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 5:
    // MADDMS_H_rrr1_UU, MADDM_H_rrr1_UU, MADDRS_H_rrr1_UU, MADDR_H_rrr1_UU, ...
    SStream_concat0(O, " UU, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 6:
    // MADDRS_H_rrr1_DcEdDaDbUL, MADDR_H_rrr1_DcEdDaDbUL, MSUBRS_H_rrr1_DcEdD...
    SStream_concat0(O, ", UL, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 7:
    // MADDS_Q_rrr1_L, MADDS_Q_rrr1_e_L, MADD_Q_rrr1_L, MADD_Q_rrr1_e_L, MSUB...
    SStream_concat0(O, " L, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 8:
    // MADDS_Q_rrr1_U, MADDS_Q_rrr1_e_U, MADD_Q_rrr1_U, MADD_Q_rrr1_e_U, MSUB...
    SStream_concat0(O, " U, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 9:
    // MULM_H_rr1_LL2e, MULR_H_rr1_LL2e, MUL_H_rr1_LL2e
    SStream_concat0(O, "LL, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 10:
    // MULM_H_rr1_LU2e, MULR_H_rr1_LU2e, MUL_H_rr1_LU2e
    SStream_concat0(O, "LU, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 11:
    // MULM_H_rr1_UL2e, MULR_H_rr1_UL2e, MUL_H_rr1_UL2e
    SStream_concat0(O, "UL, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 12:
    // MULM_H_rr1_UU2e, MULR_H_rr1_UU2e, MUL_H_rr1_UU2e
    SStream_concat0(O, "UU, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 13:
    // MUL_Q_rr1_2_L, MUL_Q_rr1_2_Le
    SStream_concat0(O, "L, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 14:
    // MUL_Q_rr1_2_U, MUL_Q_rr1_2_Ue
    SStream_concat0(O, "U, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  }


  // Fragment 6 encoded into 2 bits for 4 unique commands.
  switch ((Bits >> 36) & 3) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ADDSC_A_rr_v110, ADDSC_A_rr_v120u, DEXTR_rrpw, DEXTR_rrrr, EXTR_U_rrpw...
    printOperand(MI, 3, O);
    break;
  case 1:
    // CADDN_rcr, CADD_rcr, MADDS_U_rcr, MADDS_U_rcr_e, MADDS_rcr, MADDS_rcr_...
    printSExtImm_9(MI, 3, O);
    return;
    break;
  case 2:
    // MADDS_Q_rrr1, MADDS_Q_rrr1_e, MADD_Q_rrr1, MADD_Q_rrr1_e, MSUBS_Q_rrr1...
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 3:
    // MUL_Q_rr1_2__, MUL_Q_rr1_2__e
    printZExtImm_2(MI, 3, O);
    return;
    break;
  }


  // Fragment 7 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 38) & 1) {
    // INSERT_rcpw, INSERT_rcrw, INSERT_rrpw, INSERT_rrrr, INSERT_rrrw
    SStream_concat0(O, ", ");
    printOperand(MI, 4, O);
    return;
  } else {
    // ADDSC_A_rr_v110, ADDSC_A_rr_v120u, DEXTR_rrpw, DEXTR_rrrr, EXTR_U_rrpw...
    return;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 61 && "Invalid register number!");

  static const char AsmStrs[] = {
  /* 0 */ "d10\0"
  /* 4 */ "e10\0"
  /* 8 */ "p10\0"
  /* 12 */ "a0\0"
  /* 15 */ "d0\0"
  /* 18 */ "e0\0"
  /* 21 */ "p0\0"
  /* 24 */ "A10_A11\0"
  /* 32 */ "a11\0"
  /* 36 */ "d11\0"
  /* 40 */ "A0_A1\0"
  /* 46 */ "a1\0"
  /* 49 */ "d1\0"
  /* 52 */ "a12\0"
  /* 56 */ "d12\0"
  /* 60 */ "e12\0"
  /* 64 */ "p12\0"
  /* 68 */ "a2\0"
  /* 71 */ "d2\0"
  /* 74 */ "e2\0"
  /* 77 */ "p2\0"
  /* 80 */ "A12_A13\0"
  /* 88 */ "a13\0"
  /* 92 */ "d13\0"
  /* 96 */ "A2_A3\0"
  /* 102 */ "a3\0"
  /* 105 */ "d3\0"
  /* 108 */ "a14\0"
  /* 112 */ "d14\0"
  /* 116 */ "e14\0"
  /* 120 */ "p14\0"
  /* 124 */ "a4\0"
  /* 127 */ "d4\0"
  /* 130 */ "e4\0"
  /* 133 */ "p4\0"
  /* 136 */ "A14_A15\0"
  /* 144 */ "a15\0"
  /* 148 */ "d15\0"
  /* 152 */ "A4_A5\0"
  /* 158 */ "a5\0"
  /* 161 */ "d5\0"
  /* 164 */ "a6\0"
  /* 167 */ "d6\0"
  /* 170 */ "e6\0"
  /* 173 */ "p6\0"
  /* 176 */ "A6_A7\0"
  /* 182 */ "a7\0"
  /* 185 */ "d7\0"
  /* 188 */ "a8\0"
  /* 191 */ "d8\0"
  /* 194 */ "e8\0"
  /* 197 */ "p8\0"
  /* 200 */ "A8_A9\0"
  /* 206 */ "a9\0"
  /* 209 */ "d9\0"
  /* 212 */ "pc\0"
  /* 215 */ "pcxi\0"
  /* 220 */ "sp\0"
  /* 223 */ "psw\0"
  /* 227 */ "fcx\0"
};
  static const uint8_t RegAsmOffset[] = {
    227, 212, 215, 223, 12, 46, 68, 102, 124, 158, 164, 182, 188, 206, 
    220, 32, 52, 88, 108, 144, 15, 49, 71, 105, 127, 161, 167, 185, 
    191, 209, 0, 36, 56, 92, 112, 148, 18, 74, 130, 170, 194, 4, 
    60, 116, 21, 77, 133, 173, 197, 8, 64, 120, 40, 96, 152, 176, 
    200, 24, 80, 136, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}
#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

bool printAliasInstr(MCInst *MI, uint64_t Address, SStream *OS) {
  return false;
}

#endif // PRINT_ALIAS_INSTR
