/* Capstone Disassembly Engine, http://www.capstone-engine.org */
/* By Nguyen Anh Quynh <aquynh@gmail.com>, 2013-2022, */
/*    Rot127 <unisono@quyllur.org> 2022-2023 */
/* Automatically generated file by the LLVM TableGen Disassembler Backend. */
/* Do not edit. */

#include <capstone/platform.h>
#include <assert.h>

/// getMnemonic - This method is automatically generated by tablegen
/// from the instruction set description.
MnemonicBitsInfo getMnemonic(MCInst *MI, SStream *O) {
  static const char AsmStrs[] = {
  /* 0 */ "ld.a %a15, %a10, \0"
  /* 18 */ "ld.w %a15, %a10, \0"
  /* 36 */ "sub.a %a10, \0"
  /* 49 */ "st.a %a10, \0"
  /* 61 */ "ld.a %a15, \0"
  /* 73 */ "st.a %a15, \0"
  /* 85 */ "st.b %a15, \0"
  /* 97 */ "ld.h %a15, \0"
  /* 109 */ "st.h %a15, \0"
  /* 121 */ "ld.bu %a15, \0"
  /* 134 */ "ld.w %a15, \0"
  /* 146 */ "st.w %a15, \0"
  /* 158 */ "sub %d15, \0"
  /* 169 */ "add %d15, \0"
  /* 180 */ "and %d15, \0"
  /* 191 */ "jne %d15, \0"
  /* 202 */ "jeq %d15, \0"
  /* 213 */ "or %d15, \0"
  /* 223 */ "jz.t %d15, \0"
  /* 235 */ "jnz.t %d15, \0"
  /* 248 */ "lt %d15, \0"
  /* 258 */ "mov %d15, \0"
  /* 269 */ "ftoq31 \0"
  /* 277 */ "CMPSWAP.W \0"
  /* 288 */ "addsc.a \0"
  /* 297 */ "add.a \0"
  /* 304 */ "ld.a \0"
  /* 310 */ "ge.a \0"
  /* 316 */ "jne.a \0"
  /* 323 */ "addih.a \0"
  /* 332 */ "movh.a \0"
  /* 340 */ "jeq.a \0"
  /* 347 */ "lt.a \0"
  /* 353 */ "st.a \0"
  /* 359 */ "mov.a \0"
  /* 366 */ "nez.a \0"
  /* 373 */ "jz.a \0"
  /* 379 */ "jnz.a \0"
  /* 386 */ "eqz.a \0"
  /* 393 */ "mov.aa \0"
  /* 401 */ "ld.da \0"
  /* 408 */ "st.da \0"
  /* 415 */ "lea \0"
  /* 420 */ "sha \0"
  /* 425 */ "ja \0"
  /* 429 */ "jla \0"
  /* 434 */ "fcalla \0"
  /* 442 */ "crc32.b \0"
  /* 451 */ "sub.b \0"
  /* 458 */ "add.b \0"
  /* 465 */ "ld.b \0"
  /* 471 */ "absdif.b \0"
  /* 481 */ "min.b \0"
  /* 488 */ "eq.b \0"
  /* 494 */ "abs.b \0"
  /* 501 */ "sat.b \0"
  /* 508 */ "dvinit.b \0"
  /* 518 */ "lt.b \0"
  /* 524 */ "st.b \0"
  /* 530 */ "max.b \0"
  /* 537 */ "eqany.b \0"
  /* 546 */ "csub \0"
  /* 552 */ "msub \0"
  /* 558 */ "rsub \0"
  /* 564 */ "subc \0"
  /* 570 */ "addc \0"
  /* 576 */ "ld.d \0"
  /* 582 */ "st.d \0"
  /* 588 */ "mov.d \0"
  /* 595 */ "cadd \0"
  /* 601 */ "madd \0"
  /* 607 */ "jned \0"
  /* 613 */ "nand \0"
  /* 619 */ "and.ge \0"
  /* 627 */ "sh.ge \0"
  /* 634 */ "xor.ge \0"
  /* 642 */ "jge \0"
  /* 647 */ "bmerge \0"
  /* 655 */ "disable \0"
  /* 664 */ "shuffle \0"
  /* 673 */ "and.ne \0"
  /* 681 */ "xor.ne \0"
  /* 689 */ "jne \0"
  /* 694 */ "msub.f \0"
  /* 702 */ "madd.f \0"
  /* 710 */ "qseed.f \0"
  /* 719 */ "mul.f \0"
  /* 726 */ "cmp.f \0"
  /* 733 */ "div.f \0"
  /* 740 */ "absdif \0"
  /* 748 */ "q31tof \0"
  /* 756 */ "itof \0"
  /* 762 */ "hptof \0"
  /* 769 */ "utof \0"
  /* 775 */ "sha.h \0"
  /* 782 */ "msub.h \0"
  /* 790 */ "msubad.h \0"
  /* 800 */ "madd.h \0"
  /* 808 */ "ld.h \0"
  /* 814 */ "absdif.h \0"
  /* 824 */ "sh.h \0"
  /* 830 */ "mul.h \0"
  /* 837 */ "msubm.h \0"
  /* 846 */ "msubadm.h \0"
  /* 857 */ "maddm.h \0"
  /* 866 */ "mulm.h \0"
  /* 874 */ "maddsum.h \0"
  /* 885 */ "min.h \0"
  /* 892 */ "clo.h \0"
  /* 899 */ "eq.h \0"
  /* 905 */ "msubr.h \0"
  /* 914 */ "msubadr.h \0"
  /* 925 */ "maddr.h \0"
  /* 934 */ "mulr.h \0"
  /* 942 */ "maddsur.h \0"
  /* 953 */ "abs.h \0"
  /* 960 */ "msubs.h \0"
  /* 969 */ "msubads.h \0"
  /* 980 */ "madds.h \0"
  /* 989 */ "absdifs.h \0"
  /* 1000 */ "cls.h \0"
  /* 1007 */ "msubms.h \0"
  /* 1017 */ "msubadms.h \0"
  /* 1029 */ "maddms.h \0"
  /* 1039 */ "maddsums.h \0"
  /* 1051 */ "msubrs.h \0"
  /* 1061 */ "msubadrs.h \0"
  /* 1073 */ "maddrs.h \0"
  /* 1083 */ "maddsurs.h \0"
  /* 1095 */ "abss.h \0"
  /* 1103 */ "maddsus.h \0"
  /* 1114 */ "sat.h \0"
  /* 1121 */ "dvinit.h \0"
  /* 1131 */ "lt.h \0"
  /* 1137 */ "st.h \0"
  /* 1143 */ "maddsu.h \0"
  /* 1153 */ "max.h \0"
  /* 1160 */ "eqany.h \0"
  /* 1169 */ "clz.h \0"
  /* 1176 */ "addih \0"
  /* 1183 */ "sh \0"
  /* 1187 */ "movh \0"
  /* 1193 */ "addi \0"
  /* 1199 */ "jnei \0"
  /* 1205 */ "ji \0"
  /* 1209 */ "jli \0"
  /* 1214 */ "fcalli \0"
  /* 1222 */ "ftoi \0"
  /* 1228 */ "dvadj \0"
  /* 1235 */ "unpack \0"
  /* 1243 */ "imask \0"
  /* 1250 */ "sel \0"
  /* 1255 */ "updfl \0"
  /* 1262 */ "jl \0"
  /* 1266 */ "fcall \0"
  /* 1273 */ "syscall \0"
  /* 1282 */ "mul \0"
  /* 1287 */ "crcn \0"
  /* 1293 */ "caddn \0"
  /* 1300 */ "andn \0"
  /* 1306 */ "ixmin \0"
  /* 1313 */ "seln \0"
  /* 1319 */ "orn \0"
  /* 1324 */ "cmovn \0"
  /* 1331 */ "clo \0"
  /* 1336 */ "dvstep \0"
  /* 1344 */ "ftohp \0"
  /* 1351 */ "loop \0"
  /* 1357 */ "msub.q \0"
  /* 1365 */ "madd.q \0"
  /* 1373 */ "ld.q \0"
  /* 1379 */ "mul.q \0"
  /* 1386 */ "msubr.q \0"
  /* 1395 */ "maddr.q \0"
  /* 1404 */ "mulr.q \0"
  /* 1412 */ "msubs.q \0"
  /* 1421 */ "madds.q \0"
  /* 1430 */ "msubrs.q \0"
  /* 1440 */ "maddrs.q \0"
  /* 1450 */ "st.q \0"
  /* 1456 */ "and.eq \0"
  /* 1464 */ "sh.eq \0"
  /* 1471 */ "xor.eq \0"
  /* 1479 */ "jeq \0"
  /* 1484 */ "mfcr \0"
  /* 1490 */ "xnor \0"
  /* 1496 */ "xor \0"
  /* 1501 */ "bisr \0"
  /* 1507 */ "dextr \0"
  /* 1514 */ "shas \0"
  /* 1520 */ "abs \0"
  /* 1525 */ "msubs \0"
  /* 1532 */ "rsubs \0"
  /* 1539 */ "madds \0"
  /* 1546 */ "absdifs \0"
  /* 1555 */ "cls \0"
  /* 1560 */ "muls \0"
  /* 1566 */ "abss \0"
  /* 1572 */ "and.and.t \0"
  /* 1583 */ "sh.and.t \0"
  /* 1593 */ "or.and.t \0"
  /* 1603 */ "sh.nand.t \0"
  /* 1614 */ "and.andn.t \0"
  /* 1626 */ "sh.andn.t \0"
  /* 1637 */ "or.andn.t \0"
  /* 1648 */ "sh.orn.t \0"
  /* 1658 */ "insn.t \0"
  /* 1666 */ "and.or.t \0"
  /* 1676 */ "sh.or.t \0"
  /* 1685 */ "or.or.t \0"
  /* 1694 */ "and.nor.t \0"
  /* 1705 */ "sh.nor.t \0"
  /* 1715 */ "or.nor.t \0"
  /* 1725 */ "sh.xnor.t \0"
  /* 1736 */ "sh.xor.t \0"
  /* 1746 */ "ins.t \0"
  /* 1753 */ "st.t \0"
  /* 1759 */ "jz.t \0"
  /* 1765 */ "jnz.t \0"
  /* 1772 */ "addsc.at \0"
  /* 1782 */ "bsplit \0"
  /* 1790 */ "dvinit \0"
  /* 1798 */ "and.lt \0"
  /* 1806 */ "sh.lt \0"
  /* 1813 */ "xor.lt \0"
  /* 1821 */ "jlt \0"
  /* 1826 */ "not \0"
  /* 1831 */ "insert \0"
  /* 1839 */ "ldmst \0"
  /* 1846 */ "madd.u \0"
  /* 1854 */ "and.ge.u \0"
  /* 1864 */ "sh.ge.u \0"
  /* 1873 */ "xor.ge.u \0"
  /* 1883 */ "jge.u \0"
  /* 1890 */ "mul.u \0"
  /* 1897 */ "ixmin.u \0"
  /* 1906 */ "dvstep.u \0"
  /* 1916 */ "extr.u \0"
  /* 1924 */ "rsubs.u \0"
  /* 1933 */ "madds.u \0"
  /* 1942 */ "muls.u \0"
  /* 1950 */ "dvinit.u \0"
  /* 1960 */ "and.lt.u \0"
  /* 1970 */ "sh.lt.u \0"
  /* 1979 */ "xor.lt.u \0"
  /* 1989 */ "jlt.u \0"
  /* 1996 */ "div.u \0"
  /* 2003 */ "mov.u \0"
  /* 2010 */ "ixmax.u \0"
  /* 2019 */ "ld.bu \0"
  /* 2026 */ "min.bu \0"
  /* 2034 */ "sat.bu \0"
  /* 2042 */ "dvinit.bu \0"
  /* 2053 */ "lt.bu \0"
  /* 2060 */ "max.bu \0"
  /* 2068 */ "ld.hu \0"
  /* 2075 */ "min.hu \0"
  /* 2083 */ "subs.hu \0"
  /* 2092 */ "adds.hu \0"
  /* 2101 */ "sat.hu \0"
  /* 2109 */ "dvinit.hu \0"
  /* 2120 */ "lt.hu \0"
  /* 2127 */ "max.hu \0"
  /* 2135 */ "ftou \0"
  /* 2141 */ "loopu \0"
  /* 2148 */ "lt.wu \0"
  /* 2155 */ "div \0"
  /* 2160 */ "cmov \0"
  /* 2166 */ "crc32b.w \0"
  /* 2176 */ "ld.w \0"
  /* 2182 */ "swapmsk.w \0"
  /* 2193 */ "crc32l.w \0"
  /* 2203 */ "swap.w \0"
  /* 2211 */ "eq.w \0"
  /* 2217 */ "lt.w \0"
  /* 2223 */ "popcnt.w \0"
  /* 2233 */ "st.w \0"
  /* 2239 */ "ixmax \0"
  /* 2246 */ "subx \0"
  /* 2252 */ "ldlcx \0"
  /* 2259 */ "stlcx \0"
  /* 2266 */ "lducx \0"
  /* 2273 */ "stucx \0"
  /* 2280 */ "addx \0"
  /* 2286 */ "parity \0"
  /* 2294 */ "ftoq31z \0"
  /* 2303 */ "jgez \0"
  /* 2309 */ "jlez \0"
  /* 2315 */ "ftoiz \0"
  /* 2322 */ "jz \0"
  /* 2326 */ "clz \0"
  /* 2331 */ "jnz \0"
  /* 2336 */ "jgtz \0"
  /* 2342 */ "jltz \0"
  /* 2348 */ "ftouz \0"
  /* 2355 */ "ld.a [+\0"
  /* 2363 */ "st.a [+\0"
  /* 2371 */ "st.b [+\0"
  /* 2379 */ "ld.h [+\0"
  /* 2387 */ "st.h [+\0"
  /* 2395 */ "cache.i [+\0"
  /* 2406 */ "cachei.i [+\0"
  /* 2418 */ "cache.wi [+\0"
  /* 2430 */ "cachei.wi [+\0"
  /* 2443 */ "ld.bu [+\0"
  /* 2452 */ "ld.w [+\0"
  /* 2460 */ "cache.w [+\0"
  /* 2471 */ "cachei.w [+\0"
  /* 2483 */ "st.w [+\0"
  /* 2491 */ "# XRay Function Patchable RET.\0"
  /* 2522 */ "# XRay Typed Event Log.\0"
  /* 2546 */ "# XRay Custom Event Log.\0"
  /* 2571 */ "# XRay Function Enter.\0"
  /* 2594 */ "# XRay Tail Call Exit.\0"
  /* 2617 */ "# XRay Function Exit.\0"
  /* 2639 */ "LIFETIME_END\0"
  /* 2652 */ "PSEUDO_PROBE\0"
  /* 2665 */ "BUNDLE\0"
  /* 2672 */ "DBG_VALUE\0"
  /* 2682 */ "DBG_INSTR_REF\0"
  /* 2696 */ "DBG_PHI\0"
  /* 2704 */ "DBG_LABEL\0"
  /* 2714 */ "LIFETIME_START\0"
  /* 2729 */ "DBG_VALUE_LIST\0"
  /* 2744 */ "ld.a [\0"
  /* 2751 */ "st.a [\0"
  /* 2758 */ "ld.da [\0"
  /* 2766 */ "st.da [\0"
  /* 2774 */ "lea [\0"
  /* 2780 */ "lha [\0"
  /* 2786 */ "ld.b [\0"
  /* 2793 */ "st.b [\0"
  /* 2800 */ "ld.d [\0"
  /* 2807 */ "st.d [\0"
  /* 2814 */ "ld.h [\0"
  /* 2821 */ "st.h [\0"
  /* 2828 */ "cache.i [\0"
  /* 2838 */ "cachei.i [\0"
  /* 2849 */ "cache.wi [\0"
  /* 2860 */ "cachei.wi [\0"
  /* 2872 */ "ld.q [\0"
  /* 2879 */ "st.q [\0"
  /* 2886 */ "ld.bu [\0"
  /* 2894 */ "ld.hu [\0"
  /* 2902 */ "ld.w [\0"
  /* 2909 */ "cache.w [\0"
  /* 2919 */ "cachei.w [\0"
  /* 2930 */ "swapmsk.w [\0"
  /* 2942 */ "swap.w [\0"
  /* 2951 */ "st.w [\0"
  /* 2958 */ "ldlcx [\0"
  /* 2966 */ "stlcx [\0"
  /* 2974 */ "lducx [\0"
  /* 2982 */ "stucx [\0"
  /* 2990 */ "sub.a\0"
  /* 2996 */ "add.a\0"
  /* 3002 */ "mov.a\0"
  /* 3008 */ "dsync\0"
  /* 3014 */ "isync\0"
  /* 3020 */ "rfe\0"
  /* 3024 */ "enable\0"
  /* 3031 */ "disable\0"
  /* 3039 */ "restore\0"
  /* 3047 */ "debug\0"
  /* 3053 */ "relck\0"
  /* 3059 */ "# FEntry call\0"
  /* 3073 */ "rfm\0"
  /* 3077 */ "nop\0"
  /* 3081 */ "fret\0"
  /* 3086 */ "wait\0"
  /* 3091 */ "trapv\0"
  /* 3097 */ "trapsv\0"
  /* 3104 */ "svlcx\0"
};
  static const uint32_t OpInfo0[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// INLINEASM_BR
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    2673U,	// DBG_VALUE
    2730U,	// DBG_VALUE_LIST
    2683U,	// DBG_INSTR_REF
    2697U,	// DBG_PHI
    2705U,	// DBG_LABEL
    0U,	// REG_SEQUENCE
    0U,	// COPY
    2666U,	// BUNDLE
    2715U,	// LIFETIME_START
    2640U,	// LIFETIME_END
    2653U,	// PSEUDO_PROBE
    0U,	// ARITH_FENCE
    0U,	// STACKMAP
    3060U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// PREALLOCATED_SETUP
    0U,	// PREALLOCATED_ARG
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    2572U,	// PATCHABLE_FUNCTION_ENTER
    2492U,	// PATCHABLE_RET
    2618U,	// PATCHABLE_FUNCTION_EXIT
    2595U,	// PATCHABLE_TAIL_CALL
    2547U,	// PATCHABLE_EVENT_CALL
    2523U,	// PATCHABLE_TYPED_EVENT_CALL
    0U,	// ICALL_BRANCH_FUNNEL
    0U,	// G_ASSERT_SEXT
    0U,	// G_ASSERT_ZEXT
    0U,	// G_ASSERT_ALIGN
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_SDIVREM
    0U,	// G_UDIVREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_BUILD_VECTOR
    0U,	// G_BUILD_VECTOR_TRUNC
    0U,	// G_CONCAT_VECTORS
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_FREEZE
    0U,	// G_INTRINSIC_FPTRUNC_ROUND
    0U,	// G_INTRINSIC_TRUNC
    0U,	// G_INTRINSIC_ROUND
    0U,	// G_INTRINSIC_LRINT
    0U,	// G_INTRINSIC_ROUNDEVEN
    0U,	// G_READCYCLECOUNTER
    0U,	// G_LOAD
    0U,	// G_SEXTLOAD
    0U,	// G_ZEXTLOAD
    0U,	// G_INDEXED_LOAD
    0U,	// G_INDEXED_SEXTLOAD
    0U,	// G_INDEXED_ZEXTLOAD
    0U,	// G_STORE
    0U,	// G_INDEXED_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_ATOMICRMW_FADD
    0U,	// G_ATOMICRMW_FSUB
    0U,	// G_ATOMICRMW_FMAX
    0U,	// G_ATOMICRMW_FMIN
    0U,	// G_FENCE
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INVOKE_REGION_START
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_SEXT_INREG
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_FSHL
    0U,	// G_FSHR
    0U,	// G_ROTR
    0U,	// G_ROTL
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDO
    0U,	// G_UADDE
    0U,	// G_USUBO
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SADDE
    0U,	// G_SSUBO
    0U,	// G_SSUBE
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_UADDSAT
    0U,	// G_SADDSAT
    0U,	// G_USUBSAT
    0U,	// G_SSUBSAT
    0U,	// G_USHLSAT
    0U,	// G_SSHLSAT
    0U,	// G_SMULFIX
    0U,	// G_UMULFIX
    0U,	// G_SMULFIXSAT
    0U,	// G_UMULFIXSAT
    0U,	// G_SDIVFIX
    0U,	// G_UDIVFIX
    0U,	// G_SDIVFIXSAT
    0U,	// G_UDIVFIXSAT
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FMAD
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FPOWI
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FLOG10
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_FABS
    0U,	// G_FCOPYSIGN
    0U,	// G_IS_FPCLASS
    0U,	// G_FCANONICALIZE
    0U,	// G_FMINNUM
    0U,	// G_FMAXNUM
    0U,	// G_FMINNUM_IEEE
    0U,	// G_FMAXNUM_IEEE
    0U,	// G_FMINIMUM
    0U,	// G_FMAXIMUM
    0U,	// G_PTR_ADD
    0U,	// G_PTRMASK
    0U,	// G_SMIN
    0U,	// G_SMAX
    0U,	// G_UMIN
    0U,	// G_UMAX
    0U,	// G_ABS
    0U,	// G_LROUND
    0U,	// G_LLROUND
    0U,	// G_BR
    0U,	// G_BRJT
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_CTTZ
    0U,	// G_CTTZ_ZERO_UNDEF
    0U,	// G_CTLZ
    0U,	// G_CTLZ_ZERO_UNDEF
    0U,	// G_CTPOP
    0U,	// G_BSWAP
    0U,	// G_BITREVERSE
    0U,	// G_FCEIL
    0U,	// G_FCOS
    0U,	// G_FSIN
    0U,	// G_FSQRT
    0U,	// G_FFLOOR
    0U,	// G_FRINT
    0U,	// G_FNEARBYINT
    0U,	// G_ADDRSPACE_CAST
    0U,	// G_BLOCK_ADDR
    0U,	// G_JUMP_TABLE
    0U,	// G_DYN_STACKALLOC
    0U,	// G_STRICT_FADD
    0U,	// G_STRICT_FSUB
    0U,	// G_STRICT_FMUL
    0U,	// G_STRICT_FDIV
    0U,	// G_STRICT_FREM
    0U,	// G_STRICT_FMA
    0U,	// G_STRICT_FSQRT
    0U,	// G_READ_REGISTER
    0U,	// G_WRITE_REGISTER
    0U,	// G_MEMCPY
    0U,	// G_MEMCPY_INLINE
    0U,	// G_MEMMOVE
    0U,	// G_MEMSET
    0U,	// G_BZERO
    0U,	// G_VECREDUCE_SEQ_FADD
    0U,	// G_VECREDUCE_SEQ_FMUL
    0U,	// G_VECREDUCE_FADD
    0U,	// G_VECREDUCE_FMUL
    0U,	// G_VECREDUCE_FMAX
    0U,	// G_VECREDUCE_FMIN
    0U,	// G_VECREDUCE_ADD
    0U,	// G_VECREDUCE_MUL
    0U,	// G_VECREDUCE_AND
    0U,	// G_VECREDUCE_OR
    0U,	// G_VECREDUCE_XOR
    0U,	// G_VECREDUCE_SMAX
    0U,	// G_VECREDUCE_SMIN
    0U,	// G_VECREDUCE_UMAX
    0U,	// G_VECREDUCE_UMIN
    0U,	// G_SBFX
    0U,	// G_UBFX
    5086U,	// ABSDIFS_H_rr
    5643U,	// ABSDIFS_rc
    5643U,	// ABSDIFS_rr
    4568U,	// ABSDIF_B_rr
    4911U,	// ABSDIF_H_rr
    268440293U,	// ABSDIF_rc
    4837U,	// ABSDIF_rr
    5192U,	// ABSS_H_rr
    5663U,	// ABSS_rr
    16781807U,	// ABS_B_rr
    16782266U,	// ABS_H_rr
    16782833U,	// ABS_rr
    268440123U,	// ADDC_rc
    4667U,	// ADDC_rr
    536875332U,	// ADDIH_A_rlc
    536876185U,	// ADDIH_rlc
    536876202U,	// ADDI_rlc
    5869U,	// ADDSC_AT_rr
    2953842977U,	// ADDSC_A_rr
    33558817U,	// ADDSC_A_srrs
    5078U,	// ADDS_H
    6189U,	// ADDS_HU
    6031U,	// ADDS_U
    268441487U,	// ADDS_U_rc
    268441093U,	// ADDS_rc
    5637U,	// ADDS_rr
    16782853U,	// ADDS_srr
    268441833U,	// ADDX_rc
    6377U,	// ADDX_rr
    2997U,	// ADD_A_rr
    2101546U,	// ADD_A_src
    16781610U,	// ADD_A_srr
    4555U,	// ADD_B_rr
    806359744U,	// ADD_F_rrr
    4898U,	// ADD_H_rr
    268440149U,	// ADD_rc
    4693U,	// ADD_rr
    2101845U,	// ADD_src
    2101418U,	// ADD_src_15a
    2167381U,	// ADD_src_a15
    16781909U,	// ADD_srr
    16781482U,	// ADD_srr_15a
    16847445U,	// ADD_srr_a15
    1073747539U,	// ANDN_T
    268440853U,	// ANDN_rc
    5397U,	// ANDN_rr
    1073747535U,	// AND_ANDN_T
    1073747493U,	// AND_AND_T
    268441009U,	// AND_EQ_rc
    5553U,	// AND_EQ_rr
    268441407U,	// AND_GE_U_rc
    5951U,	// AND_GE_U_rr
    268440172U,	// AND_GE_rc
    4716U,	// AND_GE_rr
    268441513U,	// AND_LT_U_rc
    6057U,	// AND_LT_U_rr
    268441351U,	// AND_LT_rc
    5895U,	// AND_LT_rr
    268440226U,	// AND_NE_rc
    4770U,	// AND_NE_rr
    1073747615U,	// AND_NOR_T
    1073747587U,	// AND_OR_T
    1073747497U,	// AND_T
    268440167U,	// AND_rc
    4711U,	// AND_rr
    139445U,	// AND_src
    16781927U,	// AND_srr
    13790U,	// BISR_rc
    140766U,	// BISR_sc
    4744U,	// BMAERGE_rr
    16783095U,	// BSPLIT_rr
    3349271U,	// CACHEI_I_bo_bso
    3348839U,	// CACHEI_I_bo_pos
    269079U,	// CACHEI_I_bo_pre
    3349293U,	// CACHEI_WI_bo_bso
    3348863U,	// CACHEI_WI_bo_pos
    269101U,	// CACHEI_WI_bo_pre
    3349352U,	// CACHEI_W_bo_bso
    3480424U,	// CACHEI_W_bo_c
    3348904U,	// CACHEI_W_bo_pos
    269160U,	// CACHEI_W_bo_pre
    400232U,	// CACHEI_W_bo_r
    3349261U,	// CACHE_I_bo_bso
    3480333U,	// CACHE_I_bo_c
    3348828U,	// CACHE_I_bo_pos
    269069U,	// CACHE_I_bo_pre
    400141U,	// CACHE_I_bo_r
    3349282U,	// CACHE_WI_bo_bso
    3480354U,	// CACHE_WI_bo_c
    3348851U,	// CACHE_WI_bo_pos
    269090U,	// CACHE_WI_bo_pre
    400162U,	// CACHE_WI_bo_r
    3349342U,	// CACHE_W_bo_bso
    3480414U,	// CACHE_W_bo_c
    3348893U,	// CACHE_W_bo_pos
    269150U,	// CACHE_W_bo_pre
    400222U,	// CACHE_W_bo_r
    2953843982U,	// CADDN_rcr
    4199694U,	// CADDN_rrr
    2168078U,	// CADDN_src
    2953843284U,	// CADD_rcr
    4198996U,	// CADD_rrr
    2167380U,	// CADD_src
    16820U,	// CALLA_b
    152768U,	// CALLI_rr
    17652U,	// CALL_b
    16782205U,	// CLO_H_rr
    16782644U,	// CLO_rr
    16782313U,	// CLS_H_rr
    16782868U,	// CLS_rr
    16782482U,	// CLZ_H_rr
    16783639U,	// CLZ_rr
    2168109U,	// CMOVN_src
    16848173U,	// CMOVN_srr
    2168945U,	// CMOV_src
    16849009U,	// CMOV_srr
    3367190U,	// CMPSWAP_W_bo_bso
    5595414U,	// CMPSWAP_W_bo_c
    1392972054U,	// CMPSWAP_W_bo_pos
    67637526U,	// CMPSWAP_W_bo_pre
    418070U,	// CMPSWAP_W_bo_r
    4823U,	// CMP_F_rr
    806361207U,	// CRC32B_W_rr
    806361234U,	// CRC32L_W_rr
    806359483U,	// CRC32_B_rr
    4199688U,	// CRCN_rrr
    4198947U,	// CSUBN_rrr
    4198947U,	// CSUB_rrr
    3048U,	// DEBUG_sr
    3048U,	// DEBUG_sys
    2147489252U,	// DEXTR_rrpw
    2147489252U,	// DEXTR_rrrr
    3032U,	// DISABLE_sys
    135824U,	// DISABLE_sys_1
    4830U,	// DIV_F_rr
    6093U,	// DIV_U_rr
    6252U,	// DIV_rr
    3009U,	// DSYNC_sys
    806360269U,	// DVADJ_rrr
    6139U,	// DVINIT_BU_rr
    4605U,	// DVINIT_B_rr
    6206U,	// DVINIT_HU_rr
    5218U,	// DVINIT_H_rr
    6047U,	// DVINIT_U_rr
    5887U,	// DVINIT_rr
    806360947U,	// DVSTEP_U_rrr
    806360377U,	// DVSTEP_rrr
    3025U,	// ENABLE_sys
    268440090U,	// EQANY_B_rc
    4634U,	// EQANY_B_rr
    268440713U,	// EQANY_H_rc
    5257U,	// EQANY_H_rr
    16781699U,	// EQZ_A_rr
    4438U,	// EQ_A_rr
    4585U,	// EQ_B_rr
    4996U,	// EQ_H_rr
    6308U,	// EQ_W_rr
    268441013U,	// EQ_rc
    5557U,	// EQ_rr
    2101452U,	// EQ_src
    16781516U,	// EQ_srr
    2147489661U,	// EXTR_U_rrpw
    6013U,	// EXTR_U_rrrr
    2147489661U,	// EXTR_U_rrrw
    2147489253U,	// EXTR_rrpw
    5605U,	// EXTR_rrrr
    2147489253U,	// EXTR_rrrw
    16819U,	// FCALLA_b
    152767U,	// FCALLA_i
    17651U,	// FCALL_b
    3082U,	// FRET_sr
    3082U,	// FRET_sys
    16782657U,	// FTOHP_rr
    16783628U,	// FTOIZ_rr
    16782535U,	// FTOI_rr
    6391U,	// FTOQ31Z_rr
    4366U,	// FTOQ31_rr
    16783661U,	// FTOUZ_rr
    16783448U,	// FTOU_rr
    4407U,	// GE_A_rr
    268441411U,	// GE_U_rc
    5955U,	// GE_U_rr
    268440176U,	// GE_rc
    4720U,	// GE_rr
    16782075U,	// HPTOF_rr
    2147488988U,	// IMASK_rcpw
    2147488988U,	// IMASK_rcrw
    2147488988U,	// IMASK_rrpw
    2147488988U,	// IMASK_rrrw
    2147489576U,	// INSERT_rcpw
    2147489576U,	// INSERT_rcrr
    2147489576U,	// INSERT_rcrw
    2147489576U,	// INSERT_rrpw
    2147489576U,	// INSERT_rrrr
    2147489576U,	// INSERT_rrrw
    1073747579U,	// INSN_T
    1073747667U,	// INS_T
    3015U,	// ISYNC_sys
    16782069U,	// ITOF_rr
    806361051U,	// IXMAX_U_rrr
    806361280U,	// IXMAX_rrr
    806360938U,	// IXMIN_U_rrr
    806360347U,	// IXMIN_rrr
    16810U,	// JA_b
    4437U,	// JEQ_A_brr
    6313416U,	// JEQ_brc
    5576U,	// JEQ_brr
    28875U,	// JEQ_sbc1
    28875U,	// JEQ_sbc2
    7344331U,	// JEQ_sbr1
    7344331U,	// JEQ_sbr2
    7346432U,	// JGEZ_sbr
    6313820U,	// JGE_U_brc
    5980U,	// JGE_U_brr
    6312579U,	// JGE_brc
    4739U,	// JGE_brr
    7346465U,	// JGTZ_sbr
    152758U,	// JI_rr
    136374U,	// JI_sr
    16814U,	// JLA_b
    7346438U,	// JLEZ_sbr
    152762U,	// JLI_rr
    7346471U,	// JLTZ_sbr
    6313926U,	// JLT_U_brc
    6086U,	// JLT_U_brr
    6313758U,	// JLT_brc
    5918U,	// JLT_brr
    17647U,	// JL_b
    6312544U,	// JNED_brc
    4704U,	// JNED_brr
    6313136U,	// JNEI_brc
    5296U,	// JNEI_brr
    4413U,	// JNE_A_brr
    6312626U,	// JNE_brc
    4786U,	// JNE_brr
    28864U,	// JNE_sbc1
    28864U,	// JNE_sbc2
    7344320U,	// JNE_sbr1
    7344320U,	// JNE_sbr2
    4476U,	// JNZ_A_brr
    7344508U,	// JNZ_A_sbr
    5862U,	// JNZ_T_brn
    16781548U,	// JNZ_T_sbrn
    35100U,	// JNZ_sb
    7346460U,	// JNZ_sbr
    4470U,	// JZ_A_brr
    7344502U,	// JZ_A_sbr
    5856U,	// JZ_T_brn
    16781536U,	// JZ_T_sbrn
    35091U,	// JZ_sb
    7346451U,	// JZ_sbr
    17617U,	// J_b
    34001U,	// J_sb
    137421U,	// LDLCX_abs
    3349391U,	// LDLCX_bo_bso
    25188144U,	// LDMST_abs
    3368752U,	// LDMST_bo_bso
    5596976U,	// LDMST_bo_c
    1392973616U,	// LDMST_bo_pos
    67639088U,	// LDMST_bo_pre
    419632U,	// LDMST_bo_r
    137435U,	// LDUCX_abs
    3349407U,	// LDUCX_bo_bso
    16980665U,	// LD_A_abs
    1393037617U,	// LD_A_bo_bso
    84414769U,	// LD_A_bo_c
    1392972081U,	// LD_A_bo_pos
    67637553U,	// LD_A_bo_pre
    101191985U,	// LD_A_bo_r
    50860337U,	// LD_A_bol
    139265U,	// LD_A_sc
    16781617U,	// LD_A_slr
    16980276U,	// LD_A_slr_post
    594225U,	// LD_A_slro
    9441342U,	// LD_A_sro
    16980807U,	// LD_BU_abs
    1393039332U,	// LD_BU_bo_bso
    84416484U,	// LD_BU_bo_c
    1392973796U,	// LD_BU_bo_pos
    67639268U,	// LD_BU_bo_pre
    101193700U,	// LD_BU_bo_r
    50862052U,	// LD_BU_bol
    16783332U,	// LD_BU_slr
    16980364U,	// LD_BU_slr_post
    595940U,	// LD_BU_slro
    9441402U,	// LD_BU_sro
    16980707U,	// LD_B_abs
    1393037778U,	// LD_B_bo_bso
    84414930U,	// LD_B_bo_c
    1392972242U,	// LD_B_bo_pos
    67637714U,	// LD_B_bo_pre
    101192146U,	// LD_B_bo_r
    50860498U,	// LD_B_bol
    16980679U,	// LD_DA_abs
    1393037714U,	// LD_DA_bo_bso
    84414866U,	// LD_DA_bo_c
    1392972178U,	// LD_DA_bo_pos
    67637650U,	// LD_DA_bo_pre
    101192082U,	// LD_DA_bo_r
    16980721U,	// LD_D_abs
    1393037889U,	// LD_D_bo_bso
    84415041U,	// LD_D_bo_c
    1392972353U,	// LD_D_bo_pos
    67637825U,	// LD_D_bo_pre
    101192257U,	// LD_D_bo_r
    16980815U,	// LD_HU_abs
    1393039381U,	// LD_HU_bo_bso
    84416533U,	// LD_HU_bo_c
    1392973845U,	// LD_HU_bo_pos
    67639317U,	// LD_HU_bo_pre
    101193749U,	// LD_HU_bo_r
    50862101U,	// LD_HU_bol
    16980735U,	// LD_H_abs
    1393038121U,	// LD_H_bo_bso
    84415273U,	// LD_H_bo_c
    1392972585U,	// LD_H_bo_pos
    67638057U,	// LD_H_bo_pre
    101192489U,	// LD_H_bo_r
    50860841U,	// LD_H_bol
    16782121U,	// LD_H_slr
    16980300U,	// LD_H_slr_post
    594729U,	// LD_H_slro
    9441378U,	// LD_H_sro
    16980793U,	// LD_Q_abs
    1393038686U,	// LD_Q_bo_bso
    84415838U,	// LD_Q_bo_c
    1392973150U,	// LD_Q_bo_pos
    67638622U,	// LD_Q_bo_pre
    101193054U,	// LD_Q_bo_r
    16980823U,	// LD_W_abs
    1393039489U,	// LD_W_bo_bso
    84416641U,	// LD_W_bo_c
    1392973953U,	// LD_W_bo_pos
    67639425U,	// LD_W_bo_pre
    101193857U,	// LD_W_bo_r
    50862209U,	// LD_W_bol
    139283U,	// LD_W_sc
    16783489U,	// LD_W_slr
    16980373U,	// LD_W_slr_post
    596097U,	// LD_W_slro
    9441415U,	// LD_W_sro
    16980695U,	// LEA_abs
    1393037728U,	// LEA_bo_bso
    50860448U,	// LEA_bol
    16980701U,	// LHA_abs
    137310U,	// LOOPU_brr
    16782664U,	// LOOP_brr
    7345480U,	// LOOP_sbr
    4444U,	// LT_A_rr
    4615U,	// LT_B
    6150U,	// LT_BU
    5228U,	// LT_H
    6217U,	// LT_HU
    268441517U,	// LT_U_rc
    6061U,	// LT_U_rr
    6314U,	// LT_W
    6245U,	// LT_WU
    268441355U,	// LT_rc
    5899U,	// LT_rr
    2101497U,	// LT_src
    16781561U,	// LT_srr
    4199430U,	// MADDMS_H_rrr1_LL
    2151683078U,	// MADDMS_H_rrr1_LU
    4199430U,	// MADDMS_H_rrr1_UL
    2151683078U,	// MADDMS_H_rrr1_UU
    4199258U,	// MADDM_H_rrr1_LL
    2151682906U,	// MADDM_H_rrr1_LU
    4199258U,	// MADDM_H_rrr1_UL
    2151682906U,	// MADDM_H_rrr1_UU
    4199474U,	// MADDRS_H_rrr1_DcEdDaDbUL
    4199474U,	// MADDRS_H_rrr1_LL
    2151683122U,	// MADDRS_H_rrr1_LU
    4199474U,	// MADDRS_H_rrr1_UL
    2151683122U,	// MADDRS_H_rrr1_UU
    1732253089U,	// MADDRS_Q_rrr1_L_L
    1749030305U,	// MADDRS_Q_rrr1_U_U
    4199326U,	// MADDR_H_rrr1_DcEdDaDbUL
    4199326U,	// MADDR_H_rrr1_LL
    2151682974U,	// MADDR_H_rrr1_LU
    4199326U,	// MADDR_H_rrr1_UL
    2151682974U,	// MADDR_H_rrr1_UU
    1732253044U,	// MADDR_Q_rrr1_L_L
    1749030260U,	// MADDR_Q_rrr1_U_U
    4199440U,	// MADDSUMS_H_rrr1_LL
    2151683088U,	// MADDSUMS_H_rrr1_LU
    4199440U,	// MADDSUMS_H_rrr1_UL
    2151683088U,	// MADDSUMS_H_rrr1_UU
    4199275U,	// MADDSUM_H_rrr1_LL
    2151682923U,	// MADDSUM_H_rrr1_LU
    4199275U,	// MADDSUM_H_rrr1_UL
    2151682923U,	// MADDSUM_H_rrr1_UU
    4199484U,	// MADDSURS_H_rrr1_LL
    2151683132U,	// MADDSURS_H_rrr1_LU
    4199484U,	// MADDSURS_H_rrr1_UL
    2151683132U,	// MADDSURS_H_rrr1_UU
    4199343U,	// MADDSUR_H_rrr1_LL
    2151682991U,	// MADDSUR_H_rrr1_LU
    4199343U,	// MADDSUR_H_rrr1_UL
    2151682991U,	// MADDSUR_H_rrr1_UU
    4199504U,	// MADDSUS_H_rrr1_LL
    2151683152U,	// MADDSUS_H_rrr1_LU
    4199504U,	// MADDSUS_H_rrr1_UL
    2151683152U,	// MADDSUS_H_rrr1_UU
    4199544U,	// MADDSU_H_rrr1_LL
    2151683192U,	// MADDSU_H_rrr1_LU
    4199544U,	// MADDSU_H_rrr1_UL
    2151683192U,	// MADDSU_H_rrr1_UU
    4199381U,	// MADDS_H_rrr1_LL
    2151683029U,	// MADDS_H_rrr1_LU
    4199381U,	// MADDS_H_rrr1_UL
    2151683029U,	// MADDS_H_rrr1_UU
    2151683470U,	// MADDS_Q_rrr1
    2151683470U,	// MADDS_Q_rrr1_L
    1732253070U,	// MADDS_Q_rrr1_L_L
    4199822U,	// MADDS_Q_rrr1_U
    1749030286U,	// MADDS_Q_rrr1_U_U
    2151683470U,	// MADDS_Q_rrr1_e
    2151683470U,	// MADDS_Q_rrr1_e_L
    1732253070U,	// MADDS_Q_rrr1_e_L_L
    4199822U,	// MADDS_Q_rrr1_e_U
    1749030286U,	// MADDS_Q_rrr1_e_U_U
    2953844622U,	// MADDS_U_rcr
    2953844622U,	// MADDS_U_rcr_e
    4200334U,	// MADDS_U_rrr2
    4200334U,	// MADDS_U_rrr2_e
    2953844228U,	// MADDS_rcr
    2953844228U,	// MADDS_rcr_e
    4199940U,	// MADDS_rrr2
    4199940U,	// MADDS_rrr2_e
    4199103U,	// MADD_F_rrr
    4199201U,	// MADD_H_rrr1_LL
    2151682849U,	// MADD_H_rrr1_LU
    4199201U,	// MADD_H_rrr1_UL
    2151682849U,	// MADD_H_rrr1_UU
    2151683414U,	// MADD_Q_rrr1
    2151683414U,	// MADD_Q_rrr1_L
    1732253014U,	// MADD_Q_rrr1_L_L
    4199766U,	// MADD_Q_rrr1_U
    1749030230U,	// MADD_Q_rrr1_U_U
    2151683414U,	// MADD_Q_rrr1_e
    2151683414U,	// MADD_Q_rrr1_e_L
    1732253014U,	// MADD_Q_rrr1_e_L_L
    4199766U,	// MADD_Q_rrr1_e_U
    1749030230U,	// MADD_Q_rrr1_e_U_U
    2953844535U,	// MADD_U_rcr
    4200247U,	// MADD_U_rrr2
    2953843290U,	// MADD_rcr
    2953843290U,	// MADD_rcr_e
    4199002U,	// MADD_rrr2
    4199002U,	// MADD_rrr2_e
    4627U,	// MAX_B
    6157U,	// MAX_BU
    5250U,	// MAX_H
    6224U,	// MAX_HU
    268441565U,	// MAX_U_rc
    6109U,	// MAX_U_rr
    268441794U,	// MAX_rc
    6338U,	// MAX_rr
    536876493U,	// MFCR_rlc
    4578U,	// MIN_B
    6123U,	// MIN_BU
    4982U,	// MIN_H
    6172U,	// MIN_HU
    268441452U,	// MIN_U_rc
    5996U,	// MIN_U_rr
    268440861U,	// MIN_rc
    5405U,	// MIN_rr
    10490189U,	// MOVH_A_rlc
    10491044U,	// MOVH_rlc
    17830282U,	// MOV_AA_rr
    16781706U,	// MOV_AA_srr
    3003U,	// MOV_A_rr
    2101608U,	// MOV_A_src
    16781672U,	// MOV_A_srr
    17830477U,	// MOV_D_rr
    16781901U,	// MOV_D_srr
    10491860U,	// MOV_U_rlc
    10492018U,	// MOV_rlcDc
    10492018U,	// MOV_rlcEc
    17832050U,	// MOV_rrDcDb
    6258U,	// MOV_rrEcDaDb
    17832050U,	// MOV_rrEcDb
    139523U,	// MOV_sc
    2103410U,	// MOV_srcDa
    2103410U,	// MOV_srcEa
    16783474U,	// MOV_srr
    4199418U,	// MSUBADMS_H_rrr1_LL
    2151683066U,	// MSUBADMS_H_rrr1_LU
    4199418U,	// MSUBADMS_H_rrr1_UL
    2151683066U,	// MSUBADMS_H_rrr1_UU
    4199247U,	// MSUBADM_H_rrr1_LL
    2151682895U,	// MSUBADM_H_rrr1_LU
    4199247U,	// MSUBADM_H_rrr1_UL
    2151682895U,	// MSUBADM_H_rrr1_UU
    4199462U,	// MSUBADRS_H_rrr1_LL
    2151683110U,	// MSUBADRS_H_rrr1_LU
    4199462U,	// MSUBADRS_H_rrr1_UL
    2151683110U,	// MSUBADRS_H_rrr1_UU
    4199315U,	// MSUBADR_H_rrr1_LL
    2151682963U,	// MSUBADR_H_rrr1_LU
    4199315U,	// MSUBADR_H_rrr1_UL
    2151682963U,	// MSUBADR_H_rrr1_UU
    4199370U,	// MSUBADS_H_rrr1_LL
    2151683018U,	// MSUBADS_H_rrr1_LU
    4199370U,	// MSUBADS_H_rrr1_UL
    2151683018U,	// MSUBADS_H_rrr1_UU
    4199191U,	// MSUBAD_H_rrr1_LL
    2151682839U,	// MSUBAD_H_rrr1_LU
    4199191U,	// MSUBAD_H_rrr1_UL
    2151682839U,	// MSUBAD_H_rrr1_UU
    4199408U,	// MSUBMS_H_rrr1_LL
    2151683056U,	// MSUBMS_H_rrr1_LU
    4199408U,	// MSUBMS_H_rrr1_UL
    2151683056U,	// MSUBMS_H_rrr1_UU
    4199238U,	// MSUBM_H_rrr1_LL
    2151682886U,	// MSUBM_H_rrr1_LU
    4199238U,	// MSUBM_H_rrr1_UL
    2151682886U,	// MSUBM_H_rrr1_UU
    4199452U,	// MSUBRS_H_rrr1_DcEdDaDbUL
    4199452U,	// MSUBRS_H_rrr1_LL
    2151683100U,	// MSUBRS_H_rrr1_LU
    4199452U,	// MSUBRS_H_rrr1_UL
    2151683100U,	// MSUBRS_H_rrr1_UU
    1732253079U,	// MSUBRS_Q_rrr1_L_L
    1749030295U,	// MSUBRS_Q_rrr1_U_U
    4199306U,	// MSUBR_H_rrr1_DcEdDaDbUL
    4199306U,	// MSUBR_H_rrr1_LL
    2151682954U,	// MSUBR_H_rrr1_LU
    4199306U,	// MSUBR_H_rrr1_UL
    2151682954U,	// MSUBR_H_rrr1_UU
    1732253035U,	// MSUBR_Q_rrr1_L_L
    1749030251U,	// MSUBR_Q_rrr1_U_U
    4199361U,	// MSUBS_H_rrr1_LL
    2151683009U,	// MSUBS_H_rrr1_LU
    4199361U,	// MSUBS_H_rrr1_UL
    2151683009U,	// MSUBS_H_rrr1_UU
    2151683461U,	// MSUBS_Q_rrr1
    2151683461U,	// MSUBS_Q_rrr1_L
    1732253061U,	// MSUBS_Q_rrr1_L_L
    4199813U,	// MSUBS_Q_rrr1_U
    1749030277U,	// MSUBS_Q_rrr1_U_U
    2151683461U,	// MSUBS_Q_rrr1_e
    2151683461U,	// MSUBS_Q_rrr1_e_L
    1732253061U,	// MSUBS_Q_rrr1_e_L_L
    4199813U,	// MSUBS_Q_rrr1_e_U
    1749030277U,	// MSUBS_Q_rrr1_e_U_U
    2953844622U,	// MSUBS_U_rcr
    2953844622U,	// MSUBS_U_rcr_e
    4200334U,	// MSUBS_U_rrr2
    4200334U,	// MSUBS_U_rrr2_e
    2953844214U,	// MSUBS_rcr
    2953844214U,	// MSUBS_rcr_e
    4199926U,	// MSUBS_rrr2
    4199926U,	// MSUBS_rrr2_e
    4199095U,	// MSUB_F_rrr
    4199183U,	// MSUB_H_rrr1_LL
    2151682831U,	// MSUB_H_rrr1_LU
    4199183U,	// MSUB_H_rrr1_UL
    2151682831U,	// MSUB_H_rrr1_UU
    2151683406U,	// MSUB_Q_rrr1
    2151683406U,	// MSUB_Q_rrr1_L
    1732253006U,	// MSUB_Q_rrr1_L_L
    4199758U,	// MSUB_Q_rrr1_U
    1749030222U,	// MSUB_Q_rrr1_U_U
    2151683406U,	// MSUB_Q_rrr1_e
    2151683406U,	// MSUB_Q_rrr1_e_L
    1732253006U,	// MSUB_Q_rrr1_e_L_L
    4199758U,	// MSUB_Q_rrr1_e_U
    1749030222U,	// MSUB_Q_rrr1_e_U_U
    2953844535U,	// MSUB_U_rcr
    4200247U,	// MSUB_U_rrr2
    2953843241U,	// MSUB_rcr
    2953843241U,	// MSUB_rcr_e
    4198953U,	// MSUB_rrr2
    4198953U,	// MSUB_rrr2_e
    2147488611U,	// MULM_H_rr1_LL2e
    4963U,	// MULM_H_rr1_LU2e
    2147488611U,	// MULM_H_rr1_UL2e
    4963U,	// MULM_H_rr1_UU2e
    2147488679U,	// MULR_H_rr1_LL2e
    5031U,	// MULR_H_rr1_LU2e
    2147488679U,	// MULR_H_rr1_UL2e
    5031U,	// MULR_H_rr1_UU2e
    1996494205U,	// MULR_Q_rr1_2LL
    2013271421U,	// MULR_Q_rr1_2UU
    268441495U,	// MULS_U_rc
    6039U,	// MULS_U_rr2
    268441113U,	// MULS_rc
    5657U,	// MULS_rr2
    4816U,	// MUL_F_rrr
    2147488575U,	// MUL_H_rr1_LL2e
    4927U,	// MUL_H_rr1_LU2e
    2147488575U,	// MUL_H_rr1_UL2e
    4927U,	// MUL_H_rr1_UU2e
    1996494180U,	// MUL_Q_rr1_2LL
    2013271396U,	// MUL_Q_rr1_2UU
    2147489124U,	// MUL_Q_rr1_2_L
    2147489124U,	// MUL_Q_rr1_2_Le
    5476U,	// MUL_Q_rr1_2_U
    5476U,	// MUL_Q_rr1_2_Ue
    2147489124U,	// MUL_Q_rr1_2__
    2147489124U,	// MUL_Q_rr1_2__e
    268441443U,	// MUL_U_rc
    5987U,	// MUL_U_rr2
    268440835U,	// MUL_rc
    268440835U,	// MUL_rc_e
    5379U,	// MUL_rr2
    5379U,	// MUL_rr2_e
    16782595U,	// MUL_srr
    1073747527U,	// NAND_T
    268440166U,	// NAND_rc
    4710U,	// NAND_rr
    16781679U,	// NEZ_A
    4414U,	// NE_A
    268440230U,	// NE_rc
    4774U,	// NE_rr
    3078U,	// NOP_sr
    3078U,	// NOP_sys
    1073747619U,	// NOR_T
    268441044U,	// NOR_rc
    5588U,	// NOR_rr
    136995U,	// NOT_sr
    1073747572U,	// ORN_T
    268440872U,	// ORN_rc
    5416U,	// ORN_rr
    1073747558U,	// OR_ANDN_T
    1073747514U,	// OR_AND_T
    268441025U,	// OR_EQ_rc
    5569U,	// OR_EQ_rr
    268441427U,	// OR_GE_U_rc
    5971U,	// OR_GE_U_rr
    268440188U,	// OR_GE_rc
    4732U,	// OR_GE_rr
    268441533U,	// OR_LT_U_rc
    6077U,	// OR_LT_U_rr
    268441367U,	// OR_LT_rc
    5911U,	// OR_LT_rr
    268440235U,	// OR_NE_rc
    4779U,	// OR_NE_rr
    1073747636U,	// OR_NOR_T
    1073747606U,	// OR_OR_T
    1073747591U,	// OR_T
    268441045U,	// OR_rc
    5589U,	// OR_rr
    139478U,	// OR_sc
    16782805U,	// OR_srr
    806360278U,	// PACK_rrr
    16783599U,	// PARITY_rr
    16783536U,	// POPCNT_W_rr
    4845U,	// Q31TOF_rr
    16782023U,	// QSEED_F_rr
    3040U,	// RESTORE_sys
    3083U,	// RET_sr
    3083U,	// RET_sys
    3021U,	// RFE_sr
    3021U,	// RFE_sys
    3074U,	// RFM_sys
    3054U,	// RSLCX_sys
    3040U,	// RSTV_sys
    268441477U,	// RSUBS_U_rc
    268441085U,	// RSUBS_rc
    268440111U,	// RSUB_rc
    135727U,	// RSUB_sr
    16783347U,	// SAT_BU_rr
    137203U,	// SAT_BU_sr
    16781814U,	// SAT_B_rr
    135670U,	// SAT_B_sr
    16783414U,	// SAT_HU_rr
    137270U,	// SAT_HU_sr
    16782427U,	// SAT_H_rr
    136283U,	// SAT_H_sr
    2953844002U,	// SELN_rcr
    4199714U,	// SELN_rrr
    2953843939U,	// SEL_rcr
    4199651U,	// SEL_rrr
    268441067U,	// SHAS_rc
    5611U,	// SHAS_rr
    268440328U,	// SHA_H_rc
    4872U,	// SHA_H_rr
    268439973U,	// SHA_rc
    4517U,	// SHA_rr
    2101669U,	// SHA_src
    268440217U,	// SHUFFLE_rc
    1073747547U,	// SH_ANDN_T
    1073747504U,	// SH_AND_T
    268441017U,	// SH_EQ_rc
    5561U,	// SH_EQ_rr
    268441417U,	// SH_GE_U_rc
    5961U,	// SH_GE_U_rr
    268440180U,	// SH_GE_rc
    4724U,	// SH_GE_rr
    268440377U,	// SH_H_rc
    4921U,	// SH_H_rr
    268441523U,	// SH_LT_U_rc
    6067U,	// SH_LT_U_rr
    268441359U,	// SH_LT_rc
    5903U,	// SH_LT_rr
    1073747524U,	// SH_NAND_T
    268441359U,	// SH_NE_rc
    5903U,	// SH_NE_rr
    1073747626U,	// SH_NOR_T
    1073747569U,	// SH_ORN_T
    1073747597U,	// SH_OR_T
    1073747646U,	// SH_XNOR_T
    1073747657U,	// SH_XOR_T
    268440736U,	// SH_rc
    5280U,	// SH_rr
    2102432U,	// SH_src
    137428U,	// STLCX_abs
    3349399U,	// STLCX_bo_bso
    137442U,	// STUCX_abs
    3349415U,	// STUCX_bo_bso
    25186658U,	// ST_A_abs
    11754176U,	// ST_A_bo_bso
    84414818U,	// ST_A_bo_c
    1401377122U,	// ST_A_bo_pos
    76042594U,	// ST_A_bo_pre
    101192034U,	// ST_A_bo_r
    806558400U,	// ST_A_bol
    663602U,	// ST_A_sc
    9441354U,	// ST_A_sro
    16781666U,	// ST_A_ssr
    16980284U,	// ST_A_ssr_pos
    36938U,	// ST_A_ssro
    25186829U,	// ST_B_abs
    11754218U,	// ST_B_bo_bso
    84414989U,	// ST_B_bo_c
    1401377293U,	// ST_B_bo_pos
    76042765U,	// ST_B_bo_pre
    101192205U,	// ST_B_bo_r
    806558442U,	// ST_B_bol
    9441366U,	// ST_B_sro
    16781837U,	// ST_B_ssr
    16980292U,	// ST_B_ssr_pos
    36950U,	// ST_B_ssro
    25186713U,	// ST_DA_abs
    11754191U,	// ST_DA_bo_bso
    84414873U,	// ST_DA_bo_c
    1401377177U,	// ST_DA_bo_pos
    76042649U,	// ST_DA_bo_pre
    101192089U,	// ST_DA_bo_r
    25186887U,	// ST_D_abs
    11754232U,	// ST_D_bo_bso
    84415047U,	// ST_D_bo_c
    1401377351U,	// ST_D_bo_pos
    76042823U,	// ST_D_bo_pre
    101192263U,	// ST_D_bo_r
    25187442U,	// ST_H_abs
    11754246U,	// ST_H_bo_bso
    84415602U,	// ST_H_bo_c
    1401377906U,	// ST_H_bo_pos
    76043378U,	// ST_H_bo_pre
    101192818U,	// ST_H_bo_r
    806558470U,	// ST_H_bol
    9441390U,	// ST_H_sro
    16782450U,	// ST_H_ssr
    16980308U,	// ST_H_ssr_pos
    36974U,	// ST_H_ssro
    25187755U,	// ST_Q_abs
    11754304U,	// ST_Q_bo_bso
    84415915U,	// ST_Q_bo_c
    1401378219U,	// ST_Q_bo_pos
    76043691U,	// ST_Q_bo_pre
    101193131U,	// ST_Q_bo_r
    5850U,	// ST_T
    25188538U,	// ST_W_abs
    11754376U,	// ST_W_bo_bso
    84416698U,	// ST_W_bo_c
    1401379002U,	// ST_W_bo_pos
    76044474U,	// ST_W_bo_pre
    101193914U,	// ST_W_bo_r
    806558600U,	// ST_W_bol
    9441427U,	// ST_W_sro
    16783546U,	// ST_W_ssr
    16980404U,	// ST_W_ssr_pos
    37011U,	// ST_W_ssro
    4661U,	// SUBC_rr
    6180U,	// SUBS_HU_rr
    5058U,	// SUBS_H_rr
    6022U,	// SUBS_U_rr
    5623U,	// SUBS_rr
    16782839U,	// SUBS_srr
    6343U,	// SUBX_rr
    2991U,	// SUB_A_rr
    139301U,	// SUB_A_sc
    4548U,	// SUB_B_rr
    806359736U,	// SUB_F_rrr
    4880U,	// SUB_H_rr
    4644U,	// SUB_rr
    16781860U,	// SUB_srr
    16781471U,	// SUB_srr_15a
    16847396U,	// SUB_srr_a15
    3105U,	// SVLCX_sys
    11754355U,	// SWAPMSK_W_bo_bso
    84416647U,	// SWAPMSK_W_bo_c
    1401378951U,	// SWAPMSK_W_bo_pos
    76044423U,	// SWAPMSK_W_bo_pre
    101193863U,	// SWAPMSK_W_bo_r
    25188508U,	// SWAP_W_abs
    11754367U,	// SWAP_W_bo_bso
    84416668U,	// SWAP_W_bo_c
    1401378972U,	// SWAP_W_bo_pos
    76044444U,	// SWAP_W_bo_pre
    101193884U,	// SWAP_W_bo_r
    13562U,	// SYSCALL_rc
    3098U,	// TRAPSV_sys
    3092U,	// TRAPV_sys
    16782548U,	// UNPACK_rr
    152808U,	// UPDFL_rr
    16782082U,	// UTOF_rr
    3087U,	// WAIT_sys
    1073747649U,	// XNOR_T
    268441043U,	// XNOR_rc
    5587U,	// XNOR_rr
    268441024U,	// XOR_EQ_rc
    5568U,	// XOR_EQ_rr
    268441426U,	// XOR_GE_U_rc
    5970U,	// XOR_GE_U_rr
    268440187U,	// XOR_GE_rc
    4731U,	// XOR_GE_rr
    268441532U,	// XOR_LT_U_rc
    6076U,	// XOR_LT_U_rr
    268441366U,	// XOR_LT_rc
    5910U,	// XOR_LT_rr
    268440234U,	// XOR_NE_rc
    4778U,	// XOR_NE_rr
    1073747660U,	// XOR_T
    268441049U,	// XOR_rc
    5593U,	// XOR_rr
    16782809U,	// XOR_srr
  };

  static const uint8_t OpInfo1[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// INLINEASM_BR
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// DBG_VALUE_LIST
    0U,	// DBG_INSTR_REF
    0U,	// DBG_PHI
    0U,	// DBG_LABEL
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// PSEUDO_PROBE
    0U,	// ARITH_FENCE
    0U,	// STACKMAP
    0U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// PREALLOCATED_SETUP
    0U,	// PREALLOCATED_ARG
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    0U,	// PATCHABLE_FUNCTION_ENTER
    0U,	// PATCHABLE_RET
    0U,	// PATCHABLE_FUNCTION_EXIT
    0U,	// PATCHABLE_TAIL_CALL
    0U,	// PATCHABLE_EVENT_CALL
    0U,	// PATCHABLE_TYPED_EVENT_CALL
    0U,	// ICALL_BRANCH_FUNNEL
    0U,	// G_ASSERT_SEXT
    0U,	// G_ASSERT_ZEXT
    0U,	// G_ASSERT_ALIGN
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_SDIVREM
    0U,	// G_UDIVREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_BUILD_VECTOR
    0U,	// G_BUILD_VECTOR_TRUNC
    0U,	// G_CONCAT_VECTORS
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_FREEZE
    0U,	// G_INTRINSIC_FPTRUNC_ROUND
    0U,	// G_INTRINSIC_TRUNC
    0U,	// G_INTRINSIC_ROUND
    0U,	// G_INTRINSIC_LRINT
    0U,	// G_INTRINSIC_ROUNDEVEN
    0U,	// G_READCYCLECOUNTER
    0U,	// G_LOAD
    0U,	// G_SEXTLOAD
    0U,	// G_ZEXTLOAD
    0U,	// G_INDEXED_LOAD
    0U,	// G_INDEXED_SEXTLOAD
    0U,	// G_INDEXED_ZEXTLOAD
    0U,	// G_STORE
    0U,	// G_INDEXED_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_ATOMICRMW_FADD
    0U,	// G_ATOMICRMW_FSUB
    0U,	// G_ATOMICRMW_FMAX
    0U,	// G_ATOMICRMW_FMIN
    0U,	// G_FENCE
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INVOKE_REGION_START
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_SEXT_INREG
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_FSHL
    0U,	// G_FSHR
    0U,	// G_ROTR
    0U,	// G_ROTL
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDO
    0U,	// G_UADDE
    0U,	// G_USUBO
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SADDE
    0U,	// G_SSUBO
    0U,	// G_SSUBE
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_UADDSAT
    0U,	// G_SADDSAT
    0U,	// G_USUBSAT
    0U,	// G_SSUBSAT
    0U,	// G_USHLSAT
    0U,	// G_SSHLSAT
    0U,	// G_SMULFIX
    0U,	// G_UMULFIX
    0U,	// G_SMULFIXSAT
    0U,	// G_UMULFIXSAT
    0U,	// G_SDIVFIX
    0U,	// G_UDIVFIX
    0U,	// G_SDIVFIXSAT
    0U,	// G_UDIVFIXSAT
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FMAD
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FPOWI
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FLOG10
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_FABS
    0U,	// G_FCOPYSIGN
    0U,	// G_IS_FPCLASS
    0U,	// G_FCANONICALIZE
    0U,	// G_FMINNUM
    0U,	// G_FMAXNUM
    0U,	// G_FMINNUM_IEEE
    0U,	// G_FMAXNUM_IEEE
    0U,	// G_FMINIMUM
    0U,	// G_FMAXIMUM
    0U,	// G_PTR_ADD
    0U,	// G_PTRMASK
    0U,	// G_SMIN
    0U,	// G_SMAX
    0U,	// G_UMIN
    0U,	// G_UMAX
    0U,	// G_ABS
    0U,	// G_LROUND
    0U,	// G_LLROUND
    0U,	// G_BR
    0U,	// G_BRJT
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_CTTZ
    0U,	// G_CTTZ_ZERO_UNDEF
    0U,	// G_CTLZ
    0U,	// G_CTLZ_ZERO_UNDEF
    0U,	// G_CTPOP
    0U,	// G_BSWAP
    0U,	// G_BITREVERSE
    0U,	// G_FCEIL
    0U,	// G_FCOS
    0U,	// G_FSIN
    0U,	// G_FSQRT
    0U,	// G_FFLOOR
    0U,	// G_FRINT
    0U,	// G_FNEARBYINT
    0U,	// G_ADDRSPACE_CAST
    0U,	// G_BLOCK_ADDR
    0U,	// G_JUMP_TABLE
    0U,	// G_DYN_STACKALLOC
    0U,	// G_STRICT_FADD
    0U,	// G_STRICT_FSUB
    0U,	// G_STRICT_FMUL
    0U,	// G_STRICT_FDIV
    0U,	// G_STRICT_FREM
    0U,	// G_STRICT_FMA
    0U,	// G_STRICT_FSQRT
    0U,	// G_READ_REGISTER
    0U,	// G_WRITE_REGISTER
    0U,	// G_MEMCPY
    0U,	// G_MEMCPY_INLINE
    0U,	// G_MEMMOVE
    0U,	// G_MEMSET
    0U,	// G_BZERO
    0U,	// G_VECREDUCE_SEQ_FADD
    0U,	// G_VECREDUCE_SEQ_FMUL
    0U,	// G_VECREDUCE_FADD
    0U,	// G_VECREDUCE_FMUL
    0U,	// G_VECREDUCE_FMAX
    0U,	// G_VECREDUCE_FMIN
    0U,	// G_VECREDUCE_ADD
    0U,	// G_VECREDUCE_MUL
    0U,	// G_VECREDUCE_AND
    0U,	// G_VECREDUCE_OR
    0U,	// G_VECREDUCE_XOR
    0U,	// G_VECREDUCE_SMAX
    0U,	// G_VECREDUCE_SMIN
    0U,	// G_VECREDUCE_UMAX
    0U,	// G_VECREDUCE_UMIN
    0U,	// G_SBFX
    0U,	// G_UBFX
    0U,	// ABSDIFS_H_rr
    0U,	// ABSDIFS_rc
    0U,	// ABSDIFS_rr
    0U,	// ABSDIF_B_rr
    0U,	// ABSDIF_H_rr
    0U,	// ABSDIF_rc
    0U,	// ABSDIF_rr
    0U,	// ABSS_H_rr
    0U,	// ABSS_rr
    0U,	// ABS_B_rr
    0U,	// ABS_H_rr
    0U,	// ABS_rr
    0U,	// ADDC_rc
    0U,	// ADDC_rr
    0U,	// ADDIH_A_rlc
    0U,	// ADDIH_rlc
    0U,	// ADDI_rlc
    0U,	// ADDSC_AT_rr
    0U,	// ADDSC_A_rr
    0U,	// ADDSC_A_srrs
    0U,	// ADDS_H
    0U,	// ADDS_HU
    0U,	// ADDS_U
    0U,	// ADDS_U_rc
    0U,	// ADDS_rc
    0U,	// ADDS_rr
    0U,	// ADDS_srr
    0U,	// ADDX_rc
    0U,	// ADDX_rr
    0U,	// ADD_A_rr
    0U,	// ADD_A_src
    0U,	// ADD_A_srr
    0U,	// ADD_B_rr
    0U,	// ADD_F_rrr
    0U,	// ADD_H_rr
    0U,	// ADD_rc
    0U,	// ADD_rr
    0U,	// ADD_src
    0U,	// ADD_src_15a
    0U,	// ADD_src_a15
    0U,	// ADD_srr
    0U,	// ADD_srr_15a
    0U,	// ADD_srr_a15
    0U,	// ANDN_T
    0U,	// ANDN_rc
    0U,	// ANDN_rr
    0U,	// AND_ANDN_T
    0U,	// AND_AND_T
    0U,	// AND_EQ_rc
    0U,	// AND_EQ_rr
    0U,	// AND_GE_U_rc
    0U,	// AND_GE_U_rr
    0U,	// AND_GE_rc
    0U,	// AND_GE_rr
    0U,	// AND_LT_U_rc
    0U,	// AND_LT_U_rr
    0U,	// AND_LT_rc
    0U,	// AND_LT_rr
    0U,	// AND_NE_rc
    0U,	// AND_NE_rr
    0U,	// AND_NOR_T
    0U,	// AND_OR_T
    0U,	// AND_T
    0U,	// AND_rc
    0U,	// AND_rr
    0U,	// AND_src
    0U,	// AND_srr
    0U,	// BISR_rc
    0U,	// BISR_sc
    0U,	// BMAERGE_rr
    0U,	// BSPLIT_rr
    0U,	// CACHEI_I_bo_bso
    0U,	// CACHEI_I_bo_pos
    0U,	// CACHEI_I_bo_pre
    0U,	// CACHEI_WI_bo_bso
    0U,	// CACHEI_WI_bo_pos
    0U,	// CACHEI_WI_bo_pre
    0U,	// CACHEI_W_bo_bso
    0U,	// CACHEI_W_bo_c
    0U,	// CACHEI_W_bo_pos
    0U,	// CACHEI_W_bo_pre
    0U,	// CACHEI_W_bo_r
    0U,	// CACHE_I_bo_bso
    0U,	// CACHE_I_bo_c
    0U,	// CACHE_I_bo_pos
    0U,	// CACHE_I_bo_pre
    0U,	// CACHE_I_bo_r
    0U,	// CACHE_WI_bo_bso
    0U,	// CACHE_WI_bo_c
    0U,	// CACHE_WI_bo_pos
    0U,	// CACHE_WI_bo_pre
    0U,	// CACHE_WI_bo_r
    0U,	// CACHE_W_bo_bso
    0U,	// CACHE_W_bo_c
    0U,	// CACHE_W_bo_pos
    0U,	// CACHE_W_bo_pre
    0U,	// CACHE_W_bo_r
    8U,	// CADDN_rcr
    0U,	// CADDN_rrr
    0U,	// CADDN_src
    8U,	// CADD_rcr
    0U,	// CADD_rrr
    0U,	// CADD_src
    0U,	// CALLA_b
    0U,	// CALLI_rr
    0U,	// CALL_b
    0U,	// CLO_H_rr
    0U,	// CLO_rr
    0U,	// CLS_H_rr
    0U,	// CLS_rr
    0U,	// CLZ_H_rr
    0U,	// CLZ_rr
    0U,	// CMOVN_src
    0U,	// CMOVN_srr
    0U,	// CMOV_src
    0U,	// CMOV_srr
    0U,	// CMPSWAP_W_bo_bso
    0U,	// CMPSWAP_W_bo_c
    0U,	// CMPSWAP_W_bo_pos
    0U,	// CMPSWAP_W_bo_pre
    0U,	// CMPSWAP_W_bo_r
    0U,	// CMP_F_rr
    0U,	// CRC32B_W_rr
    0U,	// CRC32L_W_rr
    0U,	// CRC32_B_rr
    0U,	// CRCN_rrr
    0U,	// CSUBN_rrr
    0U,	// CSUB_rrr
    0U,	// DEBUG_sr
    0U,	// DEBUG_sys
    0U,	// DEXTR_rrpw
    0U,	// DEXTR_rrrr
    0U,	// DISABLE_sys
    0U,	// DISABLE_sys_1
    0U,	// DIV_F_rr
    0U,	// DIV_U_rr
    0U,	// DIV_rr
    0U,	// DSYNC_sys
    0U,	// DVADJ_rrr
    0U,	// DVINIT_BU_rr
    0U,	// DVINIT_B_rr
    0U,	// DVINIT_HU_rr
    0U,	// DVINIT_H_rr
    0U,	// DVINIT_U_rr
    0U,	// DVINIT_rr
    0U,	// DVSTEP_U_rrr
    0U,	// DVSTEP_rrr
    0U,	// ENABLE_sys
    0U,	// EQANY_B_rc
    0U,	// EQANY_B_rr
    0U,	// EQANY_H_rc
    0U,	// EQANY_H_rr
    0U,	// EQZ_A_rr
    0U,	// EQ_A_rr
    0U,	// EQ_B_rr
    0U,	// EQ_H_rr
    0U,	// EQ_W_rr
    0U,	// EQ_rc
    0U,	// EQ_rr
    0U,	// EQ_src
    0U,	// EQ_srr
    0U,	// EXTR_U_rrpw
    0U,	// EXTR_U_rrrr
    0U,	// EXTR_U_rrrw
    0U,	// EXTR_rrpw
    0U,	// EXTR_rrrr
    0U,	// EXTR_rrrw
    0U,	// FCALLA_b
    0U,	// FCALLA_i
    0U,	// FCALL_b
    0U,	// FRET_sr
    0U,	// FRET_sys
    0U,	// FTOHP_rr
    0U,	// FTOIZ_rr
    0U,	// FTOI_rr
    0U,	// FTOQ31Z_rr
    0U,	// FTOQ31_rr
    0U,	// FTOUZ_rr
    0U,	// FTOU_rr
    0U,	// GE_A_rr
    0U,	// GE_U_rc
    0U,	// GE_U_rr
    0U,	// GE_rc
    0U,	// GE_rr
    0U,	// HPTOF_rr
    0U,	// IMASK_rcpw
    0U,	// IMASK_rcrw
    0U,	// IMASK_rrpw
    0U,	// IMASK_rrrw
    32U,	// INSERT_rcpw
    0U,	// INSERT_rcrr
    32U,	// INSERT_rcrw
    32U,	// INSERT_rrpw
    32U,	// INSERT_rrrr
    32U,	// INSERT_rrrw
    0U,	// INSN_T
    0U,	// INS_T
    0U,	// ISYNC_sys
    0U,	// ITOF_rr
    0U,	// IXMAX_U_rrr
    0U,	// IXMAX_rrr
    0U,	// IXMIN_U_rrr
    0U,	// IXMIN_rrr
    0U,	// JA_b
    0U,	// JEQ_A_brr
    0U,	// JEQ_brc
    0U,	// JEQ_brr
    0U,	// JEQ_sbc1
    0U,	// JEQ_sbc2
    0U,	// JEQ_sbr1
    0U,	// JEQ_sbr2
    0U,	// JGEZ_sbr
    0U,	// JGE_U_brc
    0U,	// JGE_U_brr
    0U,	// JGE_brc
    0U,	// JGE_brr
    0U,	// JGTZ_sbr
    0U,	// JI_rr
    0U,	// JI_sr
    0U,	// JLA_b
    0U,	// JLEZ_sbr
    0U,	// JLI_rr
    0U,	// JLTZ_sbr
    0U,	// JLT_U_brc
    0U,	// JLT_U_brr
    0U,	// JLT_brc
    0U,	// JLT_brr
    0U,	// JL_b
    0U,	// JNED_brc
    0U,	// JNED_brr
    0U,	// JNEI_brc
    0U,	// JNEI_brr
    0U,	// JNE_A_brr
    0U,	// JNE_brc
    0U,	// JNE_brr
    0U,	// JNE_sbc1
    0U,	// JNE_sbc2
    0U,	// JNE_sbr1
    0U,	// JNE_sbr2
    0U,	// JNZ_A_brr
    0U,	// JNZ_A_sbr
    0U,	// JNZ_T_brn
    0U,	// JNZ_T_sbrn
    0U,	// JNZ_sb
    0U,	// JNZ_sbr
    0U,	// JZ_A_brr
    0U,	// JZ_A_sbr
    0U,	// JZ_T_brn
    0U,	// JZ_T_sbrn
    0U,	// JZ_sb
    0U,	// JZ_sbr
    0U,	// J_b
    0U,	// J_sb
    0U,	// LDLCX_abs
    0U,	// LDLCX_bo_bso
    0U,	// LDMST_abs
    0U,	// LDMST_bo_bso
    0U,	// LDMST_bo_c
    0U,	// LDMST_bo_pos
    0U,	// LDMST_bo_pre
    0U,	// LDMST_bo_r
    0U,	// LDUCX_abs
    0U,	// LDUCX_bo_bso
    0U,	// LD_A_abs
    0U,	// LD_A_bo_bso
    0U,	// LD_A_bo_c
    0U,	// LD_A_bo_pos
    0U,	// LD_A_bo_pre
    0U,	// LD_A_bo_r
    0U,	// LD_A_bol
    0U,	// LD_A_sc
    0U,	// LD_A_slr
    0U,	// LD_A_slr_post
    0U,	// LD_A_slro
    0U,	// LD_A_sro
    0U,	// LD_BU_abs
    0U,	// LD_BU_bo_bso
    0U,	// LD_BU_bo_c
    0U,	// LD_BU_bo_pos
    0U,	// LD_BU_bo_pre
    0U,	// LD_BU_bo_r
    0U,	// LD_BU_bol
    0U,	// LD_BU_slr
    0U,	// LD_BU_slr_post
    0U,	// LD_BU_slro
    0U,	// LD_BU_sro
    0U,	// LD_B_abs
    0U,	// LD_B_bo_bso
    0U,	// LD_B_bo_c
    0U,	// LD_B_bo_pos
    0U,	// LD_B_bo_pre
    0U,	// LD_B_bo_r
    0U,	// LD_B_bol
    0U,	// LD_DA_abs
    0U,	// LD_DA_bo_bso
    0U,	// LD_DA_bo_c
    0U,	// LD_DA_bo_pos
    0U,	// LD_DA_bo_pre
    0U,	// LD_DA_bo_r
    0U,	// LD_D_abs
    0U,	// LD_D_bo_bso
    0U,	// LD_D_bo_c
    0U,	// LD_D_bo_pos
    0U,	// LD_D_bo_pre
    0U,	// LD_D_bo_r
    0U,	// LD_HU_abs
    0U,	// LD_HU_bo_bso
    0U,	// LD_HU_bo_c
    0U,	// LD_HU_bo_pos
    0U,	// LD_HU_bo_pre
    0U,	// LD_HU_bo_r
    0U,	// LD_HU_bol
    0U,	// LD_H_abs
    0U,	// LD_H_bo_bso
    0U,	// LD_H_bo_c
    0U,	// LD_H_bo_pos
    0U,	// LD_H_bo_pre
    0U,	// LD_H_bo_r
    0U,	// LD_H_bol
    0U,	// LD_H_slr
    0U,	// LD_H_slr_post
    0U,	// LD_H_slro
    0U,	// LD_H_sro
    0U,	// LD_Q_abs
    0U,	// LD_Q_bo_bso
    0U,	// LD_Q_bo_c
    0U,	// LD_Q_bo_pos
    0U,	// LD_Q_bo_pre
    0U,	// LD_Q_bo_r
    0U,	// LD_W_abs
    0U,	// LD_W_bo_bso
    0U,	// LD_W_bo_c
    0U,	// LD_W_bo_pos
    0U,	// LD_W_bo_pre
    0U,	// LD_W_bo_r
    0U,	// LD_W_bol
    0U,	// LD_W_sc
    0U,	// LD_W_slr
    0U,	// LD_W_slr_post
    0U,	// LD_W_slro
    0U,	// LD_W_sro
    0U,	// LEA_abs
    0U,	// LEA_bo_bso
    0U,	// LEA_bol
    0U,	// LHA_abs
    0U,	// LOOPU_brr
    0U,	// LOOP_brr
    0U,	// LOOP_sbr
    0U,	// LT_A_rr
    0U,	// LT_B
    0U,	// LT_BU
    0U,	// LT_H
    0U,	// LT_HU
    0U,	// LT_U_rc
    0U,	// LT_U_rr
    0U,	// LT_W
    0U,	// LT_WU
    0U,	// LT_rc
    0U,	// LT_rr
    0U,	// LT_src
    0U,	// LT_srr
    1U,	// MADDMS_H_rrr1_LL
    1U,	// MADDMS_H_rrr1_LU
    2U,	// MADDMS_H_rrr1_UL
    2U,	// MADDMS_H_rrr1_UU
    1U,	// MADDM_H_rrr1_LL
    1U,	// MADDM_H_rrr1_LU
    2U,	// MADDM_H_rrr1_UL
    2U,	// MADDM_H_rrr1_UU
    3U,	// MADDRS_H_rrr1_DcEdDaDbUL
    1U,	// MADDRS_H_rrr1_LL
    1U,	// MADDRS_H_rrr1_LU
    2U,	// MADDRS_H_rrr1_UL
    2U,	// MADDRS_H_rrr1_UU
    0U,	// MADDRS_Q_rrr1_L_L
    0U,	// MADDRS_Q_rrr1_U_U
    3U,	// MADDR_H_rrr1_DcEdDaDbUL
    1U,	// MADDR_H_rrr1_LL
    1U,	// MADDR_H_rrr1_LU
    2U,	// MADDR_H_rrr1_UL
    2U,	// MADDR_H_rrr1_UU
    0U,	// MADDR_Q_rrr1_L_L
    0U,	// MADDR_Q_rrr1_U_U
    1U,	// MADDSUMS_H_rrr1_LL
    1U,	// MADDSUMS_H_rrr1_LU
    2U,	// MADDSUMS_H_rrr1_UL
    2U,	// MADDSUMS_H_rrr1_UU
    1U,	// MADDSUM_H_rrr1_LL
    1U,	// MADDSUM_H_rrr1_LU
    2U,	// MADDSUM_H_rrr1_UL
    2U,	// MADDSUM_H_rrr1_UU
    1U,	// MADDSURS_H_rrr1_LL
    1U,	// MADDSURS_H_rrr1_LU
    2U,	// MADDSURS_H_rrr1_UL
    2U,	// MADDSURS_H_rrr1_UU
    1U,	// MADDSUR_H_rrr1_LL
    1U,	// MADDSUR_H_rrr1_LU
    2U,	// MADDSUR_H_rrr1_UL
    2U,	// MADDSUR_H_rrr1_UU
    1U,	// MADDSUS_H_rrr1_LL
    1U,	// MADDSUS_H_rrr1_LU
    2U,	// MADDSUS_H_rrr1_UL
    2U,	// MADDSUS_H_rrr1_UU
    1U,	// MADDSU_H_rrr1_LL
    1U,	// MADDSU_H_rrr1_LU
    2U,	// MADDSU_H_rrr1_UL
    2U,	// MADDSU_H_rrr1_UU
    1U,	// MADDS_H_rrr1_LL
    1U,	// MADDS_H_rrr1_LU
    2U,	// MADDS_H_rrr1_UL
    2U,	// MADDS_H_rrr1_UU
    16U,	// MADDS_Q_rrr1
    3U,	// MADDS_Q_rrr1_L
    0U,	// MADDS_Q_rrr1_L_L
    4U,	// MADDS_Q_rrr1_U
    0U,	// MADDS_Q_rrr1_U_U
    16U,	// MADDS_Q_rrr1_e
    3U,	// MADDS_Q_rrr1_e_L
    0U,	// MADDS_Q_rrr1_e_L_L
    4U,	// MADDS_Q_rrr1_e_U
    0U,	// MADDS_Q_rrr1_e_U_U
    8U,	// MADDS_U_rcr
    8U,	// MADDS_U_rcr_e
    0U,	// MADDS_U_rrr2
    0U,	// MADDS_U_rrr2_e
    8U,	// MADDS_rcr
    8U,	// MADDS_rcr_e
    0U,	// MADDS_rrr2
    0U,	// MADDS_rrr2_e
    0U,	// MADD_F_rrr
    1U,	// MADD_H_rrr1_LL
    1U,	// MADD_H_rrr1_LU
    2U,	// MADD_H_rrr1_UL
    2U,	// MADD_H_rrr1_UU
    16U,	// MADD_Q_rrr1
    3U,	// MADD_Q_rrr1_L
    0U,	// MADD_Q_rrr1_L_L
    4U,	// MADD_Q_rrr1_U
    0U,	// MADD_Q_rrr1_U_U
    16U,	// MADD_Q_rrr1_e
    3U,	// MADD_Q_rrr1_e_L
    0U,	// MADD_Q_rrr1_e_L_L
    4U,	// MADD_Q_rrr1_e_U
    0U,	// MADD_Q_rrr1_e_U_U
    8U,	// MADD_U_rcr
    0U,	// MADD_U_rrr2
    8U,	// MADD_rcr
    8U,	// MADD_rcr_e
    0U,	// MADD_rrr2
    0U,	// MADD_rrr2_e
    0U,	// MAX_B
    0U,	// MAX_BU
    0U,	// MAX_H
    0U,	// MAX_HU
    0U,	// MAX_U_rc
    0U,	// MAX_U_rr
    0U,	// MAX_rc
    0U,	// MAX_rr
    0U,	// MFCR_rlc
    0U,	// MIN_B
    0U,	// MIN_BU
    0U,	// MIN_H
    0U,	// MIN_HU
    0U,	// MIN_U_rc
    0U,	// MIN_U_rr
    0U,	// MIN_rc
    0U,	// MIN_rr
    0U,	// MOVH_A_rlc
    0U,	// MOVH_rlc
    0U,	// MOV_AA_rr
    0U,	// MOV_AA_srr
    0U,	// MOV_A_rr
    0U,	// MOV_A_src
    0U,	// MOV_A_srr
    0U,	// MOV_D_rr
    0U,	// MOV_D_srr
    0U,	// MOV_U_rlc
    0U,	// MOV_rlcDc
    0U,	// MOV_rlcEc
    0U,	// MOV_rrDcDb
    0U,	// MOV_rrEcDaDb
    0U,	// MOV_rrEcDb
    0U,	// MOV_sc
    0U,	// MOV_srcDa
    0U,	// MOV_srcEa
    0U,	// MOV_srr
    1U,	// MSUBADMS_H_rrr1_LL
    1U,	// MSUBADMS_H_rrr1_LU
    2U,	// MSUBADMS_H_rrr1_UL
    2U,	// MSUBADMS_H_rrr1_UU
    1U,	// MSUBADM_H_rrr1_LL
    1U,	// MSUBADM_H_rrr1_LU
    2U,	// MSUBADM_H_rrr1_UL
    2U,	// MSUBADM_H_rrr1_UU
    1U,	// MSUBADRS_H_rrr1_LL
    1U,	// MSUBADRS_H_rrr1_LU
    2U,	// MSUBADRS_H_rrr1_UL
    2U,	// MSUBADRS_H_rrr1_UU
    1U,	// MSUBADR_H_rrr1_LL
    1U,	// MSUBADR_H_rrr1_LU
    2U,	// MSUBADR_H_rrr1_UL
    2U,	// MSUBADR_H_rrr1_UU
    1U,	// MSUBADS_H_rrr1_LL
    1U,	// MSUBADS_H_rrr1_LU
    2U,	// MSUBADS_H_rrr1_UL
    2U,	// MSUBADS_H_rrr1_UU
    1U,	// MSUBAD_H_rrr1_LL
    1U,	// MSUBAD_H_rrr1_LU
    2U,	// MSUBAD_H_rrr1_UL
    2U,	// MSUBAD_H_rrr1_UU
    1U,	// MSUBMS_H_rrr1_LL
    1U,	// MSUBMS_H_rrr1_LU
    2U,	// MSUBMS_H_rrr1_UL
    2U,	// MSUBMS_H_rrr1_UU
    1U,	// MSUBM_H_rrr1_LL
    1U,	// MSUBM_H_rrr1_LU
    2U,	// MSUBM_H_rrr1_UL
    2U,	// MSUBM_H_rrr1_UU
    3U,	// MSUBRS_H_rrr1_DcEdDaDbUL
    1U,	// MSUBRS_H_rrr1_LL
    1U,	// MSUBRS_H_rrr1_LU
    2U,	// MSUBRS_H_rrr1_UL
    2U,	// MSUBRS_H_rrr1_UU
    0U,	// MSUBRS_Q_rrr1_L_L
    0U,	// MSUBRS_Q_rrr1_U_U
    3U,	// MSUBR_H_rrr1_DcEdDaDbUL
    1U,	// MSUBR_H_rrr1_LL
    1U,	// MSUBR_H_rrr1_LU
    2U,	// MSUBR_H_rrr1_UL
    2U,	// MSUBR_H_rrr1_UU
    0U,	// MSUBR_Q_rrr1_L_L
    0U,	// MSUBR_Q_rrr1_U_U
    1U,	// MSUBS_H_rrr1_LL
    1U,	// MSUBS_H_rrr1_LU
    2U,	// MSUBS_H_rrr1_UL
    2U,	// MSUBS_H_rrr1_UU
    16U,	// MSUBS_Q_rrr1
    3U,	// MSUBS_Q_rrr1_L
    0U,	// MSUBS_Q_rrr1_L_L
    4U,	// MSUBS_Q_rrr1_U
    0U,	// MSUBS_Q_rrr1_U_U
    16U,	// MSUBS_Q_rrr1_e
    3U,	// MSUBS_Q_rrr1_e_L
    0U,	// MSUBS_Q_rrr1_e_L_L
    4U,	// MSUBS_Q_rrr1_e_U
    0U,	// MSUBS_Q_rrr1_e_U_U
    8U,	// MSUBS_U_rcr
    8U,	// MSUBS_U_rcr_e
    0U,	// MSUBS_U_rrr2
    0U,	// MSUBS_U_rrr2_e
    8U,	// MSUBS_rcr
    8U,	// MSUBS_rcr_e
    0U,	// MSUBS_rrr2
    0U,	// MSUBS_rrr2_e
    0U,	// MSUB_F_rrr
    1U,	// MSUB_H_rrr1_LL
    1U,	// MSUB_H_rrr1_LU
    2U,	// MSUB_H_rrr1_UL
    2U,	// MSUB_H_rrr1_UU
    16U,	// MSUB_Q_rrr1
    3U,	// MSUB_Q_rrr1_L
    0U,	// MSUB_Q_rrr1_L_L
    4U,	// MSUB_Q_rrr1_U
    0U,	// MSUB_Q_rrr1_U_U
    16U,	// MSUB_Q_rrr1_e
    3U,	// MSUB_Q_rrr1_e_L
    0U,	// MSUB_Q_rrr1_e_L_L
    4U,	// MSUB_Q_rrr1_e_U
    0U,	// MSUB_Q_rrr1_e_U_U
    8U,	// MSUB_U_rcr
    0U,	// MSUB_U_rrr2
    8U,	// MSUB_rcr
    8U,	// MSUB_rcr_e
    0U,	// MSUB_rrr2
    0U,	// MSUB_rrr2_e
    4U,	// MULM_H_rr1_LL2e
    5U,	// MULM_H_rr1_LU2e
    5U,	// MULM_H_rr1_UL2e
    6U,	// MULM_H_rr1_UU2e
    4U,	// MULR_H_rr1_LL2e
    5U,	// MULR_H_rr1_LU2e
    5U,	// MULR_H_rr1_UL2e
    6U,	// MULR_H_rr1_UU2e
    0U,	// MULR_Q_rr1_2LL
    0U,	// MULR_Q_rr1_2UU
    0U,	// MULS_U_rc
    0U,	// MULS_U_rr2
    0U,	// MULS_rc
    0U,	// MULS_rr2
    0U,	// MUL_F_rrr
    4U,	// MUL_H_rr1_LL2e
    5U,	// MUL_H_rr1_LU2e
    5U,	// MUL_H_rr1_UL2e
    6U,	// MUL_H_rr1_UU2e
    0U,	// MUL_Q_rr1_2LL
    0U,	// MUL_Q_rr1_2UU
    6U,	// MUL_Q_rr1_2_L
    6U,	// MUL_Q_rr1_2_Le
    7U,	// MUL_Q_rr1_2_U
    7U,	// MUL_Q_rr1_2_Ue
    24U,	// MUL_Q_rr1_2__
    24U,	// MUL_Q_rr1_2__e
    0U,	// MUL_U_rc
    0U,	// MUL_U_rr2
    0U,	// MUL_rc
    0U,	// MUL_rc_e
    0U,	// MUL_rr2
    0U,	// MUL_rr2_e
    0U,	// MUL_srr
    0U,	// NAND_T
    0U,	// NAND_rc
    0U,	// NAND_rr
    0U,	// NEZ_A
    0U,	// NE_A
    0U,	// NE_rc
    0U,	// NE_rr
    0U,	// NOP_sr
    0U,	// NOP_sys
    0U,	// NOR_T
    0U,	// NOR_rc
    0U,	// NOR_rr
    0U,	// NOT_sr
    0U,	// ORN_T
    0U,	// ORN_rc
    0U,	// ORN_rr
    0U,	// OR_ANDN_T
    0U,	// OR_AND_T
    0U,	// OR_EQ_rc
    0U,	// OR_EQ_rr
    0U,	// OR_GE_U_rc
    0U,	// OR_GE_U_rr
    0U,	// OR_GE_rc
    0U,	// OR_GE_rr
    0U,	// OR_LT_U_rc
    0U,	// OR_LT_U_rr
    0U,	// OR_LT_rc
    0U,	// OR_LT_rr
    0U,	// OR_NE_rc
    0U,	// OR_NE_rr
    0U,	// OR_NOR_T
    0U,	// OR_OR_T
    0U,	// OR_T
    0U,	// OR_rc
    0U,	// OR_rr
    0U,	// OR_sc
    0U,	// OR_srr
    0U,	// PACK_rrr
    0U,	// PARITY_rr
    0U,	// POPCNT_W_rr
    0U,	// Q31TOF_rr
    0U,	// QSEED_F_rr
    0U,	// RESTORE_sys
    0U,	// RET_sr
    0U,	// RET_sys
    0U,	// RFE_sr
    0U,	// RFE_sys
    0U,	// RFM_sys
    0U,	// RSLCX_sys
    0U,	// RSTV_sys
    0U,	// RSUBS_U_rc
    0U,	// RSUBS_rc
    0U,	// RSUB_rc
    0U,	// RSUB_sr
    0U,	// SAT_BU_rr
    0U,	// SAT_BU_sr
    0U,	// SAT_B_rr
    0U,	// SAT_B_sr
    0U,	// SAT_HU_rr
    0U,	// SAT_HU_sr
    0U,	// SAT_H_rr
    0U,	// SAT_H_sr
    8U,	// SELN_rcr
    0U,	// SELN_rrr
    8U,	// SEL_rcr
    0U,	// SEL_rrr
    0U,	// SHAS_rc
    0U,	// SHAS_rr
    0U,	// SHA_H_rc
    0U,	// SHA_H_rr
    0U,	// SHA_rc
    0U,	// SHA_rr
    0U,	// SHA_src
    0U,	// SHUFFLE_rc
    0U,	// SH_ANDN_T
    0U,	// SH_AND_T
    0U,	// SH_EQ_rc
    0U,	// SH_EQ_rr
    0U,	// SH_GE_U_rc
    0U,	// SH_GE_U_rr
    0U,	// SH_GE_rc
    0U,	// SH_GE_rr
    0U,	// SH_H_rc
    0U,	// SH_H_rr
    0U,	// SH_LT_U_rc
    0U,	// SH_LT_U_rr
    0U,	// SH_LT_rc
    0U,	// SH_LT_rr
    0U,	// SH_NAND_T
    0U,	// SH_NE_rc
    0U,	// SH_NE_rr
    0U,	// SH_NOR_T
    0U,	// SH_ORN_T
    0U,	// SH_OR_T
    0U,	// SH_XNOR_T
    0U,	// SH_XOR_T
    0U,	// SH_rc
    0U,	// SH_rr
    0U,	// SH_src
    0U,	// STLCX_abs
    0U,	// STLCX_bo_bso
    0U,	// STUCX_abs
    0U,	// STUCX_bo_bso
    0U,	// ST_A_abs
    0U,	// ST_A_bo_bso
    0U,	// ST_A_bo_c
    0U,	// ST_A_bo_pos
    0U,	// ST_A_bo_pre
    0U,	// ST_A_bo_r
    0U,	// ST_A_bol
    0U,	// ST_A_sc
    0U,	// ST_A_sro
    0U,	// ST_A_ssr
    0U,	// ST_A_ssr_pos
    0U,	// ST_A_ssro
    0U,	// ST_B_abs
    0U,	// ST_B_bo_bso
    0U,	// ST_B_bo_c
    0U,	// ST_B_bo_pos
    0U,	// ST_B_bo_pre
    0U,	// ST_B_bo_r
    0U,	// ST_B_bol
    0U,	// ST_B_sro
    0U,	// ST_B_ssr
    0U,	// ST_B_ssr_pos
    0U,	// ST_B_ssro
    0U,	// ST_DA_abs
    0U,	// ST_DA_bo_bso
    0U,	// ST_DA_bo_c
    0U,	// ST_DA_bo_pos
    0U,	// ST_DA_bo_pre
    0U,	// ST_DA_bo_r
    0U,	// ST_D_abs
    0U,	// ST_D_bo_bso
    0U,	// ST_D_bo_c
    0U,	// ST_D_bo_pos
    0U,	// ST_D_bo_pre
    0U,	// ST_D_bo_r
    0U,	// ST_H_abs
    0U,	// ST_H_bo_bso
    0U,	// ST_H_bo_c
    0U,	// ST_H_bo_pos
    0U,	// ST_H_bo_pre
    0U,	// ST_H_bo_r
    0U,	// ST_H_bol
    0U,	// ST_H_sro
    0U,	// ST_H_ssr
    0U,	// ST_H_ssr_pos
    0U,	// ST_H_ssro
    0U,	// ST_Q_abs
    0U,	// ST_Q_bo_bso
    0U,	// ST_Q_bo_c
    0U,	// ST_Q_bo_pos
    0U,	// ST_Q_bo_pre
    0U,	// ST_Q_bo_r
    0U,	// ST_T
    0U,	// ST_W_abs
    0U,	// ST_W_bo_bso
    0U,	// ST_W_bo_c
    0U,	// ST_W_bo_pos
    0U,	// ST_W_bo_pre
    0U,	// ST_W_bo_r
    0U,	// ST_W_bol
    0U,	// ST_W_sro
    0U,	// ST_W_ssr
    0U,	// ST_W_ssr_pos
    0U,	// ST_W_ssro
    0U,	// SUBC_rr
    0U,	// SUBS_HU_rr
    0U,	// SUBS_H_rr
    0U,	// SUBS_U_rr
    0U,	// SUBS_rr
    0U,	// SUBS_srr
    0U,	// SUBX_rr
    0U,	// SUB_A_rr
    0U,	// SUB_A_sc
    0U,	// SUB_B_rr
    0U,	// SUB_F_rrr
    0U,	// SUB_H_rr
    0U,	// SUB_rr
    0U,	// SUB_srr
    0U,	// SUB_srr_15a
    0U,	// SUB_srr_a15
    0U,	// SVLCX_sys
    0U,	// SWAPMSK_W_bo_bso
    0U,	// SWAPMSK_W_bo_c
    0U,	// SWAPMSK_W_bo_pos
    0U,	// SWAPMSK_W_bo_pre
    0U,	// SWAPMSK_W_bo_r
    0U,	// SWAP_W_abs
    0U,	// SWAP_W_bo_bso
    0U,	// SWAP_W_bo_c
    0U,	// SWAP_W_bo_pos
    0U,	// SWAP_W_bo_pre
    0U,	// SWAP_W_bo_r
    0U,	// SYSCALL_rc
    0U,	// TRAPSV_sys
    0U,	// TRAPV_sys
    0U,	// UNPACK_rr
    0U,	// UPDFL_rr
    0U,	// UTOF_rr
    0U,	// WAIT_sys
    0U,	// XNOR_T
    0U,	// XNOR_rc
    0U,	// XNOR_rr
    0U,	// XOR_EQ_rc
    0U,	// XOR_EQ_rr
    0U,	// XOR_GE_U_rc
    0U,	// XOR_GE_U_rr
    0U,	// XOR_GE_rc
    0U,	// XOR_GE_rr
    0U,	// XOR_LT_U_rc
    0U,	// XOR_LT_U_rr
    0U,	// XOR_LT_rc
    0U,	// XOR_LT_rr
    0U,	// XOR_NE_rc
    0U,	// XOR_NE_rr
    0U,	// XOR_T
    0U,	// XOR_rc
    0U,	// XOR_rr
    0U,	// XOR_srr
  };

  // Emit the opcode for the instruction.
  uint64_t Bits = 0;
  Bits |= (uint64_t)OpInfo0[MCInst_getOpcode(MI)] << 0;
  Bits |= (uint64_t)OpInfo1[MCInst_getOpcode(MI)] << 32;
  MnemonicBitsInfo MBI = {AsmStrs+(Bits & 4095)-1, Bits};
  return MBI;

}
/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void printInstruction(MCInst *MI, uint64_t Address, SStream *O) {
  SStream_concat0(O, "");
  MnemonicBitsInfo MnemonicInfo = getMnemonic(MI, O);

  SStream_concat0(O, MnemonicInfo.first);

  uint64_t Bits = MnemonicInfo.second;
  assert(Bits != 0 && "Cannot print this instruction.");

  // Fragment 0 encoded into 4 bits for 10 unique commands.
  switch ((Bits >> 12) & 15) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // DBG_VALUE, DBG_VALUE_LIST, DBG_INSTR_REF, DBG_PHI, DBG_LABEL, BUNDLE, ...
    return;
    break;
  case 1:
    // ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ABSDIF_H_rr, ABSDIF...
    printOperand(MI, 0, O);
    break;
  case 2:
    // AND_src, BISR_sc, LD_A_sc, LD_W_sc, MOV_sc, OR_sc, ST_A_sc, SUB_A_sc
    printZExtImm_8(MI, 0, O);
    break;
  case 3:
    // BISR_rc, SYSCALL_rc
    printSExtImm_9(MI, 0, O);
    return;
    break;
  case 4:
    // CALLA_b, CALL_b, FCALLA_b, FCALL_b, JA_b, JLA_b, JL_b, J_b
    printSExtImm_24(MI, 0, O);
    return;
    break;
  case 5:
    // CALLI_rr, FCALLA_i, JEQ_brc, JGE_U_brc, JGE_brc, JI_rr, JLI_rr, JLT_U_...
    printOperand(MI, 1, O);
    break;
  case 6:
    // CMPSWAP_W_bo_bso, CMPSWAP_W_bo_c, CMPSWAP_W_bo_r, LDMST_bo_bso, LDMST_...
    printOperand(MI, 2, O);
    SStream_concat0(O, ", [");
    set_mem_access(MI, true);
    printOperand(MI, 0, O);
    break;
  case 7:
    // JEQ_sbc1, JEQ_sbc2, JNE_sbc1, JNE_sbc2
    printSExtImm_4(MI, 0, O);
    SStream_concat0(O, ", ");
    printPCRelImmOperand(MI, 1, O);
    return;
    break;
  case 8:
    // JNZ_sb, JZ_sb, J_sb
    printSExtImm_8(MI, 0, O);
    return;
    break;
  case 9:
    // ST_A_ssro, ST_B_ssro, ST_H_ssro, ST_W_ssro
    printSExtImm_4(MI, 1, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 0, O);
    return;
    break;
  }


  // Fragment 1 encoded into 4 bits for 11 unique commands.
  switch ((Bits >> 16) & 15) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ABSDIF_H_rr, ABSDIF...
    SStream_concat0(O, ", ");
    break;
  case 1:
    // ADD_src_a15, ADD_srr_a15, CADDN_src, CADD_src, CMOVN_src, CMOVN_srr, C...
    SStream_concat0(O, ", %d15, ");
    break;
  case 2:
    // AND_src, BISR_sc, CALLI_rr, DISABLE_sys_1, FCALLA_i, JI_rr, JI_sr, JLI...
    return;
    break;
  case 3:
    // CACHEI_I_bo_bso, CACHEI_I_bo_pos, CACHEI_WI_bo_bso, CACHEI_WI_bo_pos, ...
    SStream_concat1(O, ']');
    break;
  case 4:
    // CACHEI_I_bo_pre, CACHEI_WI_bo_pre, CACHEI_W_bo_pre, CACHE_I_bo_pre, CA...
    SStream_concat0(O, "+]");
    set_mem_access(MI, false);
    printSExtImm_10(MI, 1, O);
    return;
    break;
  case 5:
    // CACHEI_W_bo_c, CACHE_I_bo_c, CACHE_WI_bo_c, CACHE_W_bo_c, CMPSWAP_W_bo...
    SStream_concat0(O, "+c]");
    set_mem_access(MI, false);
    break;
  case 6:
    // CACHEI_W_bo_r, CACHE_I_bo_r, CACHE_WI_bo_r, CACHE_W_bo_r, CMPSWAP_W_bo...
    SStream_concat0(O, "+r]");
    set_mem_access(MI, false);
    return;
    break;
  case 7:
    // CMPSWAP_W_bo_pos, LDMST_bo_pos, LD_A_bo_pos, LD_BU_bo_pos, LD_B_bo_pos...
    SStream_concat0(O, ", [+");
    set_mem_access(MI, true);
    break;
  case 8:
    // CMPSWAP_W_bo_pre, LDMST_bo_pre, LD_A_bo_bso, LD_A_bo_c, LD_A_bo_pre, L...
    SStream_concat0(O, ", [");
    set_mem_access(MI, true);
    break;
  case 9:
    // LD_A_slro, LD_BU_slro, LD_H_slro, LD_W_slro
    SStream_concat0(O, ", %a15, ");
    printZExtImm_4(MI, 1, O);
    return;
    break;
  case 10:
    // ST_A_sc
    SStream_concat0(O, ", %a15");
    return;
    break;
  }


  // Fragment 2 encoded into 4 bits for 12 unique commands.
  switch ((Bits >> 20) & 15) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ABSDIF_H_rr, ABSDIF...
    printOperand(MI, 1, O);
    break;
  case 1:
    // ADDSC_A_rr, ADD_F_rrr, CADDN_rcr, CADD_rcr, CRC32B_W_rr, CRC32L_W_rr, ...
    printOperand(MI, 2, O);
    break;
  case 2:
    // ADD_A_src, ADD_src, ADD_src_15a, ADD_src_a15, CADDN_src, CADD_src, CMO...
    printSExtImm_4(MI, 1, O);
    return;
    break;
  case 3:
    // CACHEI_I_bo_bso, CACHEI_I_bo_pos, CACHEI_WI_bo_bso, CACHEI_WI_bo_pos, ...
    printSExtImm_10(MI, 1, O);
    return;
    break;
  case 4:
    // CADDN_rrr, CADD_rrr, CRCN_rrr, CSUBN_rrr, CSUB_rrr, MADDMS_H_rrr1_LL, ...
    printOperand(MI, 3, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 1, O);
    break;
  case 5:
    // CMPSWAP_W_bo_c, LDMST_bo_c
    return;
    break;
  case 6:
    // JEQ_brc, JGE_U_brc, JGE_brc, JLT_U_brc, JLT_brc, JNED_brc, JNEI_brc, J...
    printSExtImm_4(MI, 2, O);
    SStream_concat0(O, ", ");
    printPCRelImmOperand(MI, 0, O);
    return;
    break;
  case 7:
    // JEQ_sbr1, JEQ_sbr2, JGEZ_sbr, JGTZ_sbr, JLEZ_sbr, JLTZ_sbr, JNE_sbr1, ...
    printPCRelImmOperand(MI, 1, O);
    return;
    break;
  case 8:
    // LDMST_abs, ST_A_abs, ST_A_bo_pos, ST_A_bo_pre, ST_B_abs, ST_B_bo_pos, ...
    printOperand(MI, 0, O);
    break;
  case 9:
    // LD_A_sro, LD_BU_sro, LD_H_sro, LD_W_sro, ST_A_sro, ST_B_sro, ST_H_sro,...
    printZExtImm_4(MI, 1, O);
    return;
    break;
  case 10:
    // MOVH_A_rlc, MOVH_rlc, MOV_U_rlc, MOV_rlcDc, MOV_rlcEc
    printZExtImm_16(MI, 1, O);
    return;
    break;
  case 11:
    // ST_A_bo_bso, ST_B_bo_bso, ST_DA_bo_bso, ST_D_bo_bso, ST_H_bo_bso, ST_Q...
    printSExtImm_10(MI, 2, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 0, O);
    return;
    break;
  }


  // Fragment 3 encoded into 4 bits for 9 unique commands.
  switch ((Bits >> 24) & 15) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ABSDIF_H_rr, ABSDIF...
    SStream_concat0(O, ", ");
    break;
  case 1:
    // ABS_B_rr, ABS_H_rr, ABS_rr, ADDS_srr, ADD_A_srr, ADD_srr, ADD_srr_15a,...
    return;
    break;
  case 2:
    // ADDSC_A_srrs
    SStream_concat0(O, ", %d15, ");
    printZExtImm_2(MI, 2, O);
    return;
    break;
  case 3:
    // CMPSWAP_W_bo_pos, LDMST_bo_pos, LD_A_bo_bso, LD_A_bo_pos, LD_A_bol, LD...
    SStream_concat1(O, ']');
    break;
  case 4:
    // CMPSWAP_W_bo_pre, LDMST_bo_pre, LD_A_bo_pre, LD_BU_bo_pre, LD_B_bo_pre...
    SStream_concat0(O, "+]");
    set_mem_access(MI, false);
    printSExtImm_10(MI, 2, O);
    return;
    break;
  case 5:
    // LD_A_bo_c, LD_BU_bo_c, LD_B_bo_c, LD_DA_bo_c, LD_D_bo_c, LD_HU_bo_c, L...
    SStream_concat0(O, "+c]");
    set_mem_access(MI, false);
    printSExtImm_10(MI, 2, O);
    return;
    break;
  case 6:
    // LD_A_bo_r, LD_BU_bo_r, LD_B_bo_r, LD_DA_bo_r, LD_D_bo_r, LD_HU_bo_r, L...
    SStream_concat0(O, "+r]");
    set_mem_access(MI, false);
    return;
    break;
  case 7:
    // MADDRS_Q_rrr1_L_L, MADDR_Q_rrr1_L_L, MADDS_Q_rrr1_L_L, MADDS_Q_rrr1_e_...
    SStream_concat0(O, "L, ");
    printOperand(MI, 2, O);
    SStream_concat0(O, "L, ");
    break;
  case 8:
    // MADDRS_Q_rrr1_U_U, MADDR_Q_rrr1_U_U, MADDS_Q_rrr1_U_U, MADDS_Q_rrr1_e_...
    SStream_concat0(O, "U, ");
    printOperand(MI, 2, O);
    SStream_concat0(O, "U, ");
    break;
  }


  // Fragment 4 encoded into 3 bits for 8 unique commands.
  switch ((Bits >> 28) & 7) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ABSDIF_H_rr, ABSDIF...
    printOperand(MI, 2, O);
    break;
  case 1:
    // ABSDIF_rc, ADDC_rc, ADDS_U_rc, ADDS_rc, ADDX_rc, ADD_rc, ANDN_rc, AND_...
    printSExtImm_9(MI, 2, O);
    return;
    break;
  case 2:
    // ADDIH_A_rlc, ADDIH_rlc, ADDI_rlc, MFCR_rlc
    printSExtImm_16(MI, 2, O);
    return;
    break;
  case 3:
    // ADDSC_A_rr, ADD_F_rrr, CADDN_rcr, CADD_rcr, CRC32B_W_rr, CRC32L_W_rr, ...
    printOperand(MI, 1, O);
    break;
  case 4:
    // ANDN_T, AND_ANDN_T, AND_AND_T, AND_NOR_T, AND_OR_T, AND_T, INSN_T, INS...
    printZExtImm_4(MI, 3, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 2, O);
    SStream_concat0(O, ", ");
    printZExtImm_4(MI, 4, O);
    return;
    break;
  case 5:
    // CMPSWAP_W_bo_pos, LDMST_bo_pos, LD_A_bo_bso, LD_A_bo_pos, LD_BU_bo_bso...
    printSExtImm_10(MI, 2, O);
    return;
    break;
  case 6:
    // MADDRS_Q_rrr1_L_L, MADDRS_Q_rrr1_U_U, MADDR_Q_rrr1_L_L, MADDR_Q_rrr1_U...
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 7:
    // MULR_Q_rr1_2LL, MULR_Q_rr1_2UU, MUL_Q_rr1_2LL, MUL_Q_rr1_2UU
    printZExtImm_2(MI, 3, O);
    return;
    break;
  }


  // Fragment 5 encoded into 4 bits for 15 unique commands.
  switch ((Bits >> 31) & 15) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ABSDIF_H_rr, ABSDIF...
    return;
    break;
  case 1:
    // ADDSC_A_rr, CADDN_rcr, CADD_rcr, DEXTR_rrpw, DEXTR_rrrr, EXTR_U_rrpw, ...
    SStream_concat0(O, ", ");
    break;
  case 2:
    // MADDMS_H_rrr1_LL, MADDM_H_rrr1_LL, MADDRS_H_rrr1_LL, MADDR_H_rrr1_LL, ...
    SStream_concat0(O, " LL, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 3:
    // MADDMS_H_rrr1_LU, MADDM_H_rrr1_LU, MADDRS_H_rrr1_LU, MADDR_H_rrr1_LU, ...
    SStream_concat0(O, " LU, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 4:
    // MADDMS_H_rrr1_UL, MADDM_H_rrr1_UL, MADDRS_H_rrr1_UL, MADDR_H_rrr1_UL, ...
    SStream_concat0(O, " UL, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 5:
    // MADDMS_H_rrr1_UU, MADDM_H_rrr1_UU, MADDRS_H_rrr1_UU, MADDR_H_rrr1_UU, ...
    SStream_concat0(O, " UU, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 6:
    // MADDRS_H_rrr1_DcEdDaDbUL, MADDR_H_rrr1_DcEdDaDbUL, MSUBRS_H_rrr1_DcEdD...
    SStream_concat0(O, ", UL, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 7:
    // MADDS_Q_rrr1_L, MADDS_Q_rrr1_e_L, MADD_Q_rrr1_L, MADD_Q_rrr1_e_L, MSUB...
    SStream_concat0(O, " L, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 8:
    // MADDS_Q_rrr1_U, MADDS_Q_rrr1_e_U, MADD_Q_rrr1_U, MADD_Q_rrr1_e_U, MSUB...
    SStream_concat0(O, " U, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 9:
    // MULM_H_rr1_LL2e, MULR_H_rr1_LL2e, MUL_H_rr1_LL2e
    SStream_concat0(O, "LL, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 10:
    // MULM_H_rr1_LU2e, MULR_H_rr1_LU2e, MUL_H_rr1_LU2e
    SStream_concat0(O, "LU, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 11:
    // MULM_H_rr1_UL2e, MULR_H_rr1_UL2e, MUL_H_rr1_UL2e
    SStream_concat0(O, "UL, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 12:
    // MULM_H_rr1_UU2e, MULR_H_rr1_UU2e, MUL_H_rr1_UU2e
    SStream_concat0(O, "UU, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 13:
    // MUL_Q_rr1_2_L, MUL_Q_rr1_2_Le
    SStream_concat0(O, "L, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 14:
    // MUL_Q_rr1_2_U, MUL_Q_rr1_2_Ue
    SStream_concat0(O, "U, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  }


  // Fragment 6 encoded into 2 bits for 4 unique commands.
  switch ((Bits >> 35) & 3) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ADDSC_A_rr, DEXTR_rrpw, DEXTR_rrrr, EXTR_U_rrpw, EXTR_U_rrrw, EXTR_rrp...
    printOperand(MI, 3, O);
    break;
  case 1:
    // CADDN_rcr, CADD_rcr, MADDS_U_rcr, MADDS_U_rcr_e, MADDS_rcr, MADDS_rcr_...
    printSExtImm_9(MI, 3, O);
    return;
    break;
  case 2:
    // MADDS_Q_rrr1, MADDS_Q_rrr1_e, MADD_Q_rrr1, MADD_Q_rrr1_e, MSUBS_Q_rrr1...
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 3:
    // MUL_Q_rr1_2__, MUL_Q_rr1_2__e
    printZExtImm_2(MI, 3, O);
    return;
    break;
  }


  // Fragment 7 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 37) & 1) {
    // INSERT_rcpw, INSERT_rcrw, INSERT_rrpw, INSERT_rrrr, INSERT_rrrw
    SStream_concat0(O, ", ");
    printOperand(MI, 4, O);
    return;
  } else {
    // ADDSC_A_rr, DEXTR_rrpw, DEXTR_rrrr, EXTR_U_rrpw, EXTR_U_rrrw, EXTR_rrp...
    return;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 61 && "Invalid register number!");

  static const char AsmStrs[] = {
  /* 0 */ "a10\0"
  /* 4 */ "d10\0"
  /* 8 */ "e10\0"
  /* 12 */ "p10\0"
  /* 16 */ "a0\0"
  /* 19 */ "d0\0"
  /* 22 */ "e0\0"
  /* 25 */ "p0\0"
  /* 28 */ "A10_A11\0"
  /* 36 */ "a11\0"
  /* 40 */ "d11\0"
  /* 44 */ "A0_A1\0"
  /* 50 */ "a1\0"
  /* 53 */ "d1\0"
  /* 56 */ "a12\0"
  /* 60 */ "d12\0"
  /* 64 */ "e12\0"
  /* 68 */ "p12\0"
  /* 72 */ "a2\0"
  /* 75 */ "d2\0"
  /* 78 */ "e2\0"
  /* 81 */ "p2\0"
  /* 84 */ "A12_A13\0"
  /* 92 */ "a13\0"
  /* 96 */ "d13\0"
  /* 100 */ "A2_A3\0"
  /* 106 */ "a3\0"
  /* 109 */ "d3\0"
  /* 112 */ "a14\0"
  /* 116 */ "d14\0"
  /* 120 */ "e14\0"
  /* 124 */ "p14\0"
  /* 128 */ "a4\0"
  /* 131 */ "d4\0"
  /* 134 */ "e4\0"
  /* 137 */ "p4\0"
  /* 140 */ "A14_A15\0"
  /* 148 */ "a15\0"
  /* 152 */ "d15\0"
  /* 156 */ "A4_A5\0"
  /* 162 */ "a5\0"
  /* 165 */ "d5\0"
  /* 168 */ "a6\0"
  /* 171 */ "d6\0"
  /* 174 */ "e6\0"
  /* 177 */ "p6\0"
  /* 180 */ "A6_A7\0"
  /* 186 */ "a7\0"
  /* 189 */ "d7\0"
  /* 192 */ "a8\0"
  /* 195 */ "d8\0"
  /* 198 */ "e8\0"
  /* 201 */ "p8\0"
  /* 204 */ "A8_A9\0"
  /* 210 */ "a9\0"
  /* 213 */ "d9\0"
  /* 216 */ "pc\0"
  /* 219 */ "pcxi\0"
  /* 224 */ "psw\0"
  /* 228 */ "fcx\0"
};
  static const uint8_t RegAsmOffset[] = {
    228, 216, 219, 224, 16, 50, 72, 106, 128, 162, 168, 186, 192, 210, 
    0, 36, 56, 92, 112, 148, 19, 53, 75, 109, 131, 165, 171, 189, 
    195, 213, 4, 40, 60, 96, 116, 152, 22, 78, 134, 174, 198, 8, 
    64, 120, 25, 81, 137, 177, 201, 12, 68, 124, 44, 100, 156, 180, 
    204, 28, 84, 140, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}
#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

bool printAliasInstr(MCInst *MI, uint64_t Address, SStream *OS) {
  return false;
}

#endif // PRINT_ALIAS_INSTR
