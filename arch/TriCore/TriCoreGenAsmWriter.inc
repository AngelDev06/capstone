/* Capstone Disassembly Engine, http://www.capstone-engine.org */
/* By Nguyen Anh Quynh <aquynh@gmail.com>, 2013-2022, */
/*    Rot127 <unisono@quyllur.org> 2022-2023 */
/* Automatically generated file by the LLVM TableGen Disassembler Backend. */
/* Do not edit. */

#include <capstone/platform.h>
#include <assert.h>

/// getMnemonic - This method is automatically generated by tablegen
/// from the instruction set description.
MnemonicBitsInfo getMnemonic(MCInst *MI, SStream *O) {
  static const char AsmStrs[] = {
  /* 0 */ "sub %d15, \0"
  /* 11 */ "add %d15, \0"
  /* 22 */ "and %d15, \0"
  /* 33 */ "jne %d15, \0"
  /* 44 */ "jeq %d15, \0"
  /* 55 */ "or %d15, \0"
  /* 65 */ "jz.t %d15, \0"
  /* 77 */ "jnz.t %d15, \0"
  /* 90 */ "lt %d15, \0"
  /* 100 */ "lt.u %d15, \0"
  /* 112 */ "mov %d15, \0"
  /* 123 */ "jz %d15, \0"
  /* 133 */ "jnz %d15, \0"
  /* 144 */ "ld.a %a15, %sp, \0"
  /* 161 */ "ld.w %a15, %sp, \0"
  /* 178 */ "sub.a %sp, \0"
  /* 190 */ "ftoq31 \0"
  /* 198 */ "CMPSWAP.W \0"
  /* 209 */ "csub.a \0"
  /* 217 */ "subsc.a \0"
  /* 226 */ "addsc.a \0"
  /* 235 */ "difsc.a \0"
  /* 244 */ "cadd.a \0"
  /* 252 */ "ld.a \0"
  /* 258 */ "tlbprobe.a \0"
  /* 270 */ "ge.a \0"
  /* 276 */ "jne.a \0"
  /* 283 */ "addih.a \0"
  /* 292 */ "movh.a \0"
  /* 300 */ "sel.a \0"
  /* 307 */ "csubn.a \0"
  /* 316 */ "caddn.a \0"
  /* 325 */ "seln.a \0"
  /* 333 */ "swap.a \0"
  /* 341 */ "jeq.a \0"
  /* 348 */ "lt.a \0"
  /* 354 */ "st.a \0"
  /* 360 */ "mov.a \0"
  /* 367 */ "nez.a \0"
  /* 374 */ "jz.a \0"
  /* 380 */ "jnz.a \0"
  /* 387 */ "eqz.a \0"
  /* 394 */ "movz.a \0"
  /* 402 */ "mov.aa \0"
  /* 410 */ "ld.da \0"
  /* 417 */ "st.da \0"
  /* 424 */ "lea \0"
  /* 429 */ "lha \0"
  /* 434 */ "sha \0"
  /* 439 */ "ja \0"
  /* 443 */ "jla \0"
  /* 448 */ "fcalla \0"
  /* 456 */ "crc32.b \0"
  /* 465 */ "sha.b \0"
  /* 472 */ "sub.b \0"
  /* 479 */ "add.b \0"
  /* 486 */ "ld.b \0"
  /* 492 */ "absdif.b \0"
  /* 502 */ "sh.b \0"
  /* 508 */ "min.b \0"
  /* 515 */ "clo.b \0"
  /* 522 */ "eq.b \0"
  /* 528 */ "abs.b \0"
  /* 535 */ "subs.b \0"
  /* 543 */ "adds.b \0"
  /* 551 */ "absdifs.b \0"
  /* 562 */ "cls.b \0"
  /* 569 */ "abss.b \0"
  /* 577 */ "sat.b \0"
  /* 584 */ "dvinit.b \0"
  /* 594 */ "lt.b \0"
  /* 600 */ "st.b \0"
  /* 606 */ "max.b \0"
  /* 613 */ "eqany.b \0"
  /* 622 */ "clz.b \0"
  /* 629 */ "csub \0"
  /* 635 */ "msub \0"
  /* 641 */ "rsub \0"
  /* 647 */ "subc \0"
  /* 653 */ "addc \0"
  /* 659 */ "ld.d \0"
  /* 665 */ "st.d \0"
  /* 671 */ "mov.d \0"
  /* 678 */ "cadd \0"
  /* 684 */ "madd \0"
  /* 690 */ "jned \0"
  /* 696 */ "nand \0"
  /* 702 */ "and.ge \0"
  /* 710 */ "sh.ge \0"
  /* 717 */ "xor.ge \0"
  /* 725 */ "jge \0"
  /* 730 */ "bmerge \0"
  /* 738 */ "disable \0"
  /* 747 */ "shuffle \0"
  /* 756 */ "and.ne \0"
  /* 764 */ "xor.ne \0"
  /* 772 */ "jne \0"
  /* 777 */ "msub.f \0"
  /* 785 */ "madd.f \0"
  /* 793 */ "qseed.f \0"
  /* 802 */ "mul.f \0"
  /* 809 */ "cmp.f \0"
  /* 816 */ "div.f \0"
  /* 823 */ "absdif \0"
  /* 831 */ "q31tof \0"
  /* 839 */ "itof \0"
  /* 845 */ "hptof \0"
  /* 852 */ "utof \0"
  /* 858 */ "sha.h \0"
  /* 865 */ "msub.h \0"
  /* 873 */ "msubad.h \0"
  /* 883 */ "madd.h \0"
  /* 891 */ "ld.h \0"
  /* 897 */ "absdif.h \0"
  /* 907 */ "sh.h \0"
  /* 913 */ "mul.h \0"
  /* 920 */ "msubm.h \0"
  /* 929 */ "msubadm.h \0"
  /* 940 */ "maddm.h \0"
  /* 949 */ "mulm.h \0"
  /* 957 */ "maddsum.h \0"
  /* 968 */ "min.h \0"
  /* 975 */ "clo.h \0"
  /* 982 */ "eq.h \0"
  /* 988 */ "msubr.h \0"
  /* 997 */ "msubadr.h \0"
  /* 1008 */ "maddr.h \0"
  /* 1017 */ "mulr.h \0"
  /* 1025 */ "maddsur.h \0"
  /* 1036 */ "abs.h \0"
  /* 1043 */ "msubs.h \0"
  /* 1052 */ "msubads.h \0"
  /* 1063 */ "madds.h \0"
  /* 1072 */ "absdifs.h \0"
  /* 1083 */ "cls.h \0"
  /* 1090 */ "msubms.h \0"
  /* 1100 */ "msubadms.h \0"
  /* 1112 */ "maddms.h \0"
  /* 1122 */ "mulms.h \0"
  /* 1131 */ "maddsums.h \0"
  /* 1143 */ "msubrs.h \0"
  /* 1153 */ "msubadrs.h \0"
  /* 1165 */ "maddrs.h \0"
  /* 1175 */ "maddsurs.h \0"
  /* 1187 */ "abss.h \0"
  /* 1195 */ "maddsus.h \0"
  /* 1206 */ "sat.h \0"
  /* 1213 */ "dvinit.h \0"
  /* 1223 */ "lt.h \0"
  /* 1229 */ "st.h \0"
  /* 1235 */ "maddsu.h \0"
  /* 1245 */ "max.h \0"
  /* 1252 */ "eqany.h \0"
  /* 1261 */ "clz.h \0"
  /* 1268 */ "addih \0"
  /* 1275 */ "sh \0"
  /* 1279 */ "movh \0"
  /* 1285 */ "tlbprobe.i \0"
  /* 1297 */ "addi \0"
  /* 1303 */ "jnei \0"
  /* 1309 */ "ji \0"
  /* 1313 */ "jli \0"
  /* 1318 */ "fcalli \0"
  /* 1326 */ "ftoi \0"
  /* 1332 */ "dvadj \0"
  /* 1339 */ "unpack \0"
  /* 1347 */ "imask \0"
  /* 1354 */ "sel \0"
  /* 1359 */ "updfl \0"
  /* 1366 */ "jl \0"
  /* 1370 */ "fcall \0"
  /* 1377 */ "syscall \0"
  /* 1386 */ "mul \0"
  /* 1391 */ "msubm \0"
  /* 1398 */ "maddm \0"
  /* 1405 */ "mulm \0"
  /* 1411 */ "crcn \0"
  /* 1417 */ "caddn \0"
  /* 1424 */ "andn \0"
  /* 1430 */ "ixmin \0"
  /* 1437 */ "seln \0"
  /* 1443 */ "orn \0"
  /* 1448 */ "cmovn \0"
  /* 1455 */ "clo \0"
  /* 1460 */ "tlbmap \0"
  /* 1468 */ "tlbdemap \0"
  /* 1478 */ "dvstep \0"
  /* 1486 */ "ftohp \0"
  /* 1493 */ "loop \0"
  /* 1499 */ "msub.q \0"
  /* 1507 */ "madd.q \0"
  /* 1515 */ "ld.q \0"
  /* 1521 */ "mul.q \0"
  /* 1528 */ "msubm.q \0"
  /* 1537 */ "maddm.q \0"
  /* 1546 */ "msubr.q \0"
  /* 1555 */ "maddr.q \0"
  /* 1564 */ "mulr.q \0"
  /* 1572 */ "msubs.q \0"
  /* 1581 */ "madds.q \0"
  /* 1590 */ "msubrs.q \0"
  /* 1600 */ "maddrs.q \0"
  /* 1610 */ "st.q \0"
  /* 1616 */ "and.eq \0"
  /* 1624 */ "sh.eq \0"
  /* 1631 */ "xor.eq \0"
  /* 1639 */ "jeq \0"
  /* 1644 */ "mfcr \0"
  /* 1650 */ "mtcr \0"
  /* 1656 */ "xnor \0"
  /* 1662 */ "xor \0"
  /* 1667 */ "bisr \0"
  /* 1673 */ "dextr \0"
  /* 1680 */ "shas \0"
  /* 1686 */ "abs \0"
  /* 1691 */ "msubs \0"
  /* 1698 */ "rsubs \0"
  /* 1705 */ "madds \0"
  /* 1712 */ "absdifs \0"
  /* 1721 */ "cls \0"
  /* 1726 */ "muls \0"
  /* 1732 */ "msubms \0"
  /* 1740 */ "maddms \0"
  /* 1748 */ "abss \0"
  /* 1754 */ "and.and.t \0"
  /* 1765 */ "sh.and.t \0"
  /* 1775 */ "or.and.t \0"
  /* 1785 */ "sh.nand.t \0"
  /* 1796 */ "and.andn.t \0"
  /* 1808 */ "sh.andn.t \0"
  /* 1819 */ "or.andn.t \0"
  /* 1830 */ "sh.orn.t \0"
  /* 1840 */ "insn.t \0"
  /* 1848 */ "and.or.t \0"
  /* 1858 */ "sh.or.t \0"
  /* 1867 */ "or.or.t \0"
  /* 1876 */ "and.nor.t \0"
  /* 1887 */ "sh.nor.t \0"
  /* 1897 */ "or.nor.t \0"
  /* 1907 */ "sh.xnor.t \0"
  /* 1918 */ "sh.xor.t \0"
  /* 1928 */ "ins.t \0"
  /* 1935 */ "st.t \0"
  /* 1941 */ "jz.t \0"
  /* 1947 */ "jnz.t \0"
  /* 1954 */ "addsc.at \0"
  /* 1964 */ "bsplit \0"
  /* 1972 */ "dvinit \0"
  /* 1980 */ "and.lt \0"
  /* 1988 */ "sh.lt \0"
  /* 1995 */ "xor.lt \0"
  /* 2003 */ "jlt \0"
  /* 2008 */ "not \0"
  /* 2013 */ "insert \0"
  /* 2021 */ "ldmst \0"
  /* 2028 */ "madd.u \0"
  /* 2036 */ "and.ge.u \0"
  /* 2046 */ "sh.ge.u \0"
  /* 2055 */ "xor.ge.u \0"
  /* 2065 */ "jge.u \0"
  /* 2072 */ "mul.u \0"
  /* 2079 */ "msubm.u \0"
  /* 2088 */ "maddm.u \0"
  /* 2097 */ "mulm.u \0"
  /* 2105 */ "ixmin.u \0"
  /* 2114 */ "dvstep.u \0"
  /* 2124 */ "extr.u \0"
  /* 2132 */ "rsubs.u \0"
  /* 2141 */ "madds.u \0"
  /* 2150 */ "muls.u \0"
  /* 2158 */ "msubms.u \0"
  /* 2168 */ "maddms.u \0"
  /* 2178 */ "dvinit.u \0"
  /* 2188 */ "and.lt.u \0"
  /* 2198 */ "sh.lt.u \0"
  /* 2207 */ "xor.lt.u \0"
  /* 2217 */ "jlt.u \0"
  /* 2224 */ "div.u \0"
  /* 2231 */ "mov.u \0"
  /* 2238 */ "ixmax.u \0"
  /* 2247 */ "ld.bu \0"
  /* 2254 */ "min.bu \0"
  /* 2262 */ "subs.bu \0"
  /* 2271 */ "adds.bu \0"
  /* 2280 */ "sat.bu \0"
  /* 2288 */ "dvinit.bu \0"
  /* 2299 */ "lt.bu \0"
  /* 2306 */ "max.bu \0"
  /* 2314 */ "ld.hu \0"
  /* 2321 */ "min.hu \0"
  /* 2329 */ "subs.hu \0"
  /* 2338 */ "adds.hu \0"
  /* 2347 */ "sat.hu \0"
  /* 2355 */ "dvinit.hu \0"
  /* 2366 */ "lt.hu \0"
  /* 2373 */ "max.hu \0"
  /* 2381 */ "ftou \0"
  /* 2387 */ "loopu \0"
  /* 2394 */ "lt.wu \0"
  /* 2401 */ "div \0"
  /* 2406 */ "cmov \0"
  /* 2412 */ "crc32b.w \0"
  /* 2422 */ "ld.w \0"
  /* 2428 */ "swapmsk.w \0"
  /* 2439 */ "crc32l.w \0"
  /* 2449 */ "swap.w \0"
  /* 2457 */ "eq.w \0"
  /* 2463 */ "lt.w \0"
  /* 2469 */ "popcnt.w \0"
  /* 2479 */ "st.w \0"
  /* 2485 */ "ixmax \0"
  /* 2492 */ "subx \0"
  /* 2498 */ "ldlcx \0"
  /* 2505 */ "stlcx \0"
  /* 2512 */ "lducx \0"
  /* 2519 */ "stucx \0"
  /* 2526 */ "addx \0"
  /* 2532 */ "parity \0"
  /* 2540 */ "ftoq31z \0"
  /* 2549 */ "jgez \0"
  /* 2555 */ "jlez \0"
  /* 2561 */ "ftoiz \0"
  /* 2568 */ "jz \0"
  /* 2572 */ "clz \0"
  /* 2577 */ "jnz \0"
  /* 2582 */ "jgtz \0"
  /* 2588 */ "jltz \0"
  /* 2594 */ "ftouz \0"
  /* 2601 */ "CMPSWAP.W [+\0"
  /* 2614 */ "swap.a [+\0"
  /* 2624 */ "cachea.i [+\0"
  /* 2636 */ "cachei.i [+\0"
  /* 2648 */ "cachea.wi [+\0"
  /* 2661 */ "cachei.wi [+\0"
  /* 2674 */ "ldmst [+\0"
  /* 2683 */ "cachea.w [+\0"
  /* 2695 */ "cachei.w [+\0"
  /* 2707 */ "swap.w [+\0"
  /* 2717 */ "# XRay Function Patchable RET.\0"
  /* 2748 */ "# XRay Typed Event Log.\0"
  /* 2772 */ "# XRay Custom Event Log.\0"
  /* 2797 */ "# XRay Function Enter.\0"
  /* 2820 */ "# XRay Tail Call Exit.\0"
  /* 2843 */ "# XRay Function Exit.\0"
  /* 2865 */ "LIFETIME_END\0"
  /* 2878 */ "PSEUDO_PROBE\0"
  /* 2891 */ "BUNDLE\0"
  /* 2898 */ "DBG_VALUE\0"
  /* 2908 */ "DBG_INSTR_REF\0"
  /* 2922 */ "DBG_PHI\0"
  /* 2930 */ "DBG_LABEL\0"
  /* 2940 */ "LIFETIME_START\0"
  /* 2955 */ "DBG_VALUE_LIST\0"
  /* 2970 */ "ld.a %a15, [\0"
  /* 2983 */ "ld.b %d15, [\0"
  /* 2996 */ "ld.h %d15, [\0"
  /* 3009 */ "ld.bu %d15, [\0"
  /* 3023 */ "ld.w %d15, [\0"
  /* 3036 */ "CMPSWAP.W [\0"
  /* 3048 */ "swap.a [\0"
  /* 3057 */ "st.a [\0"
  /* 3064 */ "st.da [\0"
  /* 3072 */ "st.b [\0"
  /* 3079 */ "st.d [\0"
  /* 3086 */ "st.h [\0"
  /* 3093 */ "cachea.i [\0"
  /* 3104 */ "cachei.i [\0"
  /* 3115 */ "cachea.wi [\0"
  /* 3127 */ "cachei.wi [\0"
  /* 3139 */ "st.q [\0"
  /* 3146 */ "ldmst [\0"
  /* 3154 */ "cachea.w [\0"
  /* 3165 */ "cachei.w [\0"
  /* 3176 */ "swapmsk.w [\0"
  /* 3188 */ "swap.w [\0"
  /* 3197 */ "st.w [\0"
  /* 3204 */ "ldlcx [\0"
  /* 3212 */ "stlcx [\0"
  /* 3220 */ "lducx [\0"
  /* 3228 */ "stucx [\0"
  /* 3236 */ "st.a [%a15]\0"
  /* 3248 */ "st.b [%a15]\0"
  /* 3260 */ "st.h [%a15]\0"
  /* 3272 */ "st.w [%a15]\0"
  /* 3284 */ "st.a [%sp]\0"
  /* 3295 */ "st.w [%sp]\0"
  /* 3306 */ "tlbflush.a\0"
  /* 3317 */ "tlbflush.b\0"
  /* 3328 */ "dsync\0"
  /* 3334 */ "isync\0"
  /* 3340 */ "rfe\0"
  /* 3344 */ "enable\0"
  /* 3351 */ "disable\0"
  /* 3359 */ "restore\0"
  /* 3367 */ "debug\0"
  /* 3373 */ "relck\0"
  /* 3379 */ "# FEntry call\0"
  /* 3393 */ "rfm\0"
  /* 3397 */ "nop\0"
  /* 3401 */ "fret\0"
  /* 3406 */ "wait\0"
  /* 3411 */ "trapv\0"
  /* 3417 */ "trapsv\0"
  /* 3424 */ "rstv\0"
  /* 3429 */ "svlcx\0"
};
  static const uint32_t OpInfo0[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// INLINEASM_BR
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    2899U,	// DBG_VALUE
    2956U,	// DBG_VALUE_LIST
    2909U,	// DBG_INSTR_REF
    2923U,	// DBG_PHI
    2931U,	// DBG_LABEL
    0U,	// REG_SEQUENCE
    0U,	// COPY
    2892U,	// BUNDLE
    2941U,	// LIFETIME_START
    2866U,	// LIFETIME_END
    2879U,	// PSEUDO_PROBE
    0U,	// ARITH_FENCE
    0U,	// STACKMAP
    3380U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// PREALLOCATED_SETUP
    0U,	// PREALLOCATED_ARG
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    2798U,	// PATCHABLE_FUNCTION_ENTER
    2718U,	// PATCHABLE_RET
    2844U,	// PATCHABLE_FUNCTION_EXIT
    2821U,	// PATCHABLE_TAIL_CALL
    2773U,	// PATCHABLE_EVENT_CALL
    2749U,	// PATCHABLE_TYPED_EVENT_CALL
    0U,	// ICALL_BRANCH_FUNNEL
    0U,	// G_ASSERT_SEXT
    0U,	// G_ASSERT_ZEXT
    0U,	// G_ASSERT_ALIGN
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_SDIVREM
    0U,	// G_UDIVREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_BUILD_VECTOR
    0U,	// G_BUILD_VECTOR_TRUNC
    0U,	// G_CONCAT_VECTORS
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_FREEZE
    0U,	// G_INTRINSIC_FPTRUNC_ROUND
    0U,	// G_INTRINSIC_TRUNC
    0U,	// G_INTRINSIC_ROUND
    0U,	// G_INTRINSIC_LRINT
    0U,	// G_INTRINSIC_ROUNDEVEN
    0U,	// G_READCYCLECOUNTER
    0U,	// G_LOAD
    0U,	// G_SEXTLOAD
    0U,	// G_ZEXTLOAD
    0U,	// G_INDEXED_LOAD
    0U,	// G_INDEXED_SEXTLOAD
    0U,	// G_INDEXED_ZEXTLOAD
    0U,	// G_STORE
    0U,	// G_INDEXED_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_ATOMICRMW_FADD
    0U,	// G_ATOMICRMW_FSUB
    0U,	// G_ATOMICRMW_FMAX
    0U,	// G_ATOMICRMW_FMIN
    0U,	// G_FENCE
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INVOKE_REGION_START
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_SEXT_INREG
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_FSHL
    0U,	// G_FSHR
    0U,	// G_ROTR
    0U,	// G_ROTL
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDO
    0U,	// G_UADDE
    0U,	// G_USUBO
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SADDE
    0U,	// G_SSUBO
    0U,	// G_SSUBE
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_UADDSAT
    0U,	// G_SADDSAT
    0U,	// G_USUBSAT
    0U,	// G_SSUBSAT
    0U,	// G_USHLSAT
    0U,	// G_SSHLSAT
    0U,	// G_SMULFIX
    0U,	// G_UMULFIX
    0U,	// G_SMULFIXSAT
    0U,	// G_UMULFIXSAT
    0U,	// G_SDIVFIX
    0U,	// G_UDIVFIX
    0U,	// G_SDIVFIXSAT
    0U,	// G_UDIVFIXSAT
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FMAD
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FPOWI
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FLOG10
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_FABS
    0U,	// G_FCOPYSIGN
    0U,	// G_IS_FPCLASS
    0U,	// G_FCANONICALIZE
    0U,	// G_FMINNUM
    0U,	// G_FMAXNUM
    0U,	// G_FMINNUM_IEEE
    0U,	// G_FMAXNUM_IEEE
    0U,	// G_FMINIMUM
    0U,	// G_FMAXIMUM
    0U,	// G_PTR_ADD
    0U,	// G_PTRMASK
    0U,	// G_SMIN
    0U,	// G_SMAX
    0U,	// G_UMIN
    0U,	// G_UMAX
    0U,	// G_ABS
    0U,	// G_LROUND
    0U,	// G_LLROUND
    0U,	// G_BR
    0U,	// G_BRJT
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_CTTZ
    0U,	// G_CTTZ_ZERO_UNDEF
    0U,	// G_CTLZ
    0U,	// G_CTLZ_ZERO_UNDEF
    0U,	// G_CTPOP
    0U,	// G_BSWAP
    0U,	// G_BITREVERSE
    0U,	// G_FCEIL
    0U,	// G_FCOS
    0U,	// G_FSIN
    0U,	// G_FSQRT
    0U,	// G_FFLOOR
    0U,	// G_FRINT
    0U,	// G_FNEARBYINT
    0U,	// G_ADDRSPACE_CAST
    0U,	// G_BLOCK_ADDR
    0U,	// G_JUMP_TABLE
    0U,	// G_DYN_STACKALLOC
    0U,	// G_STRICT_FADD
    0U,	// G_STRICT_FSUB
    0U,	// G_STRICT_FMUL
    0U,	// G_STRICT_FDIV
    0U,	// G_STRICT_FREM
    0U,	// G_STRICT_FMA
    0U,	// G_STRICT_FSQRT
    0U,	// G_READ_REGISTER
    0U,	// G_WRITE_REGISTER
    0U,	// G_MEMCPY
    0U,	// G_MEMCPY_INLINE
    0U,	// G_MEMMOVE
    0U,	// G_MEMSET
    0U,	// G_BZERO
    0U,	// G_VECREDUCE_SEQ_FADD
    0U,	// G_VECREDUCE_SEQ_FMUL
    0U,	// G_VECREDUCE_FADD
    0U,	// G_VECREDUCE_FMUL
    0U,	// G_VECREDUCE_FMAX
    0U,	// G_VECREDUCE_FMIN
    0U,	// G_VECREDUCE_ADD
    0U,	// G_VECREDUCE_MUL
    0U,	// G_VECREDUCE_AND
    0U,	// G_VECREDUCE_OR
    0U,	// G_VECREDUCE_XOR
    0U,	// G_VECREDUCE_SMAX
    0U,	// G_VECREDUCE_SMIN
    0U,	// G_VECREDUCE_UMAX
    0U,	// G_VECREDUCE_UMIN
    0U,	// G_SBFX
    0U,	// G_UBFX
    4648U,	// ABSDIFS_B_rr_v110
    5169U,	// ABSDIFS_H_rr
    5809U,	// ABSDIFS_rc
    5809U,	// ABSDIFS_rr
    4589U,	// ABSDIF_B_rr
    4994U,	// ABSDIF_H_rr
    268440376U,	// ABSDIF_rc
    4920U,	// ABSDIF_rr
    17830458U,	// ABSS_B_rr_v110
    5284U,	// ABSS_H_rr
    17831637U,	// ABSS_rr
    16781841U,	// ABS_B_rr
    16782349U,	// ABS_H_rr
    16782999U,	// ABS_rr
    268440206U,	// ADDC_rc
    4750U,	// ADDC_rr
    536875292U,	// ADDIH_A_rlc
    536876277U,	// ADDIH_rlc
    805311762U,	// ADDI_rlc
    1074796451U,	// ADDSC_AT_rr
    6051U,	// ADDSC_AT_rr_v110
    1074794723U,	// ADDSC_A_rr
    4323U,	// ADDSC_A_rr_v110
    33558755U,	// ADDSC_A_srrs
    1342181603U,	// ADDSC_A_srrs_v110
    6368U,	// ADDS_BU_rr_v110
    4640U,	// ADDS_B_rr_v110
    5161U,	// ADDS_H
    6435U,	// ADDS_HU
    6239U,	// ADDS_U
    268441695U,	// ADDS_U_rc
    268441259U,	// ADDS_rc
    5803U,	// ADDS_rr
    16783019U,	// ADDS_srr
    268442079U,	// ADDX_rc
    6623U,	// ADDX_rr
    4342U,	// ADD_A_rr
    18878710U,	// ADD_A_src
    16781558U,	// ADD_A_srr
    4576U,	// ADD_B_rr
    1664094995U,	// ADD_F_rrr
    4981U,	// ADD_H_rr
    268440232U,	// ADD_rc
    4776U,	// ADD_rr
    18879144U,	// ADD_src
    18878476U,	// ADD_src_15a
    18944680U,	// ADD_src_a15
    16781992U,	// ADD_srr
    16781324U,	// ADD_srr_15a
    16847528U,	// ADD_srr_a15
    1879054089U,	// ANDN_T
    268440977U,	// ANDN_rc
    5521U,	// ANDN_rr
    1879054085U,	// AND_ANDN_T
    1879054043U,	// AND_AND_T
    268441169U,	// AND_EQ_rc
    5713U,	// AND_EQ_rr
    268441589U,	// AND_GE_U_rc
    6133U,	// AND_GE_U_rr
    268440255U,	// AND_GE_rc
    4799U,	// AND_GE_rr
    268441741U,	// AND_LT_U_rc
    6285U,	// AND_LT_U_rr
    268441533U,	// AND_LT_rc
    6077U,	// AND_LT_rr
    268440309U,	// AND_NE_rc
    4853U,	// AND_NE_rr
    1879054165U,	// AND_NOR_T
    1879054137U,	// AND_OR_T
    1879054047U,	// AND_T
    268440250U,	// AND_rc
    4794U,	// AND_rr
    139287U,	// AND_sc
    139287U,	// AND_sc_v110
    16782010U,	// AND_srr
    16782010U,	// AND_srr_v110
    13956U,	// BISR_rc
    13956U,	// BISR_rc_v161
    140932U,	// BISR_sc
    140932U,	// BISR_sc_v110
    4827U,	// BMERGAE_rr_v110
    4827U,	// BMERGE_rr
    16783277U,	// BSPLIT_rr
    16783277U,	// BSPLIT_rr_v110
    4398102U,	// CACHEA_I_bo_bso
    4463638U,	// CACHEA_I_bo_c
    4529174U,	// CACHEA_I_bo_pos
    4397633U,	// CACHEA_I_bo_pre
    400406U,	// CACHEA_I_bo_r
    4398124U,	// CACHEA_WI_bo_bso
    4463660U,	// CACHEA_WI_bo_c
    4529196U,	// CACHEA_WI_bo_pos
    4397657U,	// CACHEA_WI_bo_pre
    400428U,	// CACHEA_WI_bo_r
    4398163U,	// CACHEA_W_bo_bso
    4463699U,	// CACHEA_W_bo_c
    4529235U,	// CACHEA_W_bo_pos
    4397692U,	// CACHEA_W_bo_pre
    400467U,	// CACHEA_W_bo_r
    4398113U,	// CACHEI_I_bo_bso
    4529185U,	// CACHEI_I_bo_pos
    4397645U,	// CACHEI_I_bo_pre
    4398136U,	// CACHEI_WI_bo_bso
    4529208U,	// CACHEI_WI_bo_pos
    4397670U,	// CACHEI_WI_bo_pre
    4398174U,	// CACHEI_W_bo_bso
    4529246U,	// CACHEI_W_bo_pos
    4397704U,	// CACHEI_W_bo_pre
    1074794813U,	// CADDN_A_rcr_v110
    2200965437U,	// CADDN_A_rrr_v110
    1074795914U,	// CADDN_rcr
    2200966538U,	// CADDN_rrr
    18945418U,	// CADDN_src
    16848266U,	// CADDN_srr_v110
    1074794741U,	// CADD_A_rcr_v110
    2200965365U,	// CADD_A_rrr_v110
    1074795175U,	// CADD_rcr
    2200965799U,	// CADD_rrr
    18944679U,	// CADD_src
    16847527U,	// CADD_srr_v110
    16834U,	// CALLA_b
    136488U,	// CALLI_rr
    136488U,	// CALLI_rr_v110
    17756U,	// CALL_b
    21852U,	// CALL_sb
    16781828U,	// CLO_B_rr_v110
    16782288U,	// CLO_H_rr
    16782768U,	// CLO_rr
    16781875U,	// CLS_B_rr_v110
    16782396U,	// CLS_H_rr
    16783034U,	// CLS_rr
    16781935U,	// CLZ_B_rr_v110
    16782574U,	// CLZ_H_rr
    16783885U,	// CLZ_rr
    18945449U,	// CMOVN_src
    16848297U,	// CMOVN_srr
    18946407U,	// CMOV_src
    16849255U,	// CMOV_srr
    72575965U,	// CMPSWAP_W_bo_bso
    72575965U,	// CMPSWAP_W_bo_c
    72707037U,	// CMPSWAP_W_bo_pos
    72575530U,	// CMPSWAP_W_bo_pre
    23093447U,	// CMPSWAP_W_bo_r
    4906U,	// CMP_F_rr
    1074796909U,	// CRC32B_W_rr
    1074796936U,	// CRC32L_W_rr
    1074794953U,	// CRC32_B_rr
    2200966532U,	// CRCN_rrr
    2200965428U,	// CSUBN_A__rrr_v110
    2200965750U,	// CSUBN_rrr
    2200965330U,	// CSUB_A__rrr_v110
    2200965750U,	// CSUB_rrr
    3368U,	// DEBUG_sr
    3368U,	// DEBUG_sys
    5770U,	// DEXTR_rrpw
    5770U,	// DEXTR_rrrr
    4332U,	// DIFSC_A_rr_v110
    3352U,	// DISABLE_sys
    135907U,	// DISABLE_sys_1
    4913U,	// DIV_F_rr
    6321U,	// DIV_U_rr
    6498U,	// DIV_rr
    3329U,	// DSYNC_sys
    87037237U,	// DVADJ_rrr
    87037237U,	// DVADJ_rrr_v110
    16782645U,	// DVADJ_srr_v110
    6385U,	// DVINIT_BU_rr
    6385U,	// DVINIT_BU_rr_v110
    4681U,	// DVINIT_B_rr
    4681U,	// DVINIT_B_rr_v110
    6452U,	// DVINIT_HU_rr
    6452U,	// DVINIT_HU_rr_v110
    5310U,	// DVINIT_H_rr
    5310U,	// DVINIT_H_rr_v110
    6275U,	// DVINIT_U_rr
    6275U,	// DVINIT_U_rr_v110
    6069U,	// DVINIT_rr
    6069U,	// DVINIT_rr_v110
    87038019U,	// DVSTEP_U_rrr
    87038019U,	// DVSTEP_U_rrrv110
    16783427U,	// DVSTEP_Uv110
    87037383U,	// DVSTEP_rrr
    87037383U,	// DVSTEP_rrrv110
    16782791U,	// DVSTEPv110
    3345U,	// ENABLE_sys
    268440166U,	// EQANY_B_rc
    4710U,	// EQANY_B_rr
    268440805U,	// EQANY_H_rc
    5349U,	// EQANY_H_rr
    16781700U,	// EQZ_A_rr
    4439U,	// EQ_A_rr
    4619U,	// EQ_B_rr
    5079U,	// EQ_H_rr
    6554U,	// EQ_W_rr
    268441173U,	// EQ_rc
    5717U,	// EQ_rr
    18878510U,	// EQ_src
    16781358U,	// EQ_srr
    6221U,	// EXTR_U_rrpw
    6221U,	// EXTR_U_rrrr
    2415925325U,	// EXTR_U_rrrw
    5771U,	// EXTR_rrpw
    5771U,	// EXTR_rrrr
    2415924875U,	// EXTR_rrrw
    16833U,	// FCALLA_b
    136487U,	// FCALLA_i
    17755U,	// FCALL_b
    3402U,	// FRET_sr
    3402U,	// FRET_sys
    16782799U,	// FTOHP_rr
    16783874U,	// FTOIZ_rr
    16782639U,	// FTOI_rr
    6637U,	// FTOQ31Z_rr
    4287U,	// FTOQ31_rr
    16783907U,	// FTOUZ_rr
    16783694U,	// FTOU_rr
    4367U,	// GE_A_rr
    268441593U,	// GE_U_rc
    6137U,	// GE_U_rr
    268440259U,	// GE_rc
    4803U,	// GE_rr
    16782158U,	// HPTOF_rr
    5444U,	// IMASK_rcpw
    1074795844U,	// IMASK_rcrw
    5444U,	// IMASK_rrpw
    2416973124U,	// IMASK_rrrw
    6110U,	// INSERT_rcpw
    6110U,	// INSERT_rcrr
    2415925214U,	// INSERT_rcrw
    6110U,	// INSERT_rrpw
    6110U,	// INSERT_rrrr
    6110U,	// INSERT_rrrw
    1879054129U,	// INSN_T
    1879054217U,	// INS_T
    3335U,	// ISYNC_sys
    16782152U,	// ITOF_rr
    87038143U,	// IXMAX_U_rrr
    87038390U,	// IXMAX_rrr
    87038010U,	// IXMIN_U_rrr
    87037335U,	// IXMIN_rrr
    16824U,	// JA_b
    2684358998U,	// JEQ_A_brr
    2686457448U,	// JEQ_brc
    2684360296U,	// JEQ_brr
    28717U,	// JEQ_sbc1
    28717U,	// JEQ_sbc2
    28717U,	// JEQ_sbc_v110
    7344173U,	// JEQ_sbr1
    7344173U,	// JEQ_sbr2
    7344173U,	// JEQ_sbr_v110
    7346678U,	// JGEZ_sbr
    7346678U,	// JGEZ_sbr_v110
    2692749330U,	// JGE_U_brc
    2684360722U,	// JGE_U_brr
    2686456534U,	// JGE_brc
    2684359382U,	// JGE_brr
    7346711U,	// JGTZ_sbr
    7346711U,	// JGTZ_sbr_v110
    136478U,	// JI_rr
    136478U,	// JI_rr_v110
    136478U,	// JI_sbr_v110
    136478U,	// JI_sr
    16828U,	// JLA_b
    7346684U,	// JLEZ_sbr
    7346684U,	// JLEZ_sbr_v110
    136482U,	// JLI_rr
    136482U,	// JLI_rr_v110
    7346717U,	// JLTZ_sbr
    7346717U,	// JLTZ_sbr_v110
    2692749482U,	// JLT_U_brc
    2684360874U,	// JLT_U_brr
    2692749268U,	// JLT_brc
    2684360660U,	// JLT_brr
    17751U,	// JL_b
    2692747955U,	// JNED_brc
    2684359347U,	// JNED_brr
    2692748568U,	// JNEI_brc
    2684359960U,	// JNEI_brr
    2684358933U,	// JNE_A_brr
    2686456581U,	// JNE_brc
    2684359429U,	// JNE_brr
    28706U,	// JNE_sbc1
    28706U,	// JNE_sbc2
    28706U,	// JNE_sbc_v110
    7344162U,	// JNE_sbr1
    7344162U,	// JNE_sbr2
    7344162U,	// JNE_sbr_v110
    9441661U,	// JNZ_A_brr
    7344509U,	// JNZ_A_sbr
    2684360604U,	// JNZ_T_brn
    7344206U,	// JNZ_T_sbrn
    7344206U,	// JNZ_T_sbrn_v110
    20614U,	// JNZ_sb
    20614U,	// JNZ_sb_v110
    7346706U,	// JNZ_sbr
    7346706U,	// JNZ_sbr_v110
    9441655U,	// JZ_A_brr
    7344503U,	// JZ_A_sbr
    2684360598U,	// JZ_T_brn
    7344194U,	// JZ_T_sbrn
    7344194U,	// JZ_T_sbrn_v110
    20604U,	// JZ_sb
    20604U,	// JZ_sb_v110
    7346697U,	// JZ_sbr
    7346697U,	// JZ_sbr_v110
    17721U,	// J_b
    21817U,	// J_sb
    21817U,	// J_sb_v110
    166339U,	// LDLCX_abs
    4398213U,	// LDLCX_bo_bso
    38886U,	// LDMST_abs
    72576075U,	// LDMST_bo_bso
    72576075U,	// LDMST_bo_c
    72707147U,	// LDMST_bo_pos
    72575603U,	// LDMST_bo_pre
    23095270U,	// LDMST_bo_r
    166353U,	// LDUCX_abs
    4398229U,	// LDUCX_bo_bso
    10490109U,	// LD_A_abs
    3053916413U,	// LD_A_bo_bso
    117903613U,	// LD_A_bo_c
    3087470845U,	// LD_A_bo_pos
    3053981949U,	// LD_A_bo_pre
    151458045U,	// LD_A_bo_r
    906432765U,	// LD_A_bol
    139409U,	// LD_A_sc
    1711739133U,	// LD_A_slr
    1745293565U,	// LD_A_slr_post
    1745293565U,	// LD_A_slr_post_v110
    1711739133U,	// LD_A_slr_v110
    594173U,	// LD_A_slro
    594173U,	// LD_A_slro_v110
    25369499U,	// LD_A_sro
    25369499U,	// LD_A_sro_v110
    10492104U,	// LD_BU_abs
    3053918408U,	// LD_BU_bo_bso
    117905608U,	// LD_BU_bo_c
    3087472840U,	// LD_BU_bo_pos
    3053983944U,	// LD_BU_bo_pre
    151460040U,	// LD_BU_bo_r
    906434760U,	// LD_BU_bol
    1711741128U,	// LD_BU_slr
    1745295560U,	// LD_BU_slr_post
    1745295560U,	// LD_BU_slr_post_v110
    1711741128U,	// LD_BU_slr_v110
    596168U,	// LD_BU_slro
    596168U,	// LD_BU_slro_v110
    25369538U,	// LD_BU_sro
    25369538U,	// LD_BU_sro_v110
    10490343U,	// LD_B_abs
    3053916647U,	// LD_B_bo_bso
    117903847U,	// LD_B_bo_c
    3087471079U,	// LD_B_bo_pos
    3053982183U,	// LD_B_bo_pre
    151458279U,	// LD_B_bo_r
    906432999U,	// LD_B_bol
    1745293799U,	// LD_B_slr_post_v110
    1711739367U,	// LD_B_slr_v110
    594407U,	// LD_B_slro_v110
    25369512U,	// LD_B_sro_v110
    10490267U,	// LD_DA_abs
    3053916571U,	// LD_DA_bo_bso
    117903771U,	// LD_DA_bo_c
    3087471003U,	// LD_DA_bo_pos
    3053982107U,	// LD_DA_bo_pre
    151458203U,	// LD_DA_bo_r
    10490516U,	// LD_D_abs
    3053916820U,	// LD_D_bo_bso
    117904020U,	// LD_D_bo_c
    3087471252U,	// LD_D_bo_pos
    3053982356U,	// LD_D_bo_pre
    151458452U,	// LD_D_bo_r
    10492171U,	// LD_HU_abs
    3053918475U,	// LD_HU_bo_bso
    117905675U,	// LD_HU_bo_c
    3087472907U,	// LD_HU_bo_pos
    3053984011U,	// LD_HU_bo_pre
    151460107U,	// LD_HU_bo_r
    906434827U,	// LD_HU_bol
    10490748U,	// LD_H_abs
    3053917052U,	// LD_H_bo_bso
    117904252U,	// LD_H_bo_c
    3087471484U,	// LD_H_bo_pos
    3053982588U,	// LD_H_bo_pre
    151458684U,	// LD_H_bo_r
    906433404U,	// LD_H_bol
    1711739772U,	// LD_H_slr
    1745294204U,	// LD_H_slr_post
    1745294204U,	// LD_H_slr_post_v110
    1711739772U,	// LD_H_slr_v110
    594812U,	// LD_H_slro
    594812U,	// LD_H_slro_v110
    25369525U,	// LD_H_sro
    25369525U,	// LD_H_sro_v110
    10491372U,	// LD_Q_abs
    3053917676U,	// LD_Q_bo_bso
    117904876U,	// LD_Q_bo_c
    3087472108U,	// LD_Q_bo_pos
    3053983212U,	// LD_Q_bo_pre
    151459308U,	// LD_Q_bo_r
    10492279U,	// LD_W_abs
    3053918583U,	// LD_W_bo_bso
    117905783U,	// LD_W_bo_c
    3087473015U,	// LD_W_bo_pos
    3053984119U,	// LD_W_bo_pre
    151460215U,	// LD_W_bo_r
    906434935U,	// LD_W_bol
    139426U,	// LD_W_sc
    1711741303U,	// LD_W_slr
    1745295735U,	// LD_W_slr_post
    1745295735U,	// LD_W_slr_post_v110
    1711741303U,	// LD_W_slr_v110
    596343U,	// LD_W_slro
    596343U,	// LD_W_slro_v110
    25369552U,	// LD_W_sro
    25369552U,	// LD_W_sro_v110
    10490281U,	// LEA_abs
    3053916585U,	// LEA_bo_bso
    906432937U,	// LEA_bol
    10490286U,	// LHA_abs
    43348U,	// LOOPU_brr
    9442774U,	// LOOP_brr
    7345622U,	// LOOP_sbr
    4445U,	// LT_A_rr
    4691U,	// LT_B
    6396U,	// LT_BU
    5320U,	// LT_H
    6463U,	// LT_HU
    268441745U,	// LT_U_rc
    6289U,	// LT_U_rr
    25170021U,	// LT_U_srcv110
    16781413U,	// LT_U_srrv110
    6560U,	// LT_W
    6491U,	// LT_WU
    268441537U,	// LT_rc
    6081U,	// LT_rr
    18878555U,	// LT_src
    16781403U,	// LT_srr
    2200966233U,	// MADDMS_H_rrr1_LL
    2200966233U,	// MADDMS_H_rrr1_LU
    2200966233U,	// MADDMS_H_rrr1_UL
    2200966233U,	// MADDMS_H_rrr1_UU
    1074796665U,	// MADDMS_U_rcr_v110
    2200967289U,	// MADDMS_U_rrr2_v110
    1074796237U,	// MADDMS_rcr_v110
    2200966861U,	// MADDMS_rrr2_v110
    2200966061U,	// MADDM_H_rrr1_LL
    2200966061U,	// MADDM_H_rrr1_LU
    2200966061U,	// MADDM_H_rrr1_UL
    2200966061U,	// MADDM_H_rrr1_UU
    2200966061U,	// MADDM_H_rrr1_v110
    2200966658U,	// MADDM_Q_rrr1_v110
    1074796585U,	// MADDM_U_rcr_v110
    2200967209U,	// MADDM_U_rrr2_v110
    1074795895U,	// MADDM_rcr_v110
    2200966519U,	// MADDM_rrr2_v110
    2200966286U,	// MADDRS_H_rrr1_LL
    2200966286U,	// MADDRS_H_rrr1_LU
    2200966286U,	// MADDRS_H_rrr1_UL
    2200966286U,	// MADDRS_H_rrr1_UL_2
    2200966286U,	// MADDRS_H_rrr1_UU
    2200966286U,	// MADDRS_H_rrr1_v110
    3274708545U,	// MADDRS_Q_rrr1_L_L
    3543144001U,	// MADDRS_Q_rrr1_U_U
    2200966721U,	// MADDRS_Q_rrr1_v110
    2200966129U,	// MADDR_H_rrr1_LL
    2200966129U,	// MADDR_H_rrr1_LU
    2200966129U,	// MADDR_H_rrr1_UL
    2200966129U,	// MADDR_H_rrr1_UL_2
    2200966129U,	// MADDR_H_rrr1_UU
    2200966129U,	// MADDR_H_rrr1_v110
    3274708500U,	// MADDR_Q_rrr1_L_L
    3543143956U,	// MADDR_Q_rrr1_U_U
    2200966676U,	// MADDR_Q_rrr1_v110
    2200966252U,	// MADDSUMS_H_rrr1_LL
    2200966252U,	// MADDSUMS_H_rrr1_LU
    2200966252U,	// MADDSUMS_H_rrr1_UL
    2200966252U,	// MADDSUMS_H_rrr1_UU
    2200966078U,	// MADDSUM_H_rrr1_LL
    2200966078U,	// MADDSUM_H_rrr1_LU
    2200966078U,	// MADDSUM_H_rrr1_UL
    2200966078U,	// MADDSUM_H_rrr1_UU
    2200966296U,	// MADDSURS_H_rrr1_LL
    2200966296U,	// MADDSURS_H_rrr1_LU
    2200966296U,	// MADDSURS_H_rrr1_UL
    2200966296U,	// MADDSURS_H_rrr1_UU
    2200966146U,	// MADDSUR_H_rrr1_LL
    2200966146U,	// MADDSUR_H_rrr1_LU
    2200966146U,	// MADDSUR_H_rrr1_UL
    2200966146U,	// MADDSUR_H_rrr1_UU
    2200966316U,	// MADDSUS_H_rrr1_LL
    2200966316U,	// MADDSUS_H_rrr1_LU
    2200966316U,	// MADDSUS_H_rrr1_UL
    2200966316U,	// MADDSUS_H_rrr1_UU
    2200966356U,	// MADDSU_H_rrr1_LL
    2200966356U,	// MADDSU_H_rrr1_LU
    2200966356U,	// MADDSU_H_rrr1_UL
    2200966356U,	// MADDSU_H_rrr1_UU
    2200966184U,	// MADDS_H_rrr1_LL
    2200966184U,	// MADDS_H_rrr1_LU
    2200966184U,	// MADDS_H_rrr1_UL
    2200966184U,	// MADDS_H_rrr1_UU
    2200966184U,	// MADDS_H_rrr1_v110
    2200966702U,	// MADDS_Q_rrr1
    2200966702U,	// MADDS_Q_rrr1_L
    3274708526U,	// MADDS_Q_rrr1_L_L
    2200966702U,	// MADDS_Q_rrr1_U
    2200966702U,	// MADDS_Q_rrr1_UU2_v110
    3543143982U,	// MADDS_Q_rrr1_U_U
    2200966702U,	// MADDS_Q_rrr1_e
    2200966702U,	// MADDS_Q_rrr1_e_L
    3274708526U,	// MADDS_Q_rrr1_e_L_L
    2200966702U,	// MADDS_Q_rrr1_e_U
    3543143982U,	// MADDS_Q_rrr1_e_U_U
    1074796638U,	// MADDS_U_rcr
    1074796638U,	// MADDS_U_rcr_e
    2200967262U,	// MADDS_U_rrr2
    2200967262U,	// MADDS_U_rrr2_e
    1074796202U,	// MADDS_rcr
    1074796202U,	// MADDS_rcr_e
    2200966826U,	// MADDS_rrr2
    2200966826U,	// MADDS_rrr2_e
    2200965906U,	// MADD_F_rrr
    2200966004U,	// MADD_H_rrr1_LL
    2200966004U,	// MADD_H_rrr1_LU
    2200966004U,	// MADD_H_rrr1_UL
    2200966004U,	// MADD_H_rrr1_UU
    2200966004U,	// MADD_H_rrr1_v110
    2200966628U,	// MADD_Q_rrr1
    2200966628U,	// MADD_Q_rrr1_L
    3274708452U,	// MADD_Q_rrr1_L_L
    2200966628U,	// MADD_Q_rrr1_U
    2200966628U,	// MADD_Q_rrr1_UU2_v110
    3543143908U,	// MADD_Q_rrr1_U_U
    2200966628U,	// MADD_Q_rrr1_e
    2200966628U,	// MADD_Q_rrr1_e_L
    3274708452U,	// MADD_Q_rrr1_e_L_L
    2200966628U,	// MADD_Q_rrr1_e_U
    3543143908U,	// MADD_Q_rrr1_e_U_U
    1074796525U,	// MADD_U_rcr
    2200967149U,	// MADD_U_rrr2
    1074795181U,	// MADD_rcr
    1074795181U,	// MADD_rcr_e
    2200965805U,	// MADD_rrr2
    2200965805U,	// MADD_rrr2_e
    4703U,	// MAX_B
    6403U,	// MAX_BU
    5342U,	// MAX_H
    6470U,	// MAX_HU
    268441793U,	// MAX_U_rc
    6337U,	// MAX_U_rr
    268442040U,	// MAX_rc
    6584U,	// MAX_rr
    11540077U,	// MFCR_rlc
    4605U,	// MIN_B
    6351U,	// MIN_BU
    5065U,	// MIN_H
    6418U,	// MIN_HU
    268441660U,	// MIN_U_rc
    6204U,	// MIN_U_rr
    268440985U,	// MIN_rc
    5529U,	// MIN_rr
    11538725U,	// MOVH_A_rlc
    11539712U,	// MOVH_rlc
    135563U,	// MOVZ_A_sr
    17830291U,	// MOV_AA_rr
    16781715U,	// MOV_AA_srr_srr
    16781715U,	// MOV_AA_srr_srr_v110
    4457U,	// MOV_A_rr
    25170281U,	// MOV_A_src
    16781673U,	// MOV_A_srr
    16781673U,	// MOV_A_srr_v110
    17830560U,	// MOV_D_rr
    16781984U,	// MOV_D_srr_srr
    16781984U,	// MOV_D_srr_srr_v110
    11540664U,	// MOV_U_rlc
    12589416U,	// MOV_rlc
    11540840U,	// MOV_rlc_e
    17832296U,	// MOV_rr
    17832296U,	// MOV_rr_e
    6504U,	// MOV_rr_eab
    139377U,	// MOV_sc
    139377U,	// MOV_sc_v110
    18880872U,	// MOV_src
    18880872U,	// MOV_src_e
    16783720U,	// MOV_srr
    2200966221U,	// MSUBADMS_H_rrr1_LL
    2200966221U,	// MSUBADMS_H_rrr1_LU
    2200966221U,	// MSUBADMS_H_rrr1_UL
    2200966221U,	// MSUBADMS_H_rrr1_UU
    2200966050U,	// MSUBADM_H_rrr1_LL
    2200966050U,	// MSUBADM_H_rrr1_LU
    2200966050U,	// MSUBADM_H_rrr1_UL
    2200966050U,	// MSUBADM_H_rrr1_UU
    2200966274U,	// MSUBADRS_H_rrr1_LL
    2200966274U,	// MSUBADRS_H_rrr1_LU
    2200966274U,	// MSUBADRS_H_rrr1_UL
    2200966274U,	// MSUBADRS_H_rrr1_UU
    2200966274U,	// MSUBADRS_H_rrr1_v110
    2200966118U,	// MSUBADR_H_rrr1_LL
    2200966118U,	// MSUBADR_H_rrr1_LU
    2200966118U,	// MSUBADR_H_rrr1_UL
    2200966118U,	// MSUBADR_H_rrr1_UU
    2200966118U,	// MSUBADR_H_rrr1_v110
    2200966173U,	// MSUBADS_H_rrr1_LL
    2200966173U,	// MSUBADS_H_rrr1_LU
    2200966173U,	// MSUBADS_H_rrr1_UL
    2200966173U,	// MSUBADS_H_rrr1_UU
    2200965994U,	// MSUBAD_H_rrr1_LL
    2200965994U,	// MSUBAD_H_rrr1_LU
    2200965994U,	// MSUBAD_H_rrr1_UL
    2200965994U,	// MSUBAD_H_rrr1_UU
    2200966211U,	// MSUBMS_H_rrr1_LL
    2200966211U,	// MSUBMS_H_rrr1_LU
    2200966211U,	// MSUBMS_H_rrr1_UL
    2200966211U,	// MSUBMS_H_rrr1_UU
    1074796655U,	// MSUBMS_U_rcrv110
    2200967279U,	// MSUBMS_U_rrr2v110
    1074796229U,	// MSUBMS_rcrv110
    2200966853U,	// MSUBMS_rrr2v110
    2200966041U,	// MSUBM_H_rrr1_LL
    2200966041U,	// MSUBM_H_rrr1_LU
    2200966041U,	// MSUBM_H_rrr1_UL
    2200966041U,	// MSUBM_H_rrr1_UU
    2200966041U,	// MSUBM_H_rrr1_v110
    2200966649U,	// MSUBM_Q_rrr1_v110
    1074796576U,	// MSUBM_U_rcrv110
    2200967200U,	// MSUBM_U_rrr2v110
    1074795888U,	// MSUBM_rcrv110
    2200966512U,	// MSUBM_rrr2v110
    2200966264U,	// MSUBRS_H_rrr1_LL
    2200966264U,	// MSUBRS_H_rrr1_LU
    2200966264U,	// MSUBRS_H_rrr1_UL
    2200966264U,	// MSUBRS_H_rrr1_UL_2
    2200966264U,	// MSUBRS_H_rrr1_UU
    2200966264U,	// MSUBRS_H_rrr1_v110
    3274708535U,	// MSUBRS_Q_rrr1_L_L
    3543143991U,	// MSUBRS_Q_rrr1_U_U
    2200966711U,	// MSUBRS_Q_rrr1_v110
    2200966109U,	// MSUBR_H_rrr1_LL
    2200966109U,	// MSUBR_H_rrr1_LU
    2200966109U,	// MSUBR_H_rrr1_UL
    2200966109U,	// MSUBR_H_rrr1_UL_2
    2200966109U,	// MSUBR_H_rrr1_UU
    2200966109U,	// MSUBR_H_rrr1_v110
    3274708491U,	// MSUBR_Q_rrr1_L_L
    3543143947U,	// MSUBR_Q_rrr1_U_U
    2200966667U,	// MSUBR_Q_rrr1_v110
    2200966164U,	// MSUBS_H_rrr1_LL
    2200966164U,	// MSUBS_H_rrr1_LU
    2200966164U,	// MSUBS_H_rrr1_UL
    2200966164U,	// MSUBS_H_rrr1_UU
    2200966164U,	// MSUBS_H_rrr1_v110
    2200966693U,	// MSUBS_Q_rrr1
    2200966693U,	// MSUBS_Q_rrr1_L
    3274708517U,	// MSUBS_Q_rrr1_L_L
    2200966693U,	// MSUBS_Q_rrr1_U
    2200966693U,	// MSUBS_Q_rrr1_UU2_v110
    3543143973U,	// MSUBS_Q_rrr1_U_U
    2200966693U,	// MSUBS_Q_rrr1_e
    2200966693U,	// MSUBS_Q_rrr1_e_L
    3274708517U,	// MSUBS_Q_rrr1_e_L_L
    2200966693U,	// MSUBS_Q_rrr1_e_U
    3543143973U,	// MSUBS_Q_rrr1_e_U_U
    1074796638U,	// MSUBS_U_rcr
    1074796638U,	// MSUBS_U_rcr_e
    2200967262U,	// MSUBS_U_rrr2
    2200967262U,	// MSUBS_U_rrr2_e
    1074796188U,	// MSUBS_rcr
    1074796188U,	// MSUBS_rcr_e
    2200966812U,	// MSUBS_rrr2
    2200966812U,	// MSUBS_rrr2_e
    2200965898U,	// MSUB_F_rrr
    2200965986U,	// MSUB_H_rrr1_LL
    2200965986U,	// MSUB_H_rrr1_LU
    2200965986U,	// MSUB_H_rrr1_UL
    2200965986U,	// MSUB_H_rrr1_UU
    2200965986U,	// MSUB_H_rrr1_v110
    2200966620U,	// MSUB_Q_rrr1
    2200966620U,	// MSUB_Q_rrr1_L
    3274708444U,	// MSUB_Q_rrr1_L_L
    2200966620U,	// MSUB_Q_rrr1_U
    2200966620U,	// MSUB_Q_rrr1_UU2_v110
    3543143900U,	// MSUB_Q_rrr1_U_U
    2200966620U,	// MSUB_Q_rrr1_e
    2200966620U,	// MSUB_Q_rrr1_e_L
    3274708444U,	// MSUB_Q_rrr1_e_L_L
    2200966620U,	// MSUB_Q_rrr1_e_U
    3543143900U,	// MSUB_Q_rrr1_e_U_U
    1074796525U,	// MSUB_U_rcr
    2200967149U,	// MSUB_U_rrr2
    1074795132U,	// MSUB_rcr
    1074795132U,	// MSUB_rcr_e
    2200965756U,	// MSUB_rrr2
    2200965756U,	// MSUB_rrr2_e
    46707U,	// MTCR_rlc
    5219U,	// MULMS_H_rr1_LL2e
    5219U,	// MULMS_H_rr1_LU2e
    5219U,	// MULMS_H_rr1_UL2e
    5219U,	// MULMS_H_rr1_UU2e
    5046U,	// MULM_H_rr1_LL2e
    5046U,	// MULM_H_rr1_LU2e
    5046U,	// MULM_H_rr1_UL2e
    5046U,	// MULM_H_rr1_UU2e
    268441650U,	// MULM_U_rc
    6194U,	// MULM_U_rr
    268440958U,	// MULM_rc
    5502U,	// MULM_rr
    5114U,	// MULR_H_rr1_LL2e
    5114U,	// MULR_H_rr1_LU2e
    5114U,	// MULR_H_rr1_UL2e
    5114U,	// MULR_H_rr1_UU2e
    5114U,	// MULR_H_rr_v110
    167777821U,	// MULR_Q_rr1_2LL
    184555037U,	// MULR_Q_rr1_2UU
    5661U,	// MULR_Q_rr_v110
    268441703U,	// MULS_U_rc
    6247U,	// MULS_U_rr2
    6247U,	// MULS_U_rr_v110
    268441279U,	// MULS_rc
    5823U,	// MULS_rr2
    5823U,	// MULS_rr_v110
    4899U,	// MUL_F_rrr
    5010U,	// MUL_H_rr1_LL2e
    5010U,	// MUL_H_rr1_LU2e
    5010U,	// MUL_H_rr1_UL2e
    5010U,	// MUL_H_rr1_UU2e
    5010U,	// MUL_H_rr_v110
    5618U,	// MUL_Q_rr1_2
    167777778U,	// MUL_Q_rr1_2LL
    184554994U,	// MUL_Q_rr1_2UU
    5618U,	// MUL_Q_rr1_2_L
    5618U,	// MUL_Q_rr1_2_Le
    5618U,	// MUL_Q_rr1_2_U
    5618U,	// MUL_Q_rr1_2_Ue
    5618U,	// MUL_Q_rr1_2__e
    5618U,	// MUL_Q_rr_v110
    268441625U,	// MUL_U_rc
    6169U,	// MUL_U_rr2
    268440939U,	// MUL_rc
    268440939U,	// MUL_rc_e
    5483U,	// MUL_rr2
    5483U,	// MUL_rr2_e
    5483U,	// MUL_rr_v110
    16782699U,	// MUL_srr
    1879054077U,	// NAND_T
    268440249U,	// NAND_rc
    4793U,	// NAND_rr
    16781680U,	// NEZ_A
    4374U,	// NE_A
    268440313U,	// NE_rc
    4857U,	// NE_rr
    3398U,	// NOP_sr
    3398U,	// NOP_sys
    1879054169U,	// NOR_T
    268441210U,	// NOR_rc
    5754U,	// NOR_rr
    136826U,	// NOR_sr
    136826U,	// NOR_sr_v110
    137177U,	// NOT_sr_v162
    1879054122U,	// ORN_T
    268440996U,	// ORN_rc
    5540U,	// ORN_rr
    1879054108U,	// OR_ANDN_T
    1879054064U,	// OR_AND_T
    268441185U,	// OR_EQ_rc
    5729U,	// OR_EQ_rr
    268441609U,	// OR_GE_U_rc
    6153U,	// OR_GE_U_rr
    268440271U,	// OR_GE_rc
    4815U,	// OR_GE_rr
    268441761U,	// OR_LT_U_rc
    6305U,	// OR_LT_U_rr
    268441549U,	// OR_LT_rc
    6093U,	// OR_LT_rr
    268440318U,	// OR_NE_rc
    4862U,	// OR_NE_rr
    1879054186U,	// OR_NOR_T
    1879054156U,	// OR_OR_T
    1879054141U,	// OR_T
    3758102139U,	// OR_rc
    5755U,	// OR_rr
    139320U,	// OR_sc
    139320U,	// OR_sc_v110
    16782971U,	// OR_srr
    16782971U,	// OR_srr_v110
    1664095550U,	// PACK_rrr
    16783845U,	// PARITY_rr
    16783845U,	// PARITY_rr_v110
    16783782U,	// POPCNT_W_rr
    4928U,	// Q31TOF_rr
    16782106U,	// QSEED_F_rr
    3360U,	// RESTORE_sys
    3403U,	// RET_sr
    3403U,	// RET_sys
    3403U,	// RET_sys_v110
    3341U,	// RFE_sr
    3341U,	// RFE_sys_sys
    3341U,	// RFE_sys_sys_v110
    3394U,	// RFM_sys
    3374U,	// RSLCX_sys
    3425U,	// RSTV_sys
    268441685U,	// RSUBS_U_rc
    268441251U,	// RSUBS_rc
    268440194U,	// RSUB_rc
    135810U,	// RSUB_sr_sr
    135810U,	// RSUB_sr_sr_v110
    16783593U,	// SAT_BU_rr
    137449U,	// SAT_BU_sr
    137449U,	// SAT_BU_sr_v110
    16781890U,	// SAT_B_rr
    135746U,	// SAT_B_sr
    135746U,	// SAT_B_sr_v110
    16783660U,	// SAT_HU_rr
    137516U,	// SAT_HU_sr
    137516U,	// SAT_HU_sr_v110
    16782519U,	// SAT_H_rr
    136375U,	// SAT_H_sr
    136375U,	// SAT_H_sr_v110
    1074794822U,	// SELN_A_rcr_v110
    2200965446U,	// SELN_A_rrr_v110
    1074795934U,	// SELN_rcr
    2200966558U,	// SELN_rrr
    1074794797U,	// SEL_A_rcr_v110
    2200965421U,	// SEL_A_rrr_v110
    1074795851U,	// SEL_rcr
    2200966475U,	// SEL_rrr
    268441233U,	// SHAS_rc
    5777U,	// SHAS_rr
    268440018U,	// SHA_B_rc
    4562U,	// SHA_B_rr
    268440411U,	// SHA_H_rc
    4955U,	// SHA_H_rr
    268439987U,	// SHA_rc
    4531U,	// SHA_rr
    18878899U,	// SHA_src
    18878899U,	// SHA_src_v110
    268440300U,	// SHUFFLE_rc
    1879054097U,	// SH_ANDN_T
    1879054054U,	// SH_AND_T
    268440055U,	// SH_B_rc
    4599U,	// SH_B_rr
    268441177U,	// SH_EQ_rc
    5721U,	// SH_EQ_rr
    268441599U,	// SH_GE_U_rc
    6143U,	// SH_GE_U_rr
    268440263U,	// SH_GE_rc
    4807U,	// SH_GE_rr
    268440460U,	// SH_H_rc
    5004U,	// SH_H_rr
    268441751U,	// SH_LT_U_rc
    6295U,	// SH_LT_U_rr
    268441541U,	// SH_LT_rc
    6085U,	// SH_LT_rr
    1879054074U,	// SH_NAND_T
    268441541U,	// SH_NE_rc
    6085U,	// SH_NE_rr
    1879054176U,	// SH_NOR_T
    1879054119U,	// SH_ORN_T
    1879054147U,	// SH_OR_T
    1879054196U,	// SH_XNOR_T
    1879054207U,	// SH_XOR_T
    268440828U,	// SH_rc
    5372U,	// SH_rr
    18879740U,	// SH_src
    18879740U,	// SH_src_v110
    166346U,	// STLCX_abs
    4398221U,	// STLCX_bo_bso
    166360U,	// STUCX_abs
    4398237U,	// STUCX_bo_bso
    37219U,	// ST_A_abs
    72575986U,	// ST_A_bo_bso
    117903715U,	// ST_A_bo_c
    3093782883U,	// ST_A_bo_pos
    3060293987U,	// ST_A_bo_pre
    151458147U,	// ST_A_bo_r
    13835250U,	// ST_A_bol
    666837U,	// ST_A_sc
    209918962U,	// ST_A_sro
    209918962U,	// ST_A_sro_v110
    728050U,	// ST_A_ssr
    793586U,	// ST_A_ssr_pos
    793586U,	// ST_A_ssr_pos_v110
    728050U,	// ST_A_ssr_v110
    52389U,	// ST_A_ssro
    52389U,	// ST_A_ssro_v110
    37465U,	// ST_B_abs
    72576001U,	// ST_B_bo_bso
    117903961U,	// ST_B_bo_c
    3093783129U,	// ST_B_bo_pos
    3060294233U,	// ST_B_bo_pre
    151458393U,	// ST_B_bo_r
    13835265U,	// ST_B_bol
    226696193U,	// ST_B_sro
    226696193U,	// ST_B_sro_v110
    728065U,	// ST_B_ssr
    793601U,	// ST_B_ssr_pos
    793601U,	// ST_B_ssr_pos_v110
    728065U,	// ST_B_ssr_v110
    52401U,	// ST_B_ssro
    52401U,	// ST_B_ssro_v110
    37282U,	// ST_DA_abs
    72575993U,	// ST_DA_bo_bso
    117903778U,	// ST_DA_bo_c
    3093782946U,	// ST_DA_bo_pos
    3060294050U,	// ST_DA_bo_pre
    151458210U,	// ST_DA_bo_r
    37530U,	// ST_D_abs
    72576008U,	// ST_D_bo_bso
    117904026U,	// ST_D_bo_c
    3093783194U,	// ST_D_bo_pos
    3060294298U,	// ST_D_bo_pre
    151458458U,	// ST_D_bo_r
    38094U,	// ST_H_abs
    72576015U,	// ST_H_bo_bso
    117904590U,	// ST_H_bo_c
    3093783758U,	// ST_H_bo_pos
    3060294862U,	// ST_H_bo_pre
    151459022U,	// ST_H_bo_r
    13835279U,	// ST_H_bol
    226696207U,	// ST_H_sro
    226696207U,	// ST_H_sro_v110
    728079U,	// ST_H_ssr
    793615U,	// ST_H_ssr_pos
    793615U,	// ST_H_ssr_pos_v110
    728079U,	// ST_H_ssr_v110
    52413U,	// ST_H_ssro
    52413U,	// ST_H_ssro_v110
    38475U,	// ST_Q_abs
    72576068U,	// ST_Q_bo_bso
    117904971U,	// ST_Q_bo_c
    3093784139U,	// ST_Q_bo_pos
    3060295243U,	// ST_Q_bo_pre
    151459403U,	// ST_Q_bo_r
    34704U,	// ST_T
    39344U,	// ST_W_abs
    72576126U,	// ST_W_bo_bso
    117905840U,	// ST_W_bo_c
    3093785008U,	// ST_W_bo_pos
    3060296112U,	// ST_W_bo_pre
    151460272U,	// ST_W_bo_r
    13835390U,	// ST_W_bol
    863456U,	// ST_W_sc
    226696318U,	// ST_W_sro
    226696318U,	// ST_W_sro_v110
    728190U,	// ST_W_ssr
    793726U,	// ST_W_ssr_pos
    793726U,	// ST_W_ssr_pos_v110
    728190U,	// ST_W_ssr_v110
    52425U,	// ST_W_ssro
    52425U,	// ST_W_ssro_v110
    4744U,	// SUBC_rr
    4314U,	// SUBSC_A_rr
    6359U,	// SUBS_BU_rr
    4632U,	// SUBS_B_rr
    6426U,	// SUBS_HU_rr
    5141U,	// SUBS_H_rr
    6230U,	// SUBS_U_rr
    5789U,	// SUBS_rr
    16783005U,	// SUBS_srr
    6589U,	// SUBX_rr
    4307U,	// SUB_A_rr
    139443U,	// SUB_A_sc
    139443U,	// SUB_A_sc_v110
    4569U,	// SUB_B_rr
    1664094987U,	// SUB_F_rrr
    4963U,	// SUB_H_rr
    4727U,	// SUB_rr
    16781943U,	// SUB_srr
    16781313U,	// SUB_srr_15a
    16847479U,	// SUB_srr_a15
    3430U,	// SVLCX_sys
    72576105U,	// SWAPMSK_W_bo_bso
    117905789U,	// SWAPMSK_W_bo_c
    3093784957U,	// SWAPMSK_W_bo_pos
    3060296061U,	// SWAPMSK_W_bo_pre
    151460221U,	// SWAPMSK_W_bo_r
    37198U,	// SWAP_A_abs
    72575977U,	// SWAP_A_bo_bso
    1666456553U,	// SWAP_A_bo_c
    72707049U,	// SWAP_A_bo_pos
    72575543U,	// SWAP_A_bo_pre
    924649U,	// SWAP_A_bo_r
    39314U,	// SWAP_W_abs
    72576117U,	// SWAP_W_bo_bso
    1666456693U,	// SWAP_W_bo_c
    1010805U,	// SWAP_W_bo_indexed
    72707189U,	// SWAP_W_bo_pos
    72575636U,	// SWAP_W_bo_pre
    924789U,	// SWAP_W_bo_r
    13666U,	// SYSCALL_rc
    136637U,	// TLBDEMAP_rr
    3307U,	// TLBFLUSH_A_rr
    3318U,	// TLBFLUSH_B_rr
    136629U,	// TLBMAP_rr
    135427U,	// TLBPROBE_A_rr
    136454U,	// TLBPROBE_I_rr
    3418U,	// TRAPSV_sys
    3412U,	// TRAPV_sys
    16782652U,	// UNPACK_rr_rr
    16782652U,	// UNPACK_rr_rr_v110
    136528U,	// UPDFL_rr
    16782165U,	// UTOF_rr
    3407U,	// WAIT_sys
    1879054199U,	// XNOR_T
    268441209U,	// XNOR_rc
    5753U,	// XNOR_rr
    268441184U,	// XOR_EQ_rc
    5728U,	// XOR_EQ_rr
    268441608U,	// XOR_GE_U_rc
    6152U,	// XOR_GE_U_rr
    268440270U,	// XOR_GE_rc
    4814U,	// XOR_GE_rr
    268441760U,	// XOR_LT_U_rc
    6304U,	// XOR_LT_U_rr
    268441548U,	// XOR_LT_rc
    6092U,	// XOR_LT_rr
    268440317U,	// XOR_NE_rc
    4861U,	// XOR_NE_rr
    1879054210U,	// XOR_T
    268441215U,	// XOR_rc
    5759U,	// XOR_rr
    16782975U,	// XOR_srr
  };

  static const uint8_t OpInfo1[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// INLINEASM_BR
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// DBG_VALUE_LIST
    0U,	// DBG_INSTR_REF
    0U,	// DBG_PHI
    0U,	// DBG_LABEL
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// PSEUDO_PROBE
    0U,	// ARITH_FENCE
    0U,	// STACKMAP
    0U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// PREALLOCATED_SETUP
    0U,	// PREALLOCATED_ARG
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    0U,	// PATCHABLE_FUNCTION_ENTER
    0U,	// PATCHABLE_RET
    0U,	// PATCHABLE_FUNCTION_EXIT
    0U,	// PATCHABLE_TAIL_CALL
    0U,	// PATCHABLE_EVENT_CALL
    0U,	// PATCHABLE_TYPED_EVENT_CALL
    0U,	// ICALL_BRANCH_FUNNEL
    0U,	// G_ASSERT_SEXT
    0U,	// G_ASSERT_ZEXT
    0U,	// G_ASSERT_ALIGN
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_SDIVREM
    0U,	// G_UDIVREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_BUILD_VECTOR
    0U,	// G_BUILD_VECTOR_TRUNC
    0U,	// G_CONCAT_VECTORS
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_FREEZE
    0U,	// G_INTRINSIC_FPTRUNC_ROUND
    0U,	// G_INTRINSIC_TRUNC
    0U,	// G_INTRINSIC_ROUND
    0U,	// G_INTRINSIC_LRINT
    0U,	// G_INTRINSIC_ROUNDEVEN
    0U,	// G_READCYCLECOUNTER
    0U,	// G_LOAD
    0U,	// G_SEXTLOAD
    0U,	// G_ZEXTLOAD
    0U,	// G_INDEXED_LOAD
    0U,	// G_INDEXED_SEXTLOAD
    0U,	// G_INDEXED_ZEXTLOAD
    0U,	// G_STORE
    0U,	// G_INDEXED_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_ATOMICRMW_FADD
    0U,	// G_ATOMICRMW_FSUB
    0U,	// G_ATOMICRMW_FMAX
    0U,	// G_ATOMICRMW_FMIN
    0U,	// G_FENCE
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INVOKE_REGION_START
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_SEXT_INREG
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_FSHL
    0U,	// G_FSHR
    0U,	// G_ROTR
    0U,	// G_ROTL
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDO
    0U,	// G_UADDE
    0U,	// G_USUBO
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SADDE
    0U,	// G_SSUBO
    0U,	// G_SSUBE
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_UADDSAT
    0U,	// G_SADDSAT
    0U,	// G_USUBSAT
    0U,	// G_SSUBSAT
    0U,	// G_USHLSAT
    0U,	// G_SSHLSAT
    0U,	// G_SMULFIX
    0U,	// G_UMULFIX
    0U,	// G_SMULFIXSAT
    0U,	// G_UMULFIXSAT
    0U,	// G_SDIVFIX
    0U,	// G_UDIVFIX
    0U,	// G_SDIVFIXSAT
    0U,	// G_UDIVFIXSAT
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FMAD
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FPOWI
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FLOG10
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_FABS
    0U,	// G_FCOPYSIGN
    0U,	// G_IS_FPCLASS
    0U,	// G_FCANONICALIZE
    0U,	// G_FMINNUM
    0U,	// G_FMAXNUM
    0U,	// G_FMINNUM_IEEE
    0U,	// G_FMAXNUM_IEEE
    0U,	// G_FMINIMUM
    0U,	// G_FMAXIMUM
    0U,	// G_PTR_ADD
    0U,	// G_PTRMASK
    0U,	// G_SMIN
    0U,	// G_SMAX
    0U,	// G_UMIN
    0U,	// G_UMAX
    0U,	// G_ABS
    0U,	// G_LROUND
    0U,	// G_LLROUND
    0U,	// G_BR
    0U,	// G_BRJT
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_CTTZ
    0U,	// G_CTTZ_ZERO_UNDEF
    0U,	// G_CTLZ
    0U,	// G_CTLZ_ZERO_UNDEF
    0U,	// G_CTPOP
    0U,	// G_BSWAP
    0U,	// G_BITREVERSE
    0U,	// G_FCEIL
    0U,	// G_FCOS
    0U,	// G_FSIN
    0U,	// G_FSQRT
    0U,	// G_FFLOOR
    0U,	// G_FRINT
    0U,	// G_FNEARBYINT
    0U,	// G_ADDRSPACE_CAST
    0U,	// G_BLOCK_ADDR
    0U,	// G_JUMP_TABLE
    0U,	// G_DYN_STACKALLOC
    0U,	// G_STRICT_FADD
    0U,	// G_STRICT_FSUB
    0U,	// G_STRICT_FMUL
    0U,	// G_STRICT_FDIV
    0U,	// G_STRICT_FREM
    0U,	// G_STRICT_FMA
    0U,	// G_STRICT_FSQRT
    0U,	// G_READ_REGISTER
    0U,	// G_WRITE_REGISTER
    0U,	// G_MEMCPY
    0U,	// G_MEMCPY_INLINE
    0U,	// G_MEMMOVE
    0U,	// G_MEMSET
    0U,	// G_BZERO
    0U,	// G_VECREDUCE_SEQ_FADD
    0U,	// G_VECREDUCE_SEQ_FMUL
    0U,	// G_VECREDUCE_FADD
    0U,	// G_VECREDUCE_FMUL
    0U,	// G_VECREDUCE_FMAX
    0U,	// G_VECREDUCE_FMIN
    0U,	// G_VECREDUCE_ADD
    0U,	// G_VECREDUCE_MUL
    0U,	// G_VECREDUCE_AND
    0U,	// G_VECREDUCE_OR
    0U,	// G_VECREDUCE_XOR
    0U,	// G_VECREDUCE_SMAX
    0U,	// G_VECREDUCE_SMIN
    0U,	// G_VECREDUCE_UMAX
    0U,	// G_VECREDUCE_UMIN
    0U,	// G_SBFX
    0U,	// G_UBFX
    0U,	// ABSDIFS_B_rr_v110
    0U,	// ABSDIFS_H_rr
    0U,	// ABSDIFS_rc
    0U,	// ABSDIFS_rr
    0U,	// ABSDIF_B_rr
    0U,	// ABSDIF_H_rr
    0U,	// ABSDIF_rc
    0U,	// ABSDIF_rr
    0U,	// ABSS_B_rr_v110
    0U,	// ABSS_H_rr
    0U,	// ABSS_rr
    0U,	// ABS_B_rr
    0U,	// ABS_H_rr
    0U,	// ABS_rr
    0U,	// ADDC_rc
    0U,	// ADDC_rr
    0U,	// ADDIH_A_rlc
    0U,	// ADDIH_rlc
    0U,	// ADDI_rlc
    0U,	// ADDSC_AT_rr
    0U,	// ADDSC_AT_rr_v110
    1U,	// ADDSC_A_rr
    1U,	// ADDSC_A_rr_v110
    0U,	// ADDSC_A_srrs
    0U,	// ADDSC_A_srrs_v110
    0U,	// ADDS_BU_rr_v110
    0U,	// ADDS_B_rr_v110
    0U,	// ADDS_H
    0U,	// ADDS_HU
    0U,	// ADDS_U
    0U,	// ADDS_U_rc
    0U,	// ADDS_rc
    0U,	// ADDS_rr
    0U,	// ADDS_srr
    0U,	// ADDX_rc
    0U,	// ADDX_rr
    0U,	// ADD_A_rr
    0U,	// ADD_A_src
    0U,	// ADD_A_srr
    0U,	// ADD_B_rr
    0U,	// ADD_F_rrr
    0U,	// ADD_H_rr
    0U,	// ADD_rc
    0U,	// ADD_rr
    0U,	// ADD_src
    0U,	// ADD_src_15a
    0U,	// ADD_src_a15
    0U,	// ADD_srr
    0U,	// ADD_srr_15a
    0U,	// ADD_srr_a15
    0U,	// ANDN_T
    0U,	// ANDN_rc
    0U,	// ANDN_rr
    0U,	// AND_ANDN_T
    0U,	// AND_AND_T
    0U,	// AND_EQ_rc
    0U,	// AND_EQ_rr
    0U,	// AND_GE_U_rc
    0U,	// AND_GE_U_rr
    0U,	// AND_GE_rc
    0U,	// AND_GE_rr
    0U,	// AND_LT_U_rc
    0U,	// AND_LT_U_rr
    0U,	// AND_LT_rc
    0U,	// AND_LT_rr
    0U,	// AND_NE_rc
    0U,	// AND_NE_rr
    0U,	// AND_NOR_T
    0U,	// AND_OR_T
    0U,	// AND_T
    0U,	// AND_rc
    0U,	// AND_rr
    0U,	// AND_sc
    0U,	// AND_sc_v110
    0U,	// AND_srr
    0U,	// AND_srr_v110
    0U,	// BISR_rc
    0U,	// BISR_rc_v161
    0U,	// BISR_sc
    0U,	// BISR_sc_v110
    0U,	// BMERGAE_rr_v110
    0U,	// BMERGE_rr
    0U,	// BSPLIT_rr
    0U,	// BSPLIT_rr_v110
    0U,	// CACHEA_I_bo_bso
    0U,	// CACHEA_I_bo_c
    0U,	// CACHEA_I_bo_pos
    0U,	// CACHEA_I_bo_pre
    0U,	// CACHEA_I_bo_r
    0U,	// CACHEA_WI_bo_bso
    0U,	// CACHEA_WI_bo_c
    0U,	// CACHEA_WI_bo_pos
    0U,	// CACHEA_WI_bo_pre
    0U,	// CACHEA_WI_bo_r
    0U,	// CACHEA_W_bo_bso
    0U,	// CACHEA_W_bo_c
    0U,	// CACHEA_W_bo_pos
    0U,	// CACHEA_W_bo_pre
    0U,	// CACHEA_W_bo_r
    0U,	// CACHEI_I_bo_bso
    0U,	// CACHEI_I_bo_pos
    0U,	// CACHEI_I_bo_pre
    0U,	// CACHEI_WI_bo_bso
    0U,	// CACHEI_WI_bo_pos
    0U,	// CACHEI_WI_bo_pre
    0U,	// CACHEI_W_bo_bso
    0U,	// CACHEI_W_bo_pos
    0U,	// CACHEI_W_bo_pre
    17U,	// CADDN_A_rcr_v110
    0U,	// CADDN_A_rrr_v110
    17U,	// CADDN_rcr
    0U,	// CADDN_rrr
    0U,	// CADDN_src
    0U,	// CADDN_srr_v110
    17U,	// CADD_A_rcr_v110
    0U,	// CADD_A_rrr_v110
    17U,	// CADD_rcr
    0U,	// CADD_rrr
    0U,	// CADD_src
    0U,	// CADD_srr_v110
    0U,	// CALLA_b
    0U,	// CALLI_rr
    0U,	// CALLI_rr_v110
    0U,	// CALL_b
    0U,	// CALL_sb
    0U,	// CLO_B_rr_v110
    0U,	// CLO_H_rr
    0U,	// CLO_rr
    0U,	// CLS_B_rr_v110
    0U,	// CLS_H_rr
    0U,	// CLS_rr
    0U,	// CLZ_B_rr_v110
    0U,	// CLZ_H_rr
    0U,	// CLZ_rr
    0U,	// CMOVN_src
    0U,	// CMOVN_srr
    0U,	// CMOV_src
    0U,	// CMOV_srr
    0U,	// CMPSWAP_W_bo_bso
    0U,	// CMPSWAP_W_bo_c
    0U,	// CMPSWAP_W_bo_pos
    0U,	// CMPSWAP_W_bo_pre
    0U,	// CMPSWAP_W_bo_r
    0U,	// CMP_F_rr
    0U,	// CRC32B_W_rr
    0U,	// CRC32L_W_rr
    0U,	// CRC32_B_rr
    0U,	// CRCN_rrr
    0U,	// CSUBN_A__rrr_v110
    0U,	// CSUBN_rrr
    0U,	// CSUB_A__rrr_v110
    0U,	// CSUB_rrr
    0U,	// DEBUG_sr
    0U,	// DEBUG_sys
    33U,	// DEXTR_rrpw
    33U,	// DEXTR_rrrr
    1U,	// DIFSC_A_rr_v110
    0U,	// DISABLE_sys
    0U,	// DISABLE_sys_1
    0U,	// DIV_F_rr
    0U,	// DIV_U_rr
    0U,	// DIV_rr
    0U,	// DSYNC_sys
    0U,	// DVADJ_rrr
    0U,	// DVADJ_rrr_v110
    0U,	// DVADJ_srr_v110
    0U,	// DVINIT_BU_rr
    0U,	// DVINIT_BU_rr_v110
    0U,	// DVINIT_B_rr
    0U,	// DVINIT_B_rr_v110
    0U,	// DVINIT_HU_rr
    0U,	// DVINIT_HU_rr_v110
    0U,	// DVINIT_H_rr
    0U,	// DVINIT_H_rr_v110
    0U,	// DVINIT_U_rr
    0U,	// DVINIT_U_rr_v110
    0U,	// DVINIT_rr
    0U,	// DVINIT_rr_v110
    0U,	// DVSTEP_U_rrr
    0U,	// DVSTEP_U_rrrv110
    0U,	// DVSTEP_Uv110
    0U,	// DVSTEP_rrr
    0U,	// DVSTEP_rrrv110
    0U,	// DVSTEPv110
    0U,	// ENABLE_sys
    0U,	// EQANY_B_rc
    0U,	// EQANY_B_rr
    0U,	// EQANY_H_rc
    0U,	// EQANY_H_rr
    0U,	// EQZ_A_rr
    0U,	// EQ_A_rr
    0U,	// EQ_B_rr
    0U,	// EQ_H_rr
    0U,	// EQ_W_rr
    0U,	// EQ_rc
    0U,	// EQ_rr
    0U,	// EQ_src
    0U,	// EQ_srr
    33U,	// EXTR_U_rrpw
    0U,	// EXTR_U_rrrr
    2U,	// EXTR_U_rrrw
    33U,	// EXTR_rrpw
    0U,	// EXTR_rrrr
    2U,	// EXTR_rrrw
    0U,	// FCALLA_b
    0U,	// FCALLA_i
    0U,	// FCALL_b
    0U,	// FRET_sr
    0U,	// FRET_sys
    0U,	// FTOHP_rr
    0U,	// FTOIZ_rr
    0U,	// FTOI_rr
    0U,	// FTOQ31Z_rr
    0U,	// FTOQ31_rr
    0U,	// FTOUZ_rr
    0U,	// FTOU_rr
    0U,	// GE_A_rr
    0U,	// GE_U_rc
    0U,	// GE_U_rr
    0U,	// GE_rc
    0U,	// GE_rr
    0U,	// HPTOF_rr
    33U,	// IMASK_rcpw
    33U,	// IMASK_rcrw
    33U,	// IMASK_rrpw
    2U,	// IMASK_rrrw
    161U,	// INSERT_rcpw
    33U,	// INSERT_rcrr
    3U,	// INSERT_rcrw
    161U,	// INSERT_rrpw
    161U,	// INSERT_rrrr
    161U,	// INSERT_rrrw
    0U,	// INSN_T
    0U,	// INS_T
    0U,	// ISYNC_sys
    0U,	// ITOF_rr
    0U,	// IXMAX_U_rrr
    0U,	// IXMAX_rrr
    0U,	// IXMIN_U_rrr
    0U,	// IXMIN_rrr
    0U,	// JA_b
    0U,	// JEQ_A_brr
    0U,	// JEQ_brc
    0U,	// JEQ_brr
    0U,	// JEQ_sbc1
    0U,	// JEQ_sbc2
    0U,	// JEQ_sbc_v110
    0U,	// JEQ_sbr1
    0U,	// JEQ_sbr2
    0U,	// JEQ_sbr_v110
    0U,	// JGEZ_sbr
    0U,	// JGEZ_sbr_v110
    0U,	// JGE_U_brc
    0U,	// JGE_U_brr
    0U,	// JGE_brc
    0U,	// JGE_brr
    0U,	// JGTZ_sbr
    0U,	// JGTZ_sbr_v110
    0U,	// JI_rr
    0U,	// JI_rr_v110
    0U,	// JI_sbr_v110
    0U,	// JI_sr
    0U,	// JLA_b
    0U,	// JLEZ_sbr
    0U,	// JLEZ_sbr_v110
    0U,	// JLI_rr
    0U,	// JLI_rr_v110
    0U,	// JLTZ_sbr
    0U,	// JLTZ_sbr_v110
    0U,	// JLT_U_brc
    0U,	// JLT_U_brr
    0U,	// JLT_brc
    0U,	// JLT_brr
    0U,	// JL_b
    0U,	// JNED_brc
    0U,	// JNED_brr
    0U,	// JNEI_brc
    0U,	// JNEI_brr
    0U,	// JNE_A_brr
    0U,	// JNE_brc
    0U,	// JNE_brr
    0U,	// JNE_sbc1
    0U,	// JNE_sbc2
    0U,	// JNE_sbc_v110
    0U,	// JNE_sbr1
    0U,	// JNE_sbr2
    0U,	// JNE_sbr_v110
    0U,	// JNZ_A_brr
    0U,	// JNZ_A_sbr
    0U,	// JNZ_T_brn
    0U,	// JNZ_T_sbrn
    0U,	// JNZ_T_sbrn_v110
    0U,	// JNZ_sb
    0U,	// JNZ_sb_v110
    0U,	// JNZ_sbr
    0U,	// JNZ_sbr_v110
    0U,	// JZ_A_brr
    0U,	// JZ_A_sbr
    0U,	// JZ_T_brn
    0U,	// JZ_T_sbrn
    0U,	// JZ_T_sbrn_v110
    0U,	// JZ_sb
    0U,	// JZ_sb_v110
    0U,	// JZ_sbr
    0U,	// JZ_sbr_v110
    0U,	// J_b
    0U,	// J_sb
    0U,	// J_sb_v110
    0U,	// LDLCX_abs
    0U,	// LDLCX_bo_bso
    0U,	// LDMST_abs
    0U,	// LDMST_bo_bso
    0U,	// LDMST_bo_c
    0U,	// LDMST_bo_pos
    0U,	// LDMST_bo_pre
    0U,	// LDMST_bo_r
    0U,	// LDUCX_abs
    0U,	// LDUCX_bo_bso
    0U,	// LD_A_abs
    0U,	// LD_A_bo_bso
    0U,	// LD_A_bo_c
    0U,	// LD_A_bo_pos
    0U,	// LD_A_bo_pre
    0U,	// LD_A_bo_r
    0U,	// LD_A_bol
    0U,	// LD_A_sc
    0U,	// LD_A_slr
    0U,	// LD_A_slr_post
    0U,	// LD_A_slr_post_v110
    0U,	// LD_A_slr_v110
    0U,	// LD_A_slro
    0U,	// LD_A_slro_v110
    0U,	// LD_A_sro
    0U,	// LD_A_sro_v110
    0U,	// LD_BU_abs
    0U,	// LD_BU_bo_bso
    0U,	// LD_BU_bo_c
    0U,	// LD_BU_bo_pos
    0U,	// LD_BU_bo_pre
    0U,	// LD_BU_bo_r
    0U,	// LD_BU_bol
    0U,	// LD_BU_slr
    0U,	// LD_BU_slr_post
    0U,	// LD_BU_slr_post_v110
    0U,	// LD_BU_slr_v110
    0U,	// LD_BU_slro
    0U,	// LD_BU_slro_v110
    0U,	// LD_BU_sro
    0U,	// LD_BU_sro_v110
    0U,	// LD_B_abs
    0U,	// LD_B_bo_bso
    0U,	// LD_B_bo_c
    0U,	// LD_B_bo_pos
    0U,	// LD_B_bo_pre
    0U,	// LD_B_bo_r
    0U,	// LD_B_bol
    0U,	// LD_B_slr_post_v110
    0U,	// LD_B_slr_v110
    0U,	// LD_B_slro_v110
    0U,	// LD_B_sro_v110
    0U,	// LD_DA_abs
    0U,	// LD_DA_bo_bso
    0U,	// LD_DA_bo_c
    0U,	// LD_DA_bo_pos
    0U,	// LD_DA_bo_pre
    0U,	// LD_DA_bo_r
    0U,	// LD_D_abs
    0U,	// LD_D_bo_bso
    0U,	// LD_D_bo_c
    0U,	// LD_D_bo_pos
    0U,	// LD_D_bo_pre
    0U,	// LD_D_bo_r
    0U,	// LD_HU_abs
    0U,	// LD_HU_bo_bso
    0U,	// LD_HU_bo_c
    0U,	// LD_HU_bo_pos
    0U,	// LD_HU_bo_pre
    0U,	// LD_HU_bo_r
    0U,	// LD_HU_bol
    0U,	// LD_H_abs
    0U,	// LD_H_bo_bso
    0U,	// LD_H_bo_c
    0U,	// LD_H_bo_pos
    0U,	// LD_H_bo_pre
    0U,	// LD_H_bo_r
    0U,	// LD_H_bol
    0U,	// LD_H_slr
    0U,	// LD_H_slr_post
    0U,	// LD_H_slr_post_v110
    0U,	// LD_H_slr_v110
    0U,	// LD_H_slro
    0U,	// LD_H_slro_v110
    0U,	// LD_H_sro
    0U,	// LD_H_sro_v110
    0U,	// LD_Q_abs
    0U,	// LD_Q_bo_bso
    0U,	// LD_Q_bo_c
    0U,	// LD_Q_bo_pos
    0U,	// LD_Q_bo_pre
    0U,	// LD_Q_bo_r
    0U,	// LD_W_abs
    0U,	// LD_W_bo_bso
    0U,	// LD_W_bo_c
    0U,	// LD_W_bo_pos
    0U,	// LD_W_bo_pre
    0U,	// LD_W_bo_r
    0U,	// LD_W_bol
    0U,	// LD_W_sc
    0U,	// LD_W_slr
    0U,	// LD_W_slr_post
    0U,	// LD_W_slr_post_v110
    0U,	// LD_W_slr_v110
    0U,	// LD_W_slro
    0U,	// LD_W_slro_v110
    0U,	// LD_W_sro
    0U,	// LD_W_sro_v110
    0U,	// LEA_abs
    0U,	// LEA_bo_bso
    0U,	// LEA_bol
    0U,	// LHA_abs
    0U,	// LOOPU_brr
    0U,	// LOOP_brr
    0U,	// LOOP_sbr
    0U,	// LT_A_rr
    0U,	// LT_B
    0U,	// LT_BU
    0U,	// LT_H
    0U,	// LT_HU
    0U,	// LT_U_rc
    0U,	// LT_U_rr
    0U,	// LT_U_srcv110
    0U,	// LT_U_srrv110
    0U,	// LT_W
    0U,	// LT_WU
    0U,	// LT_rc
    0U,	// LT_rr
    0U,	// LT_src
    0U,	// LT_srr
    4U,	// MADDMS_H_rrr1_LL
    5U,	// MADDMS_H_rrr1_LU
    6U,	// MADDMS_H_rrr1_UL
    7U,	// MADDMS_H_rrr1_UU
    49U,	// MADDMS_U_rcr_v110
    0U,	// MADDMS_U_rrr2_v110
    17U,	// MADDMS_rcr_v110
    0U,	// MADDMS_rrr2_v110
    4U,	// MADDM_H_rrr1_LL
    5U,	// MADDM_H_rrr1_LU
    6U,	// MADDM_H_rrr1_UL
    7U,	// MADDM_H_rrr1_UU
    0U,	// MADDM_H_rrr1_v110
    0U,	// MADDM_Q_rrr1_v110
    49U,	// MADDM_U_rcr_v110
    0U,	// MADDM_U_rrr2_v110
    17U,	// MADDM_rcr_v110
    0U,	// MADDM_rrr2_v110
    4U,	// MADDRS_H_rrr1_LL
    5U,	// MADDRS_H_rrr1_LU
    6U,	// MADDRS_H_rrr1_UL
    6U,	// MADDRS_H_rrr1_UL_2
    7U,	// MADDRS_H_rrr1_UU
    65U,	// MADDRS_H_rrr1_v110
    0U,	// MADDRS_Q_rrr1_L_L
    0U,	// MADDRS_Q_rrr1_U_U
    65U,	// MADDRS_Q_rrr1_v110
    4U,	// MADDR_H_rrr1_LL
    5U,	// MADDR_H_rrr1_LU
    6U,	// MADDR_H_rrr1_UL
    6U,	// MADDR_H_rrr1_UL_2
    7U,	// MADDR_H_rrr1_UU
    65U,	// MADDR_H_rrr1_v110
    0U,	// MADDR_Q_rrr1_L_L
    0U,	// MADDR_Q_rrr1_U_U
    65U,	// MADDR_Q_rrr1_v110
    4U,	// MADDSUMS_H_rrr1_LL
    5U,	// MADDSUMS_H_rrr1_LU
    6U,	// MADDSUMS_H_rrr1_UL
    7U,	// MADDSUMS_H_rrr1_UU
    4U,	// MADDSUM_H_rrr1_LL
    5U,	// MADDSUM_H_rrr1_LU
    6U,	// MADDSUM_H_rrr1_UL
    7U,	// MADDSUM_H_rrr1_UU
    4U,	// MADDSURS_H_rrr1_LL
    5U,	// MADDSURS_H_rrr1_LU
    6U,	// MADDSURS_H_rrr1_UL
    7U,	// MADDSURS_H_rrr1_UU
    4U,	// MADDSUR_H_rrr1_LL
    5U,	// MADDSUR_H_rrr1_LU
    6U,	// MADDSUR_H_rrr1_UL
    7U,	// MADDSUR_H_rrr1_UU
    4U,	// MADDSUS_H_rrr1_LL
    5U,	// MADDSUS_H_rrr1_LU
    6U,	// MADDSUS_H_rrr1_UL
    7U,	// MADDSUS_H_rrr1_UU
    4U,	// MADDSU_H_rrr1_LL
    5U,	// MADDSU_H_rrr1_LU
    6U,	// MADDSU_H_rrr1_UL
    7U,	// MADDSU_H_rrr1_UU
    4U,	// MADDS_H_rrr1_LL
    5U,	// MADDS_H_rrr1_LU
    6U,	// MADDS_H_rrr1_UL
    7U,	// MADDS_H_rrr1_UU
    65U,	// MADDS_H_rrr1_v110
    65U,	// MADDS_Q_rrr1
    8U,	// MADDS_Q_rrr1_L
    0U,	// MADDS_Q_rrr1_L_L
    9U,	// MADDS_Q_rrr1_U
    65U,	// MADDS_Q_rrr1_UU2_v110
    0U,	// MADDS_Q_rrr1_U_U
    65U,	// MADDS_Q_rrr1_e
    8U,	// MADDS_Q_rrr1_e_L
    0U,	// MADDS_Q_rrr1_e_L_L
    9U,	// MADDS_Q_rrr1_e_U
    0U,	// MADDS_Q_rrr1_e_U_U
    17U,	// MADDS_U_rcr
    17U,	// MADDS_U_rcr_e
    0U,	// MADDS_U_rrr2
    0U,	// MADDS_U_rrr2_e
    17U,	// MADDS_rcr
    17U,	// MADDS_rcr_e
    0U,	// MADDS_rrr2
    0U,	// MADDS_rrr2_e
    0U,	// MADD_F_rrr
    4U,	// MADD_H_rrr1_LL
    5U,	// MADD_H_rrr1_LU
    6U,	// MADD_H_rrr1_UL
    7U,	// MADD_H_rrr1_UU
    65U,	// MADD_H_rrr1_v110
    65U,	// MADD_Q_rrr1
    8U,	// MADD_Q_rrr1_L
    0U,	// MADD_Q_rrr1_L_L
    9U,	// MADD_Q_rrr1_U
    65U,	// MADD_Q_rrr1_UU2_v110
    0U,	// MADD_Q_rrr1_U_U
    65U,	// MADD_Q_rrr1_e
    8U,	// MADD_Q_rrr1_e_L
    0U,	// MADD_Q_rrr1_e_L_L
    9U,	// MADD_Q_rrr1_e_U
    0U,	// MADD_Q_rrr1_e_U_U
    49U,	// MADD_U_rcr
    0U,	// MADD_U_rrr2
    17U,	// MADD_rcr
    17U,	// MADD_rcr_e
    0U,	// MADD_rrr2
    0U,	// MADD_rrr2_e
    0U,	// MAX_B
    0U,	// MAX_BU
    0U,	// MAX_H
    0U,	// MAX_HU
    0U,	// MAX_U_rc
    0U,	// MAX_U_rr
    0U,	// MAX_rc
    0U,	// MAX_rr
    0U,	// MFCR_rlc
    0U,	// MIN_B
    0U,	// MIN_BU
    0U,	// MIN_H
    0U,	// MIN_HU
    0U,	// MIN_U_rc
    0U,	// MIN_U_rr
    0U,	// MIN_rc
    0U,	// MIN_rr
    0U,	// MOVH_A_rlc
    0U,	// MOVH_rlc
    0U,	// MOVZ_A_sr
    0U,	// MOV_AA_rr
    0U,	// MOV_AA_srr_srr
    0U,	// MOV_AA_srr_srr_v110
    0U,	// MOV_A_rr
    0U,	// MOV_A_src
    0U,	// MOV_A_srr
    0U,	// MOV_A_srr_v110
    0U,	// MOV_D_rr
    0U,	// MOV_D_srr_srr
    0U,	// MOV_D_srr_srr_v110
    0U,	// MOV_U_rlc
    0U,	// MOV_rlc
    0U,	// MOV_rlc_e
    0U,	// MOV_rr
    0U,	// MOV_rr_e
    0U,	// MOV_rr_eab
    0U,	// MOV_sc
    0U,	// MOV_sc_v110
    0U,	// MOV_src
    0U,	// MOV_src_e
    0U,	// MOV_srr
    4U,	// MSUBADMS_H_rrr1_LL
    5U,	// MSUBADMS_H_rrr1_LU
    6U,	// MSUBADMS_H_rrr1_UL
    7U,	// MSUBADMS_H_rrr1_UU
    4U,	// MSUBADM_H_rrr1_LL
    5U,	// MSUBADM_H_rrr1_LU
    6U,	// MSUBADM_H_rrr1_UL
    7U,	// MSUBADM_H_rrr1_UU
    4U,	// MSUBADRS_H_rrr1_LL
    5U,	// MSUBADRS_H_rrr1_LU
    6U,	// MSUBADRS_H_rrr1_UL
    7U,	// MSUBADRS_H_rrr1_UU
    65U,	// MSUBADRS_H_rrr1_v110
    4U,	// MSUBADR_H_rrr1_LL
    5U,	// MSUBADR_H_rrr1_LU
    6U,	// MSUBADR_H_rrr1_UL
    7U,	// MSUBADR_H_rrr1_UU
    65U,	// MSUBADR_H_rrr1_v110
    4U,	// MSUBADS_H_rrr1_LL
    5U,	// MSUBADS_H_rrr1_LU
    6U,	// MSUBADS_H_rrr1_UL
    7U,	// MSUBADS_H_rrr1_UU
    4U,	// MSUBAD_H_rrr1_LL
    5U,	// MSUBAD_H_rrr1_LU
    6U,	// MSUBAD_H_rrr1_UL
    7U,	// MSUBAD_H_rrr1_UU
    4U,	// MSUBMS_H_rrr1_LL
    5U,	// MSUBMS_H_rrr1_LU
    6U,	// MSUBMS_H_rrr1_UL
    7U,	// MSUBMS_H_rrr1_UU
    17U,	// MSUBMS_U_rcrv110
    0U,	// MSUBMS_U_rrr2v110
    17U,	// MSUBMS_rcrv110
    0U,	// MSUBMS_rrr2v110
    4U,	// MSUBM_H_rrr1_LL
    5U,	// MSUBM_H_rrr1_LU
    6U,	// MSUBM_H_rrr1_UL
    7U,	// MSUBM_H_rrr1_UU
    0U,	// MSUBM_H_rrr1_v110
    0U,	// MSUBM_Q_rrr1_v110
    17U,	// MSUBM_U_rcrv110
    0U,	// MSUBM_U_rrr2v110
    17U,	// MSUBM_rcrv110
    0U,	// MSUBM_rrr2v110
    4U,	// MSUBRS_H_rrr1_LL
    5U,	// MSUBRS_H_rrr1_LU
    6U,	// MSUBRS_H_rrr1_UL
    6U,	// MSUBRS_H_rrr1_UL_2
    7U,	// MSUBRS_H_rrr1_UU
    65U,	// MSUBRS_H_rrr1_v110
    0U,	// MSUBRS_Q_rrr1_L_L
    0U,	// MSUBRS_Q_rrr1_U_U
    65U,	// MSUBRS_Q_rrr1_v110
    4U,	// MSUBR_H_rrr1_LL
    5U,	// MSUBR_H_rrr1_LU
    6U,	// MSUBR_H_rrr1_UL
    6U,	// MSUBR_H_rrr1_UL_2
    7U,	// MSUBR_H_rrr1_UU
    65U,	// MSUBR_H_rrr1_v110
    0U,	// MSUBR_Q_rrr1_L_L
    0U,	// MSUBR_Q_rrr1_U_U
    65U,	// MSUBR_Q_rrr1_v110
    4U,	// MSUBS_H_rrr1_LL
    5U,	// MSUBS_H_rrr1_LU
    6U,	// MSUBS_H_rrr1_UL
    7U,	// MSUBS_H_rrr1_UU
    65U,	// MSUBS_H_rrr1_v110
    65U,	// MSUBS_Q_rrr1
    8U,	// MSUBS_Q_rrr1_L
    0U,	// MSUBS_Q_rrr1_L_L
    9U,	// MSUBS_Q_rrr1_U
    65U,	// MSUBS_Q_rrr1_UU2_v110
    0U,	// MSUBS_Q_rrr1_U_U
    65U,	// MSUBS_Q_rrr1_e
    8U,	// MSUBS_Q_rrr1_e_L
    0U,	// MSUBS_Q_rrr1_e_L_L
    9U,	// MSUBS_Q_rrr1_e_U
    0U,	// MSUBS_Q_rrr1_e_U_U
    17U,	// MSUBS_U_rcr
    17U,	// MSUBS_U_rcr_e
    0U,	// MSUBS_U_rrr2
    0U,	// MSUBS_U_rrr2_e
    17U,	// MSUBS_rcr
    17U,	// MSUBS_rcr_e
    0U,	// MSUBS_rrr2
    0U,	// MSUBS_rrr2_e
    0U,	// MSUB_F_rrr
    4U,	// MSUB_H_rrr1_LL
    5U,	// MSUB_H_rrr1_LU
    6U,	// MSUB_H_rrr1_UL
    7U,	// MSUB_H_rrr1_UU
    65U,	// MSUB_H_rrr1_v110
    65U,	// MSUB_Q_rrr1
    8U,	// MSUB_Q_rrr1_L
    0U,	// MSUB_Q_rrr1_L_L
    9U,	// MSUB_Q_rrr1_U
    65U,	// MSUB_Q_rrr1_UU2_v110
    0U,	// MSUB_Q_rrr1_U_U
    65U,	// MSUB_Q_rrr1_e
    8U,	// MSUB_Q_rrr1_e_L
    0U,	// MSUB_Q_rrr1_e_L_L
    9U,	// MSUB_Q_rrr1_e_U
    0U,	// MSUB_Q_rrr1_e_U_U
    49U,	// MSUB_U_rcr
    0U,	// MSUB_U_rrr2
    17U,	// MSUB_rcr
    17U,	// MSUB_rcr_e
    0U,	// MSUB_rrr2
    0U,	// MSUB_rrr2_e
    0U,	// MTCR_rlc
    10U,	// MULMS_H_rr1_LL2e
    11U,	// MULMS_H_rr1_LU2e
    12U,	// MULMS_H_rr1_UL2e
    13U,	// MULMS_H_rr1_UU2e
    10U,	// MULM_H_rr1_LL2e
    11U,	// MULM_H_rr1_LU2e
    12U,	// MULM_H_rr1_UL2e
    13U,	// MULM_H_rr1_UU2e
    0U,	// MULM_U_rc
    0U,	// MULM_U_rr
    0U,	// MULM_rc
    0U,	// MULM_rr
    10U,	// MULR_H_rr1_LL2e
    11U,	// MULR_H_rr1_LU2e
    12U,	// MULR_H_rr1_UL2e
    13U,	// MULR_H_rr1_UU2e
    1U,	// MULR_H_rr_v110
    0U,	// MULR_Q_rr1_2LL
    0U,	// MULR_Q_rr1_2UU
    1U,	// MULR_Q_rr_v110
    0U,	// MULS_U_rc
    0U,	// MULS_U_rr2
    0U,	// MULS_U_rr_v110
    0U,	// MULS_rc
    0U,	// MULS_rr2
    0U,	// MULS_rr_v110
    0U,	// MUL_F_rrr
    10U,	// MUL_H_rr1_LL2e
    11U,	// MUL_H_rr1_LU2e
    12U,	// MUL_H_rr1_UL2e
    13U,	// MUL_H_rr1_UU2e
    1U,	// MUL_H_rr_v110
    1U,	// MUL_Q_rr1_2
    0U,	// MUL_Q_rr1_2LL
    0U,	// MUL_Q_rr1_2UU
    14U,	// MUL_Q_rr1_2_L
    14U,	// MUL_Q_rr1_2_Le
    15U,	// MUL_Q_rr1_2_U
    15U,	// MUL_Q_rr1_2_Ue
    1U,	// MUL_Q_rr1_2__e
    1U,	// MUL_Q_rr_v110
    0U,	// MUL_U_rc
    0U,	// MUL_U_rr2
    0U,	// MUL_rc
    0U,	// MUL_rc_e
    0U,	// MUL_rr2
    0U,	// MUL_rr2_e
    0U,	// MUL_rr_v110
    0U,	// MUL_srr
    0U,	// NAND_T
    0U,	// NAND_rc
    0U,	// NAND_rr
    0U,	// NEZ_A
    0U,	// NE_A
    0U,	// NE_rc
    0U,	// NE_rr
    0U,	// NOP_sr
    0U,	// NOP_sys
    0U,	// NOR_T
    0U,	// NOR_rc
    0U,	// NOR_rr
    0U,	// NOR_sr
    0U,	// NOR_sr_v110
    0U,	// NOT_sr_v162
    0U,	// ORN_T
    0U,	// ORN_rc
    0U,	// ORN_rr
    0U,	// OR_ANDN_T
    0U,	// OR_AND_T
    0U,	// OR_EQ_rc
    0U,	// OR_EQ_rr
    0U,	// OR_GE_U_rc
    0U,	// OR_GE_U_rr
    0U,	// OR_GE_rc
    0U,	// OR_GE_rr
    0U,	// OR_LT_U_rc
    0U,	// OR_LT_U_rr
    0U,	// OR_LT_rc
    0U,	// OR_LT_rr
    0U,	// OR_NE_rc
    0U,	// OR_NE_rr
    0U,	// OR_NOR_T
    0U,	// OR_OR_T
    0U,	// OR_T
    0U,	// OR_rc
    0U,	// OR_rr
    0U,	// OR_sc
    0U,	// OR_sc_v110
    0U,	// OR_srr
    0U,	// OR_srr_v110
    0U,	// PACK_rrr
    0U,	// PARITY_rr
    0U,	// PARITY_rr_v110
    0U,	// POPCNT_W_rr
    0U,	// Q31TOF_rr
    0U,	// QSEED_F_rr
    0U,	// RESTORE_sys
    0U,	// RET_sr
    0U,	// RET_sys
    0U,	// RET_sys_v110
    0U,	// RFE_sr
    0U,	// RFE_sys_sys
    0U,	// RFE_sys_sys_v110
    0U,	// RFM_sys
    0U,	// RSLCX_sys
    0U,	// RSTV_sys
    0U,	// RSUBS_U_rc
    0U,	// RSUBS_rc
    0U,	// RSUB_rc
    0U,	// RSUB_sr_sr
    0U,	// RSUB_sr_sr_v110
    0U,	// SAT_BU_rr
    0U,	// SAT_BU_sr
    0U,	// SAT_BU_sr_v110
    0U,	// SAT_B_rr
    0U,	// SAT_B_sr
    0U,	// SAT_B_sr_v110
    0U,	// SAT_HU_rr
    0U,	// SAT_HU_sr
    0U,	// SAT_HU_sr_v110
    0U,	// SAT_H_rr
    0U,	// SAT_H_sr
    0U,	// SAT_H_sr_v110
    17U,	// SELN_A_rcr_v110
    0U,	// SELN_A_rrr_v110
    17U,	// SELN_rcr
    0U,	// SELN_rrr
    17U,	// SEL_A_rcr_v110
    0U,	// SEL_A_rrr_v110
    17U,	// SEL_rcr
    0U,	// SEL_rrr
    0U,	// SHAS_rc
    0U,	// SHAS_rr
    0U,	// SHA_B_rc
    0U,	// SHA_B_rr
    0U,	// SHA_H_rc
    0U,	// SHA_H_rr
    0U,	// SHA_rc
    0U,	// SHA_rr
    0U,	// SHA_src
    0U,	// SHA_src_v110
    0U,	// SHUFFLE_rc
    0U,	// SH_ANDN_T
    0U,	// SH_AND_T
    0U,	// SH_B_rc
    0U,	// SH_B_rr
    0U,	// SH_EQ_rc
    0U,	// SH_EQ_rr
    0U,	// SH_GE_U_rc
    0U,	// SH_GE_U_rr
    0U,	// SH_GE_rc
    0U,	// SH_GE_rr
    0U,	// SH_H_rc
    0U,	// SH_H_rr
    0U,	// SH_LT_U_rc
    0U,	// SH_LT_U_rr
    0U,	// SH_LT_rc
    0U,	// SH_LT_rr
    0U,	// SH_NAND_T
    0U,	// SH_NE_rc
    0U,	// SH_NE_rr
    0U,	// SH_NOR_T
    0U,	// SH_ORN_T
    0U,	// SH_OR_T
    0U,	// SH_XNOR_T
    0U,	// SH_XOR_T
    0U,	// SH_rc
    0U,	// SH_rr
    0U,	// SH_src
    0U,	// SH_src_v110
    0U,	// STLCX_abs
    0U,	// STLCX_bo_bso
    0U,	// STUCX_abs
    0U,	// STUCX_bo_bso
    0U,	// ST_A_abs
    0U,	// ST_A_bo_bso
    0U,	// ST_A_bo_c
    0U,	// ST_A_bo_pos
    0U,	// ST_A_bo_pre
    0U,	// ST_A_bo_r
    0U,	// ST_A_bol
    0U,	// ST_A_sc
    0U,	// ST_A_sro
    0U,	// ST_A_sro_v110
    0U,	// ST_A_ssr
    0U,	// ST_A_ssr_pos
    0U,	// ST_A_ssr_pos_v110
    0U,	// ST_A_ssr_v110
    0U,	// ST_A_ssro
    0U,	// ST_A_ssro_v110
    0U,	// ST_B_abs
    0U,	// ST_B_bo_bso
    0U,	// ST_B_bo_c
    0U,	// ST_B_bo_pos
    0U,	// ST_B_bo_pre
    0U,	// ST_B_bo_r
    0U,	// ST_B_bol
    0U,	// ST_B_sro
    0U,	// ST_B_sro_v110
    0U,	// ST_B_ssr
    0U,	// ST_B_ssr_pos
    0U,	// ST_B_ssr_pos_v110
    0U,	// ST_B_ssr_v110
    0U,	// ST_B_ssro
    0U,	// ST_B_ssro_v110
    0U,	// ST_DA_abs
    0U,	// ST_DA_bo_bso
    0U,	// ST_DA_bo_c
    0U,	// ST_DA_bo_pos
    0U,	// ST_DA_bo_pre
    0U,	// ST_DA_bo_r
    0U,	// ST_D_abs
    0U,	// ST_D_bo_bso
    0U,	// ST_D_bo_c
    0U,	// ST_D_bo_pos
    0U,	// ST_D_bo_pre
    0U,	// ST_D_bo_r
    0U,	// ST_H_abs
    0U,	// ST_H_bo_bso
    0U,	// ST_H_bo_c
    0U,	// ST_H_bo_pos
    0U,	// ST_H_bo_pre
    0U,	// ST_H_bo_r
    0U,	// ST_H_bol
    0U,	// ST_H_sro
    0U,	// ST_H_sro_v110
    0U,	// ST_H_ssr
    0U,	// ST_H_ssr_pos
    0U,	// ST_H_ssr_pos_v110
    0U,	// ST_H_ssr_v110
    0U,	// ST_H_ssro
    0U,	// ST_H_ssro_v110
    0U,	// ST_Q_abs
    0U,	// ST_Q_bo_bso
    0U,	// ST_Q_bo_c
    0U,	// ST_Q_bo_pos
    0U,	// ST_Q_bo_pre
    0U,	// ST_Q_bo_r
    0U,	// ST_T
    0U,	// ST_W_abs
    0U,	// ST_W_bo_bso
    0U,	// ST_W_bo_c
    0U,	// ST_W_bo_pos
    0U,	// ST_W_bo_pre
    0U,	// ST_W_bo_r
    0U,	// ST_W_bol
    0U,	// ST_W_sc
    0U,	// ST_W_sro
    0U,	// ST_W_sro_v110
    0U,	// ST_W_ssr
    0U,	// ST_W_ssr_pos
    0U,	// ST_W_ssr_pos_v110
    0U,	// ST_W_ssr_v110
    0U,	// ST_W_ssro
    0U,	// ST_W_ssro_v110
    0U,	// SUBC_rr
    1U,	// SUBSC_A_rr
    0U,	// SUBS_BU_rr
    0U,	// SUBS_B_rr
    0U,	// SUBS_HU_rr
    0U,	// SUBS_H_rr
    0U,	// SUBS_U_rr
    0U,	// SUBS_rr
    0U,	// SUBS_srr
    0U,	// SUBX_rr
    0U,	// SUB_A_rr
    0U,	// SUB_A_sc
    0U,	// SUB_A_sc_v110
    0U,	// SUB_B_rr
    0U,	// SUB_F_rrr
    0U,	// SUB_H_rr
    0U,	// SUB_rr
    0U,	// SUB_srr
    0U,	// SUB_srr_15a
    0U,	// SUB_srr_a15
    0U,	// SVLCX_sys
    0U,	// SWAPMSK_W_bo_bso
    0U,	// SWAPMSK_W_bo_c
    0U,	// SWAPMSK_W_bo_pos
    0U,	// SWAPMSK_W_bo_pre
    0U,	// SWAPMSK_W_bo_r
    0U,	// SWAP_A_abs
    0U,	// SWAP_A_bo_bso
    0U,	// SWAP_A_bo_c
    0U,	// SWAP_A_bo_pos
    0U,	// SWAP_A_bo_pre
    0U,	// SWAP_A_bo_r
    0U,	// SWAP_W_abs
    0U,	// SWAP_W_bo_bso
    0U,	// SWAP_W_bo_c
    0U,	// SWAP_W_bo_indexed
    0U,	// SWAP_W_bo_pos
    0U,	// SWAP_W_bo_pre
    0U,	// SWAP_W_bo_r
    0U,	// SYSCALL_rc
    0U,	// TLBDEMAP_rr
    0U,	// TLBFLUSH_A_rr
    0U,	// TLBFLUSH_B_rr
    0U,	// TLBMAP_rr
    0U,	// TLBPROBE_A_rr
    0U,	// TLBPROBE_I_rr
    0U,	// TRAPSV_sys
    0U,	// TRAPV_sys
    0U,	// UNPACK_rr_rr
    0U,	// UNPACK_rr_rr_v110
    0U,	// UPDFL_rr
    0U,	// UTOF_rr
    0U,	// WAIT_sys
    0U,	// XNOR_T
    0U,	// XNOR_rc
    0U,	// XNOR_rr
    0U,	// XOR_EQ_rc
    0U,	// XOR_EQ_rr
    0U,	// XOR_GE_U_rc
    0U,	// XOR_GE_U_rr
    0U,	// XOR_GE_rc
    0U,	// XOR_GE_rr
    0U,	// XOR_LT_U_rc
    0U,	// XOR_LT_U_rr
    0U,	// XOR_LT_rc
    0U,	// XOR_LT_rr
    0U,	// XOR_NE_rc
    0U,	// XOR_NE_rr
    0U,	// XOR_T
    0U,	// XOR_rc
    0U,	// XOR_rr
    0U,	// XOR_srr
  };

  // Emit the opcode for the instruction.
  uint64_t Bits = 0;
  Bits |= (uint64_t)OpInfo0[MCInst_getOpcode(MI)] << 0;
  Bits |= (uint64_t)OpInfo1[MCInst_getOpcode(MI)] << 32;
  MnemonicBitsInfo MBI = {AsmStrs+(Bits & 4095)-1, Bits};
  return MBI;

}
/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void printInstruction(MCInst *MI, uint64_t Address, SStream *O) {
  SStream_concat0(O, "");
  MnemonicBitsInfo MnemonicInfo = getMnemonic(MI, O);

  SStream_concat0(O, MnemonicInfo.first);

  uint64_t Bits = MnemonicInfo.second;
  assert(Bits != 0 && "Cannot print this instruction.");

  // Fragment 0 encoded into 4 bits for 13 unique commands.
  switch ((Bits >> 12) & 15) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // DBG_VALUE, DBG_VALUE_LIST, DBG_INSTR_REF, DBG_PHI, DBG_LABEL, BUNDLE, ...
    return;
    break;
  case 1:
    // ABSDIFS_B_rr_v110, ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ...
    printOperand(MI, 0, O);
    break;
  case 2:
    // AND_sc, AND_sc_v110, BISR_sc, BISR_sc_v110, LD_A_sc, LD_W_sc, MOV_sc, ...
    printZExtImm_8(MI, 0, O);
    break;
  case 3:
    // BISR_rc, BISR_rc_v161, SYSCALL_rc
    printSExtImm_9(MI, 0, O);
    return;
    break;
  case 4:
    // CALLA_b, CALL_b, FCALLA_b, FCALL_b, JA_b, JLA_b, JL_b, J_b
    printDisp24Imm(MI, 0, O);
    return;
    break;
  case 5:
    // CALL_sb, JNZ_sb, JNZ_sb_v110, JZ_sb, JZ_sb_v110, J_sb, J_sb_v110
    printDisp8Imm(MI, 0, O);
    return;
    break;
  case 6:
    // CMPSWAP_W_bo_bso, CMPSWAP_W_bo_c, CMPSWAP_W_bo_pos, CMPSWAP_W_bo_pre, ...
    printOperand(MI, 1, O);
    break;
  case 7:
    // JEQ_sbc1, JEQ_sbc2, JEQ_sbc_v110, JNE_sbc1, JNE_sbc2, JNE_sbc_v110
    printSExtImm_4(MI, 1, O);
    SStream_concat0(O, ", ");
    printDisp4Imm(MI, 0, O);
    return;
    break;
  case 8:
    // LDLCX_abs, LDUCX_abs, STLCX_abs, STUCX_abs, ST_T
    printOff18Imm(MI, 0, O);
    break;
  case 9:
    // LDMST_abs, ST_A_abs, ST_B_abs, ST_DA_abs, ST_D_abs, ST_H_abs, ST_Q_abs...
    printOff18Imm(MI, 1, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 0, O);
    return;
    break;
  case 10:
    // LOOPU_brr
    printDisp15Imm(MI, 0, O);
    return;
    break;
  case 11:
    // MTCR_rlc
    printSExtImm_16(MI, 0, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 1, O);
    return;
    break;
  case 12:
    // ST_A_ssro, ST_A_ssro_v110, ST_B_ssro, ST_B_ssro_v110, ST_H_ssro, ST_H_...
    printZExtImm_4(MI, 1, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 0, O);
    return;
    break;
  }


  // Fragment 1 encoded into 4 bits for 16 unique commands.
  switch ((Bits >> 16) & 15) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_B_rr_v110, ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ...
    SStream_concat0(O, ", ");
    break;
  case 1:
    // ADD_src_a15, ADD_srr_a15, CADDN_src, CADDN_srr_v110, CADD_src, CADD_sr...
    SStream_concat0(O, ", %d15, ");
    break;
  case 2:
    // AND_sc, AND_sc_v110, BISR_sc, BISR_sc_v110, CALLI_rr, CALLI_rr_v110, D...
    return;
    break;
  case 3:
    // CACHEA_I_bo_bso, CACHEA_I_bo_pre, CACHEA_WI_bo_bso, CACHEA_WI_bo_pre, ...
    SStream_concat1(O, ']');
    break;
  case 4:
    // CACHEA_I_bo_c, CACHEA_WI_bo_c, CACHEA_W_bo_c, SWAP_A_bo_c, SWAP_W_bo_c
    SStream_concat0(O, "+c]");
    set_mem_access(MI, false);
    break;
  case 5:
    // CACHEA_I_bo_pos, CACHEA_WI_bo_pos, CACHEA_W_bo_pos, CACHEI_I_bo_pos, C...
    SStream_concat0(O, "+]");
    set_mem_access(MI, false);
    break;
  case 6:
    // CACHEA_I_bo_r, CACHEA_WI_bo_r, CACHEA_W_bo_r
    SStream_concat0(O, "+r]");
    set_mem_access(MI, false);
    return;
    break;
  case 7:
    // LD_A_bo_bso, LD_A_bo_c, LD_A_bo_pos, LD_A_bo_r, LD_A_bol, LD_A_slr, LD...
    SStream_concat0(O, ", [");
    set_mem_access(MI, true);
    break;
  case 8:
    // LD_A_bo_pre, LD_BU_bo_pre, LD_B_bo_pre, LD_DA_bo_pre, LD_D_bo_pre, LD_...
    SStream_concat0(O, ", [+");
    set_mem_access(MI, true);
    break;
  case 9:
    // LD_A_slro, LD_A_slro_v110, LD_BU_slro, LD_BU_slro_v110, LD_B_slro_v110...
    SStream_concat0(O, ", [%a15]");
    set_mem_access(MI, true);
    printZExtImm_4(MI, 1, O);
    return;
    break;
  case 10:
    // ST_A_sc
    SStream_concat0(O, ", %a15");
    return;
    break;
  case 11:
    // ST_A_ssr, ST_A_ssr_v110, ST_B_ssr, ST_B_ssr_v110, ST_H_ssr, ST_H_ssr_v...
    SStream_concat0(O, "], ");
    set_mem_access(MI, false);
    printOperand(MI, 1, O);
    return;
    break;
  case 12:
    // ST_A_ssr_pos, ST_A_ssr_pos_v110, ST_B_ssr_pos, ST_B_ssr_pos_v110, ST_H...
    SStream_concat0(O, "+], ");
    set_mem_access(MI, false);
    printOperand(MI, 1, O);
    return;
    break;
  case 13:
    // ST_W_sc
    SStream_concat0(O, ", %d15");
    return;
    break;
  case 14:
    // SWAP_A_bo_r, SWAP_W_bo_r
    SStream_concat0(O, "+r], ");
    set_mem_access(MI, false);
    printOperand(MI, 1, O);
    return;
    break;
  case 15:
    // SWAP_W_bo_indexed
    SStream_concat0(O, "+i], ");
    set_mem_access(MI, false);
    printOperand(MI, 0, O);
    return;
    break;
  }


  // Fragment 2 encoded into 4 bits for 14 unique commands.
  switch ((Bits >> 20) & 15) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_B_rr_v110, ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ...
    printOperand(MI, 1, O);
    break;
  case 1:
    // ABSS_B_rr_v110, ABSS_rr, ADDSC_AT_rr, ADDSC_A_rr, CADDN_A_rcr_v110, CA...
    printOperand(MI, 2, O);
    break;
  case 2:
    // ADD_A_src, ADD_src, ADD_src_15a, ADD_src_a15, CADDN_src, CADD_src, CMO...
    printSExtImm_4(MI, 1, O);
    break;
  case 3:
    // ADD_F_rrr, CADDN_A_rrr_v110, CADDN_rrr, CADD_A_rrr_v110, CADD_rrr, CRC...
    printOperand(MI, 3, O);
    SStream_concat0(O, ", ");
    break;
  case 4:
    // CACHEA_I_bo_bso, CACHEA_I_bo_c, CACHEA_I_bo_pos, CACHEA_I_bo_pre, CACH...
    printSExtImm_10(MI, 1, O);
    return;
    break;
  case 5:
    // CMPSWAP_W_bo_bso, CMPSWAP_W_bo_c, CMPSWAP_W_bo_pos, CMPSWAP_W_bo_pre, ...
    printSExtImm_10(MI, 2, O);
    SStream_concat0(O, ", ");
    break;
  case 6:
    // CMPSWAP_W_bo_r, LDMST_bo_r, ST_A_bo_pos, ST_A_bo_pre, ST_B_bo_pos, ST_...
    printOperand(MI, 0, O);
    break;
  case 7:
    // JEQ_sbr1, JEQ_sbr2, JEQ_sbr_v110, JGEZ_sbr, JGEZ_sbr_v110, JGTZ_sbr, J...
    printDisp4Imm(MI, 1, O);
    return;
    break;
  case 8:
    // JGE_U_brc, JLT_U_brc, JLT_brc, JNED_brc, JNEI_brc, LD_A_sro, LD_A_sro_...
    printZExtImm_4(MI, 1, O);
    break;
  case 9:
    // JNZ_A_brr, JZ_A_brr, LOOP_brr
    printDisp15Imm(MI, 1, O);
    return;
    break;
  case 10:
    // LD_A_abs, LD_BU_abs, LD_B_abs, LD_DA_abs, LD_D_abs, LD_HU_abs, LD_H_ab...
    printOff18Imm(MI, 1, O);
    return;
    break;
  case 11:
    // MFCR_rlc, MOVH_A_rlc, MOVH_rlc, MOV_U_rlc, MOV_rlc_e
    printZExtImm_16(MI, 1, O);
    return;
    break;
  case 12:
    // MOV_rlc
    printSExtImm_16(MI, 1, O);
    return;
    break;
  case 13:
    // ST_A_bol, ST_B_bol, ST_H_bol, ST_W_bol
    printSExtImm_16(MI, 2, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 1, O);
    return;
    break;
  }


  // Fragment 3 encoded into 4 bits for 14 unique commands.
  switch ((Bits >> 24) & 15) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_B_rr_v110, ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ...
    SStream_concat0(O, ", ");
    break;
  case 1:
    // ABSS_B_rr_v110, ABSS_rr, ABS_B_rr, ABS_H_rr, ABS_rr, ADDS_srr, ADD_A_s...
    return;
    break;
  case 2:
    // ADDSC_A_srrs
    SStream_concat0(O, ", %d15, ");
    printZExtImm_2(MI, 2, O);
    return;
    break;
  case 3:
    // ADD_F_rrr, CADDN_A_rrr_v110, CADDN_rrr, CADD_A_rrr_v110, CADD_rrr, CRC...
    printOperand(MI, 1, O);
    break;
  case 4:
    // CMPSWAP_W_bo_bso, CMPSWAP_W_bo_c, CMPSWAP_W_bo_pos, CMPSWAP_W_bo_pre, ...
    printOperand(MI, 0, O);
    return;
    break;
  case 5:
    // DVADJ_rrr, DVADJ_rrr_v110, DVSTEP_U_rrr, DVSTEP_U_rrrv110, DVSTEP_rrr,...
    printOperand(MI, 2, O);
    return;
    break;
  case 6:
    // LD_A_bo_bso, LD_A_bo_pre, LD_A_bol, LD_A_slr, LD_A_slr_v110, LD_BU_bo_...
    SStream_concat1(O, ']');
    break;
  case 7:
    // LD_A_bo_c, LD_BU_bo_c, LD_B_bo_c, LD_DA_bo_c, LD_D_bo_c, LD_HU_bo_c, L...
    SStream_concat0(O, "+c]");
    set_mem_access(MI, false);
    printSExtImm_10(MI, 2, O);
    return;
    break;
  case 8:
    // LD_A_bo_pos, LD_A_slr_post, LD_A_slr_post_v110, LD_BU_bo_pos, LD_BU_sl...
    SStream_concat0(O, "+]");
    set_mem_access(MI, false);
    break;
  case 9:
    // LD_A_bo_r, LD_BU_bo_r, LD_B_bo_r, LD_DA_bo_r, LD_D_bo_r, LD_HU_bo_r, L...
    SStream_concat0(O, "+r]");
    set_mem_access(MI, false);
    return;
    break;
  case 10:
    // MULR_Q_rr1_2LL, MUL_Q_rr1_2LL
    SStream_concat0(O, "L, ");
    printOperand(MI, 2, O);
    SStream_concat0(O, "L, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 11:
    // MULR_Q_rr1_2UU, MUL_Q_rr1_2UU
    SStream_concat0(O, "U, ");
    printOperand(MI, 2, O);
    SStream_concat0(O, "U, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 12:
    // ST_A_sro, ST_A_sro_v110
    SStream_concat0(O, ", %a15");
    return;
    break;
  case 13:
    // ST_B_sro, ST_B_sro_v110, ST_H_sro, ST_H_sro_v110, ST_W_sro, ST_W_sro_v...
    SStream_concat0(O, ", %d15");
    return;
    break;
  }


  // Fragment 4 encoded into 4 bits for 15 unique commands.
  switch ((Bits >> 28) & 15) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_B_rr_v110, ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ...
    printOperand(MI, 2, O);
    break;
  case 1:
    // ABSDIF_rc, ADDC_rc, ADDS_U_rc, ADDS_rc, ADDX_rc, ADD_rc, ANDN_rc, AND_...
    printSExtImm_9(MI, 2, O);
    return;
    break;
  case 2:
    // ADDIH_A_rlc, ADDIH_rlc
    printZExtImm_16(MI, 2, O);
    return;
    break;
  case 3:
    // ADDI_rlc, LD_A_bol, LD_BU_bol, LD_B_bol, LD_HU_bol, LD_H_bol, LD_W_bol...
    printSExtImm_16(MI, 2, O);
    return;
    break;
  case 4:
    // ADDSC_AT_rr, ADDSC_A_rr, CADDN_A_rcr_v110, CADDN_rcr, CADD_A_rcr_v110,...
    printOperand(MI, 1, O);
    break;
  case 5:
    // ADDSC_A_srrs_v110
    printZExtImm_2(MI, 2, O);
    return;
    break;
  case 6:
    // ADD_F_rrr, LD_A_slr, LD_A_slr_post, LD_A_slr_post_v110, LD_A_slr_v110,...
    return;
    break;
  case 7:
    // ANDN_T, AND_ANDN_T, AND_AND_T, AND_NOR_T, AND_OR_T, AND_T, INSN_T, INS...
    printZExtImm_4(MI, 3, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 2, O);
    SStream_concat0(O, ", ");
    printZExtImm_4(MI, 4, O);
    return;
    break;
  case 8:
    // CADDN_A_rrr_v110, CADDN_rrr, CADD_A_rrr_v110, CADD_rrr, CRCN_rrr, CSUB...
    SStream_concat0(O, ", ");
    printOperand(MI, 2, O);
    break;
  case 9:
    // EXTR_U_rrrw, EXTR_rrrw, IMASK_rrrw, INSERT_rcrw
    printOperand(MI, 3, O);
    SStream_concat0(O, ", ");
    break;
  case 10:
    // JEQ_A_brr, JEQ_brc, JEQ_brr, JGE_U_brc, JGE_U_brr, JGE_brc, JGE_brr, J...
    printDisp15Imm(MI, 2, O);
    return;
    break;
  case 11:
    // LD_A_bo_bso, LD_A_bo_pos, LD_A_bo_pre, LD_BU_bo_bso, LD_BU_bo_pos, LD_...
    printSExtImm_10(MI, 2, O);
    return;
    break;
  case 12:
    // MADDRS_Q_rrr1_L_L, MADDR_Q_rrr1_L_L, MADDS_Q_rrr1_L_L, MADDS_Q_rrr1_e_...
    SStream_concat0(O, "L, ");
    printOperand(MI, 2, O);
    SStream_concat0(O, "L, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 13:
    // MADDRS_Q_rrr1_U_U, MADDR_Q_rrr1_U_U, MADDS_Q_rrr1_U_U, MADDS_Q_rrr1_e_...
    SStream_concat0(O, "U, ");
    printOperand(MI, 2, O);
    SStream_concat0(O, "U, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 14:
    // OR_rc
    printZExtImm_9(MI, 2, O);
    return;
    break;
  }


  // Fragment 5 encoded into 4 bits for 16 unique commands.
  switch ((Bits >> 32) & 15) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_B_rr_v110, ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ...
    return;
    break;
  case 1:
    // ADDSC_A_rr, ADDSC_A_rr_v110, CADDN_A_rcr_v110, CADDN_rcr, CADD_A_rcr_v...
    SStream_concat0(O, ", ");
    break;
  case 2:
    // EXTR_U_rrrw, EXTR_rrrw, IMASK_rrrw
    printOperand(MI, 4, O);
    return;
    break;
  case 3:
    // INSERT_rcrw
    printOperand(MI, 2, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 4, O);
    return;
    break;
  case 4:
    // MADDMS_H_rrr1_LL, MADDM_H_rrr1_LL, MADDRS_H_rrr1_LL, MADDR_H_rrr1_LL, ...
    SStream_concat0(O, " LL, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 5:
    // MADDMS_H_rrr1_LU, MADDM_H_rrr1_LU, MADDRS_H_rrr1_LU, MADDR_H_rrr1_LU, ...
    SStream_concat0(O, " LU, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 6:
    // MADDMS_H_rrr1_UL, MADDM_H_rrr1_UL, MADDRS_H_rrr1_UL, MADDRS_H_rrr1_UL_...
    SStream_concat0(O, " UL, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 7:
    // MADDMS_H_rrr1_UU, MADDM_H_rrr1_UU, MADDRS_H_rrr1_UU, MADDR_H_rrr1_UU, ...
    SStream_concat0(O, " UU, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 8:
    // MADDS_Q_rrr1_L, MADDS_Q_rrr1_e_L, MADD_Q_rrr1_L, MADD_Q_rrr1_e_L, MSUB...
    SStream_concat0(O, " L, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 9:
    // MADDS_Q_rrr1_U, MADDS_Q_rrr1_e_U, MADD_Q_rrr1_U, MADD_Q_rrr1_e_U, MSUB...
    SStream_concat0(O, " U, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 10:
    // MULMS_H_rr1_LL2e, MULM_H_rr1_LL2e, MULR_H_rr1_LL2e, MUL_H_rr1_LL2e
    SStream_concat0(O, "LL, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 11:
    // MULMS_H_rr1_LU2e, MULM_H_rr1_LU2e, MULR_H_rr1_LU2e, MUL_H_rr1_LU2e
    SStream_concat0(O, "LU, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 12:
    // MULMS_H_rr1_UL2e, MULM_H_rr1_UL2e, MULR_H_rr1_UL2e, MUL_H_rr1_UL2e
    SStream_concat0(O, "UL, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 13:
    // MULMS_H_rr1_UU2e, MULM_H_rr1_UU2e, MULR_H_rr1_UU2e, MUL_H_rr1_UU2e
    SStream_concat0(O, "UU, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 14:
    // MUL_Q_rr1_2_L, MUL_Q_rr1_2_Le
    SStream_concat0(O, "L, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 15:
    // MUL_Q_rr1_2_U, MUL_Q_rr1_2_Ue
    SStream_concat0(O, "U, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  }


  // Fragment 6 encoded into 3 bits for 5 unique commands.
  switch ((Bits >> 36) & 7) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ADDSC_A_rr, ADDSC_A_rr_v110, DIFSC_A_rr_v110, MULR_H_rr_v110, MULR_Q_r...
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 1:
    // CADDN_A_rcr_v110, CADDN_rcr, CADD_A_rcr_v110, CADD_rcr, MADDMS_rcr_v11...
    printSExtImm_9(MI, 3, O);
    return;
    break;
  case 2:
    // DEXTR_rrpw, DEXTR_rrrr, EXTR_U_rrpw, EXTR_rrpw, IMASK_rcpw, IMASK_rcrw...
    printOperand(MI, 3, O);
    break;
  case 3:
    // MADDMS_U_rcr_v110, MADDM_U_rcr_v110, MADD_U_rcr, MSUB_U_rcr
    printZExtImm_9(MI, 3, O);
    return;
    break;
  case 4:
    // MADDRS_H_rrr1_v110, MADDRS_Q_rrr1_v110, MADDR_H_rrr1_v110, MADDR_Q_rrr...
    printZExtImm_2(MI, 4, O);
    return;
    break;
  }


  // Fragment 7 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 39) & 1) {
    // INSERT_rcpw, INSERT_rrpw, INSERT_rrrr, INSERT_rrrw
    SStream_concat0(O, ", ");
    printOperand(MI, 4, O);
    return;
  } else {
    // DEXTR_rrpw, DEXTR_rrrr, EXTR_U_rrpw, EXTR_rrpw, IMASK_rcpw, IMASK_rcrw...
    return;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 61 && "Invalid register number!");

  static const char AsmStrs[] = {
  /* 0 */ "d10\0"
  /* 4 */ "e10\0"
  /* 8 */ "p10\0"
  /* 12 */ "a0\0"
  /* 15 */ "d0\0"
  /* 18 */ "e0\0"
  /* 21 */ "p0\0"
  /* 24 */ "A10_A11\0"
  /* 32 */ "a11\0"
  /* 36 */ "d11\0"
  /* 40 */ "A0_A1\0"
  /* 46 */ "a1\0"
  /* 49 */ "d1\0"
  /* 52 */ "a12\0"
  /* 56 */ "d12\0"
  /* 60 */ "e12\0"
  /* 64 */ "p12\0"
  /* 68 */ "a2\0"
  /* 71 */ "d2\0"
  /* 74 */ "e2\0"
  /* 77 */ "p2\0"
  /* 80 */ "A12_A13\0"
  /* 88 */ "a13\0"
  /* 92 */ "d13\0"
  /* 96 */ "A2_A3\0"
  /* 102 */ "a3\0"
  /* 105 */ "d3\0"
  /* 108 */ "a14\0"
  /* 112 */ "d14\0"
  /* 116 */ "e14\0"
  /* 120 */ "p14\0"
  /* 124 */ "a4\0"
  /* 127 */ "d4\0"
  /* 130 */ "e4\0"
  /* 133 */ "p4\0"
  /* 136 */ "A14_A15\0"
  /* 144 */ "a15\0"
  /* 148 */ "d15\0"
  /* 152 */ "A4_A5\0"
  /* 158 */ "a5\0"
  /* 161 */ "d5\0"
  /* 164 */ "a6\0"
  /* 167 */ "d6\0"
  /* 170 */ "e6\0"
  /* 173 */ "p6\0"
  /* 176 */ "A6_A7\0"
  /* 182 */ "a7\0"
  /* 185 */ "d7\0"
  /* 188 */ "a8\0"
  /* 191 */ "d8\0"
  /* 194 */ "e8\0"
  /* 197 */ "p8\0"
  /* 200 */ "A8_A9\0"
  /* 206 */ "a9\0"
  /* 209 */ "d9\0"
  /* 212 */ "pc\0"
  /* 215 */ "pcxi\0"
  /* 220 */ "sp\0"
  /* 223 */ "psw\0"
  /* 227 */ "fcx\0"
};
  static const uint8_t RegAsmOffset[] = {
    227, 212, 215, 223, 12, 46, 68, 102, 124, 158, 164, 182, 188, 206, 
    220, 32, 52, 88, 108, 144, 15, 49, 71, 105, 127, 161, 167, 185, 
    191, 209, 0, 36, 56, 92, 112, 148, 18, 74, 130, 170, 194, 4, 
    60, 116, 21, 77, 133, 173, 197, 8, 64, 120, 40, 96, 152, 176, 
    200, 24, 80, 136, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}
#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

bool printAliasInstr(MCInst *MI, uint64_t Address, SStream *OS) {
  return false;
}

#endif // PRINT_ALIAS_INSTR
